
Channel_Stimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006920  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b4c  08006b4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b54  08006b54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000070  08006bcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006bcc  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9eb  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255f  00000000  00000000  0002fa83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00031fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015884  00000000  00000000  00033bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fda5  00000000  00000000  00049444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000849af  00000000  00000000  000591e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ddb98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f4  00000000  00000000  000ddbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080069c8 	.word	0x080069c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080069c8 	.word	0x080069c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__aeabi_d2uiz>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2200      	movs	r2, #0
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002b6:	0004      	movs	r4, r0
 80002b8:	000d      	movs	r5, r1
 80002ba:	f001 fe27 	bl	8001f0c <__aeabi_dcmpge>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d104      	bne.n	80002cc <__aeabi_d2uiz+0x1c>
 80002c2:	0020      	movs	r0, r4
 80002c4:	0029      	movs	r1, r5
 80002c6:	f001 fce7 	bl	8001c98 <__aeabi_d2iz>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	0020      	movs	r0, r4
 80002d2:	0029      	movs	r1, r5
 80002d4:	f001 f94e 	bl	8001574 <__aeabi_dsub>
 80002d8:	f001 fcde 	bl	8001c98 <__aeabi_d2iz>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	061b      	lsls	r3, r3, #24
 80002e0:	469c      	mov	ip, r3
 80002e2:	4460      	add	r0, ip
 80002e4:	e7f1      	b.n	80002ca <__aeabi_d2uiz+0x1a>
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	41e00000 	.word	0x41e00000

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f001 fe26 	bl	8001f5c <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f001 fe21 	bl	8001f5c <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	469b      	mov	fp, r3
 8000322:	d433      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000324:	465a      	mov	r2, fp
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83a      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e078      	b.n	8000430 <__udivmoddi4+0x144>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e075      	b.n	8000436 <__udivmoddi4+0x14a>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e028      	b.n	80003b6 <__udivmoddi4+0xca>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	2320      	movs	r3, #32
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	4652      	mov	r2, sl
 8000394:	40da      	lsrs	r2, r3
 8000396:	4641      	mov	r1, r8
 8000398:	0013      	movs	r3, r2
 800039a:	464a      	mov	r2, r9
 800039c:	408a      	lsls	r2, r1
 800039e:	0017      	movs	r7, r2
 80003a0:	4642      	mov	r2, r8
 80003a2:	431f      	orrs	r7, r3
 80003a4:	4653      	mov	r3, sl
 80003a6:	4093      	lsls	r3, r2
 80003a8:	001e      	movs	r6, r3
 80003aa:	42af      	cmp	r7, r5
 80003ac:	d9c4      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	4643      	mov	r3, r8
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0d9      	beq.n	8000370 <__udivmoddi4+0x84>
 80003bc:	07fb      	lsls	r3, r7, #31
 80003be:	0872      	lsrs	r2, r6, #1
 80003c0:	431a      	orrs	r2, r3
 80003c2:	4646      	mov	r6, r8
 80003c4:	087b      	lsrs	r3, r7, #1
 80003c6:	e00e      	b.n	80003e6 <__udivmoddi4+0xfa>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d101      	bne.n	80003d0 <__udivmoddi4+0xe4>
 80003cc:	42a2      	cmp	r2, r4
 80003ce:	d80c      	bhi.n	80003ea <__udivmoddi4+0xfe>
 80003d0:	1aa4      	subs	r4, r4, r2
 80003d2:	419d      	sbcs	r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	1924      	adds	r4, r4, r4
 80003d8:	416d      	adcs	r5, r5
 80003da:	2100      	movs	r1, #0
 80003dc:	3e01      	subs	r6, #1
 80003de:	1824      	adds	r4, r4, r0
 80003e0:	414d      	adcs	r5, r1
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d006      	beq.n	80003f4 <__udivmoddi4+0x108>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d9ee      	bls.n	80003c8 <__udivmoddi4+0xdc>
 80003ea:	3e01      	subs	r6, #1
 80003ec:	1924      	adds	r4, r4, r4
 80003ee:	416d      	adcs	r5, r5
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f8      	bne.n	80003e6 <__udivmoddi4+0xfa>
 80003f4:	9800      	ldr	r0, [sp, #0]
 80003f6:	9901      	ldr	r1, [sp, #4]
 80003f8:	465b      	mov	r3, fp
 80003fa:	1900      	adds	r0, r0, r4
 80003fc:	4169      	adcs	r1, r5
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db24      	blt.n	800044c <__udivmoddi4+0x160>
 8000402:	002b      	movs	r3, r5
 8000404:	465a      	mov	r2, fp
 8000406:	4644      	mov	r4, r8
 8000408:	40d3      	lsrs	r3, r2
 800040a:	002a      	movs	r2, r5
 800040c:	40e2      	lsrs	r2, r4
 800040e:	001c      	movs	r4, r3
 8000410:	465b      	mov	r3, fp
 8000412:	0015      	movs	r5, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	db2a      	blt.n	800046e <__udivmoddi4+0x182>
 8000418:	0026      	movs	r6, r4
 800041a:	409e      	lsls	r6, r3
 800041c:	0033      	movs	r3, r6
 800041e:	0026      	movs	r6, r4
 8000420:	4647      	mov	r7, r8
 8000422:	40be      	lsls	r6, r7
 8000424:	0032      	movs	r2, r6
 8000426:	1a80      	subs	r0, r0, r2
 8000428:	4199      	sbcs	r1, r3
 800042a:	9000      	str	r0, [sp, #0]
 800042c:	9101      	str	r1, [sp, #4]
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x84>
 8000430:	42a3      	cmp	r3, r4
 8000432:	d8bc      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000434:	e783      	b.n	800033e <__udivmoddi4+0x52>
 8000436:	4642      	mov	r2, r8
 8000438:	2320      	movs	r3, #32
 800043a:	2100      	movs	r1, #0
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	2200      	movs	r2, #0
 8000440:	9100      	str	r1, [sp, #0]
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	2201      	movs	r2, #1
 8000446:	40da      	lsrs	r2, r3
 8000448:	9201      	str	r2, [sp, #4]
 800044a:	e786      	b.n	800035a <__udivmoddi4+0x6e>
 800044c:	4642      	mov	r2, r8
 800044e:	2320      	movs	r3, #32
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	002a      	movs	r2, r5
 8000454:	4646      	mov	r6, r8
 8000456:	409a      	lsls	r2, r3
 8000458:	0023      	movs	r3, r4
 800045a:	40f3      	lsrs	r3, r6
 800045c:	4644      	mov	r4, r8
 800045e:	4313      	orrs	r3, r2
 8000460:	002a      	movs	r2, r5
 8000462:	40e2      	lsrs	r2, r4
 8000464:	001c      	movs	r4, r3
 8000466:	465b      	mov	r3, fp
 8000468:	0015      	movs	r5, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	dad4      	bge.n	8000418 <__udivmoddi4+0x12c>
 800046e:	4642      	mov	r2, r8
 8000470:	002f      	movs	r7, r5
 8000472:	2320      	movs	r3, #32
 8000474:	0026      	movs	r6, r4
 8000476:	4097      	lsls	r7, r2
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	40de      	lsrs	r6, r3
 800047c:	003b      	movs	r3, r7
 800047e:	4333      	orrs	r3, r6
 8000480:	e7cd      	b.n	800041e <__udivmoddi4+0x132>
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d066      	beq.n	800056c <__aeabi_fdiv+0xe8>
 800049e:	2fff      	cmp	r7, #255	; 0xff
 80004a0:	d06c      	beq.n	800057c <__aeabi_fdiv+0xf8>
 80004a2:	2300      	movs	r3, #0
 80004a4:	00ea      	lsls	r2, r5, #3
 80004a6:	2580      	movs	r5, #128	; 0x80
 80004a8:	4699      	mov	r9, r3
 80004aa:	469a      	mov	sl, r3
 80004ac:	04ed      	lsls	r5, r5, #19
 80004ae:	4315      	orrs	r5, r2
 80004b0:	3f7f      	subs	r7, #127	; 0x7f
 80004b2:	0260      	lsls	r0, r4, #9
 80004b4:	0061      	lsls	r1, r4, #1
 80004b6:	0a43      	lsrs	r3, r0, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	0e09      	lsrs	r1, r1, #24
 80004bc:	0fe4      	lsrs	r4, r4, #31
 80004be:	2900      	cmp	r1, #0
 80004c0:	d048      	beq.n	8000554 <__aeabi_fdiv+0xd0>
 80004c2:	29ff      	cmp	r1, #255	; 0xff
 80004c4:	d010      	beq.n	80004e8 <__aeabi_fdiv+0x64>
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	00d8      	lsls	r0, r3, #3
 80004ca:	04d2      	lsls	r2, r2, #19
 80004cc:	4302      	orrs	r2, r0
 80004ce:	4690      	mov	r8, r2
 80004d0:	2000      	movs	r0, #0
 80004d2:	397f      	subs	r1, #127	; 0x7f
 80004d4:	464a      	mov	r2, r9
 80004d6:	0033      	movs	r3, r6
 80004d8:	1a7f      	subs	r7, r7, r1
 80004da:	4302      	orrs	r2, r0
 80004dc:	496c      	ldr	r1, [pc, #432]	; (8000690 <__aeabi_fdiv+0x20c>)
 80004de:	0092      	lsls	r2, r2, #2
 80004e0:	588a      	ldr	r2, [r1, r2]
 80004e2:	4063      	eors	r3, r4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4697      	mov	pc, r2
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d16d      	bne.n	80005c8 <__aeabi_fdiv+0x144>
 80004ec:	2002      	movs	r0, #2
 80004ee:	3fff      	subs	r7, #255	; 0xff
 80004f0:	e033      	b.n	800055a <__aeabi_fdiv+0xd6>
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4682      	mov	sl, r0
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e07f      	b.n	8000604 <__aeabi_fdiv+0x180>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e094      	b.n	8000634 <__aeabi_fdiv+0x1b0>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d017      	beq.n	800053e <__aeabi_fdiv+0xba>
 800050e:	0038      	movs	r0, r7
 8000510:	307f      	adds	r0, #127	; 0x7f
 8000512:	2800      	cmp	r0, #0
 8000514:	dd5f      	ble.n	80005d6 <__aeabi_fdiv+0x152>
 8000516:	076b      	lsls	r3, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	230f      	movs	r3, #15
 800051c:	402b      	ands	r3, r5
 800051e:	2b04      	cmp	r3, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012b      	lsls	r3, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	0038      	movs	r0, r7
 800052a:	4b5a      	ldr	r3, [pc, #360]	; (8000694 <__aeabi_fdiv+0x210>)
 800052c:	3080      	adds	r0, #128	; 0x80
 800052e:	401d      	ands	r5, r3
 8000530:	28fe      	cmp	r0, #254	; 0xfe
 8000532:	dc67      	bgt.n	8000604 <__aeabi_fdiv+0x180>
 8000534:	01ad      	lsls	r5, r5, #6
 8000536:	0a6d      	lsrs	r5, r5, #9
 8000538:	b2c0      	uxtb	r0, r0
 800053a:	e002      	b.n	8000542 <__aeabi_fdiv+0xbe>
 800053c:	001e      	movs	r6, r3
 800053e:	2000      	movs	r0, #0
 8000540:	2500      	movs	r5, #0
 8000542:	05c0      	lsls	r0, r0, #23
 8000544:	4328      	orrs	r0, r5
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4330      	orrs	r0, r6
 800054a:	bce0      	pop	{r5, r6, r7}
 800054c:	46ba      	mov	sl, r7
 800054e:	46b1      	mov	r9, r6
 8000550:	46a8      	mov	r8, r5
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	2b00      	cmp	r3, #0
 8000556:	d12b      	bne.n	80005b0 <__aeabi_fdiv+0x12c>
 8000558:	2001      	movs	r0, #1
 800055a:	464a      	mov	r2, r9
 800055c:	0033      	movs	r3, r6
 800055e:	494e      	ldr	r1, [pc, #312]	; (8000698 <__aeabi_fdiv+0x214>)
 8000560:	4302      	orrs	r2, r0
 8000562:	0092      	lsls	r2, r2, #2
 8000564:	588a      	ldr	r2, [r1, r2]
 8000566:	4063      	eors	r3, r4
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4697      	mov	pc, r2
 800056c:	2d00      	cmp	r5, #0
 800056e:	d113      	bne.n	8000598 <__aeabi_fdiv+0x114>
 8000570:	2304      	movs	r3, #4
 8000572:	4699      	mov	r9, r3
 8000574:	3b03      	subs	r3, #3
 8000576:	2700      	movs	r7, #0
 8000578:	469a      	mov	sl, r3
 800057a:	e79a      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 800057c:	2d00      	cmp	r5, #0
 800057e:	d105      	bne.n	800058c <__aeabi_fdiv+0x108>
 8000580:	2308      	movs	r3, #8
 8000582:	4699      	mov	r9, r3
 8000584:	3b06      	subs	r3, #6
 8000586:	27ff      	movs	r7, #255	; 0xff
 8000588:	469a      	mov	sl, r3
 800058a:	e792      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 800058c:	230c      	movs	r3, #12
 800058e:	4699      	mov	r9, r3
 8000590:	3b09      	subs	r3, #9
 8000592:	27ff      	movs	r7, #255	; 0xff
 8000594:	469a      	mov	sl, r3
 8000596:	e78c      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 8000598:	0028      	movs	r0, r5
 800059a:	f001 fcc1 	bl	8001f20 <__clzsi2>
 800059e:	2776      	movs	r7, #118	; 0x76
 80005a0:	1f43      	subs	r3, r0, #5
 80005a2:	409d      	lsls	r5, r3
 80005a4:	2300      	movs	r3, #0
 80005a6:	427f      	negs	r7, r7
 80005a8:	4699      	mov	r9, r3
 80005aa:	469a      	mov	sl, r3
 80005ac:	1a3f      	subs	r7, r7, r0
 80005ae:	e780      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fcb5 	bl	8001f20 <__clzsi2>
 80005b6:	4642      	mov	r2, r8
 80005b8:	1f43      	subs	r3, r0, #5
 80005ba:	2176      	movs	r1, #118	; 0x76
 80005bc:	409a      	lsls	r2, r3
 80005be:	4249      	negs	r1, r1
 80005c0:	1a09      	subs	r1, r1, r0
 80005c2:	4690      	mov	r8, r2
 80005c4:	2000      	movs	r0, #0
 80005c6:	e785      	b.n	80004d4 <__aeabi_fdiv+0x50>
 80005c8:	21ff      	movs	r1, #255	; 0xff
 80005ca:	2003      	movs	r0, #3
 80005cc:	e782      	b.n	80004d4 <__aeabi_fdiv+0x50>
 80005ce:	001e      	movs	r6, r3
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	2500      	movs	r5, #0
 80005d4:	e7b5      	b.n	8000542 <__aeabi_fdiv+0xbe>
 80005d6:	2301      	movs	r3, #1
 80005d8:	1a1b      	subs	r3, r3, r0
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dcaf      	bgt.n	800053e <__aeabi_fdiv+0xba>
 80005de:	379e      	adds	r7, #158	; 0x9e
 80005e0:	0029      	movs	r1, r5
 80005e2:	40bd      	lsls	r5, r7
 80005e4:	40d9      	lsrs	r1, r3
 80005e6:	1e6a      	subs	r2, r5, #1
 80005e8:	4195      	sbcs	r5, r2
 80005ea:	430d      	orrs	r5, r1
 80005ec:	076b      	lsls	r3, r5, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fdiv+0x176>
 80005f0:	230f      	movs	r3, #15
 80005f2:	402b      	ands	r3, r5
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fdiv+0x176>
 80005f8:	3504      	adds	r5, #4
 80005fa:	016b      	lsls	r3, r5, #5
 80005fc:	d544      	bpl.n	8000688 <__aeabi_fdiv+0x204>
 80005fe:	2001      	movs	r0, #1
 8000600:	2500      	movs	r5, #0
 8000602:	e79e      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000604:	20ff      	movs	r0, #255	; 0xff
 8000606:	2500      	movs	r5, #0
 8000608:	e79b      	b.n	8000542 <__aeabi_fdiv+0xbe>
 800060a:	2580      	movs	r5, #128	; 0x80
 800060c:	2600      	movs	r6, #0
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	03ed      	lsls	r5, r5, #15
 8000612:	e796      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000614:	2300      	movs	r3, #0
 8000616:	4698      	mov	r8, r3
 8000618:	2080      	movs	r0, #128	; 0x80
 800061a:	03c0      	lsls	r0, r0, #15
 800061c:	4205      	tst	r5, r0
 800061e:	d009      	beq.n	8000634 <__aeabi_fdiv+0x1b0>
 8000620:	4643      	mov	r3, r8
 8000622:	4203      	tst	r3, r0
 8000624:	d106      	bne.n	8000634 <__aeabi_fdiv+0x1b0>
 8000626:	4645      	mov	r5, r8
 8000628:	4305      	orrs	r5, r0
 800062a:	026d      	lsls	r5, r5, #9
 800062c:	0026      	movs	r6, r4
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	0a6d      	lsrs	r5, r5, #9
 8000632:	e786      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	03c0      	lsls	r0, r0, #15
 8000638:	4305      	orrs	r5, r0
 800063a:	026d      	lsls	r5, r5, #9
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	0a6d      	lsrs	r5, r5, #9
 8000640:	e77f      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000642:	4641      	mov	r1, r8
 8000644:	016a      	lsls	r2, r5, #5
 8000646:	0148      	lsls	r0, r1, #5
 8000648:	4282      	cmp	r2, r0
 800064a:	d219      	bcs.n	8000680 <__aeabi_fdiv+0x1fc>
 800064c:	211b      	movs	r1, #27
 800064e:	2500      	movs	r5, #0
 8000650:	3f01      	subs	r7, #1
 8000652:	2601      	movs	r6, #1
 8000654:	0014      	movs	r4, r2
 8000656:	006d      	lsls	r5, r5, #1
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	2c00      	cmp	r4, #0
 800065c:	db01      	blt.n	8000662 <__aeabi_fdiv+0x1de>
 800065e:	4290      	cmp	r0, r2
 8000660:	d801      	bhi.n	8000666 <__aeabi_fdiv+0x1e2>
 8000662:	1a12      	subs	r2, r2, r0
 8000664:	4335      	orrs	r5, r6
 8000666:	3901      	subs	r1, #1
 8000668:	2900      	cmp	r1, #0
 800066a:	d1f3      	bne.n	8000654 <__aeabi_fdiv+0x1d0>
 800066c:	1e50      	subs	r0, r2, #1
 800066e:	4182      	sbcs	r2, r0
 8000670:	0038      	movs	r0, r7
 8000672:	307f      	adds	r0, #127	; 0x7f
 8000674:	001e      	movs	r6, r3
 8000676:	4315      	orrs	r5, r2
 8000678:	2800      	cmp	r0, #0
 800067a:	dd00      	ble.n	800067e <__aeabi_fdiv+0x1fa>
 800067c:	e74b      	b.n	8000516 <__aeabi_fdiv+0x92>
 800067e:	e7aa      	b.n	80005d6 <__aeabi_fdiv+0x152>
 8000680:	211a      	movs	r1, #26
 8000682:	2501      	movs	r5, #1
 8000684:	1a12      	subs	r2, r2, r0
 8000686:	e7e4      	b.n	8000652 <__aeabi_fdiv+0x1ce>
 8000688:	01ad      	lsls	r5, r5, #6
 800068a:	2000      	movs	r0, #0
 800068c:	0a6d      	lsrs	r5, r5, #9
 800068e:	e758      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000690:	080069e0 	.word	0x080069e0
 8000694:	f7ffffff 	.word	0xf7ffffff
 8000698:	08006a20 	.word	0x08006a20

0800069c <__aeabi_fmul>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	4657      	mov	r7, sl
 80006a0:	464e      	mov	r6, r9
 80006a2:	4645      	mov	r5, r8
 80006a4:	46de      	mov	lr, fp
 80006a6:	0244      	lsls	r4, r0, #9
 80006a8:	b5e0      	push	{r5, r6, r7, lr}
 80006aa:	0045      	lsls	r5, r0, #1
 80006ac:	1c0f      	adds	r7, r1, #0
 80006ae:	0a64      	lsrs	r4, r4, #9
 80006b0:	0e2d      	lsrs	r5, r5, #24
 80006b2:	0fc6      	lsrs	r6, r0, #31
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d047      	beq.n	8000748 <__aeabi_fmul+0xac>
 80006b8:	2dff      	cmp	r5, #255	; 0xff
 80006ba:	d04d      	beq.n	8000758 <__aeabi_fmul+0xbc>
 80006bc:	2300      	movs	r3, #0
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	469a      	mov	sl, r3
 80006c2:	469b      	mov	fp, r3
 80006c4:	00e4      	lsls	r4, r4, #3
 80006c6:	04c0      	lsls	r0, r0, #19
 80006c8:	4304      	orrs	r4, r0
 80006ca:	3d7f      	subs	r5, #127	; 0x7f
 80006cc:	0278      	lsls	r0, r7, #9
 80006ce:	0a43      	lsrs	r3, r0, #9
 80006d0:	4699      	mov	r9, r3
 80006d2:	007a      	lsls	r2, r7, #1
 80006d4:	0ffb      	lsrs	r3, r7, #31
 80006d6:	4698      	mov	r8, r3
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	464b      	mov	r3, r9
 80006dc:	d044      	beq.n	8000768 <__aeabi_fmul+0xcc>
 80006de:	2aff      	cmp	r2, #255	; 0xff
 80006e0:	d011      	beq.n	8000706 <__aeabi_fmul+0x6a>
 80006e2:	00d8      	lsls	r0, r3, #3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	4303      	orrs	r3, r0
 80006ea:	4699      	mov	r9, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	3a7f      	subs	r2, #127	; 0x7f
 80006f0:	18ad      	adds	r5, r5, r2
 80006f2:	4647      	mov	r7, r8
 80006f4:	4653      	mov	r3, sl
 80006f6:	4077      	eors	r7, r6
 80006f8:	1c69      	adds	r1, r5, #1
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d83f      	bhi.n	800077e <__aeabi_fmul+0xe2>
 80006fe:	4a72      	ldr	r2, [pc, #456]	; (80008c8 <__aeabi_fmul+0x22c>)
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	58d3      	ldr	r3, [r2, r3]
 8000704:	469f      	mov	pc, r3
 8000706:	35ff      	adds	r5, #255	; 0xff
 8000708:	2b00      	cmp	r3, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fmul+0x72>
 800070c:	e079      	b.n	8000802 <__aeabi_fmul+0x166>
 800070e:	4652      	mov	r2, sl
 8000710:	2302      	movs	r3, #2
 8000712:	431a      	orrs	r2, r3
 8000714:	4692      	mov	sl, r2
 8000716:	2002      	movs	r0, #2
 8000718:	e7eb      	b.n	80006f2 <__aeabi_fmul+0x56>
 800071a:	4647      	mov	r7, r8
 800071c:	464c      	mov	r4, r9
 800071e:	4683      	mov	fp, r0
 8000720:	465b      	mov	r3, fp
 8000722:	2b02      	cmp	r3, #2
 8000724:	d028      	beq.n	8000778 <__aeabi_fmul+0xdc>
 8000726:	2b03      	cmp	r3, #3
 8000728:	d100      	bne.n	800072c <__aeabi_fmul+0x90>
 800072a:	e0c6      	b.n	80008ba <__aeabi_fmul+0x21e>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d14f      	bne.n	80007d0 <__aeabi_fmul+0x134>
 8000730:	2000      	movs	r0, #0
 8000732:	2400      	movs	r4, #0
 8000734:	05c0      	lsls	r0, r0, #23
 8000736:	07ff      	lsls	r7, r7, #31
 8000738:	4320      	orrs	r0, r4
 800073a:	4338      	orrs	r0, r7
 800073c:	bcf0      	pop	{r4, r5, r6, r7}
 800073e:	46bb      	mov	fp, r7
 8000740:	46b2      	mov	sl, r6
 8000742:	46a9      	mov	r9, r5
 8000744:	46a0      	mov	r8, r4
 8000746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000748:	2c00      	cmp	r4, #0
 800074a:	d171      	bne.n	8000830 <__aeabi_fmul+0x194>
 800074c:	2304      	movs	r3, #4
 800074e:	469a      	mov	sl, r3
 8000750:	3b03      	subs	r3, #3
 8000752:	2500      	movs	r5, #0
 8000754:	469b      	mov	fp, r3
 8000756:	e7b9      	b.n	80006cc <__aeabi_fmul+0x30>
 8000758:	2c00      	cmp	r4, #0
 800075a:	d163      	bne.n	8000824 <__aeabi_fmul+0x188>
 800075c:	2308      	movs	r3, #8
 800075e:	469a      	mov	sl, r3
 8000760:	3b06      	subs	r3, #6
 8000762:	25ff      	movs	r5, #255	; 0xff
 8000764:	469b      	mov	fp, r3
 8000766:	e7b1      	b.n	80006cc <__aeabi_fmul+0x30>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d150      	bne.n	800080e <__aeabi_fmul+0x172>
 800076c:	4652      	mov	r2, sl
 800076e:	3301      	adds	r3, #1
 8000770:	431a      	orrs	r2, r3
 8000772:	4692      	mov	sl, r2
 8000774:	2001      	movs	r0, #1
 8000776:	e7bc      	b.n	80006f2 <__aeabi_fmul+0x56>
 8000778:	20ff      	movs	r0, #255	; 0xff
 800077a:	2400      	movs	r4, #0
 800077c:	e7da      	b.n	8000734 <__aeabi_fmul+0x98>
 800077e:	4648      	mov	r0, r9
 8000780:	0c26      	lsrs	r6, r4, #16
 8000782:	0424      	lsls	r4, r4, #16
 8000784:	0c22      	lsrs	r2, r4, #16
 8000786:	0404      	lsls	r4, r0, #16
 8000788:	0c24      	lsrs	r4, r4, #16
 800078a:	464b      	mov	r3, r9
 800078c:	0020      	movs	r0, r4
 800078e:	0c1b      	lsrs	r3, r3, #16
 8000790:	4350      	muls	r0, r2
 8000792:	4374      	muls	r4, r6
 8000794:	435a      	muls	r2, r3
 8000796:	435e      	muls	r6, r3
 8000798:	1912      	adds	r2, r2, r4
 800079a:	0c03      	lsrs	r3, r0, #16
 800079c:	189b      	adds	r3, r3, r2
 800079e:	429c      	cmp	r4, r3
 80007a0:	d903      	bls.n	80007aa <__aeabi_fmul+0x10e>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0252      	lsls	r2, r2, #9
 80007a6:	4694      	mov	ip, r2
 80007a8:	4466      	add	r6, ip
 80007aa:	0400      	lsls	r0, r0, #16
 80007ac:	041a      	lsls	r2, r3, #16
 80007ae:	0c00      	lsrs	r0, r0, #16
 80007b0:	1812      	adds	r2, r2, r0
 80007b2:	0194      	lsls	r4, r2, #6
 80007b4:	1e60      	subs	r0, r4, #1
 80007b6:	4184      	sbcs	r4, r0
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	0e92      	lsrs	r2, r2, #26
 80007bc:	199b      	adds	r3, r3, r6
 80007be:	4314      	orrs	r4, r2
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	431c      	orrs	r4, r3
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	d572      	bpl.n	80008ae <__aeabi_fmul+0x212>
 80007c8:	2001      	movs	r0, #1
 80007ca:	0863      	lsrs	r3, r4, #1
 80007cc:	4004      	ands	r4, r0
 80007ce:	431c      	orrs	r4, r3
 80007d0:	0008      	movs	r0, r1
 80007d2:	307f      	adds	r0, #127	; 0x7f
 80007d4:	2800      	cmp	r0, #0
 80007d6:	dd3c      	ble.n	8000852 <__aeabi_fmul+0x1b6>
 80007d8:	0763      	lsls	r3, r4, #29
 80007da:	d004      	beq.n	80007e6 <__aeabi_fmul+0x14a>
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fmul+0x14a>
 80007e4:	3404      	adds	r4, #4
 80007e6:	0123      	lsls	r3, r4, #4
 80007e8:	d503      	bpl.n	80007f2 <__aeabi_fmul+0x156>
 80007ea:	3180      	adds	r1, #128	; 0x80
 80007ec:	0008      	movs	r0, r1
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <__aeabi_fmul+0x230>)
 80007f0:	401c      	ands	r4, r3
 80007f2:	28fe      	cmp	r0, #254	; 0xfe
 80007f4:	dcc0      	bgt.n	8000778 <__aeabi_fmul+0xdc>
 80007f6:	01a4      	lsls	r4, r4, #6
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	b2c0      	uxtb	r0, r0
 80007fc:	e79a      	b.n	8000734 <__aeabi_fmul+0x98>
 80007fe:	0037      	movs	r7, r6
 8000800:	e78e      	b.n	8000720 <__aeabi_fmul+0x84>
 8000802:	4652      	mov	r2, sl
 8000804:	2303      	movs	r3, #3
 8000806:	431a      	orrs	r2, r3
 8000808:	4692      	mov	sl, r2
 800080a:	2003      	movs	r0, #3
 800080c:	e771      	b.n	80006f2 <__aeabi_fmul+0x56>
 800080e:	4648      	mov	r0, r9
 8000810:	f001 fb86 	bl	8001f20 <__clzsi2>
 8000814:	464a      	mov	r2, r9
 8000816:	1f43      	subs	r3, r0, #5
 8000818:	409a      	lsls	r2, r3
 800081a:	1a2d      	subs	r5, r5, r0
 800081c:	4691      	mov	r9, r2
 800081e:	2000      	movs	r0, #0
 8000820:	3d76      	subs	r5, #118	; 0x76
 8000822:	e766      	b.n	80006f2 <__aeabi_fmul+0x56>
 8000824:	230c      	movs	r3, #12
 8000826:	469a      	mov	sl, r3
 8000828:	3b09      	subs	r3, #9
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	469b      	mov	fp, r3
 800082e:	e74d      	b.n	80006cc <__aeabi_fmul+0x30>
 8000830:	0020      	movs	r0, r4
 8000832:	f001 fb75 	bl	8001f20 <__clzsi2>
 8000836:	2576      	movs	r5, #118	; 0x76
 8000838:	1f43      	subs	r3, r0, #5
 800083a:	409c      	lsls	r4, r3
 800083c:	2300      	movs	r3, #0
 800083e:	426d      	negs	r5, r5
 8000840:	469a      	mov	sl, r3
 8000842:	469b      	mov	fp, r3
 8000844:	1a2d      	subs	r5, r5, r0
 8000846:	e741      	b.n	80006cc <__aeabi_fmul+0x30>
 8000848:	2480      	movs	r4, #128	; 0x80
 800084a:	2700      	movs	r7, #0
 800084c:	20ff      	movs	r0, #255	; 0xff
 800084e:	03e4      	lsls	r4, r4, #15
 8000850:	e770      	b.n	8000734 <__aeabi_fmul+0x98>
 8000852:	2301      	movs	r3, #1
 8000854:	1a1b      	subs	r3, r3, r0
 8000856:	2b1b      	cmp	r3, #27
 8000858:	dd00      	ble.n	800085c <__aeabi_fmul+0x1c0>
 800085a:	e769      	b.n	8000730 <__aeabi_fmul+0x94>
 800085c:	319e      	adds	r1, #158	; 0x9e
 800085e:	0020      	movs	r0, r4
 8000860:	408c      	lsls	r4, r1
 8000862:	40d8      	lsrs	r0, r3
 8000864:	1e63      	subs	r3, r4, #1
 8000866:	419c      	sbcs	r4, r3
 8000868:	4304      	orrs	r4, r0
 800086a:	0763      	lsls	r3, r4, #29
 800086c:	d004      	beq.n	8000878 <__aeabi_fmul+0x1dc>
 800086e:	230f      	movs	r3, #15
 8000870:	4023      	ands	r3, r4
 8000872:	2b04      	cmp	r3, #4
 8000874:	d000      	beq.n	8000878 <__aeabi_fmul+0x1dc>
 8000876:	3404      	adds	r4, #4
 8000878:	0163      	lsls	r3, r4, #5
 800087a:	d51a      	bpl.n	80008b2 <__aeabi_fmul+0x216>
 800087c:	2001      	movs	r0, #1
 800087e:	2400      	movs	r4, #0
 8000880:	e758      	b.n	8000734 <__aeabi_fmul+0x98>
 8000882:	2080      	movs	r0, #128	; 0x80
 8000884:	03c0      	lsls	r0, r0, #15
 8000886:	4204      	tst	r4, r0
 8000888:	d009      	beq.n	800089e <__aeabi_fmul+0x202>
 800088a:	464b      	mov	r3, r9
 800088c:	4203      	tst	r3, r0
 800088e:	d106      	bne.n	800089e <__aeabi_fmul+0x202>
 8000890:	464c      	mov	r4, r9
 8000892:	4304      	orrs	r4, r0
 8000894:	0264      	lsls	r4, r4, #9
 8000896:	4647      	mov	r7, r8
 8000898:	20ff      	movs	r0, #255	; 0xff
 800089a:	0a64      	lsrs	r4, r4, #9
 800089c:	e74a      	b.n	8000734 <__aeabi_fmul+0x98>
 800089e:	2080      	movs	r0, #128	; 0x80
 80008a0:	03c0      	lsls	r0, r0, #15
 80008a2:	4304      	orrs	r4, r0
 80008a4:	0264      	lsls	r4, r4, #9
 80008a6:	0037      	movs	r7, r6
 80008a8:	20ff      	movs	r0, #255	; 0xff
 80008aa:	0a64      	lsrs	r4, r4, #9
 80008ac:	e742      	b.n	8000734 <__aeabi_fmul+0x98>
 80008ae:	0029      	movs	r1, r5
 80008b0:	e78e      	b.n	80007d0 <__aeabi_fmul+0x134>
 80008b2:	01a4      	lsls	r4, r4, #6
 80008b4:	2000      	movs	r0, #0
 80008b6:	0a64      	lsrs	r4, r4, #9
 80008b8:	e73c      	b.n	8000734 <__aeabi_fmul+0x98>
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	03c0      	lsls	r0, r0, #15
 80008be:	4304      	orrs	r4, r0
 80008c0:	0264      	lsls	r4, r4, #9
 80008c2:	20ff      	movs	r0, #255	; 0xff
 80008c4:	0a64      	lsrs	r4, r4, #9
 80008c6:	e735      	b.n	8000734 <__aeabi_fmul+0x98>
 80008c8:	08006a60 	.word	0x08006a60
 80008cc:	f7ffffff 	.word	0xf7ffffff

080008d0 <__aeabi_dadd>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	464f      	mov	r7, r9
 80008d4:	46d6      	mov	lr, sl
 80008d6:	4646      	mov	r6, r8
 80008d8:	000d      	movs	r5, r1
 80008da:	0001      	movs	r1, r0
 80008dc:	0018      	movs	r0, r3
 80008de:	b5c0      	push	{r6, r7, lr}
 80008e0:	0017      	movs	r7, r2
 80008e2:	032b      	lsls	r3, r5, #12
 80008e4:	0a5a      	lsrs	r2, r3, #9
 80008e6:	0f4b      	lsrs	r3, r1, #29
 80008e8:	4313      	orrs	r3, r2
 80008ea:	00ca      	lsls	r2, r1, #3
 80008ec:	4691      	mov	r9, r2
 80008ee:	0302      	lsls	r2, r0, #12
 80008f0:	006e      	lsls	r6, r5, #1
 80008f2:	0041      	lsls	r1, r0, #1
 80008f4:	0a52      	lsrs	r2, r2, #9
 80008f6:	0fec      	lsrs	r4, r5, #31
 80008f8:	0f7d      	lsrs	r5, r7, #29
 80008fa:	4315      	orrs	r5, r2
 80008fc:	0d76      	lsrs	r6, r6, #21
 80008fe:	0d49      	lsrs	r1, r1, #21
 8000900:	0fc0      	lsrs	r0, r0, #31
 8000902:	4682      	mov	sl, r0
 8000904:	46ac      	mov	ip, r5
 8000906:	00ff      	lsls	r7, r7, #3
 8000908:	1a72      	subs	r2, r6, r1
 800090a:	4284      	cmp	r4, r0
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x40>
 800090e:	e098      	b.n	8000a42 <__aeabi_dadd+0x172>
 8000910:	2a00      	cmp	r2, #0
 8000912:	dc00      	bgt.n	8000916 <__aeabi_dadd+0x46>
 8000914:	e081      	b.n	8000a1a <__aeabi_dadd+0x14a>
 8000916:	2900      	cmp	r1, #0
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x4c>
 800091a:	e0b6      	b.n	8000a8a <__aeabi_dadd+0x1ba>
 800091c:	49c9      	ldr	r1, [pc, #804]	; (8000c44 <__aeabi_dadd+0x374>)
 800091e:	428e      	cmp	r6, r1
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x54>
 8000922:	e172      	b.n	8000c0a <__aeabi_dadd+0x33a>
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0028      	movs	r0, r5
 8000928:	0409      	lsls	r1, r1, #16
 800092a:	4308      	orrs	r0, r1
 800092c:	4684      	mov	ip, r0
 800092e:	2a38      	cmp	r2, #56	; 0x38
 8000930:	dd00      	ble.n	8000934 <__aeabi_dadd+0x64>
 8000932:	e15e      	b.n	8000bf2 <__aeabi_dadd+0x322>
 8000934:	2a1f      	cmp	r2, #31
 8000936:	dd00      	ble.n	800093a <__aeabi_dadd+0x6a>
 8000938:	e1ee      	b.n	8000d18 <__aeabi_dadd+0x448>
 800093a:	2020      	movs	r0, #32
 800093c:	0039      	movs	r1, r7
 800093e:	4665      	mov	r5, ip
 8000940:	1a80      	subs	r0, r0, r2
 8000942:	4087      	lsls	r7, r0
 8000944:	40d1      	lsrs	r1, r2
 8000946:	4085      	lsls	r5, r0
 8000948:	430d      	orrs	r5, r1
 800094a:	0039      	movs	r1, r7
 800094c:	1e4f      	subs	r7, r1, #1
 800094e:	41b9      	sbcs	r1, r7
 8000950:	4667      	mov	r7, ip
 8000952:	40d7      	lsrs	r7, r2
 8000954:	4329      	orrs	r1, r5
 8000956:	1bdb      	subs	r3, r3, r7
 8000958:	464a      	mov	r2, r9
 800095a:	1a55      	subs	r5, r2, r1
 800095c:	45a9      	cmp	r9, r5
 800095e:	4189      	sbcs	r1, r1
 8000960:	4249      	negs	r1, r1
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	4698      	mov	r8, r3
 8000966:	4643      	mov	r3, r8
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	d400      	bmi.n	800096e <__aeabi_dadd+0x9e>
 800096c:	e0cc      	b.n	8000b08 <__aeabi_dadd+0x238>
 800096e:	4643      	mov	r3, r8
 8000970:	025b      	lsls	r3, r3, #9
 8000972:	0a5b      	lsrs	r3, r3, #9
 8000974:	4698      	mov	r8, r3
 8000976:	4643      	mov	r3, r8
 8000978:	2b00      	cmp	r3, #0
 800097a:	d100      	bne.n	800097e <__aeabi_dadd+0xae>
 800097c:	e12c      	b.n	8000bd8 <__aeabi_dadd+0x308>
 800097e:	4640      	mov	r0, r8
 8000980:	f001 face 	bl	8001f20 <__clzsi2>
 8000984:	0001      	movs	r1, r0
 8000986:	3908      	subs	r1, #8
 8000988:	2220      	movs	r2, #32
 800098a:	0028      	movs	r0, r5
 800098c:	4643      	mov	r3, r8
 800098e:	1a52      	subs	r2, r2, r1
 8000990:	408b      	lsls	r3, r1
 8000992:	40d0      	lsrs	r0, r2
 8000994:	408d      	lsls	r5, r1
 8000996:	4303      	orrs	r3, r0
 8000998:	428e      	cmp	r6, r1
 800099a:	dd00      	ble.n	800099e <__aeabi_dadd+0xce>
 800099c:	e117      	b.n	8000bce <__aeabi_dadd+0x2fe>
 800099e:	1b8e      	subs	r6, r1, r6
 80009a0:	1c72      	adds	r2, r6, #1
 80009a2:	2a1f      	cmp	r2, #31
 80009a4:	dd00      	ble.n	80009a8 <__aeabi_dadd+0xd8>
 80009a6:	e1a7      	b.n	8000cf8 <__aeabi_dadd+0x428>
 80009a8:	2120      	movs	r1, #32
 80009aa:	0018      	movs	r0, r3
 80009ac:	002e      	movs	r6, r5
 80009ae:	1a89      	subs	r1, r1, r2
 80009b0:	408d      	lsls	r5, r1
 80009b2:	4088      	lsls	r0, r1
 80009b4:	40d6      	lsrs	r6, r2
 80009b6:	40d3      	lsrs	r3, r2
 80009b8:	1e69      	subs	r1, r5, #1
 80009ba:	418d      	sbcs	r5, r1
 80009bc:	4330      	orrs	r0, r6
 80009be:	4698      	mov	r8, r3
 80009c0:	2600      	movs	r6, #0
 80009c2:	4305      	orrs	r5, r0
 80009c4:	076b      	lsls	r3, r5, #29
 80009c6:	d009      	beq.n	80009dc <__aeabi_dadd+0x10c>
 80009c8:	230f      	movs	r3, #15
 80009ca:	402b      	ands	r3, r5
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d005      	beq.n	80009dc <__aeabi_dadd+0x10c>
 80009d0:	1d2b      	adds	r3, r5, #4
 80009d2:	42ab      	cmp	r3, r5
 80009d4:	41ad      	sbcs	r5, r5
 80009d6:	426d      	negs	r5, r5
 80009d8:	44a8      	add	r8, r5
 80009da:	001d      	movs	r5, r3
 80009dc:	4643      	mov	r3, r8
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_dadd+0x114>
 80009e2:	e094      	b.n	8000b0e <__aeabi_dadd+0x23e>
 80009e4:	4b97      	ldr	r3, [pc, #604]	; (8000c44 <__aeabi_dadd+0x374>)
 80009e6:	1c72      	adds	r2, r6, #1
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d100      	bne.n	80009ee <__aeabi_dadd+0x11e>
 80009ec:	e09d      	b.n	8000b2a <__aeabi_dadd+0x25a>
 80009ee:	4641      	mov	r1, r8
 80009f0:	4b95      	ldr	r3, [pc, #596]	; (8000c48 <__aeabi_dadd+0x378>)
 80009f2:	08ed      	lsrs	r5, r5, #3
 80009f4:	4019      	ands	r1, r3
 80009f6:	000b      	movs	r3, r1
 80009f8:	0552      	lsls	r2, r2, #21
 80009fa:	0749      	lsls	r1, r1, #29
 80009fc:	025b      	lsls	r3, r3, #9
 80009fe:	4329      	orrs	r1, r5
 8000a00:	0b1b      	lsrs	r3, r3, #12
 8000a02:	0d52      	lsrs	r2, r2, #21
 8000a04:	0512      	lsls	r2, r2, #20
 8000a06:	4313      	orrs	r3, r2
 8000a08:	07e4      	lsls	r4, r4, #31
 8000a0a:	4323      	orrs	r3, r4
 8000a0c:	0008      	movs	r0, r1
 8000a0e:	0019      	movs	r1, r3
 8000a10:	bce0      	pop	{r5, r6, r7}
 8000a12:	46ba      	mov	sl, r7
 8000a14:	46b1      	mov	r9, r6
 8000a16:	46a8      	mov	r8, r5
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d043      	beq.n	8000aa6 <__aeabi_dadd+0x1d6>
 8000a1e:	1b8a      	subs	r2, r1, r6
 8000a20:	2e00      	cmp	r6, #0
 8000a22:	d000      	beq.n	8000a26 <__aeabi_dadd+0x156>
 8000a24:	e12a      	b.n	8000c7c <__aeabi_dadd+0x3ac>
 8000a26:	464c      	mov	r4, r9
 8000a28:	431c      	orrs	r4, r3
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dadd+0x15e>
 8000a2c:	e1d1      	b.n	8000dd2 <__aeabi_dadd+0x502>
 8000a2e:	1e54      	subs	r4, r2, #1
 8000a30:	2a01      	cmp	r2, #1
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x166>
 8000a34:	e21f      	b.n	8000e76 <__aeabi_dadd+0x5a6>
 8000a36:	4d83      	ldr	r5, [pc, #524]	; (8000c44 <__aeabi_dadd+0x374>)
 8000a38:	42aa      	cmp	r2, r5
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x16e>
 8000a3c:	e272      	b.n	8000f24 <__aeabi_dadd+0x654>
 8000a3e:	0022      	movs	r2, r4
 8000a40:	e123      	b.n	8000c8a <__aeabi_dadd+0x3ba>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x178>
 8000a46:	e098      	b.n	8000b7a <__aeabi_dadd+0x2aa>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d042      	beq.n	8000ad2 <__aeabi_dadd+0x202>
 8000a4c:	497d      	ldr	r1, [pc, #500]	; (8000c44 <__aeabi_dadd+0x374>)
 8000a4e:	428e      	cmp	r6, r1
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x184>
 8000a52:	e0da      	b.n	8000c0a <__aeabi_dadd+0x33a>
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0028      	movs	r0, r5
 8000a58:	0409      	lsls	r1, r1, #16
 8000a5a:	4308      	orrs	r0, r1
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	2a38      	cmp	r2, #56	; 0x38
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x194>
 8000a62:	e129      	b.n	8000cb8 <__aeabi_dadd+0x3e8>
 8000a64:	2a1f      	cmp	r2, #31
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_dadd+0x19a>
 8000a68:	e187      	b.n	8000d7a <__aeabi_dadd+0x4aa>
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	4665      	mov	r5, ip
 8000a6e:	3920      	subs	r1, #32
 8000a70:	40cd      	lsrs	r5, r1
 8000a72:	2a20      	cmp	r2, #32
 8000a74:	d004      	beq.n	8000a80 <__aeabi_dadd+0x1b0>
 8000a76:	2040      	movs	r0, #64	; 0x40
 8000a78:	4661      	mov	r1, ip
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	430f      	orrs	r7, r1
 8000a80:	0039      	movs	r1, r7
 8000a82:	1e4f      	subs	r7, r1, #1
 8000a84:	41b9      	sbcs	r1, r7
 8000a86:	430d      	orrs	r5, r1
 8000a88:	e11b      	b.n	8000cc2 <__aeabi_dadd+0x3f2>
 8000a8a:	0029      	movs	r1, r5
 8000a8c:	4339      	orrs	r1, r7
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x1c2>
 8000a90:	e0b5      	b.n	8000bfe <__aeabi_dadd+0x32e>
 8000a92:	1e51      	subs	r1, r2, #1
 8000a94:	2a01      	cmp	r2, #1
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x1ca>
 8000a98:	e1ab      	b.n	8000df2 <__aeabi_dadd+0x522>
 8000a9a:	486a      	ldr	r0, [pc, #424]	; (8000c44 <__aeabi_dadd+0x374>)
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x1d2>
 8000aa0:	e1b2      	b.n	8000e08 <__aeabi_dadd+0x538>
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	e743      	b.n	800092e <__aeabi_dadd+0x5e>
 8000aa6:	4969      	ldr	r1, [pc, #420]	; (8000c4c <__aeabi_dadd+0x37c>)
 8000aa8:	1c75      	adds	r5, r6, #1
 8000aaa:	420d      	tst	r5, r1
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_dadd+0x1e0>
 8000aae:	e0cf      	b.n	8000c50 <__aeabi_dadd+0x380>
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_dadd+0x1e6>
 8000ab4:	e193      	b.n	8000dde <__aeabi_dadd+0x50e>
 8000ab6:	4649      	mov	r1, r9
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x1ee>
 8000abc:	e1d1      	b.n	8000e62 <__aeabi_dadd+0x592>
 8000abe:	4661      	mov	r1, ip
 8000ac0:	4339      	orrs	r1, r7
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dadd+0x1f6>
 8000ac4:	e1e3      	b.n	8000e8e <__aeabi_dadd+0x5be>
 8000ac6:	4649      	mov	r1, r9
 8000ac8:	0758      	lsls	r0, r3, #29
 8000aca:	08c9      	lsrs	r1, r1, #3
 8000acc:	4301      	orrs	r1, r0
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	e026      	b.n	8000b20 <__aeabi_dadd+0x250>
 8000ad2:	0029      	movs	r1, r5
 8000ad4:	4339      	orrs	r1, r7
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x20a>
 8000ad8:	e091      	b.n	8000bfe <__aeabi_dadd+0x32e>
 8000ada:	1e51      	subs	r1, r2, #1
 8000adc:	2a01      	cmp	r2, #1
 8000ade:	d005      	beq.n	8000aec <__aeabi_dadd+0x21c>
 8000ae0:	4858      	ldr	r0, [pc, #352]	; (8000c44 <__aeabi_dadd+0x374>)
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x218>
 8000ae6:	e18f      	b.n	8000e08 <__aeabi_dadd+0x538>
 8000ae8:	000a      	movs	r2, r1
 8000aea:	e7b8      	b.n	8000a5e <__aeabi_dadd+0x18e>
 8000aec:	003d      	movs	r5, r7
 8000aee:	444d      	add	r5, r9
 8000af0:	454d      	cmp	r5, r9
 8000af2:	4189      	sbcs	r1, r1
 8000af4:	4463      	add	r3, ip
 8000af6:	4698      	mov	r8, r3
 8000af8:	4249      	negs	r1, r1
 8000afa:	4488      	add	r8, r1
 8000afc:	4643      	mov	r3, r8
 8000afe:	2602      	movs	r6, #2
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	d500      	bpl.n	8000b06 <__aeabi_dadd+0x236>
 8000b04:	e0eb      	b.n	8000cde <__aeabi_dadd+0x40e>
 8000b06:	3e01      	subs	r6, #1
 8000b08:	076b      	lsls	r3, r5, #29
 8000b0a:	d000      	beq.n	8000b0e <__aeabi_dadd+0x23e>
 8000b0c:	e75c      	b.n	80009c8 <__aeabi_dadd+0xf8>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	08e9      	lsrs	r1, r5, #3
 8000b12:	075a      	lsls	r2, r3, #29
 8000b14:	4311      	orrs	r1, r2
 8000b16:	0032      	movs	r2, r6
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	484a      	ldr	r0, [pc, #296]	; (8000c44 <__aeabi_dadd+0x374>)
 8000b1c:	4282      	cmp	r2, r0
 8000b1e:	d021      	beq.n	8000b64 <__aeabi_dadd+0x294>
 8000b20:	031b      	lsls	r3, r3, #12
 8000b22:	0552      	lsls	r2, r2, #21
 8000b24:	0b1b      	lsrs	r3, r3, #12
 8000b26:	0d52      	lsrs	r2, r2, #21
 8000b28:	e76c      	b.n	8000a04 <__aeabi_dadd+0x134>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e769      	b.n	8000a04 <__aeabi_dadd+0x134>
 8000b30:	002a      	movs	r2, r5
 8000b32:	433a      	orrs	r2, r7
 8000b34:	d069      	beq.n	8000c0a <__aeabi_dadd+0x33a>
 8000b36:	464a      	mov	r2, r9
 8000b38:	0758      	lsls	r0, r3, #29
 8000b3a:	08d1      	lsrs	r1, r2, #3
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	031b      	lsls	r3, r3, #12
 8000b42:	4308      	orrs	r0, r1
 8000b44:	421a      	tst	r2, r3
 8000b46:	d007      	beq.n	8000b58 <__aeabi_dadd+0x288>
 8000b48:	0029      	movs	r1, r5
 8000b4a:	08ed      	lsrs	r5, r5, #3
 8000b4c:	421d      	tst	r5, r3
 8000b4e:	d103      	bne.n	8000b58 <__aeabi_dadd+0x288>
 8000b50:	002a      	movs	r2, r5
 8000b52:	08ff      	lsrs	r7, r7, #3
 8000b54:	0748      	lsls	r0, r1, #29
 8000b56:	4338      	orrs	r0, r7
 8000b58:	0f43      	lsrs	r3, r0, #29
 8000b5a:	00c1      	lsls	r1, r0, #3
 8000b5c:	075b      	lsls	r3, r3, #29
 8000b5e:	08c9      	lsrs	r1, r1, #3
 8000b60:	4319      	orrs	r1, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	000a      	movs	r2, r1
 8000b66:	431a      	orrs	r2, r3
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x29c>
 8000b6a:	e213      	b.n	8000f94 <__aeabi_dadd+0x6c4>
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	0312      	lsls	r2, r2, #12
 8000b70:	4313      	orrs	r3, r2
 8000b72:	031b      	lsls	r3, r3, #12
 8000b74:	4a33      	ldr	r2, [pc, #204]	; (8000c44 <__aeabi_dadd+0x374>)
 8000b76:	0b1b      	lsrs	r3, r3, #12
 8000b78:	e744      	b.n	8000a04 <__aeabi_dadd+0x134>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d04b      	beq.n	8000c16 <__aeabi_dadd+0x346>
 8000b7e:	1b8a      	subs	r2, r1, r6
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x2b6>
 8000b84:	e0e7      	b.n	8000d56 <__aeabi_dadd+0x486>
 8000b86:	482f      	ldr	r0, [pc, #188]	; (8000c44 <__aeabi_dadd+0x374>)
 8000b88:	4281      	cmp	r1, r0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dadd+0x2be>
 8000b8c:	e195      	b.n	8000eba <__aeabi_dadd+0x5ea>
 8000b8e:	2080      	movs	r0, #128	; 0x80
 8000b90:	0400      	lsls	r0, r0, #16
 8000b92:	4303      	orrs	r3, r0
 8000b94:	2a38      	cmp	r2, #56	; 0x38
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_dadd+0x2ca>
 8000b98:	e143      	b.n	8000e22 <__aeabi_dadd+0x552>
 8000b9a:	2a1f      	cmp	r2, #31
 8000b9c:	dd00      	ble.n	8000ba0 <__aeabi_dadd+0x2d0>
 8000b9e:	e1db      	b.n	8000f58 <__aeabi_dadd+0x688>
 8000ba0:	2020      	movs	r0, #32
 8000ba2:	001d      	movs	r5, r3
 8000ba4:	464e      	mov	r6, r9
 8000ba6:	1a80      	subs	r0, r0, r2
 8000ba8:	4085      	lsls	r5, r0
 8000baa:	40d6      	lsrs	r6, r2
 8000bac:	4335      	orrs	r5, r6
 8000bae:	464e      	mov	r6, r9
 8000bb0:	4086      	lsls	r6, r0
 8000bb2:	0030      	movs	r0, r6
 8000bb4:	40d3      	lsrs	r3, r2
 8000bb6:	1e46      	subs	r6, r0, #1
 8000bb8:	41b0      	sbcs	r0, r6
 8000bba:	449c      	add	ip, r3
 8000bbc:	4305      	orrs	r5, r0
 8000bbe:	19ed      	adds	r5, r5, r7
 8000bc0:	42bd      	cmp	r5, r7
 8000bc2:	419b      	sbcs	r3, r3
 8000bc4:	425b      	negs	r3, r3
 8000bc6:	4463      	add	r3, ip
 8000bc8:	4698      	mov	r8, r3
 8000bca:	000e      	movs	r6, r1
 8000bcc:	e07f      	b.n	8000cce <__aeabi_dadd+0x3fe>
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <__aeabi_dadd+0x378>)
 8000bd0:	1a76      	subs	r6, r6, r1
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	e6f5      	b.n	80009c4 <__aeabi_dadd+0xf4>
 8000bd8:	0028      	movs	r0, r5
 8000bda:	f001 f9a1 	bl	8001f20 <__clzsi2>
 8000bde:	0001      	movs	r1, r0
 8000be0:	3118      	adds	r1, #24
 8000be2:	291f      	cmp	r1, #31
 8000be4:	dc00      	bgt.n	8000be8 <__aeabi_dadd+0x318>
 8000be6:	e6cf      	b.n	8000988 <__aeabi_dadd+0xb8>
 8000be8:	002b      	movs	r3, r5
 8000bea:	3808      	subs	r0, #8
 8000bec:	4083      	lsls	r3, r0
 8000bee:	2500      	movs	r5, #0
 8000bf0:	e6d2      	b.n	8000998 <__aeabi_dadd+0xc8>
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	433a      	orrs	r2, r7
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	1e4f      	subs	r7, r1, #1
 8000bfa:	41b9      	sbcs	r1, r7
 8000bfc:	e6ac      	b.n	8000958 <__aeabi_dadd+0x88>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	0758      	lsls	r0, r3, #29
 8000c02:	08c9      	lsrs	r1, r1, #3
 8000c04:	4301      	orrs	r1, r0
 8000c06:	08db      	lsrs	r3, r3, #3
 8000c08:	e787      	b.n	8000b1a <__aeabi_dadd+0x24a>
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	075a      	lsls	r2, r3, #29
 8000c0e:	08c9      	lsrs	r1, r1, #3
 8000c10:	4311      	orrs	r1, r2
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	e7a6      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <__aeabi_dadd+0x37c>)
 8000c18:	1c70      	adds	r0, r6, #1
 8000c1a:	4208      	tst	r0, r1
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_dadd+0x350>
 8000c1e:	e0bb      	b.n	8000d98 <__aeabi_dadd+0x4c8>
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d000      	beq.n	8000c26 <__aeabi_dadd+0x356>
 8000c24:	e114      	b.n	8000e50 <__aeabi_dadd+0x580>
 8000c26:	4649      	mov	r1, r9
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x35e>
 8000c2c:	e175      	b.n	8000f1a <__aeabi_dadd+0x64a>
 8000c2e:	0029      	movs	r1, r5
 8000c30:	4339      	orrs	r1, r7
 8000c32:	d000      	beq.n	8000c36 <__aeabi_dadd+0x366>
 8000c34:	e17e      	b.n	8000f34 <__aeabi_dadd+0x664>
 8000c36:	4649      	mov	r1, r9
 8000c38:	0758      	lsls	r0, r3, #29
 8000c3a:	08c9      	lsrs	r1, r1, #3
 8000c3c:	4301      	orrs	r1, r0
 8000c3e:	08db      	lsrs	r3, r3, #3
 8000c40:	e76e      	b.n	8000b20 <__aeabi_dadd+0x250>
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	000007ff 	.word	0x000007ff
 8000c48:	ff7fffff 	.word	0xff7fffff
 8000c4c:	000007fe 	.word	0x000007fe
 8000c50:	4649      	mov	r1, r9
 8000c52:	1bcd      	subs	r5, r1, r7
 8000c54:	4661      	mov	r1, ip
 8000c56:	1a58      	subs	r0, r3, r1
 8000c58:	45a9      	cmp	r9, r5
 8000c5a:	4189      	sbcs	r1, r1
 8000c5c:	4249      	negs	r1, r1
 8000c5e:	4688      	mov	r8, r1
 8000c60:	0001      	movs	r1, r0
 8000c62:	4640      	mov	r0, r8
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	4688      	mov	r8, r1
 8000c68:	0209      	lsls	r1, r1, #8
 8000c6a:	d500      	bpl.n	8000c6e <__aeabi_dadd+0x39e>
 8000c6c:	e0a6      	b.n	8000dbc <__aeabi_dadd+0x4ec>
 8000c6e:	4641      	mov	r1, r8
 8000c70:	4329      	orrs	r1, r5
 8000c72:	d000      	beq.n	8000c76 <__aeabi_dadd+0x3a6>
 8000c74:	e67f      	b.n	8000976 <__aeabi_dadd+0xa6>
 8000c76:	2300      	movs	r3, #0
 8000c78:	2400      	movs	r4, #0
 8000c7a:	e751      	b.n	8000b20 <__aeabi_dadd+0x250>
 8000c7c:	4cc7      	ldr	r4, [pc, #796]	; (8000f9c <__aeabi_dadd+0x6cc>)
 8000c7e:	42a1      	cmp	r1, r4
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x3b4>
 8000c82:	e0c7      	b.n	8000e14 <__aeabi_dadd+0x544>
 8000c84:	2480      	movs	r4, #128	; 0x80
 8000c86:	0424      	lsls	r4, r4, #16
 8000c88:	4323      	orrs	r3, r4
 8000c8a:	2a38      	cmp	r2, #56	; 0x38
 8000c8c:	dc54      	bgt.n	8000d38 <__aeabi_dadd+0x468>
 8000c8e:	2a1f      	cmp	r2, #31
 8000c90:	dd00      	ble.n	8000c94 <__aeabi_dadd+0x3c4>
 8000c92:	e0cc      	b.n	8000e2e <__aeabi_dadd+0x55e>
 8000c94:	2420      	movs	r4, #32
 8000c96:	4648      	mov	r0, r9
 8000c98:	1aa4      	subs	r4, r4, r2
 8000c9a:	001d      	movs	r5, r3
 8000c9c:	464e      	mov	r6, r9
 8000c9e:	40a0      	lsls	r0, r4
 8000ca0:	40d6      	lsrs	r6, r2
 8000ca2:	40a5      	lsls	r5, r4
 8000ca4:	0004      	movs	r4, r0
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	4662      	mov	r2, ip
 8000caa:	4335      	orrs	r5, r6
 8000cac:	1e66      	subs	r6, r4, #1
 8000cae:	41b4      	sbcs	r4, r6
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	469c      	mov	ip, r3
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	e044      	b.n	8000d42 <__aeabi_dadd+0x472>
 8000cb8:	4662      	mov	r2, ip
 8000cba:	433a      	orrs	r2, r7
 8000cbc:	0015      	movs	r5, r2
 8000cbe:	1e6f      	subs	r7, r5, #1
 8000cc0:	41bd      	sbcs	r5, r7
 8000cc2:	444d      	add	r5, r9
 8000cc4:	454d      	cmp	r5, r9
 8000cc6:	4189      	sbcs	r1, r1
 8000cc8:	4249      	negs	r1, r1
 8000cca:	4688      	mov	r8, r1
 8000ccc:	4498      	add	r8, r3
 8000cce:	4643      	mov	r3, r8
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	d400      	bmi.n	8000cd6 <__aeabi_dadd+0x406>
 8000cd4:	e718      	b.n	8000b08 <__aeabi_dadd+0x238>
 8000cd6:	4bb1      	ldr	r3, [pc, #708]	; (8000f9c <__aeabi_dadd+0x6cc>)
 8000cd8:	3601      	adds	r6, #1
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	d049      	beq.n	8000d72 <__aeabi_dadd+0x4a2>
 8000cde:	4642      	mov	r2, r8
 8000ce0:	4baf      	ldr	r3, [pc, #700]	; (8000fa0 <__aeabi_dadd+0x6d0>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	086a      	lsrs	r2, r5, #1
 8000cea:	400d      	ands	r5, r1
 8000cec:	4315      	orrs	r5, r2
 8000cee:	07d9      	lsls	r1, r3, #31
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	430d      	orrs	r5, r1
 8000cf6:	e665      	b.n	80009c4 <__aeabi_dadd+0xf4>
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	3e1f      	subs	r6, #31
 8000cfc:	40f0      	lsrs	r0, r6
 8000cfe:	2a20      	cmp	r2, #32
 8000d00:	d003      	beq.n	8000d0a <__aeabi_dadd+0x43a>
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	4093      	lsls	r3, r2
 8000d08:	431d      	orrs	r5, r3
 8000d0a:	1e69      	subs	r1, r5, #1
 8000d0c:	418d      	sbcs	r5, r1
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2600      	movs	r6, #0
 8000d12:	4698      	mov	r8, r3
 8000d14:	4305      	orrs	r5, r0
 8000d16:	e6f7      	b.n	8000b08 <__aeabi_dadd+0x238>
 8000d18:	0011      	movs	r1, r2
 8000d1a:	4665      	mov	r5, ip
 8000d1c:	3920      	subs	r1, #32
 8000d1e:	40cd      	lsrs	r5, r1
 8000d20:	2a20      	cmp	r2, #32
 8000d22:	d004      	beq.n	8000d2e <__aeabi_dadd+0x45e>
 8000d24:	2040      	movs	r0, #64	; 0x40
 8000d26:	4661      	mov	r1, ip
 8000d28:	1a82      	subs	r2, r0, r2
 8000d2a:	4091      	lsls	r1, r2
 8000d2c:	430f      	orrs	r7, r1
 8000d2e:	0039      	movs	r1, r7
 8000d30:	1e4f      	subs	r7, r1, #1
 8000d32:	41b9      	sbcs	r1, r7
 8000d34:	4329      	orrs	r1, r5
 8000d36:	e60f      	b.n	8000958 <__aeabi_dadd+0x88>
 8000d38:	464a      	mov	r2, r9
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	001d      	movs	r5, r3
 8000d3e:	1e6b      	subs	r3, r5, #1
 8000d40:	419d      	sbcs	r5, r3
 8000d42:	1b7d      	subs	r5, r7, r5
 8000d44:	42af      	cmp	r7, r5
 8000d46:	419b      	sbcs	r3, r3
 8000d48:	4662      	mov	r2, ip
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4698      	mov	r8, r3
 8000d50:	4654      	mov	r4, sl
 8000d52:	000e      	movs	r6, r1
 8000d54:	e607      	b.n	8000966 <__aeabi_dadd+0x96>
 8000d56:	4648      	mov	r0, r9
 8000d58:	4318      	orrs	r0, r3
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x48e>
 8000d5c:	e0b3      	b.n	8000ec6 <__aeabi_dadd+0x5f6>
 8000d5e:	1e50      	subs	r0, r2, #1
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x496>
 8000d64:	e10d      	b.n	8000f82 <__aeabi_dadd+0x6b2>
 8000d66:	4d8d      	ldr	r5, [pc, #564]	; (8000f9c <__aeabi_dadd+0x6cc>)
 8000d68:	42aa      	cmp	r2, r5
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x49e>
 8000d6c:	e0a5      	b.n	8000eba <__aeabi_dadd+0x5ea>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	e710      	b.n	8000b94 <__aeabi_dadd+0x2c4>
 8000d72:	0032      	movs	r2, r6
 8000d74:	2300      	movs	r3, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	e644      	b.n	8000a04 <__aeabi_dadd+0x134>
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	0038      	movs	r0, r7
 8000d7e:	1a89      	subs	r1, r1, r2
 8000d80:	4665      	mov	r5, ip
 8000d82:	408f      	lsls	r7, r1
 8000d84:	408d      	lsls	r5, r1
 8000d86:	40d0      	lsrs	r0, r2
 8000d88:	1e79      	subs	r1, r7, #1
 8000d8a:	418f      	sbcs	r7, r1
 8000d8c:	4305      	orrs	r5, r0
 8000d8e:	433d      	orrs	r5, r7
 8000d90:	4667      	mov	r7, ip
 8000d92:	40d7      	lsrs	r7, r2
 8000d94:	19db      	adds	r3, r3, r7
 8000d96:	e794      	b.n	8000cc2 <__aeabi_dadd+0x3f2>
 8000d98:	4a80      	ldr	r2, [pc, #512]	; (8000f9c <__aeabi_dadd+0x6cc>)
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x4d0>
 8000d9e:	e0ec      	b.n	8000f7a <__aeabi_dadd+0x6aa>
 8000da0:	0039      	movs	r1, r7
 8000da2:	4449      	add	r1, r9
 8000da4:	4549      	cmp	r1, r9
 8000da6:	4192      	sbcs	r2, r2
 8000da8:	4463      	add	r3, ip
 8000daa:	4252      	negs	r2, r2
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	07dd      	lsls	r5, r3, #31
 8000db0:	0849      	lsrs	r1, r1, #1
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	4698      	mov	r8, r3
 8000db6:	0006      	movs	r6, r0
 8000db8:	430d      	orrs	r5, r1
 8000dba:	e6a5      	b.n	8000b08 <__aeabi_dadd+0x238>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	1abd      	subs	r5, r7, r2
 8000dc0:	42af      	cmp	r7, r5
 8000dc2:	4189      	sbcs	r1, r1
 8000dc4:	4662      	mov	r2, ip
 8000dc6:	4249      	negs	r1, r1
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	1a5b      	subs	r3, r3, r1
 8000dcc:	4698      	mov	r8, r3
 8000dce:	4654      	mov	r4, sl
 8000dd0:	e5d1      	b.n	8000976 <__aeabi_dadd+0xa6>
 8000dd2:	076c      	lsls	r4, r5, #29
 8000dd4:	08f9      	lsrs	r1, r7, #3
 8000dd6:	4321      	orrs	r1, r4
 8000dd8:	08eb      	lsrs	r3, r5, #3
 8000dda:	0004      	movs	r4, r0
 8000ddc:	e69d      	b.n	8000b1a <__aeabi_dadd+0x24a>
 8000dde:	464a      	mov	r2, r9
 8000de0:	431a      	orrs	r2, r3
 8000de2:	d175      	bne.n	8000ed0 <__aeabi_dadd+0x600>
 8000de4:	4661      	mov	r1, ip
 8000de6:	4339      	orrs	r1, r7
 8000de8:	d114      	bne.n	8000e14 <__aeabi_dadd+0x544>
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	2400      	movs	r4, #0
 8000dee:	031b      	lsls	r3, r3, #12
 8000df0:	e6bc      	b.n	8000b6c <__aeabi_dadd+0x29c>
 8000df2:	464a      	mov	r2, r9
 8000df4:	1bd5      	subs	r5, r2, r7
 8000df6:	45a9      	cmp	r9, r5
 8000df8:	4189      	sbcs	r1, r1
 8000dfa:	4662      	mov	r2, ip
 8000dfc:	4249      	negs	r1, r1
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	4698      	mov	r8, r3
 8000e04:	2601      	movs	r6, #1
 8000e06:	e5ae      	b.n	8000966 <__aeabi_dadd+0x96>
 8000e08:	464a      	mov	r2, r9
 8000e0a:	08d1      	lsrs	r1, r2, #3
 8000e0c:	075a      	lsls	r2, r3, #29
 8000e0e:	4311      	orrs	r1, r2
 8000e10:	08db      	lsrs	r3, r3, #3
 8000e12:	e6a7      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000e14:	4663      	mov	r3, ip
 8000e16:	08f9      	lsrs	r1, r7, #3
 8000e18:	075a      	lsls	r2, r3, #29
 8000e1a:	4654      	mov	r4, sl
 8000e1c:	4311      	orrs	r1, r2
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	e6a0      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000e22:	464a      	mov	r2, r9
 8000e24:	4313      	orrs	r3, r2
 8000e26:	001d      	movs	r5, r3
 8000e28:	1e6b      	subs	r3, r5, #1
 8000e2a:	419d      	sbcs	r5, r3
 8000e2c:	e6c7      	b.n	8000bbe <__aeabi_dadd+0x2ee>
 8000e2e:	0014      	movs	r4, r2
 8000e30:	001e      	movs	r6, r3
 8000e32:	3c20      	subs	r4, #32
 8000e34:	40e6      	lsrs	r6, r4
 8000e36:	2a20      	cmp	r2, #32
 8000e38:	d005      	beq.n	8000e46 <__aeabi_dadd+0x576>
 8000e3a:	2440      	movs	r4, #64	; 0x40
 8000e3c:	1aa2      	subs	r2, r4, r2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	464a      	mov	r2, r9
 8000e42:	431a      	orrs	r2, r3
 8000e44:	4691      	mov	r9, r2
 8000e46:	464d      	mov	r5, r9
 8000e48:	1e6b      	subs	r3, r5, #1
 8000e4a:	419d      	sbcs	r5, r3
 8000e4c:	4335      	orrs	r5, r6
 8000e4e:	e778      	b.n	8000d42 <__aeabi_dadd+0x472>
 8000e50:	464a      	mov	r2, r9
 8000e52:	431a      	orrs	r2, r3
 8000e54:	d000      	beq.n	8000e58 <__aeabi_dadd+0x588>
 8000e56:	e66b      	b.n	8000b30 <__aeabi_dadd+0x260>
 8000e58:	076b      	lsls	r3, r5, #29
 8000e5a:	08f9      	lsrs	r1, r7, #3
 8000e5c:	4319      	orrs	r1, r3
 8000e5e:	08eb      	lsrs	r3, r5, #3
 8000e60:	e680      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000e62:	4661      	mov	r1, ip
 8000e64:	4339      	orrs	r1, r7
 8000e66:	d054      	beq.n	8000f12 <__aeabi_dadd+0x642>
 8000e68:	4663      	mov	r3, ip
 8000e6a:	08f9      	lsrs	r1, r7, #3
 8000e6c:	075c      	lsls	r4, r3, #29
 8000e6e:	4321      	orrs	r1, r4
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	0004      	movs	r4, r0
 8000e74:	e654      	b.n	8000b20 <__aeabi_dadd+0x250>
 8000e76:	464a      	mov	r2, r9
 8000e78:	1abd      	subs	r5, r7, r2
 8000e7a:	42af      	cmp	r7, r5
 8000e7c:	4189      	sbcs	r1, r1
 8000e7e:	4662      	mov	r2, ip
 8000e80:	4249      	negs	r1, r1
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	4698      	mov	r8, r3
 8000e88:	0004      	movs	r4, r0
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	e56b      	b.n	8000966 <__aeabi_dadd+0x96>
 8000e8e:	464a      	mov	r2, r9
 8000e90:	1bd5      	subs	r5, r2, r7
 8000e92:	45a9      	cmp	r9, r5
 8000e94:	4189      	sbcs	r1, r1
 8000e96:	4662      	mov	r2, ip
 8000e98:	4249      	negs	r1, r1
 8000e9a:	1a9a      	subs	r2, r3, r2
 8000e9c:	1a52      	subs	r2, r2, r1
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	0212      	lsls	r2, r2, #8
 8000ea2:	d532      	bpl.n	8000f0a <__aeabi_dadd+0x63a>
 8000ea4:	464a      	mov	r2, r9
 8000ea6:	1abd      	subs	r5, r7, r2
 8000ea8:	42af      	cmp	r7, r5
 8000eaa:	4189      	sbcs	r1, r1
 8000eac:	4662      	mov	r2, ip
 8000eae:	4249      	negs	r1, r1
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	1a5b      	subs	r3, r3, r1
 8000eb4:	4698      	mov	r8, r3
 8000eb6:	0004      	movs	r4, r0
 8000eb8:	e584      	b.n	80009c4 <__aeabi_dadd+0xf4>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	08f9      	lsrs	r1, r7, #3
 8000ebe:	075a      	lsls	r2, r3, #29
 8000ec0:	4311      	orrs	r1, r2
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	e64e      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000ec6:	08f9      	lsrs	r1, r7, #3
 8000ec8:	0768      	lsls	r0, r5, #29
 8000eca:	4301      	orrs	r1, r0
 8000ecc:	08eb      	lsrs	r3, r5, #3
 8000ece:	e624      	b.n	8000b1a <__aeabi_dadd+0x24a>
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	433a      	orrs	r2, r7
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dadd+0x608>
 8000ed6:	e698      	b.n	8000c0a <__aeabi_dadd+0x33a>
 8000ed8:	464a      	mov	r2, r9
 8000eda:	08d1      	lsrs	r1, r2, #3
 8000edc:	075a      	lsls	r2, r3, #29
 8000ede:	4311      	orrs	r1, r2
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	031b      	lsls	r3, r3, #12
 8000ee6:	421a      	tst	r2, r3
 8000ee8:	d008      	beq.n	8000efc <__aeabi_dadd+0x62c>
 8000eea:	4660      	mov	r0, ip
 8000eec:	08c5      	lsrs	r5, r0, #3
 8000eee:	421d      	tst	r5, r3
 8000ef0:	d104      	bne.n	8000efc <__aeabi_dadd+0x62c>
 8000ef2:	4654      	mov	r4, sl
 8000ef4:	002a      	movs	r2, r5
 8000ef6:	08f9      	lsrs	r1, r7, #3
 8000ef8:	0743      	lsls	r3, r0, #29
 8000efa:	4319      	orrs	r1, r3
 8000efc:	0f4b      	lsrs	r3, r1, #29
 8000efe:	00c9      	lsls	r1, r1, #3
 8000f00:	075b      	lsls	r3, r3, #29
 8000f02:	08c9      	lsrs	r1, r1, #3
 8000f04:	4319      	orrs	r1, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	e62c      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000f0a:	4641      	mov	r1, r8
 8000f0c:	4329      	orrs	r1, r5
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_dadd+0x642>
 8000f10:	e5fa      	b.n	8000b08 <__aeabi_dadd+0x238>
 8000f12:	2300      	movs	r3, #0
 8000f14:	000a      	movs	r2, r1
 8000f16:	2400      	movs	r4, #0
 8000f18:	e602      	b.n	8000b20 <__aeabi_dadd+0x250>
 8000f1a:	076b      	lsls	r3, r5, #29
 8000f1c:	08f9      	lsrs	r1, r7, #3
 8000f1e:	4319      	orrs	r1, r3
 8000f20:	08eb      	lsrs	r3, r5, #3
 8000f22:	e5fd      	b.n	8000b20 <__aeabi_dadd+0x250>
 8000f24:	4663      	mov	r3, ip
 8000f26:	08f9      	lsrs	r1, r7, #3
 8000f28:	075b      	lsls	r3, r3, #29
 8000f2a:	4319      	orrs	r1, r3
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	0004      	movs	r4, r0
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	e617      	b.n	8000b64 <__aeabi_dadd+0x294>
 8000f34:	003d      	movs	r5, r7
 8000f36:	444d      	add	r5, r9
 8000f38:	4463      	add	r3, ip
 8000f3a:	454d      	cmp	r5, r9
 8000f3c:	4189      	sbcs	r1, r1
 8000f3e:	4698      	mov	r8, r3
 8000f40:	4249      	negs	r1, r1
 8000f42:	4488      	add	r8, r1
 8000f44:	4643      	mov	r3, r8
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	d400      	bmi.n	8000f4c <__aeabi_dadd+0x67c>
 8000f4a:	e5dd      	b.n	8000b08 <__aeabi_dadd+0x238>
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <__aeabi_dadd+0x6d0>)
 8000f50:	2601      	movs	r6, #1
 8000f52:	401a      	ands	r2, r3
 8000f54:	4690      	mov	r8, r2
 8000f56:	e5d7      	b.n	8000b08 <__aeabi_dadd+0x238>
 8000f58:	0010      	movs	r0, r2
 8000f5a:	001e      	movs	r6, r3
 8000f5c:	3820      	subs	r0, #32
 8000f5e:	40c6      	lsrs	r6, r0
 8000f60:	2a20      	cmp	r2, #32
 8000f62:	d005      	beq.n	8000f70 <__aeabi_dadd+0x6a0>
 8000f64:	2040      	movs	r0, #64	; 0x40
 8000f66:	1a82      	subs	r2, r0, r2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	464a      	mov	r2, r9
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	4691      	mov	r9, r2
 8000f70:	464d      	mov	r5, r9
 8000f72:	1e6b      	subs	r3, r5, #1
 8000f74:	419d      	sbcs	r5, r3
 8000f76:	4335      	orrs	r5, r6
 8000f78:	e621      	b.n	8000bbe <__aeabi_dadd+0x2ee>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e540      	b.n	8000a04 <__aeabi_dadd+0x134>
 8000f82:	464a      	mov	r2, r9
 8000f84:	19d5      	adds	r5, r2, r7
 8000f86:	42bd      	cmp	r5, r7
 8000f88:	4189      	sbcs	r1, r1
 8000f8a:	4463      	add	r3, ip
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	4249      	negs	r1, r1
 8000f90:	4488      	add	r8, r1
 8000f92:	e5b3      	b.n	8000afc <__aeabi_dadd+0x22c>
 8000f94:	2100      	movs	r1, #0
 8000f96:	4a01      	ldr	r2, [pc, #4]	; (8000f9c <__aeabi_dadd+0x6cc>)
 8000f98:	000b      	movs	r3, r1
 8000f9a:	e533      	b.n	8000a04 <__aeabi_dadd+0x134>
 8000f9c:	000007ff 	.word	0x000007ff
 8000fa0:	ff7fffff 	.word	0xff7fffff

08000fa4 <__aeabi_ddiv>:
 8000fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa6:	4657      	mov	r7, sl
 8000fa8:	464e      	mov	r6, r9
 8000faa:	4645      	mov	r5, r8
 8000fac:	46de      	mov	lr, fp
 8000fae:	b5e0      	push	{r5, r6, r7, lr}
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	0005      	movs	r5, r0
 8000fb4:	030c      	lsls	r4, r1, #12
 8000fb6:	0048      	lsls	r0, r1, #1
 8000fb8:	4692      	mov	sl, r2
 8000fba:	001f      	movs	r7, r3
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	0b24      	lsrs	r4, r4, #12
 8000fc0:	0d40      	lsrs	r0, r0, #21
 8000fc2:	0fce      	lsrs	r6, r1, #31
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d059      	beq.n	800107c <__aeabi_ddiv+0xd8>
 8000fc8:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <__aeabi_ddiv+0x244>)
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0x2c>
 8000fce:	e098      	b.n	8001102 <__aeabi_ddiv+0x15e>
 8000fd0:	0f6b      	lsrs	r3, r5, #29
 8000fd2:	00e4      	lsls	r4, r4, #3
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	041b      	lsls	r3, r3, #16
 8000fda:	4323      	orrs	r3, r4
 8000fdc:	4698      	mov	r8, r3
 8000fde:	4b83      	ldr	r3, [pc, #524]	; (80011ec <__aeabi_ddiv+0x248>)
 8000fe0:	00ed      	lsls	r5, r5, #3
 8000fe2:	469b      	mov	fp, r3
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4699      	mov	r9, r3
 8000fe8:	4483      	add	fp, r0
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	033c      	lsls	r4, r7, #12
 8000fee:	007b      	lsls	r3, r7, #1
 8000ff0:	4650      	mov	r0, sl
 8000ff2:	0b24      	lsrs	r4, r4, #12
 8000ff4:	0d5b      	lsrs	r3, r3, #21
 8000ff6:	0fff      	lsrs	r7, r7, #31
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d067      	beq.n	80010cc <__aeabi_ddiv+0x128>
 8000ffc:	4a7a      	ldr	r2, [pc, #488]	; (80011e8 <__aeabi_ddiv+0x244>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d018      	beq.n	8001034 <__aeabi_ddiv+0x90>
 8001002:	497a      	ldr	r1, [pc, #488]	; (80011ec <__aeabi_ddiv+0x248>)
 8001004:	0f42      	lsrs	r2, r0, #29
 8001006:	468c      	mov	ip, r1
 8001008:	00e4      	lsls	r4, r4, #3
 800100a:	4659      	mov	r1, fp
 800100c:	4314      	orrs	r4, r2
 800100e:	2280      	movs	r2, #128	; 0x80
 8001010:	4463      	add	r3, ip
 8001012:	0412      	lsls	r2, r2, #16
 8001014:	1acb      	subs	r3, r1, r3
 8001016:	4314      	orrs	r4, r2
 8001018:	469b      	mov	fp, r3
 800101a:	00c2      	lsls	r2, r0, #3
 800101c:	2000      	movs	r0, #0
 800101e:	0033      	movs	r3, r6
 8001020:	407b      	eors	r3, r7
 8001022:	469a      	mov	sl, r3
 8001024:	464b      	mov	r3, r9
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d900      	bls.n	800102c <__aeabi_ddiv+0x88>
 800102a:	e0ef      	b.n	800120c <__aeabi_ddiv+0x268>
 800102c:	4970      	ldr	r1, [pc, #448]	; (80011f0 <__aeabi_ddiv+0x24c>)
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	58cb      	ldr	r3, [r1, r3]
 8001032:	469f      	mov	pc, r3
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <__aeabi_ddiv+0x250>)
 8001036:	4652      	mov	r2, sl
 8001038:	469c      	mov	ip, r3
 800103a:	4322      	orrs	r2, r4
 800103c:	44e3      	add	fp, ip
 800103e:	2a00      	cmp	r2, #0
 8001040:	d000      	beq.n	8001044 <__aeabi_ddiv+0xa0>
 8001042:	e095      	b.n	8001170 <__aeabi_ddiv+0x1cc>
 8001044:	4649      	mov	r1, r9
 8001046:	2302      	movs	r3, #2
 8001048:	4319      	orrs	r1, r3
 800104a:	4689      	mov	r9, r1
 800104c:	2400      	movs	r4, #0
 800104e:	2002      	movs	r0, #2
 8001050:	e7e5      	b.n	800101e <__aeabi_ddiv+0x7a>
 8001052:	2300      	movs	r3, #0
 8001054:	2400      	movs	r4, #0
 8001056:	2500      	movs	r5, #0
 8001058:	4652      	mov	r2, sl
 800105a:	051b      	lsls	r3, r3, #20
 800105c:	4323      	orrs	r3, r4
 800105e:	07d2      	lsls	r2, r2, #31
 8001060:	4313      	orrs	r3, r2
 8001062:	0028      	movs	r0, r5
 8001064:	0019      	movs	r1, r3
 8001066:	b005      	add	sp, #20
 8001068:	bcf0      	pop	{r4, r5, r6, r7}
 800106a:	46bb      	mov	fp, r7
 800106c:	46b2      	mov	sl, r6
 800106e:	46a9      	mov	r9, r5
 8001070:	46a0      	mov	r8, r4
 8001072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001074:	2400      	movs	r4, #0
 8001076:	2500      	movs	r5, #0
 8001078:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <__aeabi_ddiv+0x244>)
 800107a:	e7ed      	b.n	8001058 <__aeabi_ddiv+0xb4>
 800107c:	464b      	mov	r3, r9
 800107e:	4323      	orrs	r3, r4
 8001080:	4698      	mov	r8, r3
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0xe2>
 8001084:	e089      	b.n	800119a <__aeabi_ddiv+0x1f6>
 8001086:	2c00      	cmp	r4, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0xe8>
 800108a:	e1e0      	b.n	800144e <__aeabi_ddiv+0x4aa>
 800108c:	0020      	movs	r0, r4
 800108e:	f000 ff47 	bl	8001f20 <__clzsi2>
 8001092:	0001      	movs	r1, r0
 8001094:	0002      	movs	r2, r0
 8001096:	390b      	subs	r1, #11
 8001098:	231d      	movs	r3, #29
 800109a:	1a5b      	subs	r3, r3, r1
 800109c:	4649      	mov	r1, r9
 800109e:	0010      	movs	r0, r2
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	3808      	subs	r0, #8
 80010a4:	4084      	lsls	r4, r0
 80010a6:	000b      	movs	r3, r1
 80010a8:	464d      	mov	r5, r9
 80010aa:	4323      	orrs	r3, r4
 80010ac:	4698      	mov	r8, r3
 80010ae:	4085      	lsls	r5, r0
 80010b0:	4851      	ldr	r0, [pc, #324]	; (80011f8 <__aeabi_ddiv+0x254>)
 80010b2:	033c      	lsls	r4, r7, #12
 80010b4:	1a83      	subs	r3, r0, r2
 80010b6:	469b      	mov	fp, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	4699      	mov	r9, r3
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	007b      	lsls	r3, r7, #1
 80010c0:	4650      	mov	r0, sl
 80010c2:	0b24      	lsrs	r4, r4, #12
 80010c4:	0d5b      	lsrs	r3, r3, #21
 80010c6:	0fff      	lsrs	r7, r7, #31
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d197      	bne.n	8000ffc <__aeabi_ddiv+0x58>
 80010cc:	4652      	mov	r2, sl
 80010ce:	4322      	orrs	r2, r4
 80010d0:	d055      	beq.n	800117e <__aeabi_ddiv+0x1da>
 80010d2:	2c00      	cmp	r4, #0
 80010d4:	d100      	bne.n	80010d8 <__aeabi_ddiv+0x134>
 80010d6:	e1ca      	b.n	800146e <__aeabi_ddiv+0x4ca>
 80010d8:	0020      	movs	r0, r4
 80010da:	f000 ff21 	bl	8001f20 <__clzsi2>
 80010de:	0002      	movs	r2, r0
 80010e0:	3a0b      	subs	r2, #11
 80010e2:	231d      	movs	r3, #29
 80010e4:	0001      	movs	r1, r0
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	4652      	mov	r2, sl
 80010ea:	3908      	subs	r1, #8
 80010ec:	40da      	lsrs	r2, r3
 80010ee:	408c      	lsls	r4, r1
 80010f0:	4314      	orrs	r4, r2
 80010f2:	4652      	mov	r2, sl
 80010f4:	408a      	lsls	r2, r1
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <__aeabi_ddiv+0x258>)
 80010f8:	4458      	add	r0, fp
 80010fa:	469b      	mov	fp, r3
 80010fc:	4483      	add	fp, r0
 80010fe:	2000      	movs	r0, #0
 8001100:	e78d      	b.n	800101e <__aeabi_ddiv+0x7a>
 8001102:	464b      	mov	r3, r9
 8001104:	4323      	orrs	r3, r4
 8001106:	4698      	mov	r8, r3
 8001108:	d140      	bne.n	800118c <__aeabi_ddiv+0x1e8>
 800110a:	2308      	movs	r3, #8
 800110c:	4699      	mov	r9, r3
 800110e:	3b06      	subs	r3, #6
 8001110:	2500      	movs	r5, #0
 8001112:	4683      	mov	fp, r0
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	e769      	b.n	8000fec <__aeabi_ddiv+0x48>
 8001118:	46b2      	mov	sl, r6
 800111a:	9b00      	ldr	r3, [sp, #0]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d0a9      	beq.n	8001074 <__aeabi_ddiv+0xd0>
 8001120:	2b03      	cmp	r3, #3
 8001122:	d100      	bne.n	8001126 <__aeabi_ddiv+0x182>
 8001124:	e211      	b.n	800154a <__aeabi_ddiv+0x5a6>
 8001126:	2b01      	cmp	r3, #1
 8001128:	d093      	beq.n	8001052 <__aeabi_ddiv+0xae>
 800112a:	4a35      	ldr	r2, [pc, #212]	; (8001200 <__aeabi_ddiv+0x25c>)
 800112c:	445a      	add	r2, fp
 800112e:	2a00      	cmp	r2, #0
 8001130:	dc00      	bgt.n	8001134 <__aeabi_ddiv+0x190>
 8001132:	e13c      	b.n	80013ae <__aeabi_ddiv+0x40a>
 8001134:	076b      	lsls	r3, r5, #29
 8001136:	d000      	beq.n	800113a <__aeabi_ddiv+0x196>
 8001138:	e1a7      	b.n	800148a <__aeabi_ddiv+0x4e6>
 800113a:	08ed      	lsrs	r5, r5, #3
 800113c:	4643      	mov	r3, r8
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	d506      	bpl.n	8001150 <__aeabi_ddiv+0x1ac>
 8001142:	4642      	mov	r2, r8
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <__aeabi_ddiv+0x260>)
 8001146:	401a      	ands	r2, r3
 8001148:	4690      	mov	r8, r2
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	00d2      	lsls	r2, r2, #3
 800114e:	445a      	add	r2, fp
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <__aeabi_ddiv+0x264>)
 8001152:	429a      	cmp	r2, r3
 8001154:	dc8e      	bgt.n	8001074 <__aeabi_ddiv+0xd0>
 8001156:	4643      	mov	r3, r8
 8001158:	0552      	lsls	r2, r2, #21
 800115a:	0758      	lsls	r0, r3, #29
 800115c:	025c      	lsls	r4, r3, #9
 800115e:	4305      	orrs	r5, r0
 8001160:	0b24      	lsrs	r4, r4, #12
 8001162:	0d53      	lsrs	r3, r2, #21
 8001164:	e778      	b.n	8001058 <__aeabi_ddiv+0xb4>
 8001166:	46ba      	mov	sl, r7
 8001168:	46a0      	mov	r8, r4
 800116a:	0015      	movs	r5, r2
 800116c:	9000      	str	r0, [sp, #0]
 800116e:	e7d4      	b.n	800111a <__aeabi_ddiv+0x176>
 8001170:	464a      	mov	r2, r9
 8001172:	2303      	movs	r3, #3
 8001174:	431a      	orrs	r2, r3
 8001176:	4691      	mov	r9, r2
 8001178:	2003      	movs	r0, #3
 800117a:	4652      	mov	r2, sl
 800117c:	e74f      	b.n	800101e <__aeabi_ddiv+0x7a>
 800117e:	4649      	mov	r1, r9
 8001180:	2301      	movs	r3, #1
 8001182:	4319      	orrs	r1, r3
 8001184:	4689      	mov	r9, r1
 8001186:	2400      	movs	r4, #0
 8001188:	2001      	movs	r0, #1
 800118a:	e748      	b.n	800101e <__aeabi_ddiv+0x7a>
 800118c:	230c      	movs	r3, #12
 800118e:	4699      	mov	r9, r3
 8001190:	3b09      	subs	r3, #9
 8001192:	46a0      	mov	r8, r4
 8001194:	4683      	mov	fp, r0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e728      	b.n	8000fec <__aeabi_ddiv+0x48>
 800119a:	2304      	movs	r3, #4
 800119c:	4699      	mov	r9, r3
 800119e:	2300      	movs	r3, #0
 80011a0:	469b      	mov	fp, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	2500      	movs	r5, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	e720      	b.n	8000fec <__aeabi_ddiv+0x48>
 80011aa:	2300      	movs	r3, #0
 80011ac:	2480      	movs	r4, #128	; 0x80
 80011ae:	469a      	mov	sl, r3
 80011b0:	2500      	movs	r5, #0
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <__aeabi_ddiv+0x244>)
 80011b4:	0324      	lsls	r4, r4, #12
 80011b6:	e74f      	b.n	8001058 <__aeabi_ddiv+0xb4>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	4641      	mov	r1, r8
 80011bc:	031b      	lsls	r3, r3, #12
 80011be:	4219      	tst	r1, r3
 80011c0:	d008      	beq.n	80011d4 <__aeabi_ddiv+0x230>
 80011c2:	421c      	tst	r4, r3
 80011c4:	d106      	bne.n	80011d4 <__aeabi_ddiv+0x230>
 80011c6:	431c      	orrs	r4, r3
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	46ba      	mov	sl, r7
 80011cc:	0015      	movs	r5, r2
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <__aeabi_ddiv+0x244>)
 80011d0:	0b24      	lsrs	r4, r4, #12
 80011d2:	e741      	b.n	8001058 <__aeabi_ddiv+0xb4>
 80011d4:	2480      	movs	r4, #128	; 0x80
 80011d6:	4643      	mov	r3, r8
 80011d8:	0324      	lsls	r4, r4, #12
 80011da:	431c      	orrs	r4, r3
 80011dc:	0324      	lsls	r4, r4, #12
 80011de:	46b2      	mov	sl, r6
 80011e0:	4b01      	ldr	r3, [pc, #4]	; (80011e8 <__aeabi_ddiv+0x244>)
 80011e2:	0b24      	lsrs	r4, r4, #12
 80011e4:	e738      	b.n	8001058 <__aeabi_ddiv+0xb4>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08006aa0 	.word	0x08006aa0
 80011f4:	fffff801 	.word	0xfffff801
 80011f8:	fffffc0d 	.word	0xfffffc0d
 80011fc:	000003f3 	.word	0x000003f3
 8001200:	000003ff 	.word	0x000003ff
 8001204:	feffffff 	.word	0xfeffffff
 8001208:	000007fe 	.word	0x000007fe
 800120c:	4544      	cmp	r4, r8
 800120e:	d200      	bcs.n	8001212 <__aeabi_ddiv+0x26e>
 8001210:	e116      	b.n	8001440 <__aeabi_ddiv+0x49c>
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x272>
 8001214:	e111      	b.n	800143a <__aeabi_ddiv+0x496>
 8001216:	2301      	movs	r3, #1
 8001218:	425b      	negs	r3, r3
 800121a:	469c      	mov	ip, r3
 800121c:	002e      	movs	r6, r5
 800121e:	4640      	mov	r0, r8
 8001220:	2500      	movs	r5, #0
 8001222:	44e3      	add	fp, ip
 8001224:	0223      	lsls	r3, r4, #8
 8001226:	0e14      	lsrs	r4, r2, #24
 8001228:	431c      	orrs	r4, r3
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	4699      	mov	r9, r3
 800122e:	0423      	lsls	r3, r4, #16
 8001230:	0c1f      	lsrs	r7, r3, #16
 8001232:	0212      	lsls	r2, r2, #8
 8001234:	4649      	mov	r1, r9
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	9701      	str	r7, [sp, #4]
 800123a:	f7fe ffeb 	bl	8000214 <__aeabi_uidivmod>
 800123e:	0002      	movs	r2, r0
 8001240:	437a      	muls	r2, r7
 8001242:	040b      	lsls	r3, r1, #16
 8001244:	0c31      	lsrs	r1, r6, #16
 8001246:	4680      	mov	r8, r0
 8001248:	4319      	orrs	r1, r3
 800124a:	428a      	cmp	r2, r1
 800124c:	d90b      	bls.n	8001266 <__aeabi_ddiv+0x2c2>
 800124e:	2301      	movs	r3, #1
 8001250:	425b      	negs	r3, r3
 8001252:	469c      	mov	ip, r3
 8001254:	1909      	adds	r1, r1, r4
 8001256:	44e0      	add	r8, ip
 8001258:	428c      	cmp	r4, r1
 800125a:	d804      	bhi.n	8001266 <__aeabi_ddiv+0x2c2>
 800125c:	428a      	cmp	r2, r1
 800125e:	d902      	bls.n	8001266 <__aeabi_ddiv+0x2c2>
 8001260:	1e83      	subs	r3, r0, #2
 8001262:	4698      	mov	r8, r3
 8001264:	1909      	adds	r1, r1, r4
 8001266:	1a88      	subs	r0, r1, r2
 8001268:	4649      	mov	r1, r9
 800126a:	f7fe ffd3 	bl	8000214 <__aeabi_uidivmod>
 800126e:	0409      	lsls	r1, r1, #16
 8001270:	468c      	mov	ip, r1
 8001272:	0431      	lsls	r1, r6, #16
 8001274:	4666      	mov	r6, ip
 8001276:	9a01      	ldr	r2, [sp, #4]
 8001278:	0c09      	lsrs	r1, r1, #16
 800127a:	4342      	muls	r2, r0
 800127c:	0003      	movs	r3, r0
 800127e:	4331      	orrs	r1, r6
 8001280:	428a      	cmp	r2, r1
 8001282:	d904      	bls.n	800128e <__aeabi_ddiv+0x2ea>
 8001284:	1909      	adds	r1, r1, r4
 8001286:	3b01      	subs	r3, #1
 8001288:	428c      	cmp	r4, r1
 800128a:	d800      	bhi.n	800128e <__aeabi_ddiv+0x2ea>
 800128c:	e111      	b.n	80014b2 <__aeabi_ddiv+0x50e>
 800128e:	1a89      	subs	r1, r1, r2
 8001290:	4642      	mov	r2, r8
 8001292:	9e00      	ldr	r6, [sp, #0]
 8001294:	0412      	lsls	r2, r2, #16
 8001296:	431a      	orrs	r2, r3
 8001298:	0c33      	lsrs	r3, r6, #16
 800129a:	001f      	movs	r7, r3
 800129c:	0c10      	lsrs	r0, r2, #16
 800129e:	4690      	mov	r8, r2
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	0413      	lsls	r3, r2, #16
 80012a4:	0432      	lsls	r2, r6, #16
 80012a6:	0c16      	lsrs	r6, r2, #16
 80012a8:	0032      	movs	r2, r6
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	435a      	muls	r2, r3
 80012ae:	9603      	str	r6, [sp, #12]
 80012b0:	437b      	muls	r3, r7
 80012b2:	4346      	muls	r6, r0
 80012b4:	4378      	muls	r0, r7
 80012b6:	0c17      	lsrs	r7, r2, #16
 80012b8:	46bc      	mov	ip, r7
 80012ba:	199b      	adds	r3, r3, r6
 80012bc:	4463      	add	r3, ip
 80012be:	429e      	cmp	r6, r3
 80012c0:	d903      	bls.n	80012ca <__aeabi_ddiv+0x326>
 80012c2:	2680      	movs	r6, #128	; 0x80
 80012c4:	0276      	lsls	r6, r6, #9
 80012c6:	46b4      	mov	ip, r6
 80012c8:	4460      	add	r0, ip
 80012ca:	0c1e      	lsrs	r6, r3, #16
 80012cc:	1830      	adds	r0, r6, r0
 80012ce:	0416      	lsls	r6, r2, #16
 80012d0:	041b      	lsls	r3, r3, #16
 80012d2:	0c36      	lsrs	r6, r6, #16
 80012d4:	199e      	adds	r6, r3, r6
 80012d6:	4281      	cmp	r1, r0
 80012d8:	d200      	bcs.n	80012dc <__aeabi_ddiv+0x338>
 80012da:	e09c      	b.n	8001416 <__aeabi_ddiv+0x472>
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x33c>
 80012de:	e097      	b.n	8001410 <__aeabi_ddiv+0x46c>
 80012e0:	1bae      	subs	r6, r5, r6
 80012e2:	1a09      	subs	r1, r1, r0
 80012e4:	42b5      	cmp	r5, r6
 80012e6:	4180      	sbcs	r0, r0
 80012e8:	4240      	negs	r0, r0
 80012ea:	1a08      	subs	r0, r1, r0
 80012ec:	4284      	cmp	r4, r0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x34e>
 80012f0:	e111      	b.n	8001516 <__aeabi_ddiv+0x572>
 80012f2:	4649      	mov	r1, r9
 80012f4:	f7fe ff8e 	bl	8000214 <__aeabi_uidivmod>
 80012f8:	9a01      	ldr	r2, [sp, #4]
 80012fa:	040b      	lsls	r3, r1, #16
 80012fc:	4342      	muls	r2, r0
 80012fe:	0c31      	lsrs	r1, r6, #16
 8001300:	0005      	movs	r5, r0
 8001302:	4319      	orrs	r1, r3
 8001304:	428a      	cmp	r2, r1
 8001306:	d907      	bls.n	8001318 <__aeabi_ddiv+0x374>
 8001308:	1909      	adds	r1, r1, r4
 800130a:	3d01      	subs	r5, #1
 800130c:	428c      	cmp	r4, r1
 800130e:	d803      	bhi.n	8001318 <__aeabi_ddiv+0x374>
 8001310:	428a      	cmp	r2, r1
 8001312:	d901      	bls.n	8001318 <__aeabi_ddiv+0x374>
 8001314:	1e85      	subs	r5, r0, #2
 8001316:	1909      	adds	r1, r1, r4
 8001318:	1a88      	subs	r0, r1, r2
 800131a:	4649      	mov	r1, r9
 800131c:	f7fe ff7a 	bl	8000214 <__aeabi_uidivmod>
 8001320:	0409      	lsls	r1, r1, #16
 8001322:	468c      	mov	ip, r1
 8001324:	0431      	lsls	r1, r6, #16
 8001326:	4666      	mov	r6, ip
 8001328:	9a01      	ldr	r2, [sp, #4]
 800132a:	0c09      	lsrs	r1, r1, #16
 800132c:	4342      	muls	r2, r0
 800132e:	0003      	movs	r3, r0
 8001330:	4331      	orrs	r1, r6
 8001332:	428a      	cmp	r2, r1
 8001334:	d907      	bls.n	8001346 <__aeabi_ddiv+0x3a2>
 8001336:	1909      	adds	r1, r1, r4
 8001338:	3b01      	subs	r3, #1
 800133a:	428c      	cmp	r4, r1
 800133c:	d803      	bhi.n	8001346 <__aeabi_ddiv+0x3a2>
 800133e:	428a      	cmp	r2, r1
 8001340:	d901      	bls.n	8001346 <__aeabi_ddiv+0x3a2>
 8001342:	1e83      	subs	r3, r0, #2
 8001344:	1909      	adds	r1, r1, r4
 8001346:	9e03      	ldr	r6, [sp, #12]
 8001348:	1a89      	subs	r1, r1, r2
 800134a:	0032      	movs	r2, r6
 800134c:	042d      	lsls	r5, r5, #16
 800134e:	431d      	orrs	r5, r3
 8001350:	9f02      	ldr	r7, [sp, #8]
 8001352:	042b      	lsls	r3, r5, #16
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	435a      	muls	r2, r3
 8001358:	437b      	muls	r3, r7
 800135a:	469c      	mov	ip, r3
 800135c:	0c28      	lsrs	r0, r5, #16
 800135e:	4346      	muls	r6, r0
 8001360:	0c13      	lsrs	r3, r2, #16
 8001362:	44b4      	add	ip, r6
 8001364:	4463      	add	r3, ip
 8001366:	4378      	muls	r0, r7
 8001368:	429e      	cmp	r6, r3
 800136a:	d903      	bls.n	8001374 <__aeabi_ddiv+0x3d0>
 800136c:	2680      	movs	r6, #128	; 0x80
 800136e:	0276      	lsls	r6, r6, #9
 8001370:	46b4      	mov	ip, r6
 8001372:	4460      	add	r0, ip
 8001374:	0c1e      	lsrs	r6, r3, #16
 8001376:	0412      	lsls	r2, r2, #16
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	0c12      	lsrs	r2, r2, #16
 800137c:	1830      	adds	r0, r6, r0
 800137e:	189b      	adds	r3, r3, r2
 8001380:	4281      	cmp	r1, r0
 8001382:	d306      	bcc.n	8001392 <__aeabi_ddiv+0x3ee>
 8001384:	d002      	beq.n	800138c <__aeabi_ddiv+0x3e8>
 8001386:	2301      	movs	r3, #1
 8001388:	431d      	orrs	r5, r3
 800138a:	e6ce      	b.n	800112a <__aeabi_ddiv+0x186>
 800138c:	2b00      	cmp	r3, #0
 800138e:	d100      	bne.n	8001392 <__aeabi_ddiv+0x3ee>
 8001390:	e6cb      	b.n	800112a <__aeabi_ddiv+0x186>
 8001392:	1861      	adds	r1, r4, r1
 8001394:	1e6e      	subs	r6, r5, #1
 8001396:	42a1      	cmp	r1, r4
 8001398:	d200      	bcs.n	800139c <__aeabi_ddiv+0x3f8>
 800139a:	e0a4      	b.n	80014e6 <__aeabi_ddiv+0x542>
 800139c:	4281      	cmp	r1, r0
 800139e:	d200      	bcs.n	80013a2 <__aeabi_ddiv+0x3fe>
 80013a0:	e0c9      	b.n	8001536 <__aeabi_ddiv+0x592>
 80013a2:	d100      	bne.n	80013a6 <__aeabi_ddiv+0x402>
 80013a4:	e0d9      	b.n	800155a <__aeabi_ddiv+0x5b6>
 80013a6:	0035      	movs	r5, r6
 80013a8:	e7ed      	b.n	8001386 <__aeabi_ddiv+0x3e2>
 80013aa:	2501      	movs	r5, #1
 80013ac:	426d      	negs	r5, r5
 80013ae:	2101      	movs	r1, #1
 80013b0:	1a89      	subs	r1, r1, r2
 80013b2:	2938      	cmp	r1, #56	; 0x38
 80013b4:	dd00      	ble.n	80013b8 <__aeabi_ddiv+0x414>
 80013b6:	e64c      	b.n	8001052 <__aeabi_ddiv+0xae>
 80013b8:	291f      	cmp	r1, #31
 80013ba:	dc00      	bgt.n	80013be <__aeabi_ddiv+0x41a>
 80013bc:	e07f      	b.n	80014be <__aeabi_ddiv+0x51a>
 80013be:	231f      	movs	r3, #31
 80013c0:	425b      	negs	r3, r3
 80013c2:	1a9a      	subs	r2, r3, r2
 80013c4:	4643      	mov	r3, r8
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	2920      	cmp	r1, #32
 80013ca:	d004      	beq.n	80013d6 <__aeabi_ddiv+0x432>
 80013cc:	4644      	mov	r4, r8
 80013ce:	4a65      	ldr	r2, [pc, #404]	; (8001564 <__aeabi_ddiv+0x5c0>)
 80013d0:	445a      	add	r2, fp
 80013d2:	4094      	lsls	r4, r2
 80013d4:	4325      	orrs	r5, r4
 80013d6:	1e6a      	subs	r2, r5, #1
 80013d8:	4195      	sbcs	r5, r2
 80013da:	2207      	movs	r2, #7
 80013dc:	432b      	orrs	r3, r5
 80013de:	0015      	movs	r5, r2
 80013e0:	2400      	movs	r4, #0
 80013e2:	401d      	ands	r5, r3
 80013e4:	421a      	tst	r2, r3
 80013e6:	d100      	bne.n	80013ea <__aeabi_ddiv+0x446>
 80013e8:	e0a1      	b.n	800152e <__aeabi_ddiv+0x58a>
 80013ea:	220f      	movs	r2, #15
 80013ec:	2400      	movs	r4, #0
 80013ee:	401a      	ands	r2, r3
 80013f0:	2a04      	cmp	r2, #4
 80013f2:	d100      	bne.n	80013f6 <__aeabi_ddiv+0x452>
 80013f4:	e098      	b.n	8001528 <__aeabi_ddiv+0x584>
 80013f6:	1d1a      	adds	r2, r3, #4
 80013f8:	429a      	cmp	r2, r3
 80013fa:	419b      	sbcs	r3, r3
 80013fc:	425b      	negs	r3, r3
 80013fe:	18e4      	adds	r4, r4, r3
 8001400:	0013      	movs	r3, r2
 8001402:	0222      	lsls	r2, r4, #8
 8001404:	d400      	bmi.n	8001408 <__aeabi_ddiv+0x464>
 8001406:	e08f      	b.n	8001528 <__aeabi_ddiv+0x584>
 8001408:	2301      	movs	r3, #1
 800140a:	2400      	movs	r4, #0
 800140c:	2500      	movs	r5, #0
 800140e:	e623      	b.n	8001058 <__aeabi_ddiv+0xb4>
 8001410:	42b5      	cmp	r5, r6
 8001412:	d300      	bcc.n	8001416 <__aeabi_ddiv+0x472>
 8001414:	e764      	b.n	80012e0 <__aeabi_ddiv+0x33c>
 8001416:	4643      	mov	r3, r8
 8001418:	1e5a      	subs	r2, r3, #1
 800141a:	9b00      	ldr	r3, [sp, #0]
 800141c:	469c      	mov	ip, r3
 800141e:	4465      	add	r5, ip
 8001420:	001f      	movs	r7, r3
 8001422:	429d      	cmp	r5, r3
 8001424:	419b      	sbcs	r3, r3
 8001426:	425b      	negs	r3, r3
 8001428:	191b      	adds	r3, r3, r4
 800142a:	18c9      	adds	r1, r1, r3
 800142c:	428c      	cmp	r4, r1
 800142e:	d23a      	bcs.n	80014a6 <__aeabi_ddiv+0x502>
 8001430:	4288      	cmp	r0, r1
 8001432:	d863      	bhi.n	80014fc <__aeabi_ddiv+0x558>
 8001434:	d060      	beq.n	80014f8 <__aeabi_ddiv+0x554>
 8001436:	4690      	mov	r8, r2
 8001438:	e752      	b.n	80012e0 <__aeabi_ddiv+0x33c>
 800143a:	42aa      	cmp	r2, r5
 800143c:	d900      	bls.n	8001440 <__aeabi_ddiv+0x49c>
 800143e:	e6ea      	b.n	8001216 <__aeabi_ddiv+0x272>
 8001440:	4643      	mov	r3, r8
 8001442:	07de      	lsls	r6, r3, #31
 8001444:	0858      	lsrs	r0, r3, #1
 8001446:	086b      	lsrs	r3, r5, #1
 8001448:	431e      	orrs	r6, r3
 800144a:	07ed      	lsls	r5, r5, #31
 800144c:	e6ea      	b.n	8001224 <__aeabi_ddiv+0x280>
 800144e:	4648      	mov	r0, r9
 8001450:	f000 fd66 	bl	8001f20 <__clzsi2>
 8001454:	0001      	movs	r1, r0
 8001456:	0002      	movs	r2, r0
 8001458:	3115      	adds	r1, #21
 800145a:	3220      	adds	r2, #32
 800145c:	291c      	cmp	r1, #28
 800145e:	dc00      	bgt.n	8001462 <__aeabi_ddiv+0x4be>
 8001460:	e61a      	b.n	8001098 <__aeabi_ddiv+0xf4>
 8001462:	464b      	mov	r3, r9
 8001464:	3808      	subs	r0, #8
 8001466:	4083      	lsls	r3, r0
 8001468:	2500      	movs	r5, #0
 800146a:	4698      	mov	r8, r3
 800146c:	e620      	b.n	80010b0 <__aeabi_ddiv+0x10c>
 800146e:	f000 fd57 	bl	8001f20 <__clzsi2>
 8001472:	0003      	movs	r3, r0
 8001474:	001a      	movs	r2, r3
 8001476:	3215      	adds	r2, #21
 8001478:	3020      	adds	r0, #32
 800147a:	2a1c      	cmp	r2, #28
 800147c:	dc00      	bgt.n	8001480 <__aeabi_ddiv+0x4dc>
 800147e:	e630      	b.n	80010e2 <__aeabi_ddiv+0x13e>
 8001480:	4654      	mov	r4, sl
 8001482:	3b08      	subs	r3, #8
 8001484:	2200      	movs	r2, #0
 8001486:	409c      	lsls	r4, r3
 8001488:	e635      	b.n	80010f6 <__aeabi_ddiv+0x152>
 800148a:	230f      	movs	r3, #15
 800148c:	402b      	ands	r3, r5
 800148e:	2b04      	cmp	r3, #4
 8001490:	d100      	bne.n	8001494 <__aeabi_ddiv+0x4f0>
 8001492:	e652      	b.n	800113a <__aeabi_ddiv+0x196>
 8001494:	2305      	movs	r3, #5
 8001496:	425b      	negs	r3, r3
 8001498:	42ab      	cmp	r3, r5
 800149a:	419b      	sbcs	r3, r3
 800149c:	3504      	adds	r5, #4
 800149e:	425b      	negs	r3, r3
 80014a0:	08ed      	lsrs	r5, r5, #3
 80014a2:	4498      	add	r8, r3
 80014a4:	e64a      	b.n	800113c <__aeabi_ddiv+0x198>
 80014a6:	428c      	cmp	r4, r1
 80014a8:	d1c5      	bne.n	8001436 <__aeabi_ddiv+0x492>
 80014aa:	42af      	cmp	r7, r5
 80014ac:	d9c0      	bls.n	8001430 <__aeabi_ddiv+0x48c>
 80014ae:	4690      	mov	r8, r2
 80014b0:	e716      	b.n	80012e0 <__aeabi_ddiv+0x33c>
 80014b2:	428a      	cmp	r2, r1
 80014b4:	d800      	bhi.n	80014b8 <__aeabi_ddiv+0x514>
 80014b6:	e6ea      	b.n	800128e <__aeabi_ddiv+0x2ea>
 80014b8:	1e83      	subs	r3, r0, #2
 80014ba:	1909      	adds	r1, r1, r4
 80014bc:	e6e7      	b.n	800128e <__aeabi_ddiv+0x2ea>
 80014be:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <__aeabi_ddiv+0x5c4>)
 80014c0:	0028      	movs	r0, r5
 80014c2:	445a      	add	r2, fp
 80014c4:	4643      	mov	r3, r8
 80014c6:	4095      	lsls	r5, r2
 80014c8:	4093      	lsls	r3, r2
 80014ca:	40c8      	lsrs	r0, r1
 80014cc:	1e6a      	subs	r2, r5, #1
 80014ce:	4195      	sbcs	r5, r2
 80014d0:	4644      	mov	r4, r8
 80014d2:	4303      	orrs	r3, r0
 80014d4:	432b      	orrs	r3, r5
 80014d6:	40cc      	lsrs	r4, r1
 80014d8:	075a      	lsls	r2, r3, #29
 80014da:	d092      	beq.n	8001402 <__aeabi_ddiv+0x45e>
 80014dc:	220f      	movs	r2, #15
 80014de:	401a      	ands	r2, r3
 80014e0:	2a04      	cmp	r2, #4
 80014e2:	d188      	bne.n	80013f6 <__aeabi_ddiv+0x452>
 80014e4:	e78d      	b.n	8001402 <__aeabi_ddiv+0x45e>
 80014e6:	0035      	movs	r5, r6
 80014e8:	4281      	cmp	r1, r0
 80014ea:	d000      	beq.n	80014ee <__aeabi_ddiv+0x54a>
 80014ec:	e74b      	b.n	8001386 <__aeabi_ddiv+0x3e2>
 80014ee:	9a00      	ldr	r2, [sp, #0]
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d000      	beq.n	80014f6 <__aeabi_ddiv+0x552>
 80014f4:	e747      	b.n	8001386 <__aeabi_ddiv+0x3e2>
 80014f6:	e618      	b.n	800112a <__aeabi_ddiv+0x186>
 80014f8:	42ae      	cmp	r6, r5
 80014fa:	d99c      	bls.n	8001436 <__aeabi_ddiv+0x492>
 80014fc:	2302      	movs	r3, #2
 80014fe:	425b      	negs	r3, r3
 8001500:	469c      	mov	ip, r3
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	44e0      	add	r8, ip
 8001506:	469c      	mov	ip, r3
 8001508:	4465      	add	r5, ip
 800150a:	429d      	cmp	r5, r3
 800150c:	419b      	sbcs	r3, r3
 800150e:	425b      	negs	r3, r3
 8001510:	191b      	adds	r3, r3, r4
 8001512:	18c9      	adds	r1, r1, r3
 8001514:	e6e4      	b.n	80012e0 <__aeabi_ddiv+0x33c>
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <__aeabi_ddiv+0x5c8>)
 8001518:	445a      	add	r2, fp
 800151a:	2a00      	cmp	r2, #0
 800151c:	dc00      	bgt.n	8001520 <__aeabi_ddiv+0x57c>
 800151e:	e744      	b.n	80013aa <__aeabi_ddiv+0x406>
 8001520:	2301      	movs	r3, #1
 8001522:	2500      	movs	r5, #0
 8001524:	4498      	add	r8, r3
 8001526:	e609      	b.n	800113c <__aeabi_ddiv+0x198>
 8001528:	0765      	lsls	r5, r4, #29
 800152a:	0264      	lsls	r4, r4, #9
 800152c:	0b24      	lsrs	r4, r4, #12
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	431d      	orrs	r5, r3
 8001532:	2300      	movs	r3, #0
 8001534:	e590      	b.n	8001058 <__aeabi_ddiv+0xb4>
 8001536:	9e00      	ldr	r6, [sp, #0]
 8001538:	3d02      	subs	r5, #2
 800153a:	0072      	lsls	r2, r6, #1
 800153c:	42b2      	cmp	r2, r6
 800153e:	41bf      	sbcs	r7, r7
 8001540:	427f      	negs	r7, r7
 8001542:	193c      	adds	r4, r7, r4
 8001544:	1909      	adds	r1, r1, r4
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	e7ce      	b.n	80014e8 <__aeabi_ddiv+0x544>
 800154a:	2480      	movs	r4, #128	; 0x80
 800154c:	4643      	mov	r3, r8
 800154e:	0324      	lsls	r4, r4, #12
 8001550:	431c      	orrs	r4, r3
 8001552:	0324      	lsls	r4, r4, #12
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <__aeabi_ddiv+0x5cc>)
 8001556:	0b24      	lsrs	r4, r4, #12
 8001558:	e57e      	b.n	8001058 <__aeabi_ddiv+0xb4>
 800155a:	9a00      	ldr	r2, [sp, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d3ea      	bcc.n	8001536 <__aeabi_ddiv+0x592>
 8001560:	0035      	movs	r5, r6
 8001562:	e7c4      	b.n	80014ee <__aeabi_ddiv+0x54a>
 8001564:	0000043e 	.word	0x0000043e
 8001568:	0000041e 	.word	0x0000041e
 800156c:	000003ff 	.word	0x000003ff
 8001570:	000007ff 	.word	0x000007ff

08001574 <__aeabi_dsub>:
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	4657      	mov	r7, sl
 8001578:	464e      	mov	r6, r9
 800157a:	4645      	mov	r5, r8
 800157c:	46de      	mov	lr, fp
 800157e:	0004      	movs	r4, r0
 8001580:	b5e0      	push	{r5, r6, r7, lr}
 8001582:	001f      	movs	r7, r3
 8001584:	0010      	movs	r0, r2
 8001586:	030b      	lsls	r3, r1, #12
 8001588:	0f62      	lsrs	r2, r4, #29
 800158a:	004e      	lsls	r6, r1, #1
 800158c:	0fcd      	lsrs	r5, r1, #31
 800158e:	0a5b      	lsrs	r3, r3, #9
 8001590:	0339      	lsls	r1, r7, #12
 8001592:	4313      	orrs	r3, r2
 8001594:	0a49      	lsrs	r1, r1, #9
 8001596:	00e2      	lsls	r2, r4, #3
 8001598:	0f44      	lsrs	r4, r0, #29
 800159a:	4321      	orrs	r1, r4
 800159c:	4cc2      	ldr	r4, [pc, #776]	; (80018a8 <__aeabi_dsub+0x334>)
 800159e:	4691      	mov	r9, r2
 80015a0:	4692      	mov	sl, r2
 80015a2:	00c0      	lsls	r0, r0, #3
 80015a4:	007a      	lsls	r2, r7, #1
 80015a6:	4680      	mov	r8, r0
 80015a8:	0d76      	lsrs	r6, r6, #21
 80015aa:	0d52      	lsrs	r2, r2, #21
 80015ac:	0fff      	lsrs	r7, r7, #31
 80015ae:	42a2      	cmp	r2, r4
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dsub+0x40>
 80015b2:	e0b4      	b.n	800171e <__aeabi_dsub+0x1aa>
 80015b4:	2401      	movs	r4, #1
 80015b6:	4067      	eors	r7, r4
 80015b8:	46bb      	mov	fp, r7
 80015ba:	42bd      	cmp	r5, r7
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dsub+0x4c>
 80015be:	e088      	b.n	80016d2 <__aeabi_dsub+0x15e>
 80015c0:	1ab4      	subs	r4, r6, r2
 80015c2:	46a4      	mov	ip, r4
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	dc00      	bgt.n	80015ca <__aeabi_dsub+0x56>
 80015c8:	e0b2      	b.n	8001730 <__aeabi_dsub+0x1bc>
 80015ca:	2a00      	cmp	r2, #0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dsub+0x5c>
 80015ce:	e0c5      	b.n	800175c <__aeabi_dsub+0x1e8>
 80015d0:	4ab5      	ldr	r2, [pc, #724]	; (80018a8 <__aeabi_dsub+0x334>)
 80015d2:	4296      	cmp	r6, r2
 80015d4:	d100      	bne.n	80015d8 <__aeabi_dsub+0x64>
 80015d6:	e28b      	b.n	8001af0 <__aeabi_dsub+0x57c>
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	0412      	lsls	r2, r2, #16
 80015dc:	4311      	orrs	r1, r2
 80015de:	4662      	mov	r2, ip
 80015e0:	2a38      	cmp	r2, #56	; 0x38
 80015e2:	dd00      	ble.n	80015e6 <__aeabi_dsub+0x72>
 80015e4:	e1a1      	b.n	800192a <__aeabi_dsub+0x3b6>
 80015e6:	2a1f      	cmp	r2, #31
 80015e8:	dd00      	ble.n	80015ec <__aeabi_dsub+0x78>
 80015ea:	e216      	b.n	8001a1a <__aeabi_dsub+0x4a6>
 80015ec:	2720      	movs	r7, #32
 80015ee:	000c      	movs	r4, r1
 80015f0:	1abf      	subs	r7, r7, r2
 80015f2:	40bc      	lsls	r4, r7
 80015f4:	0002      	movs	r2, r0
 80015f6:	46a0      	mov	r8, r4
 80015f8:	4664      	mov	r4, ip
 80015fa:	40b8      	lsls	r0, r7
 80015fc:	40e2      	lsrs	r2, r4
 80015fe:	4644      	mov	r4, r8
 8001600:	4314      	orrs	r4, r2
 8001602:	0002      	movs	r2, r0
 8001604:	1e50      	subs	r0, r2, #1
 8001606:	4182      	sbcs	r2, r0
 8001608:	4660      	mov	r0, ip
 800160a:	40c1      	lsrs	r1, r0
 800160c:	4322      	orrs	r2, r4
 800160e:	1a5b      	subs	r3, r3, r1
 8001610:	4649      	mov	r1, r9
 8001612:	1a8c      	subs	r4, r1, r2
 8001614:	45a1      	cmp	r9, r4
 8001616:	4192      	sbcs	r2, r2
 8001618:	4252      	negs	r2, r2
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	4698      	mov	r8, r3
 800161e:	4643      	mov	r3, r8
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	d400      	bmi.n	8001626 <__aeabi_dsub+0xb2>
 8001624:	e117      	b.n	8001856 <__aeabi_dsub+0x2e2>
 8001626:	4643      	mov	r3, r8
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	0a5b      	lsrs	r3, r3, #9
 800162c:	4698      	mov	r8, r3
 800162e:	4643      	mov	r3, r8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_dsub+0xc2>
 8001634:	e16c      	b.n	8001910 <__aeabi_dsub+0x39c>
 8001636:	4640      	mov	r0, r8
 8001638:	f000 fc72 	bl	8001f20 <__clzsi2>
 800163c:	0002      	movs	r2, r0
 800163e:	3a08      	subs	r2, #8
 8001640:	2120      	movs	r1, #32
 8001642:	0020      	movs	r0, r4
 8001644:	4643      	mov	r3, r8
 8001646:	1a89      	subs	r1, r1, r2
 8001648:	4093      	lsls	r3, r2
 800164a:	40c8      	lsrs	r0, r1
 800164c:	4094      	lsls	r4, r2
 800164e:	4303      	orrs	r3, r0
 8001650:	4296      	cmp	r6, r2
 8001652:	dd00      	ble.n	8001656 <__aeabi_dsub+0xe2>
 8001654:	e157      	b.n	8001906 <__aeabi_dsub+0x392>
 8001656:	1b96      	subs	r6, r2, r6
 8001658:	1c71      	adds	r1, r6, #1
 800165a:	291f      	cmp	r1, #31
 800165c:	dd00      	ble.n	8001660 <__aeabi_dsub+0xec>
 800165e:	e1cb      	b.n	80019f8 <__aeabi_dsub+0x484>
 8001660:	2220      	movs	r2, #32
 8001662:	0018      	movs	r0, r3
 8001664:	0026      	movs	r6, r4
 8001666:	1a52      	subs	r2, r2, r1
 8001668:	4094      	lsls	r4, r2
 800166a:	4090      	lsls	r0, r2
 800166c:	40ce      	lsrs	r6, r1
 800166e:	40cb      	lsrs	r3, r1
 8001670:	1e62      	subs	r2, r4, #1
 8001672:	4194      	sbcs	r4, r2
 8001674:	4330      	orrs	r0, r6
 8001676:	4698      	mov	r8, r3
 8001678:	2600      	movs	r6, #0
 800167a:	4304      	orrs	r4, r0
 800167c:	0763      	lsls	r3, r4, #29
 800167e:	d009      	beq.n	8001694 <__aeabi_dsub+0x120>
 8001680:	230f      	movs	r3, #15
 8001682:	4023      	ands	r3, r4
 8001684:	2b04      	cmp	r3, #4
 8001686:	d005      	beq.n	8001694 <__aeabi_dsub+0x120>
 8001688:	1d23      	adds	r3, r4, #4
 800168a:	42a3      	cmp	r3, r4
 800168c:	41a4      	sbcs	r4, r4
 800168e:	4264      	negs	r4, r4
 8001690:	44a0      	add	r8, r4
 8001692:	001c      	movs	r4, r3
 8001694:	4643      	mov	r3, r8
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	d400      	bmi.n	800169c <__aeabi_dsub+0x128>
 800169a:	e0df      	b.n	800185c <__aeabi_dsub+0x2e8>
 800169c:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <__aeabi_dsub+0x334>)
 800169e:	3601      	adds	r6, #1
 80016a0:	429e      	cmp	r6, r3
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dsub+0x132>
 80016a4:	e0fb      	b.n	800189e <__aeabi_dsub+0x32a>
 80016a6:	4642      	mov	r2, r8
 80016a8:	4b80      	ldr	r3, [pc, #512]	; (80018ac <__aeabi_dsub+0x338>)
 80016aa:	08e4      	lsrs	r4, r4, #3
 80016ac:	401a      	ands	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	0571      	lsls	r1, r6, #21
 80016b2:	0752      	lsls	r2, r2, #29
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4322      	orrs	r2, r4
 80016b8:	0b1b      	lsrs	r3, r3, #12
 80016ba:	0d49      	lsrs	r1, r1, #21
 80016bc:	0509      	lsls	r1, r1, #20
 80016be:	07ed      	lsls	r5, r5, #31
 80016c0:	4319      	orrs	r1, r3
 80016c2:	4329      	orrs	r1, r5
 80016c4:	0010      	movs	r0, r2
 80016c6:	bcf0      	pop	{r4, r5, r6, r7}
 80016c8:	46bb      	mov	fp, r7
 80016ca:	46b2      	mov	sl, r6
 80016cc:	46a9      	mov	r9, r5
 80016ce:	46a0      	mov	r8, r4
 80016d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d2:	1ab4      	subs	r4, r6, r2
 80016d4:	46a4      	mov	ip, r4
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	dd58      	ble.n	800178c <__aeabi_dsub+0x218>
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x16c>
 80016de:	e09e      	b.n	800181e <__aeabi_dsub+0x2aa>
 80016e0:	4a71      	ldr	r2, [pc, #452]	; (80018a8 <__aeabi_dsub+0x334>)
 80016e2:	4296      	cmp	r6, r2
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dsub+0x174>
 80016e6:	e13b      	b.n	8001960 <__aeabi_dsub+0x3ec>
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	0412      	lsls	r2, r2, #16
 80016ec:	4311      	orrs	r1, r2
 80016ee:	4662      	mov	r2, ip
 80016f0:	2a38      	cmp	r2, #56	; 0x38
 80016f2:	dd00      	ble.n	80016f6 <__aeabi_dsub+0x182>
 80016f4:	e0c1      	b.n	800187a <__aeabi_dsub+0x306>
 80016f6:	2a1f      	cmp	r2, #31
 80016f8:	dc00      	bgt.n	80016fc <__aeabi_dsub+0x188>
 80016fa:	e1bb      	b.n	8001a74 <__aeabi_dsub+0x500>
 80016fc:	000c      	movs	r4, r1
 80016fe:	3a20      	subs	r2, #32
 8001700:	40d4      	lsrs	r4, r2
 8001702:	0022      	movs	r2, r4
 8001704:	4664      	mov	r4, ip
 8001706:	2c20      	cmp	r4, #32
 8001708:	d004      	beq.n	8001714 <__aeabi_dsub+0x1a0>
 800170a:	2740      	movs	r7, #64	; 0x40
 800170c:	1b3f      	subs	r7, r7, r4
 800170e:	40b9      	lsls	r1, r7
 8001710:	4308      	orrs	r0, r1
 8001712:	4680      	mov	r8, r0
 8001714:	4644      	mov	r4, r8
 8001716:	1e61      	subs	r1, r4, #1
 8001718:	418c      	sbcs	r4, r1
 800171a:	4314      	orrs	r4, r2
 800171c:	e0b1      	b.n	8001882 <__aeabi_dsub+0x30e>
 800171e:	000c      	movs	r4, r1
 8001720:	4304      	orrs	r4, r0
 8001722:	d02a      	beq.n	800177a <__aeabi_dsub+0x206>
 8001724:	46bb      	mov	fp, r7
 8001726:	42bd      	cmp	r5, r7
 8001728:	d02d      	beq.n	8001786 <__aeabi_dsub+0x212>
 800172a:	4c61      	ldr	r4, [pc, #388]	; (80018b0 <__aeabi_dsub+0x33c>)
 800172c:	46a4      	mov	ip, r4
 800172e:	44b4      	add	ip, r6
 8001730:	4664      	mov	r4, ip
 8001732:	2c00      	cmp	r4, #0
 8001734:	d05c      	beq.n	80017f0 <__aeabi_dsub+0x27c>
 8001736:	1b94      	subs	r4, r2, r6
 8001738:	46a4      	mov	ip, r4
 800173a:	2e00      	cmp	r6, #0
 800173c:	d000      	beq.n	8001740 <__aeabi_dsub+0x1cc>
 800173e:	e115      	b.n	800196c <__aeabi_dsub+0x3f8>
 8001740:	464d      	mov	r5, r9
 8001742:	431d      	orrs	r5, r3
 8001744:	d100      	bne.n	8001748 <__aeabi_dsub+0x1d4>
 8001746:	e1c3      	b.n	8001ad0 <__aeabi_dsub+0x55c>
 8001748:	1e65      	subs	r5, r4, #1
 800174a:	2c01      	cmp	r4, #1
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x1dc>
 800174e:	e20c      	b.n	8001b6a <__aeabi_dsub+0x5f6>
 8001750:	4e55      	ldr	r6, [pc, #340]	; (80018a8 <__aeabi_dsub+0x334>)
 8001752:	42b4      	cmp	r4, r6
 8001754:	d100      	bne.n	8001758 <__aeabi_dsub+0x1e4>
 8001756:	e1f8      	b.n	8001b4a <__aeabi_dsub+0x5d6>
 8001758:	46ac      	mov	ip, r5
 800175a:	e10e      	b.n	800197a <__aeabi_dsub+0x406>
 800175c:	000a      	movs	r2, r1
 800175e:	4302      	orrs	r2, r0
 8001760:	d100      	bne.n	8001764 <__aeabi_dsub+0x1f0>
 8001762:	e136      	b.n	80019d2 <__aeabi_dsub+0x45e>
 8001764:	0022      	movs	r2, r4
 8001766:	3a01      	subs	r2, #1
 8001768:	2c01      	cmp	r4, #1
 800176a:	d100      	bne.n	800176e <__aeabi_dsub+0x1fa>
 800176c:	e1c6      	b.n	8001afc <__aeabi_dsub+0x588>
 800176e:	4c4e      	ldr	r4, [pc, #312]	; (80018a8 <__aeabi_dsub+0x334>)
 8001770:	45a4      	cmp	ip, r4
 8001772:	d100      	bne.n	8001776 <__aeabi_dsub+0x202>
 8001774:	e0f4      	b.n	8001960 <__aeabi_dsub+0x3ec>
 8001776:	4694      	mov	ip, r2
 8001778:	e731      	b.n	80015de <__aeabi_dsub+0x6a>
 800177a:	2401      	movs	r4, #1
 800177c:	4067      	eors	r7, r4
 800177e:	46bb      	mov	fp, r7
 8001780:	42bd      	cmp	r5, r7
 8001782:	d000      	beq.n	8001786 <__aeabi_dsub+0x212>
 8001784:	e71c      	b.n	80015c0 <__aeabi_dsub+0x4c>
 8001786:	4c4a      	ldr	r4, [pc, #296]	; (80018b0 <__aeabi_dsub+0x33c>)
 8001788:	46a4      	mov	ip, r4
 800178a:	44b4      	add	ip, r6
 800178c:	4664      	mov	r4, ip
 800178e:	2c00      	cmp	r4, #0
 8001790:	d100      	bne.n	8001794 <__aeabi_dsub+0x220>
 8001792:	e0cf      	b.n	8001934 <__aeabi_dsub+0x3c0>
 8001794:	1b94      	subs	r4, r2, r6
 8001796:	46a4      	mov	ip, r4
 8001798:	2e00      	cmp	r6, #0
 800179a:	d100      	bne.n	800179e <__aeabi_dsub+0x22a>
 800179c:	e15c      	b.n	8001a58 <__aeabi_dsub+0x4e4>
 800179e:	4e42      	ldr	r6, [pc, #264]	; (80018a8 <__aeabi_dsub+0x334>)
 80017a0:	42b2      	cmp	r2, r6
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dsub+0x232>
 80017a4:	e1ec      	b.n	8001b80 <__aeabi_dsub+0x60c>
 80017a6:	2680      	movs	r6, #128	; 0x80
 80017a8:	0436      	lsls	r6, r6, #16
 80017aa:	4333      	orrs	r3, r6
 80017ac:	4664      	mov	r4, ip
 80017ae:	2c38      	cmp	r4, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dsub+0x240>
 80017b2:	e1b3      	b.n	8001b1c <__aeabi_dsub+0x5a8>
 80017b4:	2c1f      	cmp	r4, #31
 80017b6:	dd00      	ble.n	80017ba <__aeabi_dsub+0x246>
 80017b8:	e238      	b.n	8001c2c <__aeabi_dsub+0x6b8>
 80017ba:	2620      	movs	r6, #32
 80017bc:	1b36      	subs	r6, r6, r4
 80017be:	001c      	movs	r4, r3
 80017c0:	40b4      	lsls	r4, r6
 80017c2:	464f      	mov	r7, r9
 80017c4:	46a0      	mov	r8, r4
 80017c6:	4664      	mov	r4, ip
 80017c8:	40e7      	lsrs	r7, r4
 80017ca:	4644      	mov	r4, r8
 80017cc:	433c      	orrs	r4, r7
 80017ce:	464f      	mov	r7, r9
 80017d0:	40b7      	lsls	r7, r6
 80017d2:	003e      	movs	r6, r7
 80017d4:	1e77      	subs	r7, r6, #1
 80017d6:	41be      	sbcs	r6, r7
 80017d8:	4334      	orrs	r4, r6
 80017da:	4666      	mov	r6, ip
 80017dc:	40f3      	lsrs	r3, r6
 80017de:	18c9      	adds	r1, r1, r3
 80017e0:	1824      	adds	r4, r4, r0
 80017e2:	4284      	cmp	r4, r0
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	425b      	negs	r3, r3
 80017e8:	4698      	mov	r8, r3
 80017ea:	0016      	movs	r6, r2
 80017ec:	4488      	add	r8, r1
 80017ee:	e04e      	b.n	800188e <__aeabi_dsub+0x31a>
 80017f0:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <__aeabi_dsub+0x340>)
 80017f2:	1c74      	adds	r4, r6, #1
 80017f4:	4214      	tst	r4, r2
 80017f6:	d000      	beq.n	80017fa <__aeabi_dsub+0x286>
 80017f8:	e0d6      	b.n	80019a8 <__aeabi_dsub+0x434>
 80017fa:	464a      	mov	r2, r9
 80017fc:	431a      	orrs	r2, r3
 80017fe:	2e00      	cmp	r6, #0
 8001800:	d000      	beq.n	8001804 <__aeabi_dsub+0x290>
 8001802:	e15b      	b.n	8001abc <__aeabi_dsub+0x548>
 8001804:	2a00      	cmp	r2, #0
 8001806:	d100      	bne.n	800180a <__aeabi_dsub+0x296>
 8001808:	e1a5      	b.n	8001b56 <__aeabi_dsub+0x5e2>
 800180a:	000a      	movs	r2, r1
 800180c:	4302      	orrs	r2, r0
 800180e:	d000      	beq.n	8001812 <__aeabi_dsub+0x29e>
 8001810:	e1bb      	b.n	8001b8a <__aeabi_dsub+0x616>
 8001812:	464a      	mov	r2, r9
 8001814:	0759      	lsls	r1, r3, #29
 8001816:	08d2      	lsrs	r2, r2, #3
 8001818:	430a      	orrs	r2, r1
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	e027      	b.n	800186e <__aeabi_dsub+0x2fa>
 800181e:	000a      	movs	r2, r1
 8001820:	4302      	orrs	r2, r0
 8001822:	d100      	bne.n	8001826 <__aeabi_dsub+0x2b2>
 8001824:	e174      	b.n	8001b10 <__aeabi_dsub+0x59c>
 8001826:	0022      	movs	r2, r4
 8001828:	3a01      	subs	r2, #1
 800182a:	2c01      	cmp	r4, #1
 800182c:	d005      	beq.n	800183a <__aeabi_dsub+0x2c6>
 800182e:	4c1e      	ldr	r4, [pc, #120]	; (80018a8 <__aeabi_dsub+0x334>)
 8001830:	45a4      	cmp	ip, r4
 8001832:	d100      	bne.n	8001836 <__aeabi_dsub+0x2c2>
 8001834:	e094      	b.n	8001960 <__aeabi_dsub+0x3ec>
 8001836:	4694      	mov	ip, r2
 8001838:	e759      	b.n	80016ee <__aeabi_dsub+0x17a>
 800183a:	4448      	add	r0, r9
 800183c:	4548      	cmp	r0, r9
 800183e:	4192      	sbcs	r2, r2
 8001840:	185b      	adds	r3, r3, r1
 8001842:	4698      	mov	r8, r3
 8001844:	0004      	movs	r4, r0
 8001846:	4252      	negs	r2, r2
 8001848:	4490      	add	r8, r2
 800184a:	4643      	mov	r3, r8
 800184c:	2602      	movs	r6, #2
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	d500      	bpl.n	8001854 <__aeabi_dsub+0x2e0>
 8001852:	e0c4      	b.n	80019de <__aeabi_dsub+0x46a>
 8001854:	3e01      	subs	r6, #1
 8001856:	0763      	lsls	r3, r4, #29
 8001858:	d000      	beq.n	800185c <__aeabi_dsub+0x2e8>
 800185a:	e711      	b.n	8001680 <__aeabi_dsub+0x10c>
 800185c:	4643      	mov	r3, r8
 800185e:	46b4      	mov	ip, r6
 8001860:	0759      	lsls	r1, r3, #29
 8001862:	08e2      	lsrs	r2, r4, #3
 8001864:	430a      	orrs	r2, r1
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	490f      	ldr	r1, [pc, #60]	; (80018a8 <__aeabi_dsub+0x334>)
 800186a:	458c      	cmp	ip, r1
 800186c:	d040      	beq.n	80018f0 <__aeabi_dsub+0x37c>
 800186e:	4661      	mov	r1, ip
 8001870:	031b      	lsls	r3, r3, #12
 8001872:	0549      	lsls	r1, r1, #21
 8001874:	0b1b      	lsrs	r3, r3, #12
 8001876:	0d49      	lsrs	r1, r1, #21
 8001878:	e720      	b.n	80016bc <__aeabi_dsub+0x148>
 800187a:	4301      	orrs	r1, r0
 800187c:	000c      	movs	r4, r1
 800187e:	1e61      	subs	r1, r4, #1
 8001880:	418c      	sbcs	r4, r1
 8001882:	444c      	add	r4, r9
 8001884:	454c      	cmp	r4, r9
 8001886:	4192      	sbcs	r2, r2
 8001888:	4252      	negs	r2, r2
 800188a:	4690      	mov	r8, r2
 800188c:	4498      	add	r8, r3
 800188e:	4643      	mov	r3, r8
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	d5e0      	bpl.n	8001856 <__aeabi_dsub+0x2e2>
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__aeabi_dsub+0x334>)
 8001896:	3601      	adds	r6, #1
 8001898:	429e      	cmp	r6, r3
 800189a:	d000      	beq.n	800189e <__aeabi_dsub+0x32a>
 800189c:	e09f      	b.n	80019de <__aeabi_dsub+0x46a>
 800189e:	0031      	movs	r1, r6
 80018a0:	2300      	movs	r3, #0
 80018a2:	2200      	movs	r2, #0
 80018a4:	e70a      	b.n	80016bc <__aeabi_dsub+0x148>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	ff7fffff 	.word	0xff7fffff
 80018b0:	fffff801 	.word	0xfffff801
 80018b4:	000007fe 	.word	0x000007fe
 80018b8:	2a00      	cmp	r2, #0
 80018ba:	d100      	bne.n	80018be <__aeabi_dsub+0x34a>
 80018bc:	e160      	b.n	8001b80 <__aeabi_dsub+0x60c>
 80018be:	000a      	movs	r2, r1
 80018c0:	4302      	orrs	r2, r0
 80018c2:	d04d      	beq.n	8001960 <__aeabi_dsub+0x3ec>
 80018c4:	464a      	mov	r2, r9
 80018c6:	075c      	lsls	r4, r3, #29
 80018c8:	08d2      	lsrs	r2, r2, #3
 80018ca:	4322      	orrs	r2, r4
 80018cc:	2480      	movs	r4, #128	; 0x80
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	0324      	lsls	r4, r4, #12
 80018d2:	4223      	tst	r3, r4
 80018d4:	d007      	beq.n	80018e6 <__aeabi_dsub+0x372>
 80018d6:	08ce      	lsrs	r6, r1, #3
 80018d8:	4226      	tst	r6, r4
 80018da:	d104      	bne.n	80018e6 <__aeabi_dsub+0x372>
 80018dc:	465d      	mov	r5, fp
 80018de:	0033      	movs	r3, r6
 80018e0:	08c2      	lsrs	r2, r0, #3
 80018e2:	0749      	lsls	r1, r1, #29
 80018e4:	430a      	orrs	r2, r1
 80018e6:	0f51      	lsrs	r1, r2, #29
 80018e8:	00d2      	lsls	r2, r2, #3
 80018ea:	08d2      	lsrs	r2, r2, #3
 80018ec:	0749      	lsls	r1, r1, #29
 80018ee:	430a      	orrs	r2, r1
 80018f0:	0011      	movs	r1, r2
 80018f2:	4319      	orrs	r1, r3
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dsub+0x384>
 80018f6:	e1c8      	b.n	8001c8a <__aeabi_dsub+0x716>
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0309      	lsls	r1, r1, #12
 80018fc:	430b      	orrs	r3, r1
 80018fe:	031b      	lsls	r3, r3, #12
 8001900:	49d5      	ldr	r1, [pc, #852]	; (8001c58 <__aeabi_dsub+0x6e4>)
 8001902:	0b1b      	lsrs	r3, r3, #12
 8001904:	e6da      	b.n	80016bc <__aeabi_dsub+0x148>
 8001906:	49d5      	ldr	r1, [pc, #852]	; (8001c5c <__aeabi_dsub+0x6e8>)
 8001908:	1ab6      	subs	r6, r6, r2
 800190a:	400b      	ands	r3, r1
 800190c:	4698      	mov	r8, r3
 800190e:	e6b5      	b.n	800167c <__aeabi_dsub+0x108>
 8001910:	0020      	movs	r0, r4
 8001912:	f000 fb05 	bl	8001f20 <__clzsi2>
 8001916:	0002      	movs	r2, r0
 8001918:	3218      	adds	r2, #24
 800191a:	2a1f      	cmp	r2, #31
 800191c:	dc00      	bgt.n	8001920 <__aeabi_dsub+0x3ac>
 800191e:	e68f      	b.n	8001640 <__aeabi_dsub+0xcc>
 8001920:	0023      	movs	r3, r4
 8001922:	3808      	subs	r0, #8
 8001924:	4083      	lsls	r3, r0
 8001926:	2400      	movs	r4, #0
 8001928:	e692      	b.n	8001650 <__aeabi_dsub+0xdc>
 800192a:	4308      	orrs	r0, r1
 800192c:	0002      	movs	r2, r0
 800192e:	1e50      	subs	r0, r2, #1
 8001930:	4182      	sbcs	r2, r0
 8001932:	e66d      	b.n	8001610 <__aeabi_dsub+0x9c>
 8001934:	4cca      	ldr	r4, [pc, #808]	; (8001c60 <__aeabi_dsub+0x6ec>)
 8001936:	1c72      	adds	r2, r6, #1
 8001938:	4222      	tst	r2, r4
 800193a:	d000      	beq.n	800193e <__aeabi_dsub+0x3ca>
 800193c:	e0ad      	b.n	8001a9a <__aeabi_dsub+0x526>
 800193e:	464a      	mov	r2, r9
 8001940:	431a      	orrs	r2, r3
 8001942:	2e00      	cmp	r6, #0
 8001944:	d1b8      	bne.n	80018b8 <__aeabi_dsub+0x344>
 8001946:	2a00      	cmp	r2, #0
 8001948:	d100      	bne.n	800194c <__aeabi_dsub+0x3d8>
 800194a:	e158      	b.n	8001bfe <__aeabi_dsub+0x68a>
 800194c:	000a      	movs	r2, r1
 800194e:	4302      	orrs	r2, r0
 8001950:	d000      	beq.n	8001954 <__aeabi_dsub+0x3e0>
 8001952:	e159      	b.n	8001c08 <__aeabi_dsub+0x694>
 8001954:	464a      	mov	r2, r9
 8001956:	0759      	lsls	r1, r3, #29
 8001958:	08d2      	lsrs	r2, r2, #3
 800195a:	430a      	orrs	r2, r1
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	e786      	b.n	800186e <__aeabi_dsub+0x2fa>
 8001960:	464a      	mov	r2, r9
 8001962:	0759      	lsls	r1, r3, #29
 8001964:	08d2      	lsrs	r2, r2, #3
 8001966:	430a      	orrs	r2, r1
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	e7c1      	b.n	80018f0 <__aeabi_dsub+0x37c>
 800196c:	4dba      	ldr	r5, [pc, #744]	; (8001c58 <__aeabi_dsub+0x6e4>)
 800196e:	42aa      	cmp	r2, r5
 8001970:	d100      	bne.n	8001974 <__aeabi_dsub+0x400>
 8001972:	e11e      	b.n	8001bb2 <__aeabi_dsub+0x63e>
 8001974:	2580      	movs	r5, #128	; 0x80
 8001976:	042d      	lsls	r5, r5, #16
 8001978:	432b      	orrs	r3, r5
 800197a:	4664      	mov	r4, ip
 800197c:	2c38      	cmp	r4, #56	; 0x38
 800197e:	dc5d      	bgt.n	8001a3c <__aeabi_dsub+0x4c8>
 8001980:	2c1f      	cmp	r4, #31
 8001982:	dd00      	ble.n	8001986 <__aeabi_dsub+0x412>
 8001984:	e0d0      	b.n	8001b28 <__aeabi_dsub+0x5b4>
 8001986:	2520      	movs	r5, #32
 8001988:	4667      	mov	r7, ip
 800198a:	1b2d      	subs	r5, r5, r4
 800198c:	464e      	mov	r6, r9
 800198e:	001c      	movs	r4, r3
 8001990:	40fe      	lsrs	r6, r7
 8001992:	40ac      	lsls	r4, r5
 8001994:	4334      	orrs	r4, r6
 8001996:	464e      	mov	r6, r9
 8001998:	40ae      	lsls	r6, r5
 800199a:	0035      	movs	r5, r6
 800199c:	40fb      	lsrs	r3, r7
 800199e:	1e6e      	subs	r6, r5, #1
 80019a0:	41b5      	sbcs	r5, r6
 80019a2:	1ac9      	subs	r1, r1, r3
 80019a4:	432c      	orrs	r4, r5
 80019a6:	e04e      	b.n	8001a46 <__aeabi_dsub+0x4d2>
 80019a8:	464a      	mov	r2, r9
 80019aa:	1a14      	subs	r4, r2, r0
 80019ac:	45a1      	cmp	r9, r4
 80019ae:	4192      	sbcs	r2, r2
 80019b0:	4252      	negs	r2, r2
 80019b2:	4690      	mov	r8, r2
 80019b4:	1a5f      	subs	r7, r3, r1
 80019b6:	003a      	movs	r2, r7
 80019b8:	4647      	mov	r7, r8
 80019ba:	1bd2      	subs	r2, r2, r7
 80019bc:	4690      	mov	r8, r2
 80019be:	0212      	lsls	r2, r2, #8
 80019c0:	d500      	bpl.n	80019c4 <__aeabi_dsub+0x450>
 80019c2:	e08b      	b.n	8001adc <__aeabi_dsub+0x568>
 80019c4:	4642      	mov	r2, r8
 80019c6:	4322      	orrs	r2, r4
 80019c8:	d000      	beq.n	80019cc <__aeabi_dsub+0x458>
 80019ca:	e630      	b.n	800162e <__aeabi_dsub+0xba>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2500      	movs	r5, #0
 80019d0:	e74d      	b.n	800186e <__aeabi_dsub+0x2fa>
 80019d2:	464a      	mov	r2, r9
 80019d4:	0759      	lsls	r1, r3, #29
 80019d6:	08d2      	lsrs	r2, r2, #3
 80019d8:	430a      	orrs	r2, r1
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	e744      	b.n	8001868 <__aeabi_dsub+0x2f4>
 80019de:	4642      	mov	r2, r8
 80019e0:	4b9e      	ldr	r3, [pc, #632]	; (8001c5c <__aeabi_dsub+0x6e8>)
 80019e2:	0861      	lsrs	r1, r4, #1
 80019e4:	401a      	ands	r2, r3
 80019e6:	0013      	movs	r3, r2
 80019e8:	2201      	movs	r2, #1
 80019ea:	4014      	ands	r4, r2
 80019ec:	430c      	orrs	r4, r1
 80019ee:	07da      	lsls	r2, r3, #31
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	4698      	mov	r8, r3
 80019f4:	4314      	orrs	r4, r2
 80019f6:	e641      	b.n	800167c <__aeabi_dsub+0x108>
 80019f8:	001a      	movs	r2, r3
 80019fa:	3e1f      	subs	r6, #31
 80019fc:	40f2      	lsrs	r2, r6
 80019fe:	0016      	movs	r6, r2
 8001a00:	2920      	cmp	r1, #32
 8001a02:	d003      	beq.n	8001a0c <__aeabi_dsub+0x498>
 8001a04:	2240      	movs	r2, #64	; 0x40
 8001a06:	1a51      	subs	r1, r2, r1
 8001a08:	408b      	lsls	r3, r1
 8001a0a:	431c      	orrs	r4, r3
 8001a0c:	1e62      	subs	r2, r4, #1
 8001a0e:	4194      	sbcs	r4, r2
 8001a10:	2300      	movs	r3, #0
 8001a12:	4334      	orrs	r4, r6
 8001a14:	4698      	mov	r8, r3
 8001a16:	2600      	movs	r6, #0
 8001a18:	e71d      	b.n	8001856 <__aeabi_dsub+0x2e2>
 8001a1a:	000c      	movs	r4, r1
 8001a1c:	3a20      	subs	r2, #32
 8001a1e:	40d4      	lsrs	r4, r2
 8001a20:	0022      	movs	r2, r4
 8001a22:	4664      	mov	r4, ip
 8001a24:	2c20      	cmp	r4, #32
 8001a26:	d004      	beq.n	8001a32 <__aeabi_dsub+0x4be>
 8001a28:	2740      	movs	r7, #64	; 0x40
 8001a2a:	1b3f      	subs	r7, r7, r4
 8001a2c:	40b9      	lsls	r1, r7
 8001a2e:	4308      	orrs	r0, r1
 8001a30:	4680      	mov	r8, r0
 8001a32:	4644      	mov	r4, r8
 8001a34:	1e61      	subs	r1, r4, #1
 8001a36:	418c      	sbcs	r4, r1
 8001a38:	4322      	orrs	r2, r4
 8001a3a:	e5e9      	b.n	8001610 <__aeabi_dsub+0x9c>
 8001a3c:	464c      	mov	r4, r9
 8001a3e:	4323      	orrs	r3, r4
 8001a40:	001c      	movs	r4, r3
 8001a42:	1e63      	subs	r3, r4, #1
 8001a44:	419c      	sbcs	r4, r3
 8001a46:	1b04      	subs	r4, r0, r4
 8001a48:	42a0      	cmp	r0, r4
 8001a4a:	419b      	sbcs	r3, r3
 8001a4c:	425b      	negs	r3, r3
 8001a4e:	1acb      	subs	r3, r1, r3
 8001a50:	4698      	mov	r8, r3
 8001a52:	465d      	mov	r5, fp
 8001a54:	0016      	movs	r6, r2
 8001a56:	e5e2      	b.n	800161e <__aeabi_dsub+0xaa>
 8001a58:	464e      	mov	r6, r9
 8001a5a:	431e      	orrs	r6, r3
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dsub+0x4ec>
 8001a5e:	e0ae      	b.n	8001bbe <__aeabi_dsub+0x64a>
 8001a60:	1e66      	subs	r6, r4, #1
 8001a62:	2c01      	cmp	r4, #1
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x4f4>
 8001a66:	e0fd      	b.n	8001c64 <__aeabi_dsub+0x6f0>
 8001a68:	4f7b      	ldr	r7, [pc, #492]	; (8001c58 <__aeabi_dsub+0x6e4>)
 8001a6a:	42bc      	cmp	r4, r7
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x4fc>
 8001a6e:	e107      	b.n	8001c80 <__aeabi_dsub+0x70c>
 8001a70:	46b4      	mov	ip, r6
 8001a72:	e69b      	b.n	80017ac <__aeabi_dsub+0x238>
 8001a74:	4664      	mov	r4, ip
 8001a76:	2220      	movs	r2, #32
 8001a78:	1b12      	subs	r2, r2, r4
 8001a7a:	000c      	movs	r4, r1
 8001a7c:	4094      	lsls	r4, r2
 8001a7e:	0007      	movs	r7, r0
 8001a80:	4090      	lsls	r0, r2
 8001a82:	46a0      	mov	r8, r4
 8001a84:	4664      	mov	r4, ip
 8001a86:	1e42      	subs	r2, r0, #1
 8001a88:	4190      	sbcs	r0, r2
 8001a8a:	4662      	mov	r2, ip
 8001a8c:	40e7      	lsrs	r7, r4
 8001a8e:	4644      	mov	r4, r8
 8001a90:	40d1      	lsrs	r1, r2
 8001a92:	433c      	orrs	r4, r7
 8001a94:	4304      	orrs	r4, r0
 8001a96:	185b      	adds	r3, r3, r1
 8001a98:	e6f3      	b.n	8001882 <__aeabi_dsub+0x30e>
 8001a9a:	4c6f      	ldr	r4, [pc, #444]	; (8001c58 <__aeabi_dsub+0x6e4>)
 8001a9c:	42a2      	cmp	r2, r4
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dsub+0x52e>
 8001aa0:	e0d5      	b.n	8001c4e <__aeabi_dsub+0x6da>
 8001aa2:	4448      	add	r0, r9
 8001aa4:	185b      	adds	r3, r3, r1
 8001aa6:	4548      	cmp	r0, r9
 8001aa8:	4189      	sbcs	r1, r1
 8001aaa:	4249      	negs	r1, r1
 8001aac:	185b      	adds	r3, r3, r1
 8001aae:	07dc      	lsls	r4, r3, #31
 8001ab0:	0840      	lsrs	r0, r0, #1
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	4698      	mov	r8, r3
 8001ab6:	0016      	movs	r6, r2
 8001ab8:	4304      	orrs	r4, r0
 8001aba:	e6cc      	b.n	8001856 <__aeabi_dsub+0x2e2>
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d000      	beq.n	8001ac2 <__aeabi_dsub+0x54e>
 8001ac0:	e082      	b.n	8001bc8 <__aeabi_dsub+0x654>
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	4302      	orrs	r2, r0
 8001ac6:	d140      	bne.n	8001b4a <__aeabi_dsub+0x5d6>
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	2500      	movs	r5, #0
 8001acc:	031b      	lsls	r3, r3, #12
 8001ace:	e713      	b.n	80018f8 <__aeabi_dsub+0x384>
 8001ad0:	074b      	lsls	r3, r1, #29
 8001ad2:	08c2      	lsrs	r2, r0, #3
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	465d      	mov	r5, fp
 8001ad8:	08cb      	lsrs	r3, r1, #3
 8001ada:	e6c5      	b.n	8001868 <__aeabi_dsub+0x2f4>
 8001adc:	464a      	mov	r2, r9
 8001ade:	1a84      	subs	r4, r0, r2
 8001ae0:	42a0      	cmp	r0, r4
 8001ae2:	4192      	sbcs	r2, r2
 8001ae4:	1acb      	subs	r3, r1, r3
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	4698      	mov	r8, r3
 8001aec:	465d      	mov	r5, fp
 8001aee:	e59e      	b.n	800162e <__aeabi_dsub+0xba>
 8001af0:	464a      	mov	r2, r9
 8001af2:	0759      	lsls	r1, r3, #29
 8001af4:	08d2      	lsrs	r2, r2, #3
 8001af6:	430a      	orrs	r2, r1
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	e6f9      	b.n	80018f0 <__aeabi_dsub+0x37c>
 8001afc:	464a      	mov	r2, r9
 8001afe:	1a14      	subs	r4, r2, r0
 8001b00:	45a1      	cmp	r9, r4
 8001b02:	4192      	sbcs	r2, r2
 8001b04:	1a5b      	subs	r3, r3, r1
 8001b06:	4252      	negs	r2, r2
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	2601      	movs	r6, #1
 8001b0e:	e586      	b.n	800161e <__aeabi_dsub+0xaa>
 8001b10:	464a      	mov	r2, r9
 8001b12:	0759      	lsls	r1, r3, #29
 8001b14:	08d2      	lsrs	r2, r2, #3
 8001b16:	430a      	orrs	r2, r1
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	e6a5      	b.n	8001868 <__aeabi_dsub+0x2f4>
 8001b1c:	464c      	mov	r4, r9
 8001b1e:	4323      	orrs	r3, r4
 8001b20:	001c      	movs	r4, r3
 8001b22:	1e63      	subs	r3, r4, #1
 8001b24:	419c      	sbcs	r4, r3
 8001b26:	e65b      	b.n	80017e0 <__aeabi_dsub+0x26c>
 8001b28:	4665      	mov	r5, ip
 8001b2a:	001e      	movs	r6, r3
 8001b2c:	3d20      	subs	r5, #32
 8001b2e:	40ee      	lsrs	r6, r5
 8001b30:	2c20      	cmp	r4, #32
 8001b32:	d005      	beq.n	8001b40 <__aeabi_dsub+0x5cc>
 8001b34:	2540      	movs	r5, #64	; 0x40
 8001b36:	1b2d      	subs	r5, r5, r4
 8001b38:	40ab      	lsls	r3, r5
 8001b3a:	464c      	mov	r4, r9
 8001b3c:	431c      	orrs	r4, r3
 8001b3e:	46a2      	mov	sl, r4
 8001b40:	4654      	mov	r4, sl
 8001b42:	1e63      	subs	r3, r4, #1
 8001b44:	419c      	sbcs	r4, r3
 8001b46:	4334      	orrs	r4, r6
 8001b48:	e77d      	b.n	8001a46 <__aeabi_dsub+0x4d2>
 8001b4a:	074b      	lsls	r3, r1, #29
 8001b4c:	08c2      	lsrs	r2, r0, #3
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	465d      	mov	r5, fp
 8001b52:	08cb      	lsrs	r3, r1, #3
 8001b54:	e6cc      	b.n	80018f0 <__aeabi_dsub+0x37c>
 8001b56:	000a      	movs	r2, r1
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dsub+0x5ea>
 8001b5c:	e736      	b.n	80019cc <__aeabi_dsub+0x458>
 8001b5e:	074b      	lsls	r3, r1, #29
 8001b60:	08c2      	lsrs	r2, r0, #3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	465d      	mov	r5, fp
 8001b66:	08cb      	lsrs	r3, r1, #3
 8001b68:	e681      	b.n	800186e <__aeabi_dsub+0x2fa>
 8001b6a:	464a      	mov	r2, r9
 8001b6c:	1a84      	subs	r4, r0, r2
 8001b6e:	42a0      	cmp	r0, r4
 8001b70:	4192      	sbcs	r2, r2
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	4252      	negs	r2, r2
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	4698      	mov	r8, r3
 8001b7a:	465d      	mov	r5, fp
 8001b7c:	2601      	movs	r6, #1
 8001b7e:	e54e      	b.n	800161e <__aeabi_dsub+0xaa>
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	08c2      	lsrs	r2, r0, #3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	08cb      	lsrs	r3, r1, #3
 8001b88:	e6b2      	b.n	80018f0 <__aeabi_dsub+0x37c>
 8001b8a:	464a      	mov	r2, r9
 8001b8c:	1a14      	subs	r4, r2, r0
 8001b8e:	45a1      	cmp	r9, r4
 8001b90:	4192      	sbcs	r2, r2
 8001b92:	1a5f      	subs	r7, r3, r1
 8001b94:	4252      	negs	r2, r2
 8001b96:	1aba      	subs	r2, r7, r2
 8001b98:	4690      	mov	r8, r2
 8001b9a:	0212      	lsls	r2, r2, #8
 8001b9c:	d56b      	bpl.n	8001c76 <__aeabi_dsub+0x702>
 8001b9e:	464a      	mov	r2, r9
 8001ba0:	1a84      	subs	r4, r0, r2
 8001ba2:	42a0      	cmp	r0, r4
 8001ba4:	4192      	sbcs	r2, r2
 8001ba6:	1acb      	subs	r3, r1, r3
 8001ba8:	4252      	negs	r2, r2
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	4698      	mov	r8, r3
 8001bae:	465d      	mov	r5, fp
 8001bb0:	e564      	b.n	800167c <__aeabi_dsub+0x108>
 8001bb2:	074b      	lsls	r3, r1, #29
 8001bb4:	08c2      	lsrs	r2, r0, #3
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	465d      	mov	r5, fp
 8001bba:	08cb      	lsrs	r3, r1, #3
 8001bbc:	e698      	b.n	80018f0 <__aeabi_dsub+0x37c>
 8001bbe:	074b      	lsls	r3, r1, #29
 8001bc0:	08c2      	lsrs	r2, r0, #3
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	08cb      	lsrs	r3, r1, #3
 8001bc6:	e64f      	b.n	8001868 <__aeabi_dsub+0x2f4>
 8001bc8:	000a      	movs	r2, r1
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	d090      	beq.n	8001af0 <__aeabi_dsub+0x57c>
 8001bce:	464a      	mov	r2, r9
 8001bd0:	075c      	lsls	r4, r3, #29
 8001bd2:	08d2      	lsrs	r2, r2, #3
 8001bd4:	4314      	orrs	r4, r2
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	0312      	lsls	r2, r2, #12
 8001bdc:	4213      	tst	r3, r2
 8001bde:	d008      	beq.n	8001bf2 <__aeabi_dsub+0x67e>
 8001be0:	08ce      	lsrs	r6, r1, #3
 8001be2:	4216      	tst	r6, r2
 8001be4:	d105      	bne.n	8001bf2 <__aeabi_dsub+0x67e>
 8001be6:	08c0      	lsrs	r0, r0, #3
 8001be8:	0749      	lsls	r1, r1, #29
 8001bea:	4308      	orrs	r0, r1
 8001bec:	0004      	movs	r4, r0
 8001bee:	465d      	mov	r5, fp
 8001bf0:	0033      	movs	r3, r6
 8001bf2:	0f61      	lsrs	r1, r4, #29
 8001bf4:	00e2      	lsls	r2, r4, #3
 8001bf6:	0749      	lsls	r1, r1, #29
 8001bf8:	08d2      	lsrs	r2, r2, #3
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	e678      	b.n	80018f0 <__aeabi_dsub+0x37c>
 8001bfe:	074b      	lsls	r3, r1, #29
 8001c00:	08c2      	lsrs	r2, r0, #3
 8001c02:	431a      	orrs	r2, r3
 8001c04:	08cb      	lsrs	r3, r1, #3
 8001c06:	e632      	b.n	800186e <__aeabi_dsub+0x2fa>
 8001c08:	4448      	add	r0, r9
 8001c0a:	185b      	adds	r3, r3, r1
 8001c0c:	4548      	cmp	r0, r9
 8001c0e:	4192      	sbcs	r2, r2
 8001c10:	4698      	mov	r8, r3
 8001c12:	4252      	negs	r2, r2
 8001c14:	4490      	add	r8, r2
 8001c16:	4643      	mov	r3, r8
 8001c18:	0004      	movs	r4, r0
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	d400      	bmi.n	8001c20 <__aeabi_dsub+0x6ac>
 8001c1e:	e61a      	b.n	8001856 <__aeabi_dsub+0x2e2>
 8001c20:	4642      	mov	r2, r8
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <__aeabi_dsub+0x6e8>)
 8001c24:	2601      	movs	r6, #1
 8001c26:	401a      	ands	r2, r3
 8001c28:	4690      	mov	r8, r2
 8001c2a:	e614      	b.n	8001856 <__aeabi_dsub+0x2e2>
 8001c2c:	4666      	mov	r6, ip
 8001c2e:	001f      	movs	r7, r3
 8001c30:	3e20      	subs	r6, #32
 8001c32:	40f7      	lsrs	r7, r6
 8001c34:	2c20      	cmp	r4, #32
 8001c36:	d005      	beq.n	8001c44 <__aeabi_dsub+0x6d0>
 8001c38:	2640      	movs	r6, #64	; 0x40
 8001c3a:	1b36      	subs	r6, r6, r4
 8001c3c:	40b3      	lsls	r3, r6
 8001c3e:	464c      	mov	r4, r9
 8001c40:	431c      	orrs	r4, r3
 8001c42:	46a2      	mov	sl, r4
 8001c44:	4654      	mov	r4, sl
 8001c46:	1e63      	subs	r3, r4, #1
 8001c48:	419c      	sbcs	r4, r3
 8001c4a:	433c      	orrs	r4, r7
 8001c4c:	e5c8      	b.n	80017e0 <__aeabi_dsub+0x26c>
 8001c4e:	0011      	movs	r1, r2
 8001c50:	2300      	movs	r3, #0
 8001c52:	2200      	movs	r2, #0
 8001c54:	e532      	b.n	80016bc <__aeabi_dsub+0x148>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	ff7fffff 	.word	0xff7fffff
 8001c60:	000007fe 	.word	0x000007fe
 8001c64:	464a      	mov	r2, r9
 8001c66:	1814      	adds	r4, r2, r0
 8001c68:	4284      	cmp	r4, r0
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	185b      	adds	r3, r3, r1
 8001c6e:	4698      	mov	r8, r3
 8001c70:	4252      	negs	r2, r2
 8001c72:	4490      	add	r8, r2
 8001c74:	e5e9      	b.n	800184a <__aeabi_dsub+0x2d6>
 8001c76:	4642      	mov	r2, r8
 8001c78:	4322      	orrs	r2, r4
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dsub+0x70a>
 8001c7c:	e6a6      	b.n	80019cc <__aeabi_dsub+0x458>
 8001c7e:	e5ea      	b.n	8001856 <__aeabi_dsub+0x2e2>
 8001c80:	074b      	lsls	r3, r1, #29
 8001c82:	08c2      	lsrs	r2, r0, #3
 8001c84:	431a      	orrs	r2, r3
 8001c86:	08cb      	lsrs	r3, r1, #3
 8001c88:	e632      	b.n	80018f0 <__aeabi_dsub+0x37c>
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4901      	ldr	r1, [pc, #4]	; (8001c94 <__aeabi_dsub+0x720>)
 8001c8e:	0013      	movs	r3, r2
 8001c90:	e514      	b.n	80016bc <__aeabi_dsub+0x148>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	000007ff 	.word	0x000007ff

08001c98 <__aeabi_d2iz>:
 8001c98:	000a      	movs	r2, r1
 8001c9a:	b530      	push	{r4, r5, lr}
 8001c9c:	4c13      	ldr	r4, [pc, #76]	; (8001cec <__aeabi_d2iz+0x54>)
 8001c9e:	0053      	lsls	r3, r2, #1
 8001ca0:	0309      	lsls	r1, r1, #12
 8001ca2:	0005      	movs	r5, r0
 8001ca4:	0b09      	lsrs	r1, r1, #12
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	0d5b      	lsrs	r3, r3, #21
 8001caa:	0fd2      	lsrs	r2, r2, #31
 8001cac:	42a3      	cmp	r3, r4
 8001cae:	dd04      	ble.n	8001cba <__aeabi_d2iz+0x22>
 8001cb0:	480f      	ldr	r0, [pc, #60]	; (8001cf0 <__aeabi_d2iz+0x58>)
 8001cb2:	4283      	cmp	r3, r0
 8001cb4:	dd02      	ble.n	8001cbc <__aeabi_d2iz+0x24>
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <__aeabi_d2iz+0x5c>)
 8001cb8:	18d0      	adds	r0, r2, r3
 8001cba:	bd30      	pop	{r4, r5, pc}
 8001cbc:	2080      	movs	r0, #128	; 0x80
 8001cbe:	0340      	lsls	r0, r0, #13
 8001cc0:	4301      	orrs	r1, r0
 8001cc2:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <__aeabi_d2iz+0x60>)
 8001cc4:	1ac0      	subs	r0, r0, r3
 8001cc6:	281f      	cmp	r0, #31
 8001cc8:	dd08      	ble.n	8001cdc <__aeabi_d2iz+0x44>
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <__aeabi_d2iz+0x64>)
 8001ccc:	1ac3      	subs	r3, r0, r3
 8001cce:	40d9      	lsrs	r1, r3
 8001cd0:	000b      	movs	r3, r1
 8001cd2:	4258      	negs	r0, r3
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d1f0      	bne.n	8001cba <__aeabi_d2iz+0x22>
 8001cd8:	0018      	movs	r0, r3
 8001cda:	e7ee      	b.n	8001cba <__aeabi_d2iz+0x22>
 8001cdc:	4c08      	ldr	r4, [pc, #32]	; (8001d00 <__aeabi_d2iz+0x68>)
 8001cde:	40c5      	lsrs	r5, r0
 8001ce0:	46a4      	mov	ip, r4
 8001ce2:	4463      	add	r3, ip
 8001ce4:	4099      	lsls	r1, r3
 8001ce6:	000b      	movs	r3, r1
 8001ce8:	432b      	orrs	r3, r5
 8001cea:	e7f2      	b.n	8001cd2 <__aeabi_d2iz+0x3a>
 8001cec:	000003fe 	.word	0x000003fe
 8001cf0:	0000041d 	.word	0x0000041d
 8001cf4:	7fffffff 	.word	0x7fffffff
 8001cf8:	00000433 	.word	0x00000433
 8001cfc:	00000413 	.word	0x00000413
 8001d00:	fffffbed 	.word	0xfffffbed

08001d04 <__aeabi_f2d>:
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	0043      	lsls	r3, r0, #1
 8001d08:	0246      	lsls	r6, r0, #9
 8001d0a:	0fc4      	lsrs	r4, r0, #31
 8001d0c:	20fe      	movs	r0, #254	; 0xfe
 8001d0e:	0e1b      	lsrs	r3, r3, #24
 8001d10:	1c59      	adds	r1, r3, #1
 8001d12:	0a75      	lsrs	r5, r6, #9
 8001d14:	4208      	tst	r0, r1
 8001d16:	d00c      	beq.n	8001d32 <__aeabi_f2d+0x2e>
 8001d18:	22e0      	movs	r2, #224	; 0xe0
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	4694      	mov	ip, r2
 8001d1e:	076d      	lsls	r5, r5, #29
 8001d20:	0b36      	lsrs	r6, r6, #12
 8001d22:	4463      	add	r3, ip
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	4333      	orrs	r3, r6
 8001d28:	07e4      	lsls	r4, r4, #31
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	0028      	movs	r0, r5
 8001d2e:	0019      	movs	r1, r3
 8001d30:	bd70      	pop	{r4, r5, r6, pc}
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d114      	bne.n	8001d60 <__aeabi_f2d+0x5c>
 8001d36:	2d00      	cmp	r5, #0
 8001d38:	d01b      	beq.n	8001d72 <__aeabi_f2d+0x6e>
 8001d3a:	0028      	movs	r0, r5
 8001d3c:	f000 f8f0 	bl	8001f20 <__clzsi2>
 8001d40:	280a      	cmp	r0, #10
 8001d42:	dc1c      	bgt.n	8001d7e <__aeabi_f2d+0x7a>
 8001d44:	230b      	movs	r3, #11
 8001d46:	002a      	movs	r2, r5
 8001d48:	1a1b      	subs	r3, r3, r0
 8001d4a:	40da      	lsrs	r2, r3
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	3315      	adds	r3, #21
 8001d50:	409d      	lsls	r5, r3
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <__aeabi_f2d+0x88>)
 8001d54:	0312      	lsls	r2, r2, #12
 8001d56:	1a1b      	subs	r3, r3, r0
 8001d58:	055b      	lsls	r3, r3, #21
 8001d5a:	0b16      	lsrs	r6, r2, #12
 8001d5c:	0d5b      	lsrs	r3, r3, #21
 8001d5e:	e7e1      	b.n	8001d24 <__aeabi_f2d+0x20>
 8001d60:	2d00      	cmp	r5, #0
 8001d62:	d009      	beq.n	8001d78 <__aeabi_f2d+0x74>
 8001d64:	0b32      	lsrs	r2, r6, #12
 8001d66:	2680      	movs	r6, #128	; 0x80
 8001d68:	0336      	lsls	r6, r6, #12
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <__aeabi_f2d+0x8c>)
 8001d6c:	076d      	lsls	r5, r5, #29
 8001d6e:	4316      	orrs	r6, r2
 8001d70:	e7d8      	b.n	8001d24 <__aeabi_f2d+0x20>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2600      	movs	r6, #0
 8001d76:	e7d5      	b.n	8001d24 <__aeabi_f2d+0x20>
 8001d78:	2600      	movs	r6, #0
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <__aeabi_f2d+0x8c>)
 8001d7c:	e7d2      	b.n	8001d24 <__aeabi_f2d+0x20>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	002a      	movs	r2, r5
 8001d82:	3b0b      	subs	r3, #11
 8001d84:	409a      	lsls	r2, r3
 8001d86:	2500      	movs	r5, #0
 8001d88:	e7e3      	b.n	8001d52 <__aeabi_f2d+0x4e>
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	00000389 	.word	0x00000389
 8001d90:	000007ff 	.word	0x000007ff

08001d94 <__aeabi_d2f>:
 8001d94:	0002      	movs	r2, r0
 8001d96:	004b      	lsls	r3, r1, #1
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	0308      	lsls	r0, r1, #12
 8001d9c:	0d5b      	lsrs	r3, r3, #21
 8001d9e:	4e3d      	ldr	r6, [pc, #244]	; (8001e94 <__aeabi_d2f+0x100>)
 8001da0:	0fcc      	lsrs	r4, r1, #31
 8001da2:	0a40      	lsrs	r0, r0, #9
 8001da4:	0f51      	lsrs	r1, r2, #29
 8001da6:	1c5f      	adds	r7, r3, #1
 8001da8:	4308      	orrs	r0, r1
 8001daa:	00d5      	lsls	r5, r2, #3
 8001dac:	4237      	tst	r7, r6
 8001dae:	d00a      	beq.n	8001dc6 <__aeabi_d2f+0x32>
 8001db0:	4939      	ldr	r1, [pc, #228]	; (8001e98 <__aeabi_d2f+0x104>)
 8001db2:	185e      	adds	r6, r3, r1
 8001db4:	2efe      	cmp	r6, #254	; 0xfe
 8001db6:	dd16      	ble.n	8001de6 <__aeabi_d2f+0x52>
 8001db8:	23ff      	movs	r3, #255	; 0xff
 8001dba:	2100      	movs	r1, #0
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	07e0      	lsls	r0, r4, #31
 8001dc2:	4318      	orrs	r0, r3
 8001dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <__aeabi_d2f+0x44>
 8001dca:	4328      	orrs	r0, r5
 8001dcc:	d027      	beq.n	8001e1e <__aeabi_d2f+0x8a>
 8001dce:	2105      	movs	r1, #5
 8001dd0:	0189      	lsls	r1, r1, #6
 8001dd2:	0a49      	lsrs	r1, r1, #9
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e7f1      	b.n	8001dbc <__aeabi_d2f+0x28>
 8001dd8:	4305      	orrs	r5, r0
 8001dda:	d0ed      	beq.n	8001db8 <__aeabi_d2f+0x24>
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	03c9      	lsls	r1, r1, #15
 8001de0:	23ff      	movs	r3, #255	; 0xff
 8001de2:	4301      	orrs	r1, r0
 8001de4:	e7ea      	b.n	8001dbc <__aeabi_d2f+0x28>
 8001de6:	2e00      	cmp	r6, #0
 8001de8:	dd1c      	ble.n	8001e24 <__aeabi_d2f+0x90>
 8001dea:	0192      	lsls	r2, r2, #6
 8001dec:	0011      	movs	r1, r2
 8001dee:	1e4a      	subs	r2, r1, #1
 8001df0:	4191      	sbcs	r1, r2
 8001df2:	00c0      	lsls	r0, r0, #3
 8001df4:	0f6d      	lsrs	r5, r5, #29
 8001df6:	4301      	orrs	r1, r0
 8001df8:	4329      	orrs	r1, r5
 8001dfa:	074b      	lsls	r3, r1, #29
 8001dfc:	d048      	beq.n	8001e90 <__aeabi_d2f+0xfc>
 8001dfe:	230f      	movs	r3, #15
 8001e00:	400b      	ands	r3, r1
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d000      	beq.n	8001e08 <__aeabi_d2f+0x74>
 8001e06:	3104      	adds	r1, #4
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	04db      	lsls	r3, r3, #19
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	d03f      	beq.n	8001e90 <__aeabi_d2f+0xfc>
 8001e10:	1c72      	adds	r2, r6, #1
 8001e12:	2efe      	cmp	r6, #254	; 0xfe
 8001e14:	d0d0      	beq.n	8001db8 <__aeabi_d2f+0x24>
 8001e16:	0189      	lsls	r1, r1, #6
 8001e18:	0a49      	lsrs	r1, r1, #9
 8001e1a:	b2d3      	uxtb	r3, r2
 8001e1c:	e7ce      	b.n	8001dbc <__aeabi_d2f+0x28>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	e7cb      	b.n	8001dbc <__aeabi_d2f+0x28>
 8001e24:	0032      	movs	r2, r6
 8001e26:	3217      	adds	r2, #23
 8001e28:	db22      	blt.n	8001e70 <__aeabi_d2f+0xdc>
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	221e      	movs	r2, #30
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4308      	orrs	r0, r1
 8001e32:	1b92      	subs	r2, r2, r6
 8001e34:	2a1f      	cmp	r2, #31
 8001e36:	dd1d      	ble.n	8001e74 <__aeabi_d2f+0xe0>
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4249      	negs	r1, r1
 8001e3c:	1b8e      	subs	r6, r1, r6
 8001e3e:	0001      	movs	r1, r0
 8001e40:	40f1      	lsrs	r1, r6
 8001e42:	000e      	movs	r6, r1
 8001e44:	2a20      	cmp	r2, #32
 8001e46:	d004      	beq.n	8001e52 <__aeabi_d2f+0xbe>
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <__aeabi_d2f+0x108>)
 8001e4a:	4694      	mov	ip, r2
 8001e4c:	4463      	add	r3, ip
 8001e4e:	4098      	lsls	r0, r3
 8001e50:	4305      	orrs	r5, r0
 8001e52:	0029      	movs	r1, r5
 8001e54:	1e4d      	subs	r5, r1, #1
 8001e56:	41a9      	sbcs	r1, r5
 8001e58:	4331      	orrs	r1, r6
 8001e5a:	2600      	movs	r6, #0
 8001e5c:	074b      	lsls	r3, r1, #29
 8001e5e:	d1ce      	bne.n	8001dfe <__aeabi_d2f+0x6a>
 8001e60:	2080      	movs	r0, #128	; 0x80
 8001e62:	000b      	movs	r3, r1
 8001e64:	04c0      	lsls	r0, r0, #19
 8001e66:	2201      	movs	r2, #1
 8001e68:	4003      	ands	r3, r0
 8001e6a:	4201      	tst	r1, r0
 8001e6c:	d1d3      	bne.n	8001e16 <__aeabi_d2f+0x82>
 8001e6e:	e7af      	b.n	8001dd0 <__aeabi_d2f+0x3c>
 8001e70:	2300      	movs	r3, #0
 8001e72:	e7ac      	b.n	8001dce <__aeabi_d2f+0x3a>
 8001e74:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <__aeabi_d2f+0x10c>)
 8001e76:	468c      	mov	ip, r1
 8001e78:	0029      	movs	r1, r5
 8001e7a:	4463      	add	r3, ip
 8001e7c:	40d1      	lsrs	r1, r2
 8001e7e:	409d      	lsls	r5, r3
 8001e80:	000a      	movs	r2, r1
 8001e82:	0029      	movs	r1, r5
 8001e84:	4098      	lsls	r0, r3
 8001e86:	1e4d      	subs	r5, r1, #1
 8001e88:	41a9      	sbcs	r1, r5
 8001e8a:	4301      	orrs	r1, r0
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	e7e4      	b.n	8001e5a <__aeabi_d2f+0xc6>
 8001e90:	0033      	movs	r3, r6
 8001e92:	e79d      	b.n	8001dd0 <__aeabi_d2f+0x3c>
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	fffffc80 	.word	0xfffffc80
 8001e9c:	fffffca2 	.word	0xfffffca2
 8001ea0:	fffffc82 	.word	0xfffffc82

08001ea4 <__aeabi_cdrcmple>:
 8001ea4:	4684      	mov	ip, r0
 8001ea6:	1c10      	adds	r0, r2, #0
 8001ea8:	4662      	mov	r2, ip
 8001eaa:	468c      	mov	ip, r1
 8001eac:	1c19      	adds	r1, r3, #0
 8001eae:	4663      	mov	r3, ip
 8001eb0:	e000      	b.n	8001eb4 <__aeabi_cdcmpeq>
 8001eb2:	46c0      	nop			; (mov r8, r8)

08001eb4 <__aeabi_cdcmpeq>:
 8001eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001eb6:	f000 f90b 	bl	80020d0 <__ledf2>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d401      	bmi.n	8001ec2 <__aeabi_cdcmpeq+0xe>
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	42c8      	cmn	r0, r1
 8001ec2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ec4 <__aeabi_dcmpeq>:
 8001ec4:	b510      	push	{r4, lr}
 8001ec6:	f000 f855 	bl	8001f74 <__eqdf2>
 8001eca:	4240      	negs	r0, r0
 8001ecc:	3001      	adds	r0, #1
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <__aeabi_dcmplt>:
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	f000 f8fd 	bl	80020d0 <__ledf2>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	db01      	blt.n	8001ede <__aeabi_dcmplt+0xe>
 8001eda:	2000      	movs	r0, #0
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	2001      	movs	r0, #1
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)

08001ee4 <__aeabi_dcmple>:
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	f000 f8f3 	bl	80020d0 <__ledf2>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	dd01      	ble.n	8001ef2 <__aeabi_dcmple+0xe>
 8001eee:	2000      	movs	r0, #0
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	bd10      	pop	{r4, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)

08001ef8 <__aeabi_dcmpgt>:
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	f000 f877 	bl	8001fec <__gedf2>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	dc01      	bgt.n	8001f06 <__aeabi_dcmpgt+0xe>
 8001f02:	2000      	movs	r0, #0
 8001f04:	bd10      	pop	{r4, pc}
 8001f06:	2001      	movs	r0, #1
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)

08001f0c <__aeabi_dcmpge>:
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	f000 f86d 	bl	8001fec <__gedf2>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	da01      	bge.n	8001f1a <__aeabi_dcmpge+0xe>
 8001f16:	2000      	movs	r0, #0
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	bd10      	pop	{r4, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)

08001f20 <__clzsi2>:
 8001f20:	211c      	movs	r1, #28
 8001f22:	2301      	movs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	4298      	cmp	r0, r3
 8001f28:	d301      	bcc.n	8001f2e <__clzsi2+0xe>
 8001f2a:	0c00      	lsrs	r0, r0, #16
 8001f2c:	3910      	subs	r1, #16
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	4298      	cmp	r0, r3
 8001f32:	d301      	bcc.n	8001f38 <__clzsi2+0x18>
 8001f34:	0a00      	lsrs	r0, r0, #8
 8001f36:	3908      	subs	r1, #8
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d301      	bcc.n	8001f42 <__clzsi2+0x22>
 8001f3e:	0900      	lsrs	r0, r0, #4
 8001f40:	3904      	subs	r1, #4
 8001f42:	a202      	add	r2, pc, #8	; (adr r2, 8001f4c <__clzsi2+0x2c>)
 8001f44:	5c10      	ldrb	r0, [r2, r0]
 8001f46:	1840      	adds	r0, r0, r1
 8001f48:	4770      	bx	lr
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	02020304 	.word	0x02020304
 8001f50:	01010101 	.word	0x01010101
	...

08001f5c <__clzdi2>:
 8001f5c:	b510      	push	{r4, lr}
 8001f5e:	2900      	cmp	r1, #0
 8001f60:	d103      	bne.n	8001f6a <__clzdi2+0xe>
 8001f62:	f7ff ffdd 	bl	8001f20 <__clzsi2>
 8001f66:	3020      	adds	r0, #32
 8001f68:	e002      	b.n	8001f70 <__clzdi2+0x14>
 8001f6a:	1c08      	adds	r0, r1, #0
 8001f6c:	f7ff ffd8 	bl	8001f20 <__clzsi2>
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)

08001f74 <__eqdf2>:
 8001f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f76:	464f      	mov	r7, r9
 8001f78:	4646      	mov	r6, r8
 8001f7a:	46d6      	mov	lr, sl
 8001f7c:	4694      	mov	ip, r2
 8001f7e:	4691      	mov	r9, r2
 8001f80:	031a      	lsls	r2, r3, #12
 8001f82:	0b12      	lsrs	r2, r2, #12
 8001f84:	4d18      	ldr	r5, [pc, #96]	; (8001fe8 <__eqdf2+0x74>)
 8001f86:	b5c0      	push	{r6, r7, lr}
 8001f88:	004c      	lsls	r4, r1, #1
 8001f8a:	030f      	lsls	r7, r1, #12
 8001f8c:	4692      	mov	sl, r2
 8001f8e:	005a      	lsls	r2, r3, #1
 8001f90:	0006      	movs	r6, r0
 8001f92:	4680      	mov	r8, r0
 8001f94:	0b3f      	lsrs	r7, r7, #12
 8001f96:	2001      	movs	r0, #1
 8001f98:	0d64      	lsrs	r4, r4, #21
 8001f9a:	0fc9      	lsrs	r1, r1, #31
 8001f9c:	0d52      	lsrs	r2, r2, #21
 8001f9e:	0fdb      	lsrs	r3, r3, #31
 8001fa0:	42ac      	cmp	r4, r5
 8001fa2:	d00a      	beq.n	8001fba <__eqdf2+0x46>
 8001fa4:	42aa      	cmp	r2, r5
 8001fa6:	d003      	beq.n	8001fb0 <__eqdf2+0x3c>
 8001fa8:	4294      	cmp	r4, r2
 8001faa:	d101      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fac:	4557      	cmp	r7, sl
 8001fae:	d00d      	beq.n	8001fcc <__eqdf2+0x58>
 8001fb0:	bce0      	pop	{r5, r6, r7}
 8001fb2:	46ba      	mov	sl, r7
 8001fb4:	46b1      	mov	r9, r6
 8001fb6:	46a8      	mov	r8, r5
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fba:	003d      	movs	r5, r7
 8001fbc:	4335      	orrs	r5, r6
 8001fbe:	d1f7      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fc0:	42a2      	cmp	r2, r4
 8001fc2:	d1f5      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fc4:	4652      	mov	r2, sl
 8001fc6:	4665      	mov	r5, ip
 8001fc8:	432a      	orrs	r2, r5
 8001fca:	d1f1      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fcc:	2001      	movs	r0, #1
 8001fce:	45c8      	cmp	r8, r9
 8001fd0:	d1ee      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	d006      	beq.n	8001fe4 <__eqdf2+0x70>
 8001fd6:	2c00      	cmp	r4, #0
 8001fd8:	d1ea      	bne.n	8001fb0 <__eqdf2+0x3c>
 8001fda:	433e      	orrs	r6, r7
 8001fdc:	0030      	movs	r0, r6
 8001fde:	1e46      	subs	r6, r0, #1
 8001fe0:	41b0      	sbcs	r0, r6
 8001fe2:	e7e5      	b.n	8001fb0 <__eqdf2+0x3c>
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	e7e3      	b.n	8001fb0 <__eqdf2+0x3c>
 8001fe8:	000007ff 	.word	0x000007ff

08001fec <__gedf2>:
 8001fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fee:	464e      	mov	r6, r9
 8001ff0:	4645      	mov	r5, r8
 8001ff2:	4657      	mov	r7, sl
 8001ff4:	46de      	mov	lr, fp
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	b5e0      	push	{r5, r6, r7, lr}
 8001ffc:	0016      	movs	r6, r2
 8001ffe:	031b      	lsls	r3, r3, #12
 8002000:	0b1b      	lsrs	r3, r3, #12
 8002002:	4d32      	ldr	r5, [pc, #200]	; (80020cc <__gedf2+0xe0>)
 8002004:	030f      	lsls	r7, r1, #12
 8002006:	004a      	lsls	r2, r1, #1
 8002008:	4699      	mov	r9, r3
 800200a:	0043      	lsls	r3, r0, #1
 800200c:	46a4      	mov	ip, r4
 800200e:	46b0      	mov	r8, r6
 8002010:	0b3f      	lsrs	r7, r7, #12
 8002012:	0d52      	lsrs	r2, r2, #21
 8002014:	0fc9      	lsrs	r1, r1, #31
 8002016:	0d5b      	lsrs	r3, r3, #21
 8002018:	0fc0      	lsrs	r0, r0, #31
 800201a:	42aa      	cmp	r2, r5
 800201c:	d029      	beq.n	8002072 <__gedf2+0x86>
 800201e:	42ab      	cmp	r3, r5
 8002020:	d018      	beq.n	8002054 <__gedf2+0x68>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d12a      	bne.n	800207c <__gedf2+0x90>
 8002026:	433c      	orrs	r4, r7
 8002028:	46a3      	mov	fp, r4
 800202a:	4265      	negs	r5, r4
 800202c:	4165      	adcs	r5, r4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <__gedf2+0x4c>
 8002032:	464c      	mov	r4, r9
 8002034:	4326      	orrs	r6, r4
 8002036:	d027      	beq.n	8002088 <__gedf2+0x9c>
 8002038:	2d00      	cmp	r5, #0
 800203a:	d115      	bne.n	8002068 <__gedf2+0x7c>
 800203c:	4281      	cmp	r1, r0
 800203e:	d028      	beq.n	8002092 <__gedf2+0xa6>
 8002040:	2002      	movs	r0, #2
 8002042:	3901      	subs	r1, #1
 8002044:	4008      	ands	r0, r1
 8002046:	3801      	subs	r0, #1
 8002048:	bcf0      	pop	{r4, r5, r6, r7}
 800204a:	46bb      	mov	fp, r7
 800204c:	46b2      	mov	sl, r6
 800204e:	46a9      	mov	r9, r5
 8002050:	46a0      	mov	r8, r4
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002054:	464d      	mov	r5, r9
 8002056:	432e      	orrs	r6, r5
 8002058:	d12f      	bne.n	80020ba <__gedf2+0xce>
 800205a:	2a00      	cmp	r2, #0
 800205c:	d1ee      	bne.n	800203c <__gedf2+0x50>
 800205e:	433c      	orrs	r4, r7
 8002060:	4265      	negs	r5, r4
 8002062:	4165      	adcs	r5, r4
 8002064:	2d00      	cmp	r5, #0
 8002066:	d0e9      	beq.n	800203c <__gedf2+0x50>
 8002068:	2800      	cmp	r0, #0
 800206a:	d1ed      	bne.n	8002048 <__gedf2+0x5c>
 800206c:	2001      	movs	r0, #1
 800206e:	4240      	negs	r0, r0
 8002070:	e7ea      	b.n	8002048 <__gedf2+0x5c>
 8002072:	003d      	movs	r5, r7
 8002074:	4325      	orrs	r5, r4
 8002076:	d120      	bne.n	80020ba <__gedf2+0xce>
 8002078:	4293      	cmp	r3, r2
 800207a:	d0eb      	beq.n	8002054 <__gedf2+0x68>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1dd      	bne.n	800203c <__gedf2+0x50>
 8002080:	464c      	mov	r4, r9
 8002082:	4326      	orrs	r6, r4
 8002084:	d1da      	bne.n	800203c <__gedf2+0x50>
 8002086:	e7db      	b.n	8002040 <__gedf2+0x54>
 8002088:	465b      	mov	r3, fp
 800208a:	2000      	movs	r0, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0db      	beq.n	8002048 <__gedf2+0x5c>
 8002090:	e7d6      	b.n	8002040 <__gedf2+0x54>
 8002092:	429a      	cmp	r2, r3
 8002094:	dc0a      	bgt.n	80020ac <__gedf2+0xc0>
 8002096:	dbe7      	blt.n	8002068 <__gedf2+0x7c>
 8002098:	454f      	cmp	r7, r9
 800209a:	d8d1      	bhi.n	8002040 <__gedf2+0x54>
 800209c:	d010      	beq.n	80020c0 <__gedf2+0xd4>
 800209e:	2000      	movs	r0, #0
 80020a0:	454f      	cmp	r7, r9
 80020a2:	d2d1      	bcs.n	8002048 <__gedf2+0x5c>
 80020a4:	2900      	cmp	r1, #0
 80020a6:	d0e1      	beq.n	800206c <__gedf2+0x80>
 80020a8:	0008      	movs	r0, r1
 80020aa:	e7cd      	b.n	8002048 <__gedf2+0x5c>
 80020ac:	4243      	negs	r3, r0
 80020ae:	4158      	adcs	r0, r3
 80020b0:	2302      	movs	r3, #2
 80020b2:	4240      	negs	r0, r0
 80020b4:	4018      	ands	r0, r3
 80020b6:	3801      	subs	r0, #1
 80020b8:	e7c6      	b.n	8002048 <__gedf2+0x5c>
 80020ba:	2002      	movs	r0, #2
 80020bc:	4240      	negs	r0, r0
 80020be:	e7c3      	b.n	8002048 <__gedf2+0x5c>
 80020c0:	45c4      	cmp	ip, r8
 80020c2:	d8bd      	bhi.n	8002040 <__gedf2+0x54>
 80020c4:	2000      	movs	r0, #0
 80020c6:	45c4      	cmp	ip, r8
 80020c8:	d2be      	bcs.n	8002048 <__gedf2+0x5c>
 80020ca:	e7eb      	b.n	80020a4 <__gedf2+0xb8>
 80020cc:	000007ff 	.word	0x000007ff

080020d0 <__ledf2>:
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	464e      	mov	r6, r9
 80020d4:	4645      	mov	r5, r8
 80020d6:	4657      	mov	r7, sl
 80020d8:	46de      	mov	lr, fp
 80020da:	0004      	movs	r4, r0
 80020dc:	0018      	movs	r0, r3
 80020de:	b5e0      	push	{r5, r6, r7, lr}
 80020e0:	0016      	movs	r6, r2
 80020e2:	031b      	lsls	r3, r3, #12
 80020e4:	0b1b      	lsrs	r3, r3, #12
 80020e6:	4d31      	ldr	r5, [pc, #196]	; (80021ac <__ledf2+0xdc>)
 80020e8:	030f      	lsls	r7, r1, #12
 80020ea:	004a      	lsls	r2, r1, #1
 80020ec:	4699      	mov	r9, r3
 80020ee:	0043      	lsls	r3, r0, #1
 80020f0:	46a4      	mov	ip, r4
 80020f2:	46b0      	mov	r8, r6
 80020f4:	0b3f      	lsrs	r7, r7, #12
 80020f6:	0d52      	lsrs	r2, r2, #21
 80020f8:	0fc9      	lsrs	r1, r1, #31
 80020fa:	0d5b      	lsrs	r3, r3, #21
 80020fc:	0fc0      	lsrs	r0, r0, #31
 80020fe:	42aa      	cmp	r2, r5
 8002100:	d011      	beq.n	8002126 <__ledf2+0x56>
 8002102:	42ab      	cmp	r3, r5
 8002104:	d014      	beq.n	8002130 <__ledf2+0x60>
 8002106:	2a00      	cmp	r2, #0
 8002108:	d12f      	bne.n	800216a <__ledf2+0x9a>
 800210a:	433c      	orrs	r4, r7
 800210c:	46a3      	mov	fp, r4
 800210e:	4265      	negs	r5, r4
 8002110:	4165      	adcs	r5, r4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d114      	bne.n	8002140 <__ledf2+0x70>
 8002116:	464c      	mov	r4, r9
 8002118:	4326      	orrs	r6, r4
 800211a:	d111      	bne.n	8002140 <__ledf2+0x70>
 800211c:	465b      	mov	r3, fp
 800211e:	2000      	movs	r0, #0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <__ledf2+0x84>
 8002124:	e010      	b.n	8002148 <__ledf2+0x78>
 8002126:	003d      	movs	r5, r7
 8002128:	4325      	orrs	r5, r4
 800212a:	d112      	bne.n	8002152 <__ledf2+0x82>
 800212c:	4293      	cmp	r3, r2
 800212e:	d11c      	bne.n	800216a <__ledf2+0x9a>
 8002130:	464d      	mov	r5, r9
 8002132:	432e      	orrs	r6, r5
 8002134:	d10d      	bne.n	8002152 <__ledf2+0x82>
 8002136:	2a00      	cmp	r2, #0
 8002138:	d104      	bne.n	8002144 <__ledf2+0x74>
 800213a:	433c      	orrs	r4, r7
 800213c:	4265      	negs	r5, r4
 800213e:	4165      	adcs	r5, r4
 8002140:	2d00      	cmp	r5, #0
 8002142:	d10d      	bne.n	8002160 <__ledf2+0x90>
 8002144:	4281      	cmp	r1, r0
 8002146:	d016      	beq.n	8002176 <__ledf2+0xa6>
 8002148:	2002      	movs	r0, #2
 800214a:	3901      	subs	r1, #1
 800214c:	4008      	ands	r0, r1
 800214e:	3801      	subs	r0, #1
 8002150:	e000      	b.n	8002154 <__ledf2+0x84>
 8002152:	2002      	movs	r0, #2
 8002154:	bcf0      	pop	{r4, r5, r6, r7}
 8002156:	46bb      	mov	fp, r7
 8002158:	46b2      	mov	sl, r6
 800215a:	46a9      	mov	r9, r5
 800215c:	46a0      	mov	r8, r4
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	2800      	cmp	r0, #0
 8002162:	d1f7      	bne.n	8002154 <__ledf2+0x84>
 8002164:	2001      	movs	r0, #1
 8002166:	4240      	negs	r0, r0
 8002168:	e7f4      	b.n	8002154 <__ledf2+0x84>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ea      	bne.n	8002144 <__ledf2+0x74>
 800216e:	464c      	mov	r4, r9
 8002170:	4326      	orrs	r6, r4
 8002172:	d1e7      	bne.n	8002144 <__ledf2+0x74>
 8002174:	e7e8      	b.n	8002148 <__ledf2+0x78>
 8002176:	429a      	cmp	r2, r3
 8002178:	dd06      	ble.n	8002188 <__ledf2+0xb8>
 800217a:	4243      	negs	r3, r0
 800217c:	4158      	adcs	r0, r3
 800217e:	2302      	movs	r3, #2
 8002180:	4240      	negs	r0, r0
 8002182:	4018      	ands	r0, r3
 8002184:	3801      	subs	r0, #1
 8002186:	e7e5      	b.n	8002154 <__ledf2+0x84>
 8002188:	429a      	cmp	r2, r3
 800218a:	dbe9      	blt.n	8002160 <__ledf2+0x90>
 800218c:	454f      	cmp	r7, r9
 800218e:	d8db      	bhi.n	8002148 <__ledf2+0x78>
 8002190:	d006      	beq.n	80021a0 <__ledf2+0xd0>
 8002192:	2000      	movs	r0, #0
 8002194:	454f      	cmp	r7, r9
 8002196:	d2dd      	bcs.n	8002154 <__ledf2+0x84>
 8002198:	2900      	cmp	r1, #0
 800219a:	d0e3      	beq.n	8002164 <__ledf2+0x94>
 800219c:	0008      	movs	r0, r1
 800219e:	e7d9      	b.n	8002154 <__ledf2+0x84>
 80021a0:	45c4      	cmp	ip, r8
 80021a2:	d8d1      	bhi.n	8002148 <__ledf2+0x78>
 80021a4:	2000      	movs	r0, #0
 80021a6:	45c4      	cmp	ip, r8
 80021a8:	d2d4      	bcs.n	8002154 <__ledf2+0x84>
 80021aa:	e7f5      	b.n	8002198 <__ledf2+0xc8>
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <GetSize_LUT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t GetSize_LUT(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	0018      	movs	r0, r3
 80021ba:	2314      	movs	r3, #20
 80021bc:	001a      	movs	r2, r3
 80021be:	2100      	movs	r1, #0
 80021c0:	f004 fb78 	bl	80068b4 <memset>
	HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2100      	movs	r1, #0
 80021c8:	0018      	movs	r0, r3
 80021ca:	f002 ff0d 	bl	8004fe8 <HAL_RCC_GetClockConfig>
	uint32_t f_hclk = HAL_RCC_GetSysClockFreq() / (RCC_ClkInitStruct.AHBCLKDivider + 1);
 80021ce:	f002 fe0d 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 80021d2:	0002      	movs	r2, r0
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	3301      	adds	r3, #1
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f7fd ff93 	bl	8000108 <__udivsi3>
 80021e2:	0003      	movs	r3, r0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t f_clk = f_hclk / (RCC_ClkInitStruct.APB2CLKDivider + 1);
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	3301      	adds	r3, #1
 80021ec:	0019      	movs	r1, r3
 80021ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021f0:	f7fd ff8a 	bl	8000108 <__udivsi3>
 80021f4:	0003      	movs	r3, r0
 80021f6:	623b      	str	r3, [r7, #32]
	uint32_t f_trig = f_clk / (((TIM2->PSC) + 1) * ((TIM2->ARR) + 1));
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	05db      	lsls	r3, r3, #23
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	05db      	lsls	r3, r3, #23
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	3301      	adds	r3, #1
 8002208:	4353      	muls	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	6a38      	ldr	r0, [r7, #32]
 800220e:	f7fd ff7b 	bl	8000108 <__udivsi3>
 8002212:	0003      	movs	r3, r0
 8002214:	61fb      	str	r3, [r7, #28]
	uint32_t n_tot = PERIOD_MS * f_trig / 1000U;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2232      	movs	r2, #50	; 0x32
 800221a:	4353      	muls	r3, r2
 800221c:	22fa      	movs	r2, #250	; 0xfa
 800221e:	0091      	lsls	r1, r2, #2
 8002220:	0018      	movs	r0, r3
 8002222:	f7fd ff71 	bl	8000108 <__udivsi3>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]
	return n_tot;
 800222a:	69bb      	ldr	r3, [r7, #24]
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b00a      	add	sp, #40	; 0x28
 8002232:	bd80      	pop	{r7, pc}

08002234 <GenerateBiphasicPulse_LUT>:
	uint32_t trig_period_US = GetTriggerPeriod_ADC();
	sprintf(msg, "%u,%u,%u\r\n", (unsigned int) ADC_Buf[0], (unsigned int) ADC_Buf[1], (unsigned int) trig_period_US);
}

void GenerateBiphasicPulse_LUT(uint32_t *LUT, float Amplitude_mA, uint16_t Pulse_Period_mS, uint16_t Interpulse_Period_mS, uint16_t Period_mS, uint32_t n_tot)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b08b      	sub	sp, #44	; 0x2c
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	0019      	movs	r1, r3
 8002240:	1dbb      	adds	r3, r7, #6
 8002242:	801a      	strh	r2, [r3, #0]
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	1c0a      	adds	r2, r1, #0
 8002248:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t n_phase = n_tot * Pulse_Period_mS / Period_mS;
 800224e:	1dbb      	adds	r3, r7, #6
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002254:	435a      	muls	r2, r3
 8002256:	2438      	movs	r4, #56	; 0x38
 8002258:	193b      	adds	r3, r7, r4
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	0019      	movs	r1, r3
 800225e:	0010      	movs	r0, r2
 8002260:	f7fd ff52 	bl	8000108 <__udivsi3>
 8002264:	0003      	movs	r3, r0
 8002266:	623b      	str	r3, [r7, #32]
	uint32_t n_interphase = n_tot * Interpulse_Period_mS / Period_mS;
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800226e:	435a      	muls	r2, r3
 8002270:	193b      	adds	r3, r7, r4
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	0019      	movs	r1, r3
 8002276:	0010      	movs	r0, r2
 8002278:	f7fd ff46 	bl	8000108 <__udivsi3>
 800227c:	0003      	movs	r3, r0
 800227e:	61fb      	str	r3, [r7, #28]
	float V_Dac = (((Amplitude_mA * R_SHUNT_OHMS/ 1000) / 2) + 1.65) ;
 8002280:	494d      	ldr	r1, [pc, #308]	; (80023b8 <GenerateBiphasicPulse_LUT+0x184>)
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f7fe fa0a 	bl	800069c <__aeabi_fmul>
 8002288:	1c03      	adds	r3, r0, #0
 800228a:	494c      	ldr	r1, [pc, #304]	; (80023bc <GenerateBiphasicPulse_LUT+0x188>)
 800228c:	1c18      	adds	r0, r3, #0
 800228e:	f7fe f8f9 	bl	8000484 <__aeabi_fdiv>
 8002292:	1c03      	adds	r3, r0, #0
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	05c9      	lsls	r1, r1, #23
 8002298:	1c18      	adds	r0, r3, #0
 800229a:	f7fe f8f3 	bl	8000484 <__aeabi_fdiv>
 800229e:	1c03      	adds	r3, r0, #0
 80022a0:	1c18      	adds	r0, r3, #0
 80022a2:	f7ff fd2f 	bl	8001d04 <__aeabi_f2d>
 80022a6:	4a46      	ldr	r2, [pc, #280]	; (80023c0 <GenerateBiphasicPulse_LUT+0x18c>)
 80022a8:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <GenerateBiphasicPulse_LUT+0x190>)
 80022aa:	f7fe fb11 	bl	80008d0 <__aeabi_dadd>
 80022ae:	0002      	movs	r2, r0
 80022b0:	000b      	movs	r3, r1
 80022b2:	0010      	movs	r0, r2
 80022b4:	0019      	movs	r1, r3
 80022b6:	f7ff fd6d 	bl	8001d94 <__aeabi_d2f>
 80022ba:	1c03      	adds	r3, r0, #0
 80022bc:	61bb      	str	r3, [r7, #24]
	uint16_t Amplitude = ((V_Dac * 4096) / V_REF) - 2048;
 80022be:	218b      	movs	r1, #139	; 0x8b
 80022c0:	05c9      	lsls	r1, r1, #23
 80022c2:	69b8      	ldr	r0, [r7, #24]
 80022c4:	f7fe f9ea 	bl	800069c <__aeabi_fmul>
 80022c8:	1c03      	adds	r3, r0, #0
 80022ca:	1c18      	adds	r0, r3, #0
 80022cc:	f7ff fd1a 	bl	8001d04 <__aeabi_f2d>
 80022d0:	4a3b      	ldr	r2, [pc, #236]	; (80023c0 <GenerateBiphasicPulse_LUT+0x18c>)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <GenerateBiphasicPulse_LUT+0x194>)
 80022d4:	f7fe fe66 	bl	8000fa4 <__aeabi_ddiv>
 80022d8:	0002      	movs	r2, r0
 80022da:	000b      	movs	r3, r1
 80022dc:	0010      	movs	r0, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	2200      	movs	r2, #0
 80022e2:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <GenerateBiphasicPulse_LUT+0x198>)
 80022e4:	f7ff f946 	bl	8001574 <__aeabi_dsub>
 80022e8:	0002      	movs	r2, r0
 80022ea:	000b      	movs	r3, r1
 80022ec:	2116      	movs	r1, #22
 80022ee:	187c      	adds	r4, r7, r1
 80022f0:	0010      	movs	r0, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	f7fd ffdc 	bl	80002b0 <__aeabi_d2uiz>
 80022f8:	0003      	movs	r3, r0
 80022fa:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < n_phase; i++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	e00e      	b.n	8002320 <GenerateBiphasicPulse_LUT+0xec>
	{
		*(LUT + i) = 2048 + Amplitude; // Amplitude is currently just a 12-bit number specifying DAC_OUT value
 8002302:	2316      	movs	r3, #22
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	1899      	adds	r1, r3, r2
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	000a      	movs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
	for (i = 0; i < n_phase; i++)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d3ec      	bcc.n	8002302 <GenerateBiphasicPulse_LUT+0xce>
	}
	for (i = n_phase; i < (n_phase + n_interphase); i++)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	e009      	b.n	8002342 <GenerateBiphasicPulse_LUT+0x10e>
	{
		*(LUT + i) = 2048; // Middle of DAC Output Range is 0 mA
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	18d3      	adds	r3, r2, r3
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]
	for (i = n_phase; i < (n_phase + n_interphase); i++)
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3301      	adds	r3, #1
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	6a3a      	ldr	r2, [r7, #32]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	18d3      	adds	r3, r2, r3
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	429a      	cmp	r2, r3
 800234c:	d3ef      	bcc.n	800232e <GenerateBiphasicPulse_LUT+0xfa>
	}
	for (i = (n_phase + n_interphase); i < (2*n_phase + n_interphase); i++)
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	18d3      	adds	r3, r2, r3
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	e00e      	b.n	8002376 <GenerateBiphasicPulse_LUT+0x142>
	{
		*(LUT + i) = 2048 - Amplitude;
 8002358:	2316      	movs	r3, #22
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	1ad1      	subs	r1, r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	000a      	movs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]
	for (i = (n_phase + n_interphase); i < (2*n_phase + n_interphase); i++)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	3301      	adds	r3, #1
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	005a      	lsls	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	429a      	cmp	r2, r3
 8002382:	d3e9      	bcc.n	8002358 <GenerateBiphasicPulse_LUT+0x124>
	}
	for (i = (2*n_phase + n_interphase); i < n_tot; i++)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	18d3      	adds	r3, r2, r3
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
 800238e:	e009      	b.n	80023a4 <GenerateBiphasicPulse_LUT+0x170>
	{
		*(LUT + i) = 2048;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	18d3      	adds	r3, r2, r3
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	601a      	str	r2, [r3, #0]
	for (i = (2*n_phase + n_interphase); i < n_tot; i++)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d3f1      	bcc.n	8002390 <GenerateBiphasicPulse_LUT+0x15c>
	}
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b00b      	add	sp, #44	; 0x2c
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	42040000 	.word	0x42040000
 80023bc:	447a0000 	.word	0x447a0000
 80023c0:	66666666 	.word	0x66666666
 80023c4:	3ffa6666 	.word	0x3ffa6666
 80023c8:	400a6666 	.word	0x400a6666
 80023cc:	40a00000 	.word	0x40a00000

080023d0 <HAL_ADC_ConvCpltCallback>:
		*(LUT + 1) = 2669;
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80023d8:	23a0      	movs	r3, #160	; 0xa0
 80023da:	05db      	lsls	r3, r3, #23
 80023dc:	2120      	movs	r1, #32
 80023de:	0018      	movs	r0, r3
 80023e0:	f001 ffdd 	bl	800439e <HAL_GPIO_TogglePin>

}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023f2:	f000 fc9f 	bl	8002d34 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023f6:	f000 f849 	bl	800248c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023fa:	f000 fa0b 	bl	8002814 <MX_GPIO_Init>
  MX_DMA_Init();
 80023fe:	f000 f9e3 	bl	80027c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002402:	f000 f9b1 	bl	8002768 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002406:	f000 f927 	bl	8002658 <MX_DAC_Init>
  MX_TIM2_Init();
 800240a:	f000 f959 	bl	80026c0 <MX_TIM2_Init>
  MX_ADC_Init();
 800240e:	f000 f8af 	bl	8002570 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t n_tot = GetSize_LUT();
 8002412:	f7ff fecd 	bl	80021b0 <GetSize_LUT>
 8002416:	0003      	movs	r3, r0
 8002418:	607b      	str	r3, [r7, #4]
  LUT = (uint32_t *) malloc(n_tot * sizeof(*LUT));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	0018      	movs	r0, r3
 8002420:	f004 fa3e 	bl	80068a0 <malloc>
 8002424:	0003      	movs	r3, r0
 8002426:	001a      	movs	r2, r3
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <main+0x88>)
 800242a:	601a      	str	r2, [r3, #0]
  if (LUT != NULL) GenerateBiphasicPulse_LUT(LUT, AMPLITUDE_MA, PULSE_PERIOD_MS, INTERPULSE_PERIOD_MS, PERIOD_MS, n_tot);
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <main+0x88>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <main+0x5e>
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <main+0x88>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	490f      	ldr	r1, [pc, #60]	; (8002478 <main+0x8c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	2332      	movs	r3, #50	; 0x32
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	230a      	movs	r3, #10
 8002444:	220a      	movs	r2, #10
 8002446:	f7ff fef5 	bl	8002234 <GenerateBiphasicPulse_LUT>
  //GenerateConstCurrent(LUT, 10, n_tot);

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_Buf, 128);
 800244a:	490c      	ldr	r1, [pc, #48]	; (800247c <main+0x90>)
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <main+0x94>)
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	0018      	movs	r0, r3
 8002452:	f000 fec5 	bl	80031e0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)LUT, n_tot, DAC_ALIGN_12B_R);
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <main+0x88>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4809      	ldr	r0, [pc, #36]	; (8002484 <main+0x98>)
 800245e:	2100      	movs	r1, #0
 8002460:	9100      	str	r1, [sp, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	f001 fb1c 	bl	8003aa0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <main+0x9c>)
 800246a:	0018      	movs	r0, r3
 800246c:	f002 ff92 	bl	8005394 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      while (1)
 8002470:	e7fe      	b.n	8002470 <main+0x84>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	20000098 	.word	0x20000098
 8002478:	42480000 	.word	0x42480000
 800247c:	20000200 	.word	0x20000200
 8002480:	20000300 	.word	0x20000300
 8002484:	200000e4 	.word	0x200000e4
 8002488:	200000f4 	.word	0x200000f4

0800248c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b09d      	sub	sp, #116	; 0x74
 8002490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002492:	2438      	movs	r4, #56	; 0x38
 8002494:	193b      	adds	r3, r7, r4
 8002496:	0018      	movs	r0, r3
 8002498:	2338      	movs	r3, #56	; 0x38
 800249a:	001a      	movs	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f004 fa09 	bl	80068b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a2:	2324      	movs	r3, #36	; 0x24
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	0018      	movs	r0, r3
 80024a8:	2314      	movs	r3, #20
 80024aa:	001a      	movs	r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	f004 fa01 	bl	80068b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b2:	003b      	movs	r3, r7
 80024b4:	0018      	movs	r0, r3
 80024b6:	2324      	movs	r3, #36	; 0x24
 80024b8:	001a      	movs	r2, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	f004 f9fa 	bl	80068b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <SystemClock_Config+0xdc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <SystemClock_Config+0xe0>)
 80024c6:	401a      	ands	r2, r3
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <SystemClock_Config+0xdc>)
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	0109      	lsls	r1, r1, #4
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024d2:	0021      	movs	r1, r4
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2202      	movs	r2, #2
 80024d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2201      	movs	r2, #1
 80024de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2210      	movs	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2202      	movs	r2, #2
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2200      	movs	r2, #0
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	02d2      	lsls	r2, r2, #11
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	03d2      	lsls	r2, r2, #15
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002502:	187b      	adds	r3, r7, r1
 8002504:	0018      	movs	r0, r3
 8002506:	f001 ff65 	bl	80043d4 <HAL_RCC_OscConfig>
 800250a:	1e03      	subs	r3, r0, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800250e:	f000 f9e5 	bl	80028dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002512:	2124      	movs	r1, #36	; 0x24
 8002514:	187b      	adds	r3, r7, r1
 8002516:	220f      	movs	r2, #15
 8002518:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2203      	movs	r2, #3
 800251e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2101      	movs	r1, #1
 8002536:	0018      	movs	r0, r3
 8002538:	f002 fb10 	bl	8004b5c <HAL_RCC_ClockConfig>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002540:	f000 f9cc 	bl	80028dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002544:	003b      	movs	r3, r7
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800254a:	003b      	movs	r3, r7
 800254c:	2200      	movs	r2, #0
 800254e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	003b      	movs	r3, r7
 8002552:	0018      	movs	r0, r3
 8002554:	f002 fd7a 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800255c:	f000 f9be 	bl	80028dc <Error_Handler>
  }
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b01d      	add	sp, #116	; 0x74
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	40007000 	.word	0x40007000
 800256c:	ffffe7ff 	.word	0xffffe7ff

08002570 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002576:	003b      	movs	r3, r7
 8002578:	0018      	movs	r0, r3
 800257a:	2308      	movs	r3, #8
 800257c:	001a      	movs	r2, r3
 800257e:	2100      	movs	r1, #0
 8002580:	f004 f998 	bl	80068b4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002584:	4b31      	ldr	r3, [pc, #196]	; (800264c <MX_ADC_Init+0xdc>)
 8002586:	4a32      	ldr	r2, [pc, #200]	; (8002650 <MX_ADC_Init+0xe0>)
 8002588:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800258a:	4b30      	ldr	r3, [pc, #192]	; (800264c <MX_ADC_Init+0xdc>)
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <MX_ADC_Init+0xdc>)
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	0612      	lsls	r2, r2, #24
 8002596:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <MX_ADC_Init+0xdc>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <MX_ADC_Init+0xdc>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <MX_ADC_Init+0xdc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <MX_ADC_Init+0xdc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <MX_ADC_Init+0xdc>)
 80025b2:	2220      	movs	r2, #32
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <MX_ADC_Init+0xdc>)
 80025ba:	2221      	movs	r2, #33	; 0x21
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_ADC_Init+0xdc>)
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	00d2      	lsls	r2, r2, #3
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_ADC_Init+0xdc>)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <MX_ADC_Init+0xdc>)
 80025d0:	222c      	movs	r2, #44	; 0x2c
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <MX_ADC_Init+0xdc>)
 80025d8:	2204      	movs	r2, #4
 80025da:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_ADC_Init+0xdc>)
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	0152      	lsls	r2, r2, #5
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <MX_ADC_Init+0xdc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_ADC_Init+0xdc>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <MX_ADC_Init+0xdc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <MX_ADC_Init+0xdc>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fc0b 	bl	8002e14 <HAL_ADC_Init>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 8002602:	f000 f96b 	bl	80028dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002606:	003b      	movs	r3, r7
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800260c:	003b      	movs	r3, r7
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	0152      	lsls	r2, r2, #5
 8002612:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002614:	003a      	movs	r2, r7
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <MX_ADC_Init+0xdc>)
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f000 ff36 	bl	800348c <HAL_ADC_ConfigChannel>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d001      	beq.n	8002628 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8002624:	f000 f95a 	bl	80028dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002628:	003b      	movs	r3, r7
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <MX_ADC_Init+0xe4>)
 800262c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800262e:	003a      	movs	r2, r7
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_ADC_Init+0xdc>)
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f000 ff29 	bl	800348c <HAL_ADC_ConfigChannel>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 800263e:	f000 f94d 	bl	80028dc <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20000300 	.word	0x20000300
 8002650:	40012400 	.word	0x40012400
 8002654:	04000002 	.word	0x04000002

08002658 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800265e:	003b      	movs	r3, r7
 8002660:	0018      	movs	r0, r3
 8002662:	2308      	movs	r3, #8
 8002664:	001a      	movs	r2, r3
 8002666:	2100      	movs	r1, #0
 8002668:	f004 f924 	bl	80068b4 <memset>

  /* USER CODE BEGIN DAC_Init 1 */
  hdac.Instance = DAC;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_DAC_Init+0x60>)
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <MX_DAC_Init+0x64>)
 8002670:	601a      	str	r2, [r3, #0]
  DAC->CR = DAC_CR_EN1 | DAC_CR_TEN1 | DAC_CR_BOFF1;
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <MX_DAC_Init+0x64>)
 8002674:	2207      	movs	r2, #7
 8002676:	601a      	str	r2, [r3, #0]

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_DAC_Init+0x60>)
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <MX_DAC_Init+0x64>)
 800267c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_DAC_Init+0x60>)
 8002680:	0018      	movs	r0, r3
 8002682:	f001 f985 	bl	8003990 <HAL_DAC_Init>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d001      	beq.n	800268e <MX_DAC_Init+0x36>
  {
    Error_Handler();
 800268a:	f000 f927 	bl	80028dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800268e:	003b      	movs	r3, r7
 8002690:	2224      	movs	r2, #36	; 0x24
 8002692:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002694:	003b      	movs	r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800269a:	0039      	movs	r1, r7
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_DAC_Init+0x60>)
 800269e:	2200      	movs	r2, #0
 80026a0:	0018      	movs	r0, r3
 80026a2:	f001 f9b1 	bl	8003a08 <HAL_DAC_ConfigChannel>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d001      	beq.n	80026ae <MX_DAC_Init+0x56>
  {
    Error_Handler();
 80026aa:	f000 f917 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	200000e4 	.word	0x200000e4
 80026bc:	40007400 	.word	0x40007400

080026c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c6:	2308      	movs	r3, #8
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	0018      	movs	r0, r3
 80026cc:	2310      	movs	r3, #16
 80026ce:	001a      	movs	r2, r3
 80026d0:	2100      	movs	r1, #0
 80026d2:	f004 f8ef 	bl	80068b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d6:	003b      	movs	r3, r7
 80026d8:	0018      	movs	r0, r3
 80026da:	2308      	movs	r3, #8
 80026dc:	001a      	movs	r2, r3
 80026de:	2100      	movs	r1, #0
 80026e0:	f004 f8e8 	bl	80068b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_TIM2_Init+0xa4>)
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	05d2      	lsls	r2, r2, #23
 80026ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <MX_TIM2_Init+0xa4>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <MX_TIM2_Init+0xa4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2096;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_TIM2_Init+0xa4>)
 80026fa:	2283      	movs	r2, #131	; 0x83
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002700:	4b18      	ldr	r3, [pc, #96]	; (8002764 <MX_TIM2_Init+0xa4>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <MX_TIM2_Init+0xa4>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <MX_TIM2_Init+0xa4>)
 800270e:	0018      	movs	r0, r3
 8002710:	f002 fe00 	bl	8005314 <HAL_TIM_Base_Init>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d001      	beq.n	800271c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002718:	f000 f8e0 	bl	80028dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	2108      	movs	r1, #8
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0152      	lsls	r2, r2, #5
 8002724:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002726:	187a      	adds	r2, r7, r1
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <MX_TIM2_Init+0xa4>)
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f002 ff5d 	bl	80055ec <HAL_TIM_ConfigClockSource>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002736:	f000 f8d1 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800273a:	003b      	movs	r3, r7
 800273c:	2220      	movs	r2, #32
 800273e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002740:	003b      	movs	r3, r7
 8002742:	2200      	movs	r2, #0
 8002744:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002746:	003a      	movs	r2, r7
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <MX_TIM2_Init+0xa4>)
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f003 f92d 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002756:	f000 f8c1 	bl	80028dc <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */
  //TIM2 -> DIER |= TIM_DIER_UIE;
  //TIM2 -> SR &= ~TIM_SR_UIF;
  /* USER CODE END TIM2_Init 2 */

}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b006      	add	sp, #24
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	200000f4 	.word	0x200000f4

08002768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 800276e:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <MX_USART2_UART_Init+0x5c>)
 8002770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 8002774:	22e1      	movs	r2, #225	; 0xe1
 8002776:	0252      	lsls	r2, r2, #9
 8002778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 800278e:	2208      	movs	r2, #8
 8002790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <MX_USART2_UART_Init+0x58>)
 80027ac:	0018      	movs	r0, r3
 80027ae:	f003 f955 	bl	8005a5c <HAL_UART_Init>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027b6:	f000 f891 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000134 	.word	0x20000134
 80027c4:	40004400 	.word	0x40004400

080027c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <MX_DMA_Init+0x48>)
 80027d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_DMA_Init+0x48>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <MX_DMA_Init+0x48>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2009      	movs	r0, #9
 80027ec:	f001 f89e 	bl	800392c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027f0:	2009      	movs	r0, #9
 80027f2:	f001 f8b0 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	200a      	movs	r0, #10
 80027fc:	f001 f896 	bl	800392c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002800:	200a      	movs	r0, #10
 8002802:	f001 f8a8 	bl	8003956 <HAL_NVIC_EnableIRQ>

}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40021000 	.word	0x40021000

08002814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281a:	240c      	movs	r4, #12
 800281c:	193b      	adds	r3, r7, r4
 800281e:	0018      	movs	r0, r3
 8002820:	2314      	movs	r3, #20
 8002822:	001a      	movs	r2, r3
 8002824:	2100      	movs	r1, #0
 8002826:	f004 f845 	bl	80068b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <MX_GPIO_Init+0xbc>)
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002830:	2104      	movs	r1, #4
 8002832:	430a      	orrs	r2, r1
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	4013      	ands	r3, r2
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_GPIO_Init+0xbc>)
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002860:	2101      	movs	r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_GPIO_Init+0xbc>)
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002872:	23a0      	movs	r3, #160	; 0xa0
 8002874:	05db      	lsls	r3, r3, #23
 8002876:	2200      	movs	r2, #0
 8002878:	2120      	movs	r1, #32
 800287a:	0018      	movs	r0, r3
 800287c:	f001 fd72 	bl	8004364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002880:	193b      	adds	r3, r7, r4
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	0192      	lsls	r2, r2, #6
 8002886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002888:	193b      	adds	r3, r7, r4
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <MX_GPIO_Init+0xc0>)
 800288c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002894:	193b      	adds	r3, r7, r4
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <MX_GPIO_Init+0xc4>)
 8002898:	0019      	movs	r1, r3
 800289a:	0010      	movs	r0, r2
 800289c:	f001 fbec 	bl	8004078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028a0:	0021      	movs	r1, r4
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	2220      	movs	r2, #32
 80028a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	2201      	movs	r2, #1
 80028ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	187b      	adds	r3, r7, r1
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80028ba:	187a      	adds	r2, r7, r1
 80028bc:	23a0      	movs	r3, #160	; 0xa0
 80028be:	05db      	lsls	r3, r3, #23
 80028c0:	0011      	movs	r1, r2
 80028c2:	0018      	movs	r0, r3
 80028c4:	f001 fbd8 	bl	8004078 <HAL_GPIO_Init>

}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b009      	add	sp, #36	; 0x24
 80028ce:	bd90      	pop	{r4, r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	10210000 	.word	0x10210000
 80028d8:	50000800 	.word	0x50000800

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_MspInit+0x24>)
 80028ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_MspInit+0x24>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	430a      	orrs	r2, r1
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <HAL_MspInit+0x24>)
 80028fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_MspInit+0x24>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0549      	lsls	r1, r1, #21
 8002902:	430a      	orrs	r2, r1
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	240c      	movs	r4, #12
 800291a:	193b      	adds	r3, r7, r4
 800291c:	0018      	movs	r0, r3
 800291e:	2314      	movs	r3, #20
 8002920:	001a      	movs	r2, r3
 8002922:	2100      	movs	r1, #0
 8002924:	f003 ffc6 	bl	80068b4 <memset>
  if(hadc->Instance==ADC1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <HAL_ADC_MspInit+0xd8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d156      	bne.n	80029e0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_ADC_MspInit+0xdc>)
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_ADC_MspInit+0xdc>)
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	0089      	lsls	r1, r1, #2
 800293c:	430a      	orrs	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_ADC_MspInit+0xdc>)
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_ADC_MspInit+0xdc>)
 8002946:	2101      	movs	r1, #1
 8002948:	430a      	orrs	r2, r1
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_ADC_MspInit+0xdc>)
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2203      	movs	r2, #3
 800295c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800295e:	193b      	adds	r3, r7, r4
 8002960:	2203      	movs	r2, #3
 8002962:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	193b      	adds	r3, r7, r4
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	193a      	adds	r2, r7, r4
 800296c:	23a0      	movs	r3, #160	; 0xa0
 800296e:	05db      	lsls	r3, r3, #23
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f001 fb80 	bl	8004078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 800297a:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_ADC_MspInit+0xe4>)
 800297c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800297e:	4b1c      	ldr	r3, [pc, #112]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 8002980:	2200      	movs	r2, #0
 8002982:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800298a:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 8002998:	2280      	movs	r2, #128	; 0x80
 800299a:	0052      	lsls	r2, r2, #1
 800299c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 80029a0:	2280      	movs	r2, #128	; 0x80
 80029a2:	00d2      	lsls	r2, r2, #3
 80029a4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 80029a8:	2220      	movs	r2, #32
 80029aa:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	0152      	lsls	r2, r2, #5
 80029b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 80029b6:	0018      	movs	r0, r3
 80029b8:	f001 f91c 	bl	8003bf4 <HAL_DMA_Init>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d001      	beq.n	80029c4 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80029c0:	f7ff ff8c 	bl	80028dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 80029c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_ADC_MspInit+0xe0>)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	200c      	movs	r0, #12
 80029d6:	f000 ffa9 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80029da:	200c      	movs	r0, #12
 80029dc:	f000 ffbb 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b009      	add	sp, #36	; 0x24
 80029e6:	bd90      	pop	{r4, r7, pc}
 80029e8:	40012400 	.word	0x40012400
 80029ec:	40021000 	.word	0x40021000
 80029f0:	200001b8 	.word	0x200001b8
 80029f4:	40020008 	.word	0x40020008

080029f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	240c      	movs	r4, #12
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	0018      	movs	r0, r3
 8002a06:	2314      	movs	r3, #20
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f003 ff52 	bl	80068b4 <memset>
  if(hdac->Instance==DAC)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <HAL_DAC_MspInit+0xc8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d14e      	bne.n	8002ab8 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002a1a:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_DAC_MspInit+0xcc>)
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_DAC_MspInit+0xcc>)
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	0589      	lsls	r1, r1, #22
 8002a24:	430a      	orrs	r2, r1
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_DAC_MspInit+0xcc>)
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_DAC_MspInit+0xcc>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	430a      	orrs	r2, r1
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_DAC_MspInit+0xcc>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	2210      	movs	r2, #16
 8002a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a46:	193b      	adds	r3, r7, r4
 8002a48:	2203      	movs	r2, #3
 8002a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	193a      	adds	r2, r7, r4
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	05db      	lsls	r3, r3, #23
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 fb0c 	bl	8004078 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_DAC_MspInit+0xd4>)
 8002a64:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_9;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a68:	2209      	movs	r2, #9
 8002a6a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a6e:	2210      	movs	r2, #16
 8002a70:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a90:	2220      	movs	r2, #32
 8002a92:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	0192      	lsls	r2, r2, #6
 8002a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 f8a8 	bl	8003bf4 <HAL_DMA_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8002aa8:	f7ff ff18 	bl	80028dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a06      	ldr	r2, [pc, #24]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_DAC_MspInit+0xd0>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b009      	add	sp, #36	; 0x24
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	40007400 	.word	0x40007400
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	2000009c 	.word	0x2000009c
 8002acc:	4002001c 	.word	0x4002001c

08002ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	05db      	lsls	r3, r3, #23
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d10d      	bne.n	8002b00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_TIM_Base_MspInit+0x38>)
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_TIM_Base_MspInit+0x38>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	200f      	movs	r0, #15
 8002af6:	f000 ff19 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f000 ff2b 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	240c      	movs	r4, #12
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	0018      	movs	r0, r3
 8002b1a:	2314      	movs	r3, #20
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f003 fec8 	bl	80068b4 <memset>
  if(huart->Instance==USART2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <HAL_UART_MspInit+0x90>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d131      	bne.n	8002b92 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0289      	lsls	r1, r1, #10
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	430a      	orrs	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_UART_MspInit+0x94>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b54:	0021      	movs	r1, r4
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	220c      	movs	r2, #12
 8002b5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	2202      	movs	r2, #2
 8002b60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2204      	movs	r2, #4
 8002b72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	187a      	adds	r2, r7, r1
 8002b76:	23a0      	movs	r3, #160	; 0xa0
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f001 fa7b 	bl	8004078 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	201c      	movs	r0, #28
 8002b88:	f000 fed0 	bl	800392c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b8c:	201c      	movs	r0, #28
 8002b8e:	f000 fee2 	bl	8003956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b009      	add	sp, #36	; 0x24
 8002b98:	bd90      	pop	{r4, r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	40004400 	.word	0x40004400
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <NMI_Handler+0x4>

08002baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <HardFault_Handler+0x4>

08002bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc8:	f000 f908 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <DMA1_Channel1_IRQHandler+0x14>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 f96f 	bl	8003ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	200001b8 	.word	0x200001b8

08002bec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f001 f963 	bl	8003ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	2000009c 	.word	0x2000009c

08002c04 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <ADC1_COMP_IRQHandler+0x14>)
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 fb6a 	bl	80032e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000300 	.word	0x20000300

08002c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  HAL_ADC_Start_IT(&hadc);
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <TIM2_IRQHandler+0x2c>)
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 fa6a 	bl	80030fc <HAL_ADC_Start_IT>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <TIM2_IRQHandler+0x30>)
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f002 fbf6 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2 -> SR &= ~(TIM_SR_UIF); // Clear Interrupt
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	20000300 	.word	0x20000300
 8002c4c:	200000f4 	.word	0x200000f4

08002c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <USART2_IRQHandler+0x14>)
 8002c56:	0018      	movs	r0, r3
 8002c58:	f002 ff54 	bl	8005b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000134 	.word	0x20000134

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	18d3      	adds	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f003 fdd8 	bl	800684c <__errno>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	18d2      	adds	r2, r2, r3
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <_sbrk+0x64>)
 8002cb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b006      	add	sp, #24
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20002000 	.word	0x20002000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	2000008c 	.word	0x2000008c
 8002cd0:	20000370 	.word	0x20000370

08002cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   r0, =_estack
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ce2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ce4:	480d      	ldr	r0, [pc, #52]	; (8002d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ce6:	490e      	ldr	r1, [pc, #56]	; (8002d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <LoopForever+0xe>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cec:	e002      	b.n	8002cf4 <LoopCopyDataInit>

08002cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf2:	3304      	adds	r3, #4

08002cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf8:	d3f9      	bcc.n	8002cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfa:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cfc:	4c0b      	ldr	r4, [pc, #44]	; (8002d2c <LoopForever+0x16>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d00:	e001      	b.n	8002d06 <LoopFillZerobss>

08002d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d04:	3204      	adds	r2, #4

08002d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d08:	d3fb      	bcc.n	8002d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d0a:	f7ff ffe3 	bl	8002cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d0e:	f003 fda3 	bl	8006858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d12:	f7ff fb6b 	bl	80023ec <main>

08002d16 <LoopForever>:

LoopForever:
    b LoopForever
 8002d16:	e7fe      	b.n	8002d16 <LoopForever>
Reset_Handler:   ldr   r0, =_estack
 8002d18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d24:	08006b5c 	.word	0x08006b5c
  ldr r2, =_sbss
 8002d28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d2c:	20000370 	.word	0x20000370

08002d30 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d30:	e7fe      	b.n	8002d30 <DMA1_Channel4_5_6_7_IRQHandler>
	...

08002d34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d3a:	1dfb      	adds	r3, r7, #7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_Init+0x3c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_Init+0x3c>)
 8002d46:	2140      	movs	r1, #64	; 0x40
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f000 f811 	bl	8002d74 <HAL_InitTick>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e001      	b.n	8002d62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d5e:	f7ff fdc3 	bl	80028e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	40022000 	.word	0x40022000

08002d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_InitTick+0x5c>)
 8002d7e:	681c      	ldr	r4, [r3, #0]
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_InitTick+0x60>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	0019      	movs	r1, r3
 8002d86:	23fa      	movs	r3, #250	; 0xfa
 8002d88:	0098      	lsls	r0, r3, #2
 8002d8a:	f7fd f9bd 	bl	8000108 <__udivsi3>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	0019      	movs	r1, r3
 8002d92:	0020      	movs	r0, r4
 8002d94:	f7fd f9b8 	bl	8000108 <__udivsi3>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fdeb 	bl	8003976 <HAL_SYSTICK_Config>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e00f      	b.n	8002dc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d80b      	bhi.n	8002dc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	2301      	movs	r3, #1
 8002db2:	425b      	negs	r3, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fdb8 	bl	800392c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_InitTick+0x64>)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b003      	add	sp, #12
 8002dce:	bd90      	pop	{r4, r7, pc}
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_IncTick+0x1c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	001a      	movs	r2, r3
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_IncTick+0x20>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	18d2      	adds	r2, r2, r3
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_IncTick+0x20>)
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	2000035c 	.word	0x2000035c

08002e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  return uwTick;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <HAL_GetTick+0x10>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	2000035c 	.word	0x2000035c

08002e14 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e159      	b.n	80030da <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2250      	movs	r2, #80	; 0x50
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7ff fd66 	bl	8002910 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	2210      	movs	r2, #16
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d005      	beq.n	8002e5c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2204      	movs	r2, #4
 8002e58:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002e5a:	d00b      	beq.n	8002e74 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e60:	2210      	movs	r2, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2250      	movs	r2, #80	; 0x50
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e132      	b.n	80030da <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	4a9a      	ldr	r2, [pc, #616]	; (80030e4 <HAL_ADC_Init+0x2d0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d108      	bne.n	8002ea4 <HAL_ADC_Init+0x90>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_Init+0x90>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADC_Init+0x92>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d149      	bne.n	8002f3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	23c0      	movs	r3, #192	; 0xc0
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d00b      	beq.n	8002ece <HAL_ADC_Init+0xba>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	05db      	lsls	r3, r3, #23
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d005      	beq.n	8002ece <HAL_ADC_Init+0xba>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_Init+0xde>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	0892      	lsrs	r2, r2, #2
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6919      	ldr	r1, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	611a      	str	r2, [r3, #16]
 8002ef0:	e014      	b.n	8002f1c <HAL_ADC_Init+0x108>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	0892      	lsrs	r2, r2, #2
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	4b79      	ldr	r3, [pc, #484]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f08:	4978      	ldr	r1, [pc, #480]	; (80030ec <HAL_ADC_Init+0x2d8>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	4b74      	ldr	r3, [pc, #464]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2118      	movs	r1, #24
 8002f28:	438a      	bics	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68d9      	ldr	r1, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f44:	496a      	ldr	r1, [pc, #424]	; (80030f0 <HAL_ADC_Init+0x2dc>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	065a      	lsls	r2, r3, #25
 8002f54:	4b64      	ldr	r3, [pc, #400]	; (80030e8 <HAL_ADC_Init+0x2d4>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	055b      	lsls	r3, r3, #21
 8002f64:	4013      	ands	r3, r2
 8002f66:	d108      	bne.n	8002f7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	0549      	lsls	r1, r1, #21
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	495b      	ldr	r1, [pc, #364]	; (80030f4 <HAL_ADC_Init+0x2e0>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68d9      	ldr	r1, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_ADC_Init+0x18c>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_Init+0x18e>
 8002fa0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fa2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2020      	movs	r0, #32
 8002fa8:	5c1b      	ldrb	r3, [r3, r0]
 8002faa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002fac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	202c      	movs	r0, #44	; 0x2c
 8002fb2:	5c1b      	ldrb	r3, [r3, r0]
 8002fb4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fb6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002fbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002fc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002fcc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fda:	23c2      	movs	r3, #194	; 0xc2
 8002fdc:	33ff      	adds	r3, #255	; 0xff
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d00b      	beq.n	8002ffa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	5c9b      	ldrb	r3, [r3, r2]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d11a      	bne.n	800303a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	5c9b      	ldrb	r3, [r3, r2]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d109      	bne.n	8003022 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0249      	lsls	r1, r1, #9
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e00b      	b.n	800303a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	2220      	movs	r2, #32
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	2201      	movs	r2, #1
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d11f      	bne.n	8003082 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	492a      	ldr	r1, [pc, #168]	; (80030f8 <HAL_ADC_Init+0x2e4>)
 800304e:	400a      	ands	r2, r1
 8003050:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6919      	ldr	r1, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003060:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003066:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	430a      	orrs	r2, r1
 800307e:	611a      	str	r2, [r3, #16]
 8003080:	e00e      	b.n	80030a0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2201      	movs	r2, #1
 800308a:	4013      	ands	r3, r2
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2101      	movs	r1, #1
 800309c:	438a      	bics	r2, r1
 800309e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2107      	movs	r1, #7
 80030ac:	438a      	bics	r2, r1
 80030ae:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6959      	ldr	r1, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	2203      	movs	r2, #3
 80030ce:	4393      	bics	r3, r2
 80030d0:	2201      	movs	r2, #1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	fffffefd 	.word	0xfffffefd
 80030e8:	40012708 	.word	0x40012708
 80030ec:	ffc3ffff 	.word	0xffc3ffff
 80030f0:	fdffffff 	.word	0xfdffffff
 80030f4:	fffe0219 	.word	0xfffe0219
 80030f8:	fffffc03 	.word	0xfffffc03

080030fc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003104:	230f      	movs	r3, #15
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2204      	movs	r2, #4
 8003114:	4013      	ands	r3, r2
 8003116:	d156      	bne.n	80031c6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2250      	movs	r2, #80	; 0x50
 800311c:	5c9b      	ldrb	r3, [r3, r2]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ADC_Start_IT+0x2a>
 8003122:	2302      	movs	r3, #2
 8003124:	e056      	b.n	80031d4 <HAL_ADC_Start_IT+0xd8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2250      	movs	r2, #80	; 0x50
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d007      	beq.n	8003146 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003136:	230f      	movs	r3, #15
 8003138:	18fc      	adds	r4, r7, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 fa45 	bl	80035cc <ADC_Enable>
 8003142:	0003      	movs	r3, r0
 8003144:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d13e      	bne.n	80031ce <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	4a21      	ldr	r2, [pc, #132]	; (80031dc <HAL_ADC_Start_IT+0xe0>)
 8003156:	4013      	ands	r3, r2
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	0052      	lsls	r2, r2, #1
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2250      	movs	r2, #80	; 0x50
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	221c      	movs	r2, #28
 8003176:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d110      	bne.n	80031a2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2104      	movs	r1, #4
 800318c:	438a      	bics	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2118      	movs	r1, #24
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
          break;
 80031a0:	e008      	b.n	80031b4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	211c      	movs	r1, #28
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
          break;
 80031b2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2104      	movs	r1, #4
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e003      	b.n	80031ce <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031c6:	230f      	movs	r3, #15
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031ce:	230f      	movs	r3, #15
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b005      	add	sp, #20
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	fffff0fe 	.word	0xfffff0fe

080031e0 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2317      	movs	r3, #23
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	d15e      	bne.n	80032be <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2250      	movs	r2, #80	; 0x50
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADC_Start_DMA+0x2e>
 800320a:	2302      	movs	r3, #2
 800320c:	e05e      	b.n	80032cc <HAL_ADC_Start_DMA+0xec>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2250      	movs	r2, #80	; 0x50
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	430a      	orrs	r2, r1
 8003224:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d007      	beq.n	800323e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800322e:	2317      	movs	r3, #23
 8003230:	18fc      	adds	r4, r7, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f9c9 	bl	80035cc <ADC_Enable>
 800323a:	0003      	movs	r3, r0
 800323c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800323e:	2317      	movs	r3, #23
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13e      	bne.n	80032c6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <HAL_ADC_Start_DMA+0xf4>)
 800324e:	4013      	ands	r3, r2
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	0052      	lsls	r2, r2, #1
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2250      	movs	r2, #80	; 0x50
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326c:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <HAL_ADC_Start_DMA+0xf8>)
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_ADC_Start_DMA+0xfc>)
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_ADC_Start_DMA+0x100>)
 800327e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	221c      	movs	r2, #28
 8003286:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2110      	movs	r1, #16
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3340      	adds	r3, #64	; 0x40
 80032a2:	0019      	movs	r1, r3
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f000 fd1c 	bl	8003ce4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2104      	movs	r1, #4
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	e003      	b.n	80032c6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032be:	2317      	movs	r3, #23
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032c6:	2317      	movs	r3, #23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b007      	add	sp, #28
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	fffff0fe 	.word	0xfffff0fe
 80032d8:	0800368d 	.word	0x0800368d
 80032dc:	08003741 	.word	0x08003741
 80032e0:	0800375f 	.word	0x0800375f

080032e4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2204      	movs	r2, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d106      	bne.n	8003308 <HAL_ADC_IRQHandler+0x24>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2204      	movs	r2, #4
 8003302:	4013      	ands	r3, r2
 8003304:	2b04      	cmp	r3, #4
 8003306:	d00d      	beq.n	8003324 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2208      	movs	r2, #8
 8003310:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003312:	2b08      	cmp	r3, #8
 8003314:	d154      	bne.n	80033c0 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2208      	movs	r2, #8
 800331e:	4013      	ands	r3, r2
 8003320:	2b08      	cmp	r3, #8
 8003322:	d14d      	bne.n	80033c0 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	2210      	movs	r2, #16
 800332a:	4013      	ands	r3, r2
 800332c:	d106      	bne.n	800333c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	23c0      	movs	r3, #192	; 0xc0
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	4013      	ands	r3, r2
 8003348:	d12e      	bne.n	80033a8 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003350:	2b00      	cmp	r3, #0
 8003352:	d129      	bne.n	80033a8 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2208      	movs	r2, #8
 800335c:	4013      	ands	r3, r2
 800335e:	2b08      	cmp	r3, #8
 8003360:	d122      	bne.n	80033a8 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2204      	movs	r2, #4
 800336a:	4013      	ands	r3, r2
 800336c:	d110      	bne.n	8003390 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	210c      	movs	r1, #12
 800337a:	438a      	bics	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	4a35      	ldr	r2, [pc, #212]	; (8003458 <HAL_ADC_IRQHandler+0x174>)
 8003384:	4013      	ands	r3, r2
 8003386:	2201      	movs	r2, #1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
 800338e:	e00b      	b.n	80033a8 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	2220      	movs	r2, #32
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a0:	2201      	movs	r2, #1
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7ff f810 	bl	80023d0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d003      	beq.n	80033c0 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	220c      	movs	r2, #12
 80033be:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2280      	movs	r2, #128	; 0x80
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d115      	bne.n	80033fa <HAL_ADC_IRQHandler+0x116>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d10e      	bne.n	80033fa <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	0252      	lsls	r2, r2, #9
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 f83d 	bl	800346c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2280      	movs	r2, #128	; 0x80
 80033f8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	4013      	ands	r3, r2
 8003404:	2b10      	cmp	r3, #16
 8003406:	d123      	bne.n	8003450 <HAL_ADC_IRQHandler+0x16c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2210      	movs	r2, #16
 8003410:	4013      	ands	r3, r2
 8003412:	2b10      	cmp	r3, #16
 8003414:	d11c      	bne.n	8003450 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003428:	2b01      	cmp	r3, #1
 800342a:	d10d      	bne.n	8003448 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	2202      	movs	r2, #2
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f81a 	bl	800347c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	601a      	str	r2, [r3, #0]
  }
  
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}
 8003458:	fffffefe 	.word	0xfffffefe

0800345c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b002      	add	sp, #8
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2250      	movs	r2, #80	; 0x50
 800349a:	5c9b      	ldrb	r3, [r3, r2]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e085      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x124>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2250      	movs	r2, #80	; 0x50
 80034a8:	2101      	movs	r1, #1
 80034aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2204      	movs	r2, #4
 80034b4:	4013      	ands	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	2220      	movs	r2, #32
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2250      	movs	r2, #80	; 0x50
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e06f      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_ADC_ConfigChannel+0x12c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d035      	beq.n	8003546 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	035b      	lsls	r3, r3, #13
 80034e6:	0b5a      	lsrs	r2, r3, #13
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	02db      	lsls	r3, r3, #11
 80034f8:	4013      	ands	r3, r2
 80034fa:	d009      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	0409      	lsls	r1, r1, #16
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800350a:	200a      	movs	r0, #10
 800350c:	f000 f942 	bl	8003794 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	d006      	beq.n	800352a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	03c9      	lsls	r1, r1, #15
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	025b      	lsls	r3, r3, #9
 8003532:	4013      	ands	r3, r2
 8003534:	d037      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0449      	lsls	r1, r1, #17
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e02f      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	035b      	lsls	r3, r3, #13
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	43d9      	mvns	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	400a      	ands	r2, r1
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	02db      	lsls	r3, r3, #11
 8003566:	4013      	ands	r3, r2
 8003568:	d005      	beq.n	8003576 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 8003570:	4913      	ldr	r1, [pc, #76]	; (80035c0 <HAL_ADC_ConfigChannel+0x134>)
 8003572:	400a      	ands	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	029b      	lsls	r3, r3, #10
 800357e:	4013      	ands	r3, r2
 8003580:	d005      	beq.n	800358e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_ADC_ConfigChannel+0x138>)
 800358a:	400a      	ands	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	025b      	lsls	r3, r3, #9
 8003596:	4013      	ands	r3, r2
 8003598:	d005      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_ADC_ConfigChannel+0x130>)
 80035a0:	4909      	ldr	r1, [pc, #36]	; (80035c8 <HAL_ADC_ConfigChannel+0x13c>)
 80035a2:	400a      	ands	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2250      	movs	r2, #80	; 0x50
 80035aa:	2100      	movs	r1, #0
 80035ac:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	00001001 	.word	0x00001001
 80035bc:	40012708 	.word	0x40012708
 80035c0:	ff7fffff 	.word	0xff7fffff
 80035c4:	ffbfffff 	.word	0xffbfffff
 80035c8:	feffffff 	.word	0xfeffffff

080035cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2203      	movs	r2, #3
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d108      	bne.n	80035f8 <ADC_Enable+0x2c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <ADC_Enable+0x2c>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <ADC_Enable+0x2e>
 80035f8:	2300      	movs	r3, #0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d13f      	bne.n	800367e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <ADC_Enable+0xbc>)
 8003606:	4013      	ands	r3, r2
 8003608:	d00d      	beq.n	8003626 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	2210      	movs	r2, #16
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	2201      	movs	r2, #1
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e02c      	b.n	8003680 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003636:	2001      	movs	r0, #1
 8003638:	f000 f8ac 	bl	8003794 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800363c:	f7ff fbe0 	bl	8002e00 <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003644:	e014      	b.n	8003670 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003646:	f7ff fbdb 	bl	8002e00 <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b0a      	cmp	r3, #10
 8003652:	d90d      	bls.n	8003670 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	2210      	movs	r2, #16
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	2201      	movs	r2, #1
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	4013      	ands	r3, r2
 800367a:	2b01      	cmp	r3, #1
 800367c:	d1e3      	bne.n	8003646 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}
 8003688:	80000017 	.word	0x80000017

0800368c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	2250      	movs	r2, #80	; 0x50
 80036a0:	4013      	ands	r3, r2
 80036a2:	d141      	bne.n	8003728 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	23c0      	movs	r3, #192	; 0xc0
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4013      	ands	r3, r2
 80036be:	d12e      	bne.n	800371e <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d129      	bne.n	800371e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d122      	bne.n	800371e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2204      	movs	r2, #4
 80036e0:	4013      	ands	r3, r2
 80036e2:	d110      	bne.n	8003706 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	210c      	movs	r1, #12
 80036f0:	438a      	bics	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	4a10      	ldr	r2, [pc, #64]	; (800373c <ADC_DMAConvCplt+0xb0>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	2201      	movs	r2, #1
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
 8003704:	e00b      	b.n	800371e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	2220      	movs	r2, #32
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	2201      	movs	r2, #1
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0018      	movs	r0, r3
 8003722:	f7fe fe55 	bl	80023d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003726:	e005      	b.n	8003734 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	0010      	movs	r0, r2
 8003732:	4798      	blx	r3
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}
 800373c:	fffffefe 	.word	0xfffffefe

08003740 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff fe83 	bl	800345c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}

0800375e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	431a      	orrs	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	2204      	movs	r2, #4
 800377e:	431a      	orrs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff fe78 	bl	800347c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}

08003794 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <ADC_DelayMicroSecond+0x38>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	490b      	ldr	r1, [pc, #44]	; (80037d0 <ADC_DelayMicroSecond+0x3c>)
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7fc fcb0 	bl	8000108 <__udivsi3>
 80037a8:	0003      	movs	r3, r0
 80037aa:	001a      	movs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4353      	muls	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80037b2:	e002      	b.n	80037ba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f9      	bne.n	80037b4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	20000000 	.word	0x20000000
 80037d0:	000f4240 	.word	0x000f4240

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	0002      	movs	r2, r0
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	1dfb      	adds	r3, r7, #7
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b7f      	cmp	r3, #127	; 0x7f
 80037e6:	d809      	bhi.n	80037fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	001a      	movs	r2, r3
 80037ee:	231f      	movs	r3, #31
 80037f0:	401a      	ands	r2, r3
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_EnableIRQ+0x30>)
 80037f4:	2101      	movs	r1, #1
 80037f6:	4091      	lsls	r1, r2
 80037f8:	000a      	movs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
  }
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	0002      	movs	r2, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	1dfb      	adds	r3, r7, #7
 8003814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b7f      	cmp	r3, #127	; 0x7f
 800381c:	d828      	bhi.n	8003870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800381e:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <__NVIC_SetPriority+0xd4>)
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b25b      	sxtb	r3, r3
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	33c0      	adds	r3, #192	; 0xc0
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	589b      	ldr	r3, [r3, r2]
 800382e:	1dfa      	adds	r2, r7, #7
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	0011      	movs	r1, r2
 8003834:	2203      	movs	r2, #3
 8003836:	400a      	ands	r2, r1
 8003838:	00d2      	lsls	r2, r2, #3
 800383a:	21ff      	movs	r1, #255	; 0xff
 800383c:	4091      	lsls	r1, r2
 800383e:	000a      	movs	r2, r1
 8003840:	43d2      	mvns	r2, r2
 8003842:	401a      	ands	r2, r3
 8003844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	019b      	lsls	r3, r3, #6
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	401a      	ands	r2, r3
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	0018      	movs	r0, r3
 8003854:	2303      	movs	r3, #3
 8003856:	4003      	ands	r3, r0
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800385c:	481f      	ldr	r0, [pc, #124]	; (80038dc <__NVIC_SetPriority+0xd4>)
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b25b      	sxtb	r3, r3
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	430a      	orrs	r2, r1
 8003868:	33c0      	adds	r3, #192	; 0xc0
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800386e:	e031      	b.n	80038d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <__NVIC_SetPriority+0xd8>)
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0019      	movs	r1, r3
 8003878:	230f      	movs	r3, #15
 800387a:	400b      	ands	r3, r1
 800387c:	3b08      	subs	r3, #8
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3306      	adds	r3, #6
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	3304      	adds	r3, #4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	1dfa      	adds	r2, r7, #7
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	0011      	movs	r1, r2
 8003890:	2203      	movs	r2, #3
 8003892:	400a      	ands	r2, r1
 8003894:	00d2      	lsls	r2, r2, #3
 8003896:	21ff      	movs	r1, #255	; 0xff
 8003898:	4091      	lsls	r1, r2
 800389a:	000a      	movs	r2, r1
 800389c:	43d2      	mvns	r2, r2
 800389e:	401a      	ands	r2, r3
 80038a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	22ff      	movs	r2, #255	; 0xff
 80038a8:	401a      	ands	r2, r3
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	0018      	movs	r0, r3
 80038b0:	2303      	movs	r3, #3
 80038b2:	4003      	ands	r3, r0
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <__NVIC_SetPriority+0xd8>)
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	001c      	movs	r4, r3
 80038c0:	230f      	movs	r3, #15
 80038c2:	4023      	ands	r3, r4
 80038c4:	3b08      	subs	r3, #8
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	430a      	orrs	r2, r1
 80038ca:	3306      	adds	r3, #6
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	18c3      	adds	r3, r0, r3
 80038d0:	3304      	adds	r3, #4
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b003      	add	sp, #12
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1e5a      	subs	r2, r3, #1
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	045b      	lsls	r3, r3, #17
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d301      	bcc.n	80038fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f8:	2301      	movs	r3, #1
 80038fa:	e010      	b.n	800391e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <SysTick_Config+0x44>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	3a01      	subs	r2, #1
 8003902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003904:	2301      	movs	r3, #1
 8003906:	425b      	negs	r3, r3
 8003908:	2103      	movs	r1, #3
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff ff7c 	bl	8003808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <SysTick_Config+0x44>)
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003916:	4b04      	ldr	r3, [pc, #16]	; (8003928 <SysTick_Config+0x44>)
 8003918:	2207      	movs	r2, #7
 800391a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	e000e010 	.word	0xe000e010

0800392c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	210f      	movs	r1, #15
 8003938:	187b      	adds	r3, r7, r1
 800393a:	1c02      	adds	r2, r0, #0
 800393c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	187b      	adds	r3, r7, r1
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b25b      	sxtb	r3, r3
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff ff5d 	bl	8003808 <__NVIC_SetPriority>
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b004      	add	sp, #16
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	0002      	movs	r2, r0
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	0018      	movs	r0, r3
 800396a:	f7ff ff33 	bl	80037d4 <__NVIC_EnableIRQ>
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	0018      	movs	r0, r3
 8003982:	f7ff ffaf 	bl	80038e4 <SysTick_Config>
 8003986:	0003      	movs	r3, r0
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e015      	b.n	80039ce <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	791b      	ldrb	r3, [r3, #4]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff f81f 	bl	80029f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b002      	add	sp, #8
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	795b      	ldrb	r3, [r3, #5]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_DAC_ConfigChannel+0x20>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e035      	b.n	8003a94 <HAL_DAC_ConfigChannel+0x8c>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2202      	movs	r2, #2
 8003a32:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_DAC_ConfigChannel+0x94>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	409a      	lsls	r2, r3
 8003a42:	0013      	movs	r3, r2
 8003a44:	43da      	mvns	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	0013      	movs	r3, r2
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	21c0      	movs	r1, #192	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4099      	lsls	r1, r3
 8003a7a:	000b      	movs	r3, r1
 8003a7c:	43d9      	mvns	r1, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	400a      	ands	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b006      	add	sp, #24
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	00000ffe 	.word	0x00000ffe

08003aa0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	795b      	ldrb	r3, [r3, #5]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_DAC_Start_DMA+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e055      	b.n	8003b6a <HAL_DAC_Start_DMA+0xca>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <HAL_DAC_Start_DMA+0xd4>)
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <HAL_DAC_Start_DMA+0xd8>)
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <HAL_DAC_Start_DMA+0xdc>)
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2180      	movs	r1, #128	; 0x80
 8003aee:	0149      	lsls	r1, r1, #5
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]
     
  /* Case of use of channel 1 */
  switch(Alignment)
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d013      	beq.n	8003b22 <HAL_DAC_Start_DMA+0x82>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d815      	bhi.n	8003b2c <HAL_DAC_Start_DMA+0x8c>
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_DAC_Start_DMA+0x6e>
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d005      	beq.n	8003b18 <HAL_DAC_Start_DMA+0x78>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8003b0c:	e00e      	b.n	8003b2c <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3308      	adds	r3, #8
 8003b14:	617b      	str	r3, [r7, #20]
      break;
 8003b16:	e00a      	b.n	8003b2e <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	617b      	str	r3, [r7, #20]
      break;
 8003b20:	e005      	b.n	8003b2e <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3310      	adds	r3, #16
 8003b28:	617b      	str	r3, [r7, #20]
      break;
 8003b2a:	e000      	b.n	8003b2e <HAL_DAC_Start_DMA+0x8e>
      break;
 8003b2c:	46c0      	nop			; (mov r8, r8)
  }
  UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
  
  /* Enable the DMA Stream */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0189      	lsls	r1, r1, #6
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6898      	ldr	r0, [r3, #8]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	f000 f8cb 	bl	8003ce4 <HAL_DMA_Start_IT>
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6819      	ldr	r1, [r3, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b006      	add	sp, #24
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	08003b81 	.word	0x08003b81
 8003b78:	08003ba5 	.word	0x08003ba5
 8003b7c:	08003bc3 	.word	0x08003bc3

08003b80 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7ff ff20 	bl	80039d6 <HAL_DAC_ConvCpltCallbackCh1>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	711a      	strb	r2, [r3, #4]
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff ff16 	bl	80039e6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	60da      	str	r2, [r3, #12]

  HAL_DAC_ErrorCallbackCh1(hdac);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff ff09 	bl	80039f6 <HAL_DAC_ErrorCallbackCh1>

  hdac->State= HAL_DAC_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	711a      	strb	r2, [r3, #4]
}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e061      	b.n	8003cca <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <HAL_DMA_Init+0xe0>)
 8003c0c:	4694      	mov	ip, r2
 8003c0e:	4463      	add	r3, ip
 8003c10:	2114      	movs	r1, #20
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fc fa78 	bl	8000108 <__udivsi3>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_DMA_Init+0xe4>)
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2225      	movs	r2, #37	; 0x25
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a28      	ldr	r2, [pc, #160]	; (8003cdc <HAL_DMA_Init+0xe8>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d018      	beq.n	8003cb2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c80:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <HAL_DMA_Init+0xec>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	211c      	movs	r1, #28
 8003c8a:	400b      	ands	r3, r1
 8003c8c:	210f      	movs	r1, #15
 8003c8e:	4099      	lsls	r1, r3
 8003c90:	000b      	movs	r3, r1
 8003c92:	43d9      	mvns	r1, r3
 8003c94:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_DMA_Init+0xec>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_DMA_Init+0xec>)
 8003c9c:	6819      	ldr	r1, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	201c      	movs	r0, #28
 8003ca8:	4003      	ands	r3, r0
 8003caa:	409a      	lsls	r2, r3
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_DMA_Init+0xec>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2225      	movs	r2, #37	; 0x25
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b004      	add	sp, #16
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	bffdfff8 	.word	0xbffdfff8
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	ffff800f 	.word	0xffff800f
 8003ce0:	400200a8 	.word	0x400200a8

08003ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2317      	movs	r3, #23
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	5c9b      	ldrb	r3, [r3, r2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_Start_IT+0x24>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e04f      	b.n	8003da8 <HAL_DMA_Start_IT+0xc4>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2225      	movs	r2, #37	; 0x25
 8003d14:	5c9b      	ldrb	r3, [r3, r2]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d13a      	bne.n	8003d92 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2225      	movs	r2, #37	; 0x25
 8003d20:	2102      	movs	r1, #2
 8003d22:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2101      	movs	r1, #1
 8003d36:	438a      	bics	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f96a 	bl	800401a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	210e      	movs	r1, #14
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e00f      	b.n	8003d80 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	210a      	movs	r1, #10
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e007      	b.n	8003da2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2224      	movs	r2, #36	; 0x24
 8003d96:	2100      	movs	r1, #0
 8003d98:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d9a:	2317      	movs	r3, #23
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8003da2:	2317      	movs	r3, #23
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	781b      	ldrb	r3, [r3, #0]
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	230f      	movs	r3, #15
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2225      	movs	r2, #37	; 0x25
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d008      	beq.n	8003dde <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2224      	movs	r2, #36	; 0x24
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e024      	b.n	8003e28 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	210e      	movs	r1, #14
 8003dea:	438a      	bics	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	221c      	movs	r2, #28
 8003e04:	401a      	ands	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4091      	lsls	r1, r2
 8003e0e:	000a      	movs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2225      	movs	r2, #37	; 0x25
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5499      	strb	r1, [r3, r2]

    return status;
 8003e22:	230f      	movs	r3, #15
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003e28:	0018      	movs	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	210f      	movs	r1, #15
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2225      	movs	r2, #37	; 0x25
 8003e44:	5c9b      	ldrb	r3, [r3, r2]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d006      	beq.n	8003e5a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e02a      	b.n	8003eb0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	210e      	movs	r1, #14
 8003e66:	438a      	bics	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	438a      	bics	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	221c      	movs	r2, #28
 8003e80:	401a      	ands	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2101      	movs	r1, #1
 8003e88:	4091      	lsls	r1, r2
 8003e8a:	000a      	movs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2225      	movs	r2, #37	; 0x25
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2224      	movs	r2, #36	; 0x24
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	0010      	movs	r0, r2
 8003eae:	4798      	blx	r3
    }
  }
  return status;
 8003eb0:	230f      	movs	r3, #15
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b004      	add	sp, #16
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	221c      	movs	r2, #28
 8003edc:	4013      	ands	r3, r2
 8003ede:	2204      	movs	r2, #4
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	0013      	movs	r3, r2
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d026      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x7a>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2204      	movs	r2, #4
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d022      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	4013      	ands	r3, r2
 8003efc:	d107      	bne.n	8003f0e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2104      	movs	r1, #4
 8003f0a:	438a      	bics	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	221c      	movs	r2, #28
 8003f14:	401a      	ands	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4091      	lsls	r1, r2
 8003f1e:	000a      	movs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d100      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x6e>
 8003f2a:	e071      	b.n	8004010 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	0010      	movs	r0, r2
 8003f34:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003f36:	e06b      	b.n	8004010 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	221c      	movs	r2, #28
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2202      	movs	r2, #2
 8003f42:	409a      	lsls	r2, r3
 8003f44:	0013      	movs	r3, r2
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d02d      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0xea>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	4013      	ands	r3, r2
 8003f52:	d029      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d10b      	bne.n	8003f78 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	210a      	movs	r1, #10
 8003f6c:	438a      	bics	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2225      	movs	r2, #37	; 0x25
 8003f74:	2101      	movs	r1, #1
 8003f76:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	221c      	movs	r2, #28
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	2102      	movs	r1, #2
 8003f86:	4091      	lsls	r1, r2
 8003f88:	000a      	movs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d039      	beq.n	8004010 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	0010      	movs	r0, r2
 8003fa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003fa6:	e033      	b.n	8004010 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	221c      	movs	r2, #28
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d02a      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d026      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	210e      	movs	r1, #14
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	221c      	movs	r2, #28
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4091      	lsls	r1, r2
 8003fe4:	000a      	movs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2225      	movs	r2, #37	; 0x25
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2224      	movs	r2, #36	; 0x24
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	0010      	movs	r0, r2
 800400e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46c0      	nop			; (mov r8, r8)
}
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}

0800401a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	221c      	movs	r2, #28
 800402e:	401a      	ands	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2101      	movs	r1, #1
 8004036:	4091      	lsls	r1, r2
 8004038:	000a      	movs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b10      	cmp	r3, #16
 800404a:	d108      	bne.n	800405e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800405c:	e007      	b.n	800406e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	60da      	str	r2, [r3, #12]
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800408e:	e14f      	b.n	8004330 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2101      	movs	r1, #1
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4091      	lsls	r1, r2
 800409a:	000a      	movs	r2, r1
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d100      	bne.n	80040a8 <HAL_GPIO_Init+0x30>
 80040a6:	e140      	b.n	800432a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d00b      	beq.n	80040c8 <HAL_GPIO_Init+0x50>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d007      	beq.n	80040c8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b12      	cmp	r3, #18
 80040c6:	d130      	bne.n	800412a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	409a      	lsls	r2, r3
 80040d6:	0013      	movs	r3, r2
 80040d8:	43da      	mvns	r2, r3
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4013      	ands	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	0013      	movs	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040fe:	2201      	movs	r2, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
 8004104:	0013      	movs	r3, r2
 8004106:	43da      	mvns	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	2201      	movs	r2, #1
 8004116:	401a      	ands	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	409a      	lsls	r2, r3
 800411c:	0013      	movs	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	409a      	lsls	r2, r3
 8004138:	0013      	movs	r3, r2
 800413a:	43da      	mvns	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	409a      	lsls	r2, r3
 800414c:	0013      	movs	r3, r2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0xf2>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b12      	cmp	r3, #18
 8004168:	d123      	bne.n	80041b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	08da      	lsrs	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3208      	adds	r2, #8
 8004172:	0092      	lsls	r2, r2, #2
 8004174:	58d3      	ldr	r3, [r2, r3]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2207      	movs	r2, #7
 800417c:	4013      	ands	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	220f      	movs	r2, #15
 8004182:	409a      	lsls	r2, r3
 8004184:	0013      	movs	r3, r2
 8004186:	43da      	mvns	r2, r3
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2107      	movs	r1, #7
 8004196:	400b      	ands	r3, r1
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	409a      	lsls	r2, r3
 800419c:	0013      	movs	r3, r2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	08da      	lsrs	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3208      	adds	r2, #8
 80041ac:	0092      	lsls	r2, r2, #2
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	2203      	movs	r2, #3
 80041be:	409a      	lsls	r2, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	43da      	mvns	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2203      	movs	r2, #3
 80041d0:	401a      	ands	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	409a      	lsls	r2, r3
 80041d8:	0013      	movs	r3, r2
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	055b      	lsls	r3, r3, #21
 80041ee:	4013      	ands	r3, r2
 80041f0:	d100      	bne.n	80041f4 <HAL_GPIO_Init+0x17c>
 80041f2:	e09a      	b.n	800432a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f4:	4b54      	ldr	r3, [pc, #336]	; (8004348 <HAL_GPIO_Init+0x2d0>)
 80041f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f8:	4b53      	ldr	r3, [pc, #332]	; (8004348 <HAL_GPIO_Init+0x2d0>)
 80041fa:	2101      	movs	r1, #1
 80041fc:	430a      	orrs	r2, r1
 80041fe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004200:	4a52      	ldr	r2, [pc, #328]	; (800434c <HAL_GPIO_Init+0x2d4>)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	3302      	adds	r3, #2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	589b      	ldr	r3, [r3, r2]
 800420c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2203      	movs	r2, #3
 8004212:	4013      	ands	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	409a      	lsls	r2, r3
 800421a:	0013      	movs	r3, r2
 800421c:	43da      	mvns	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	23a0      	movs	r3, #160	; 0xa0
 8004228:	05db      	lsls	r3, r3, #23
 800422a:	429a      	cmp	r2, r3
 800422c:	d019      	beq.n	8004262 <HAL_GPIO_Init+0x1ea>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a47      	ldr	r2, [pc, #284]	; (8004350 <HAL_GPIO_Init+0x2d8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0x1e6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a46      	ldr	r2, [pc, #280]	; (8004354 <HAL_GPIO_Init+0x2dc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00d      	beq.n	800425a <HAL_GPIO_Init+0x1e2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a45      	ldr	r2, [pc, #276]	; (8004358 <HAL_GPIO_Init+0x2e0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <HAL_GPIO_Init+0x1de>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <HAL_GPIO_Init+0x2e4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_GPIO_Init+0x1da>
 800424e:	2305      	movs	r3, #5
 8004250:	e008      	b.n	8004264 <HAL_GPIO_Init+0x1ec>
 8004252:	2306      	movs	r3, #6
 8004254:	e006      	b.n	8004264 <HAL_GPIO_Init+0x1ec>
 8004256:	2303      	movs	r3, #3
 8004258:	e004      	b.n	8004264 <HAL_GPIO_Init+0x1ec>
 800425a:	2302      	movs	r3, #2
 800425c:	e002      	b.n	8004264 <HAL_GPIO_Init+0x1ec>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_GPIO_Init+0x1ec>
 8004262:	2300      	movs	r3, #0
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	2103      	movs	r1, #3
 8004268:	400a      	ands	r2, r1
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	4093      	lsls	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004274:	4935      	ldr	r1, [pc, #212]	; (800434c <HAL_GPIO_Init+0x2d4>)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	3302      	adds	r3, #2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004282:	4b37      	ldr	r3, [pc, #220]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43da      	mvns	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	025b      	lsls	r3, r3, #9
 800429a:	4013      	ands	r3, r2
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042a6:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80042ac:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	029b      	lsls	r3, r3, #10
 80042c4:	4013      	ands	r3, r2
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	43da      	mvns	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	035b      	lsls	r3, r3, #13
 80042ee:	4013      	ands	r3, r2
 80042f0:	d003      	beq.n	80042fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80042fa:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	43da      	mvns	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	039b      	lsls	r3, r3, #14
 8004318:	4013      	ands	r3, r2
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_GPIO_Init+0x2e8>)
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	40da      	lsrs	r2, r3
 8004338:	1e13      	subs	r3, r2, #0
 800433a:	d000      	beq.n	800433e <HAL_GPIO_Init+0x2c6>
 800433c:	e6a8      	b.n	8004090 <HAL_GPIO_Init+0x18>
  }
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b006      	add	sp, #24
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	40010000 	.word	0x40010000
 8004350:	50000400 	.word	0x50000400
 8004354:	50000800 	.word	0x50000800
 8004358:	50000c00 	.word	0x50000c00
 800435c:	50001c00 	.word	0x50001c00
 8004360:	40010400 	.word	0x40010400

08004364 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	0008      	movs	r0, r1
 800436e:	0011      	movs	r1, r2
 8004370:	1cbb      	adds	r3, r7, #2
 8004372:	1c02      	adds	r2, r0, #0
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	1c7b      	adds	r3, r7, #1
 8004378:	1c0a      	adds	r2, r1, #0
 800437a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800437c:	1c7b      	adds	r3, r7, #1
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004384:	1cbb      	adds	r3, r7, #2
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800438c:	e003      	b.n	8004396 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800438e:	1cbb      	adds	r3, r7, #2
 8004390:	881a      	ldrh	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b002      	add	sp, #8
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	000a      	movs	r2, r1
 80043a8:	1cbb      	adds	r3, r7, #2
 80043aa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043b2:	1cbb      	adds	r3, r7, #2
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4013      	ands	r3, r2
 80043ba:	041a      	lsls	r2, r3, #16
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	43db      	mvns	r3, r3
 80043c0:	1cb9      	adds	r1, r7, #2
 80043c2:	8809      	ldrh	r1, [r1, #0]
 80043c4:	400b      	ands	r3, r1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b004      	add	sp, #16
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d4:	b5b0      	push	{r4, r5, r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f000 fbaf 	bl	8004b46 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e8:	4bcf      	ldr	r3, [pc, #828]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	220c      	movs	r2, #12
 80043ee:	4013      	ands	r3, r2
 80043f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f2:	4bcd      	ldr	r3, [pc, #820]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	4013      	ands	r3, r2
 80043fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2201      	movs	r2, #1
 8004404:	4013      	ands	r3, r2
 8004406:	d100      	bne.n	800440a <HAL_RCC_OscConfig+0x36>
 8004408:	e07e      	b.n	8004508 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d007      	beq.n	8004420 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x68>
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	025b      	lsls	r3, r3, #9
 800441c:	429a      	cmp	r2, r3
 800441e:	d10d      	bne.n	800443c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4bc1      	ldr	r3, [pc, #772]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	4013      	ands	r3, r2
 800442a:	d100      	bne.n	800442e <HAL_RCC_OscConfig+0x5a>
 800442c:	e06b      	b.n	8004506 <HAL_RCC_OscConfig+0x132>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d167      	bne.n	8004506 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f000 fb85 	bl	8004b46 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	025b      	lsls	r3, r3, #9
 8004444:	429a      	cmp	r2, r3
 8004446:	d107      	bne.n	8004458 <HAL_RCC_OscConfig+0x84>
 8004448:	4bb7      	ldr	r3, [pc, #732]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4bb6      	ldr	r3, [pc, #728]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	0249      	lsls	r1, r1, #9
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e027      	b.n	80044a8 <HAL_RCC_OscConfig+0xd4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	23a0      	movs	r3, #160	; 0xa0
 800445e:	02db      	lsls	r3, r3, #11
 8004460:	429a      	cmp	r2, r3
 8004462:	d10e      	bne.n	8004482 <HAL_RCC_OscConfig+0xae>
 8004464:	4bb0      	ldr	r3, [pc, #704]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4baf      	ldr	r3, [pc, #700]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	02c9      	lsls	r1, r1, #11
 800446e:	430a      	orrs	r2, r1
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	4bad      	ldr	r3, [pc, #692]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4bac      	ldr	r3, [pc, #688]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0249      	lsls	r1, r1, #9
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e012      	b.n	80044a8 <HAL_RCC_OscConfig+0xd4>
 8004482:	4ba9      	ldr	r3, [pc, #676]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4ba8      	ldr	r3, [pc, #672]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004488:	49a8      	ldr	r1, [pc, #672]	; (800472c <HAL_RCC_OscConfig+0x358>)
 800448a:	400a      	ands	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	4ba6      	ldr	r3, [pc, #664]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	025b      	lsls	r3, r3, #9
 8004496:	4013      	ands	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4ba2      	ldr	r3, [pc, #648]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4ba1      	ldr	r3, [pc, #644]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80044a2:	49a3      	ldr	r1, [pc, #652]	; (8004730 <HAL_RCC_OscConfig+0x35c>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fe fca6 	bl	8002e00 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b8:	e009      	b.n	80044ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ba:	f7fe fca1 	bl	8002e00 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d902      	bls.n	80044ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	f000 fb3c 	bl	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ce:	4b96      	ldr	r3, [pc, #600]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	029b      	lsls	r3, r3, #10
 80044d6:	4013      	ands	r3, r2
 80044d8:	d0ef      	beq.n	80044ba <HAL_RCC_OscConfig+0xe6>
 80044da:	e015      	b.n	8004508 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fc90 	bl	8002e00 <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e6:	f7fe fc8b 	bl	8002e00 <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b64      	cmp	r3, #100	; 0x64
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e326      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044f8:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	4013      	ands	r3, r2
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x112>
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004506:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2202      	movs	r2, #2
 800450e:	4013      	ands	r3, r2
 8004510:	d100      	bne.n	8004514 <HAL_RCC_OscConfig+0x140>
 8004512:	e08b      	b.n	800462c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d005      	beq.n	800452c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d13e      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1d0>
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d13b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800452c:	4b7e      	ldr	r3, [pc, #504]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2204      	movs	r2, #4
 8004532:	4013      	ands	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_RCC_OscConfig+0x16c>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e302      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b79      	ldr	r3, [pc, #484]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4a7b      	ldr	r2, [pc, #492]	; (8004734 <HAL_RCC_OscConfig+0x360>)
 8004546:	4013      	ands	r3, r2
 8004548:	0019      	movs	r1, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	4b75      	ldr	r3, [pc, #468]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004556:	4b74      	ldr	r3, [pc, #464]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2209      	movs	r2, #9
 800455c:	4393      	bics	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	4b71      	ldr	r3, [pc, #452]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004568:	f000 fc40 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 800456c:	0001      	movs	r1, r0
 800456e:	4b6e      	ldr	r3, [pc, #440]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	220f      	movs	r2, #15
 8004576:	4013      	ands	r3, r2
 8004578:	4a6f      	ldr	r2, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x364>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	000a      	movs	r2, r1
 800457e:	40da      	lsrs	r2, r3
 8004580:	4b6e      	ldr	r3, [pc, #440]	; (800473c <HAL_RCC_OscConfig+0x368>)
 8004582:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004584:	4b6e      	ldr	r3, [pc, #440]	; (8004740 <HAL_RCC_OscConfig+0x36c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2513      	movs	r5, #19
 800458a:	197c      	adds	r4, r7, r5
 800458c:	0018      	movs	r0, r3
 800458e:	f7fe fbf1 	bl	8002d74 <HAL_InitTick>
 8004592:	0003      	movs	r3, r0
 8004594:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004596:	197b      	adds	r3, r7, r5
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d046      	beq.n	800462c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800459e:	197b      	adds	r3, r7, r5
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	e2d0      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d027      	beq.n	80045fa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045aa:	4b5f      	ldr	r3, [pc, #380]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2209      	movs	r2, #9
 80045b0:	4393      	bics	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	4b5c      	ldr	r3, [pc, #368]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fc20 	bl	8002e00 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c6:	f7fe fc1b 	bl	8002e00 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e2b6      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045d8:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2204      	movs	r2, #4
 80045de:	4013      	ands	r3, r2
 80045e0:	d0f1      	beq.n	80045c6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b51      	ldr	r3, [pc, #324]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4a53      	ldr	r2, [pc, #332]	; (8004734 <HAL_RCC_OscConfig+0x360>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	021a      	lsls	r2, r3, #8
 80045f2:	4b4d      	ldr	r3, [pc, #308]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	e018      	b.n	800462c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fa:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004600:	2101      	movs	r1, #1
 8004602:	438a      	bics	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fe fbfb 	bl	8002e00 <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004610:	f7fe fbf6 	bl	8002e00 <HAL_GetTick>
 8004614:	0002      	movs	r2, r0
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e291      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004622:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2204      	movs	r2, #4
 8004628:	4013      	ands	r3, r2
 800462a:	d1f1      	bne.n	8004610 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2210      	movs	r2, #16
 8004632:	4013      	ands	r3, r2
 8004634:	d100      	bne.n	8004638 <HAL_RCC_OscConfig+0x264>
 8004636:	e0a1      	b.n	800477c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d140      	bne.n	80046c0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800463e:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4013      	ands	r3, r2
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x282>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e277      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004656:	4b34      	ldr	r3, [pc, #208]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4a3a      	ldr	r2, [pc, #232]	; (8004744 <HAL_RCC_OscConfig+0x370>)
 800465c:	4013      	ands	r3, r2
 800465e:	0019      	movs	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004664:	4b30      	ldr	r3, [pc, #192]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	0a19      	lsrs	r1, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	061a      	lsls	r2, r3, #24
 8004678:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	0b5b      	lsrs	r3, r3, #13
 8004684:	3301      	adds	r3, #1
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	0212      	lsls	r2, r2, #8
 800468a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800468c:	4b26      	ldr	r3, [pc, #152]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	210f      	movs	r1, #15
 8004694:	400b      	ands	r3, r1
 8004696:	4928      	ldr	r1, [pc, #160]	; (8004738 <HAL_RCC_OscConfig+0x364>)
 8004698:	5ccb      	ldrb	r3, [r1, r3]
 800469a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800469c:	4b27      	ldr	r3, [pc, #156]	; (800473c <HAL_RCC_OscConfig+0x368>)
 800469e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0x36c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2513      	movs	r5, #19
 80046a6:	197c      	adds	r4, r7, r5
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7fe fb63 	bl	8002d74 <HAL_InitTick>
 80046ae:	0003      	movs	r3, r0
 80046b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80046b2:	197b      	adds	r3, r7, r5
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d060      	beq.n	800477c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80046ba:	197b      	adds	r3, r7, r5
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	e242      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03f      	beq.n	8004748 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046c8:	4b17      	ldr	r3, [pc, #92]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	0049      	lsls	r1, r1, #1
 80046d2:	430a      	orrs	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d6:	f7fe fb93 	bl	8002e00 <HAL_GetTick>
 80046da:	0003      	movs	r3, r0
 80046dc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e0:	f7fe fb8e 	bl	8002e00 <HAL_GetTick>
 80046e4:	0002      	movs	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e229      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4013      	ands	r3, r2
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4a10      	ldr	r2, [pc, #64]	; (8004744 <HAL_RCC_OscConfig+0x370>)
 8004704:	4013      	ands	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	0a19      	lsrs	r1, r3, #8
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	061a      	lsls	r2, r3, #24
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <HAL_RCC_OscConfig+0x354>)
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e029      	b.n	800477c <HAL_RCC_OscConfig+0x3a8>
 8004728:	40021000 	.word	0x40021000
 800472c:	fffeffff 	.word	0xfffeffff
 8004730:	fffbffff 	.word	0xfffbffff
 8004734:	ffffe0ff 	.word	0xffffe0ff
 8004738:	08006ae0 	.word	0x08006ae0
 800473c:	20000000 	.word	0x20000000
 8004740:	20000004 	.word	0x20000004
 8004744:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004748:	4bbd      	ldr	r3, [pc, #756]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4bbc      	ldr	r3, [pc, #752]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800474e:	49bd      	ldr	r1, [pc, #756]	; (8004a44 <HAL_RCC_OscConfig+0x670>)
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fe fb54 	bl	8002e00 <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800475e:	f7fe fb4f 	bl	8002e00 <HAL_GetTick>
 8004762:	0002      	movs	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e1ea      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004770:	4bb3      	ldr	r3, [pc, #716]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4013      	ands	r3, r2
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	4013      	ands	r3, r2
 8004784:	d036      	beq.n	80047f4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d019      	beq.n	80047c2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478e:	4bac      	ldr	r3, [pc, #688]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004792:	4bab      	ldr	r3, [pc, #684]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479a:	f7fe fb31 	bl	8002e00 <HAL_GetTick>
 800479e:	0003      	movs	r3, r0
 80047a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a4:	f7fe fb2c 	bl	8002e00 <HAL_GetTick>
 80047a8:	0002      	movs	r2, r0
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e1c7      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047b6:	4ba2      	ldr	r3, [pc, #648]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	2202      	movs	r2, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	d0f1      	beq.n	80047a4 <HAL_RCC_OscConfig+0x3d0>
 80047c0:	e018      	b.n	80047f4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c2:	4b9f      	ldr	r3, [pc, #636]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80047c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c6:	4b9e      	ldr	r3, [pc, #632]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80047c8:	2101      	movs	r1, #1
 80047ca:	438a      	bics	r2, r1
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ce:	f7fe fb17 	bl	8002e00 <HAL_GetTick>
 80047d2:	0003      	movs	r3, r0
 80047d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d8:	f7fe fb12 	bl	8002e00 <HAL_GetTick>
 80047dc:	0002      	movs	r2, r0
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1ad      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ea:	4b95      	ldr	r3, [pc, #596]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	2202      	movs	r2, #2
 80047f0:	4013      	ands	r3, r2
 80047f2:	d1f1      	bne.n	80047d8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2204      	movs	r2, #4
 80047fa:	4013      	ands	r3, r2
 80047fc:	d100      	bne.n	8004800 <HAL_RCC_OscConfig+0x42c>
 80047fe:	e0ae      	b.n	800495e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004800:	2027      	movs	r0, #39	; 0x27
 8004802:	183b      	adds	r3, r7, r0
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004808:	4b8d      	ldr	r3, [pc, #564]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800480a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	055b      	lsls	r3, r3, #21
 8004810:	4013      	ands	r3, r2
 8004812:	d109      	bne.n	8004828 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b8a      	ldr	r3, [pc, #552]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004818:	4b89      	ldr	r3, [pc, #548]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	0549      	lsls	r1, r1, #21
 800481e:	430a      	orrs	r2, r1
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004822:	183b      	adds	r3, r7, r0
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b87      	ldr	r3, [pc, #540]	; (8004a48 <HAL_RCC_OscConfig+0x674>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4013      	ands	r3, r2
 8004832:	d11a      	bne.n	800486a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004834:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <HAL_RCC_OscConfig+0x674>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b83      	ldr	r3, [pc, #524]	; (8004a48 <HAL_RCC_OscConfig+0x674>)
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	0049      	lsls	r1, r1, #1
 800483e:	430a      	orrs	r2, r1
 8004840:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004842:	f7fe fadd 	bl	8002e00 <HAL_GetTick>
 8004846:	0003      	movs	r3, r0
 8004848:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484c:	f7fe fad8 	bl	8002e00 <HAL_GetTick>
 8004850:	0002      	movs	r2, r0
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e173      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485e:	4b7a      	ldr	r3, [pc, #488]	; (8004a48 <HAL_RCC_OscConfig+0x674>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4013      	ands	r3, r2
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	429a      	cmp	r2, r3
 8004874:	d107      	bne.n	8004886 <HAL_RCC_OscConfig+0x4b2>
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800487a:	4b71      	ldr	r3, [pc, #452]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	0049      	lsls	r1, r1, #1
 8004880:	430a      	orrs	r2, r1
 8004882:	651a      	str	r2, [r3, #80]	; 0x50
 8004884:	e031      	b.n	80048ea <HAL_RCC_OscConfig+0x516>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4d4>
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004892:	4b6b      	ldr	r3, [pc, #428]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004894:	496b      	ldr	r1, [pc, #428]	; (8004a44 <HAL_RCC_OscConfig+0x670>)
 8004896:	400a      	ands	r2, r1
 8004898:	651a      	str	r2, [r3, #80]	; 0x50
 800489a:	4b69      	ldr	r3, [pc, #420]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800489c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800489e:	4b68      	ldr	r3, [pc, #416]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048a0:	496a      	ldr	r1, [pc, #424]	; (8004a4c <HAL_RCC_OscConfig+0x678>)
 80048a2:	400a      	ands	r2, r1
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50
 80048a6:	e020      	b.n	80048ea <HAL_RCC_OscConfig+0x516>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	23a0      	movs	r3, #160	; 0xa0
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d10e      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4fe>
 80048b4:	4b62      	ldr	r3, [pc, #392]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048b8:	4b61      	ldr	r3, [pc, #388]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048ba:	2180      	movs	r1, #128	; 0x80
 80048bc:	00c9      	lsls	r1, r1, #3
 80048be:	430a      	orrs	r2, r1
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50
 80048c2:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048c6:	4b5e      	ldr	r3, [pc, #376]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	0049      	lsls	r1, r1, #1
 80048cc:	430a      	orrs	r2, r1
 80048ce:	651a      	str	r2, [r3, #80]	; 0x50
 80048d0:	e00b      	b.n	80048ea <HAL_RCC_OscConfig+0x516>
 80048d2:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048d6:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048d8:	495a      	ldr	r1, [pc, #360]	; (8004a44 <HAL_RCC_OscConfig+0x670>)
 80048da:	400a      	ands	r2, r1
 80048dc:	651a      	str	r2, [r3, #80]	; 0x50
 80048de:	4b58      	ldr	r3, [pc, #352]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e2:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80048e4:	4959      	ldr	r1, [pc, #356]	; (8004a4c <HAL_RCC_OscConfig+0x678>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d015      	beq.n	800491e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fa85 	bl	8002e00 <HAL_GetTick>
 80048f6:	0003      	movs	r3, r0
 80048f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048fa:	e009      	b.n	8004910 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fe fa80 	bl	8002e00 <HAL_GetTick>
 8004900:	0002      	movs	r2, r0
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_OscConfig+0x67c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e11a      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004910:	4b4b      	ldr	r3, [pc, #300]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4013      	ands	r3, r2
 800491a:	d0ef      	beq.n	80048fc <HAL_RCC_OscConfig+0x528>
 800491c:	e014      	b.n	8004948 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491e:	f7fe fa6f 	bl	8002e00 <HAL_GetTick>
 8004922:	0003      	movs	r3, r0
 8004924:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004926:	e009      	b.n	800493c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004928:	f7fe fa6a 	bl	8002e00 <HAL_GetTick>
 800492c:	0002      	movs	r2, r0
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a47      	ldr	r2, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x67c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e104      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800493c:	4b40      	ldr	r3, [pc, #256]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800493e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d1ef      	bne.n	8004928 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004948:	2327      	movs	r3, #39	; 0x27
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004956:	4b3a      	ldr	r3, [pc, #232]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004958:	493e      	ldr	r1, [pc, #248]	; (8004a54 <HAL_RCC_OscConfig+0x680>)
 800495a:	400a      	ands	r2, r1
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2220      	movs	r2, #32
 8004964:	4013      	ands	r3, r2
 8004966:	d049      	beq.n	80049fc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d026      	beq.n	80049be <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004976:	2101      	movs	r1, #1
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 800497e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004982:	2101      	movs	r1, #1
 8004984:	430a      	orrs	r2, r1
 8004986:	635a      	str	r2, [r3, #52]	; 0x34
 8004988:	4b33      	ldr	r3, [pc, #204]	; (8004a58 <HAL_RCC_OscConfig+0x684>)
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	4b32      	ldr	r3, [pc, #200]	; (8004a58 <HAL_RCC_OscConfig+0x684>)
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	0189      	lsls	r1, r1, #6
 8004992:	430a      	orrs	r2, r1
 8004994:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fe fa33 	bl	8002e00 <HAL_GetTick>
 800499a:	0003      	movs	r3, r0
 800499c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a0:	f7fe fa2e 	bl	8002e00 <HAL_GetTick>
 80049a4:	0002      	movs	r2, r0
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0c9      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2202      	movs	r2, #2
 80049b8:	4013      	ands	r3, r2
 80049ba:	d0f1      	beq.n	80049a0 <HAL_RCC_OscConfig+0x5cc>
 80049bc:	e01e      	b.n	80049fc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80049c4:	2101      	movs	r1, #1
 80049c6:	438a      	bics	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_RCC_OscConfig+0x684>)
 80049cc:	6a1a      	ldr	r2, [r3, #32]
 80049ce:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <HAL_RCC_OscConfig+0x684>)
 80049d0:	4922      	ldr	r1, [pc, #136]	; (8004a5c <HAL_RCC_OscConfig+0x688>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d6:	f7fe fa13 	bl	8002e00 <HAL_GetTick>
 80049da:	0003      	movs	r3, r0
 80049dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e0:	f7fe fa0e 	bl	8002e00 <HAL_GetTick>
 80049e4:	0002      	movs	r2, r0
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e0a9      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2202      	movs	r2, #2
 80049f8:	4013      	ands	r3, r2
 80049fa:	d1f1      	bne.n	80049e0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d100      	bne.n	8004a06 <HAL_RCC_OscConfig+0x632>
 8004a04:	e09e      	b.n	8004b44 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d100      	bne.n	8004a0e <HAL_RCC_OscConfig+0x63a>
 8004a0c:	e077      	b.n	8004afe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d158      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <HAL_RCC_OscConfig+0x66c>)
 8004a1c:	4910      	ldr	r1, [pc, #64]	; (8004a60 <HAL_RCC_OscConfig+0x68c>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a22:	f7fe f9ed 	bl	8002e00 <HAL_GetTick>
 8004a26:	0003      	movs	r3, r0
 8004a28:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a2a:	e01b      	b.n	8004a64 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fe f9e8 	bl	8002e00 <HAL_GetTick>
 8004a30:	0002      	movs	r2, r0
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d914      	bls.n	8004a64 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e083      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	40021000 	.word	0x40021000
 8004a44:	fffffeff 	.word	0xfffffeff
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	fffffbff 	.word	0xfffffbff
 8004a50:	00001388 	.word	0x00001388
 8004a54:	efffffff 	.word	0xefffffff
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	ffffdfff 	.word	0xffffdfff
 8004a60:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004a64:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	049b      	lsls	r3, r3, #18
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d1dd      	bne.n	8004a2c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a70:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a37      	ldr	r2, [pc, #220]	; (8004b54 <HAL_RCC_OscConfig+0x780>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	4b2f      	ldr	r3, [pc, #188]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b2e      	ldr	r3, [pc, #184]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	0449      	lsls	r1, r1, #17
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fe f9af 	bl	8002e00 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fe f9aa 	bl	8002e00 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e045      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004aba:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	049b      	lsls	r3, r3, #18
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x6d4>
 8004ac6:	e03d      	b.n	8004b44 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004ace:	4922      	ldr	r1, [pc, #136]	; (8004b58 <HAL_RCC_OscConfig+0x784>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7fe f994 	bl	8002e00 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fe f98f 	bl	8002e00 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e02a      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	049b      	lsls	r3, r3, #18
 8004af8:	4013      	ands	r3, r2
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x70a>
 8004afc:	e022      	b.n	8004b44 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e01d      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <HAL_RCC_OscConfig+0x77c>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	2380      	movs	r3, #128	; 0x80
 8004b14:	025b      	lsls	r3, r3, #9
 8004b16:	401a      	ands	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d10f      	bne.n	8004b40 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	23f0      	movs	r3, #240	; 0xf0
 8004b24:	039b      	lsls	r3, r3, #14
 8004b26:	401a      	ands	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	23c0      	movs	r3, #192	; 0xc0
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b00a      	add	sp, #40	; 0x28
 8004b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	40021000 	.word	0x40021000
 8004b54:	ff02ffff 	.word	0xff02ffff
 8004b58:	feffffff 	.word	0xfeffffff

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b5b0      	push	{r4, r5, r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e128      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b96      	ldr	r3, [pc, #600]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d91e      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b93      	ldr	r3, [pc, #588]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2201      	movs	r2, #1
 8004b84:	4393      	bics	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	4b90      	ldr	r3, [pc, #576]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b90:	f7fe f936 	bl	8002e00 <HAL_GetTick>
 8004b94:	0003      	movs	r3, r0
 8004b96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b98:	e009      	b.n	8004bae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9a:	f7fe f931 	bl	8002e00 <HAL_GetTick>
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	4a8a      	ldr	r2, [pc, #552]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e109      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b87      	ldr	r3, [pc, #540]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1ee      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc6:	4b83      	ldr	r3, [pc, #524]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	22f0      	movs	r2, #240	; 0xf0
 8004bcc:	4393      	bics	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2201      	movs	r2, #1
 8004be0:	4013      	ands	r3, r2
 8004be2:	d100      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
 8004be4:	e089      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bee:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	029b      	lsls	r3, r3, #10
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d120      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e1      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d107      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c06:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	049b      	lsls	r3, r3, #18
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d114      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0d5      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c1e:	4b6d      	ldr	r3, [pc, #436]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2204      	movs	r2, #4
 8004c24:	4013      	ands	r3, r2
 8004c26:	d109      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0ca      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c2c:	4b69      	ldr	r3, [pc, #420]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4013      	ands	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0c2      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3c:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2203      	movs	r2, #3
 8004c42:	4393      	bics	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	4b62      	ldr	r3, [pc, #392]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fe f8d6 	bl	8002e00 <HAL_GetTick>
 8004c54:	0003      	movs	r3, r0
 8004c56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c60:	e009      	b.n	8004c76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c62:	f7fe f8cd 	bl	8002e00 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	4a58      	ldr	r2, [pc, #352]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0a5      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c76:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	220c      	movs	r2, #12
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d1ef      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x106>
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c8c:	e009      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8e:	f7fe f8b7 	bl	8002e00 <HAL_GetTick>
 8004c92:	0002      	movs	r2, r0
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4a4d      	ldr	r2, [pc, #308]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e08f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca2:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	220c      	movs	r2, #12
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d1ef      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x132>
 8004cae:	e024      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cb8:	e009      	b.n	8004cce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cba:	f7fe f8a1 	bl	8002e00 <HAL_GetTick>
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	4a42      	ldr	r2, [pc, #264]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e079      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	220c      	movs	r2, #12
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d1ef      	bne.n	8004cba <HAL_RCC_ClockConfig+0x15e>
 8004cda:	e00e      	b.n	8004cfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cdc:	f7fe f890 	bl	8002e00 <HAL_GetTick>
 8004ce0:	0002      	movs	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e068      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cf0:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	220c      	movs	r2, #12
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	4013      	ands	r3, r2
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d21e      	bcs.n	8004d46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4393      	bics	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d1a:	f7fe f871 	bl	8002e00 <HAL_GetTick>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	e009      	b.n	8004d38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fe f86c 	bl	8002e00 <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <HAL_RCC_ClockConfig+0x274>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e044      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCC_ClockConfig+0x270>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4013      	ands	r3, r2
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d1ee      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a20      	ldr	r2, [pc, #128]	; (8004dd8 <HAL_RCC_ClockConfig+0x27c>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	0019      	movs	r1, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d60:	430a      	orrs	r2, r1
 8004d62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <HAL_RCC_ClockConfig+0x280>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	0019      	movs	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	00da      	lsls	r2, r3, #3
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d84:	f000 f832 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 8004d88:	0001      	movs	r1, r0
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <HAL_RCC_ClockConfig+0x278>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	220f      	movs	r2, #15
 8004d92:	4013      	ands	r3, r2
 8004d94:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <HAL_RCC_ClockConfig+0x284>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	000a      	movs	r2, r1
 8004d9a:	40da      	lsrs	r2, r3
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_ClockConfig+0x288>)
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_RCC_ClockConfig+0x28c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	250b      	movs	r5, #11
 8004da6:	197c      	adds	r4, r7, r5
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7fd ffe3 	bl	8002d74 <HAL_InitTick>
 8004dae:	0003      	movs	r3, r0
 8004db0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004db2:	197b      	adds	r3, r7, r5
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004dba:	197b      	adds	r3, r7, r5
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	00001388 	.word	0x00001388
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	fffff8ff 	.word	0xfffff8ff
 8004ddc:	ffffc7ff 	.word	0xffffc7ff
 8004de0:	08006ae0 	.word	0x08006ae0
 8004de4:	20000000 	.word	0x20000000
 8004de8:	20000004 	.word	0x20000004

08004dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dee:	b097      	sub	sp, #92	; 0x5c
 8004df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d014      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x40>
 8004e02:	d900      	bls.n	8004e06 <HAL_RCC_GetSysClockFreq+0x1a>
 8004e04:	e09d      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x156>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d002      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x24>
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d00b      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0e:	e098      	b.n	8004f42 <HAL_RCC_GetSysClockFreq+0x156>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2210      	movs	r2, #16
 8004e16:	4013      	ands	r3, r2
 8004e18:	d002      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004e1a:	4b54      	ldr	r3, [pc, #336]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004e1e:	e09e      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x172>
        sysclockfreq =  HSI_VALUE;
 8004e20:	4b53      	ldr	r3, [pc, #332]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e22:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8004e24:	e09b      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e28:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8004e2a:	e098      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	0c9a      	lsrs	r2, r3, #18
 8004e30:	230f      	movs	r3, #15
 8004e32:	401a      	ands	r2, r3
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x18c>)
 8004e36:	5c9b      	ldrb	r3, [r3, r2]
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3c:	0d9a      	lsrs	r2, r3, #22
 8004e3e:	2303      	movs	r3, #3
 8004e40:	4013      	ands	r3, r2
 8004e42:	3301      	adds	r3, #1
 8004e44:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e46:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d03a      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e56:	2300      	movs	r3, #0
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5e:	0ed4      	lsrs	r4, r2, #27
 8004e60:	015e      	lsls	r6, r3, #5
 8004e62:	4326      	orrs	r6, r4
 8004e64:	0155      	lsls	r5, r2, #5
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8004e6a:	1aed      	subs	r5, r5, r3
 8004e6c:	41a6      	sbcs	r6, r4
 8004e6e:	002a      	movs	r2, r5
 8004e70:	0033      	movs	r3, r6
 8004e72:	0e94      	lsrs	r4, r2, #26
 8004e74:	0199      	lsls	r1, r3, #6
 8004e76:	4321      	orrs	r1, r4
 8004e78:	0190      	lsls	r0, r2, #6
 8004e7a:	1a80      	subs	r0, r0, r2
 8004e7c:	4199      	sbcs	r1, r3
 8004e7e:	0f43      	lsrs	r3, r0, #29
 8004e80:	00ca      	lsls	r2, r1, #3
 8004e82:	637a      	str	r2, [r7, #52]	; 0x34
 8004e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e86:	431a      	orrs	r2, r3
 8004e88:	637a      	str	r2, [r7, #52]	; 0x34
 8004e8a:	00c3      	lsls	r3, r0, #3
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e92:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8004e94:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8004e96:	1940      	adds	r0, r0, r5
 8004e98:	4171      	adcs	r1, r6
 8004e9a:	0d43      	lsrs	r3, r0, #21
 8004e9c:	02ca      	lsls	r2, r1, #11
 8004e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea6:	02c3      	lsls	r3, r0, #11
 8004ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f7fb f9b1 	bl	8000220 <__aeabi_uldivmod>
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	000b      	movs	r3, r1
 8004ec2:	0013      	movs	r3, r2
 8004ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec6:	e039      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004ec8:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d01a      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004edc:	2300      	movs	r3, #0
 8004ede:	69b8      	ldr	r0, [r7, #24]
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	f7fb f9bd 	bl	8000260 <__aeabi_lmul>
 8004ee6:	0002      	movs	r2, r0
 8004ee8:	000b      	movs	r3, r1
 8004eea:	0010      	movs	r0, r2
 8004eec:	0019      	movs	r1, r3
 8004eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f7fb f991 	bl	8000220 <__aeabi_uldivmod>
 8004efe:	0002      	movs	r2, r0
 8004f00:	000b      	movs	r3, r1
 8004f02:	0013      	movs	r3, r2
 8004f04:	657b      	str	r3, [r7, #84]	; 0x54
 8004f06:	e019      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x150>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f12:	2300      	movs	r3, #0
 8004f14:	68b8      	ldr	r0, [r7, #8]
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f7fb f9a2 	bl	8000260 <__aeabi_lmul>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	000b      	movs	r3, r1
 8004f20:	0010      	movs	r0, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f7fb f976 	bl	8000220 <__aeabi_uldivmod>
 8004f34:	0002      	movs	r2, r0
 8004f36:	000b      	movs	r3, r1
 8004f38:	0013      	movs	r3, r2
 8004f3a:	657b      	str	r3, [r7, #84]	; 0x54
        }
      }
      sysclockfreq = pllvco;
 8004f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3e:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8004f40:	e00d      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	0b5b      	lsrs	r3, r3, #13
 8004f48:	2207      	movs	r2, #7
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	643b      	str	r3, [r7, #64]	; 0x40
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f50:	3301      	adds	r3, #1
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	0212      	lsls	r2, r2, #8
 8004f56:	409a      	lsls	r2, r3
 8004f58:	0013      	movs	r3, r2
 8004f5a:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8004f5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b017      	add	sp, #92	; 0x5c
 8004f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	003d0900 	.word	0x003d0900
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	01e84800 	.word	0x01e84800
 8004f78:	08006af8 	.word	0x08006af8

08004f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f82:	681b      	ldr	r3, [r3, #0]
}
 8004f84:	0018      	movs	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	20000000 	.word	0x20000000

08004f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f94:	f7ff fff2 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004f98:	0001      	movs	r1, r0
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fa6:	5cd3      	ldrb	r3, [r2, r3]
 8004fa8:	40d9      	lsrs	r1, r3
 8004faa:	000b      	movs	r3, r1
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	08006af0 	.word	0x08006af0

08004fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fc0:	f7ff ffdc 	bl	8004f7c <HAL_RCC_GetHCLKFreq>
 8004fc4:	0001      	movs	r1, r0
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	0adb      	lsrs	r3, r3, #11
 8004fcc:	2207      	movs	r2, #7
 8004fce:	4013      	ands	r3, r2
 8004fd0:	4a04      	ldr	r2, [pc, #16]	; (8004fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fd2:	5cd3      	ldrb	r3, [r2, r3]
 8004fd4:	40d9      	lsrs	r1, r3
 8004fd6:	000b      	movs	r3, r1
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	08006af0 	.word	0x08006af0

08004fe8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	401a      	ands	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	22f0      	movs	r2, #240	; 0xf0
 800500a:	401a      	ands	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	23e0      	movs	r3, #224	; 0xe0
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	401a      	ands	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	08da      	lsrs	r2, r3, #3
 8005024:	23e0      	movs	r3, #224	; 0xe0
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	401a      	ands	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCC_GetClockConfig+0x60>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2201      	movs	r2, #1
 8005034:	401a      	ands	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	601a      	str	r2, [r3, #0]
}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b002      	add	sp, #8
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	40021000 	.word	0x40021000
 8005048:	40022000 	.word	0x40022000

0800504c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005054:	2317      	movs	r3, #23
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2220      	movs	r2, #32
 8005062:	4013      	ands	r3, r2
 8005064:	d106      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	4013      	ands	r3, r2
 8005070:	d100      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005072:	e0d9      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005074:	4b9c      	ldr	r3, [pc, #624]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	055b      	lsls	r3, r3, #21
 800507c:	4013      	ands	r3, r2
 800507e:	d10a      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005080:	4b99      	ldr	r3, [pc, #612]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005084:	4b98      	ldr	r3, [pc, #608]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	0549      	lsls	r1, r1, #21
 800508a:	430a      	orrs	r2, r1
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800508e:	2317      	movs	r3, #23
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	4b95      	ldr	r3, [pc, #596]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	2380      	movs	r3, #128	; 0x80
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4013      	ands	r3, r2
 80050a0:	d11a      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a2:	4b92      	ldr	r3, [pc, #584]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b91      	ldr	r3, [pc, #580]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	0049      	lsls	r1, r1, #1
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b0:	f7fd fea6 	bl	8002e00 <HAL_GetTick>
 80050b4:	0003      	movs	r3, r0
 80050b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ba:	f7fd fea1 	bl	8002e00 <HAL_GetTick>
 80050be:	0002      	movs	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b64      	cmp	r3, #100	; 0x64
 80050c6:	d901      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e108      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	4b87      	ldr	r3, [pc, #540]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4013      	ands	r3, r2
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80050d8:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	23c0      	movs	r3, #192	; 0xc0
 80050de:	039b      	lsls	r3, r3, #14
 80050e0:	4013      	ands	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	23c0      	movs	r3, #192	; 0xc0
 80050ea:	039b      	lsls	r3, r3, #14
 80050ec:	4013      	ands	r3, r2
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d107      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	23c0      	movs	r3, #192	; 0xc0
 80050fa:	039b      	lsls	r3, r3, #14
 80050fc:	4013      	ands	r3, r2
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d013      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	23c0      	movs	r3, #192	; 0xc0
 800510a:	029b      	lsls	r3, r3, #10
 800510c:	401a      	ands	r2, r3
 800510e:	23c0      	movs	r3, #192	; 0xc0
 8005110:	029b      	lsls	r3, r3, #10
 8005112:	429a      	cmp	r2, r3
 8005114:	d10a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005116:	4b74      	ldr	r3, [pc, #464]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	401a      	ands	r2, r3
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	029b      	lsls	r3, r3, #10
 8005124:	429a      	cmp	r2, r3
 8005126:	d101      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0d8      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800512c:	4b6e      	ldr	r3, [pc, #440]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800512e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005130:	23c0      	movs	r3, #192	; 0xc0
 8005132:	029b      	lsls	r3, r3, #10
 8005134:	4013      	ands	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d049      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	23c0      	movs	r3, #192	; 0xc0
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	4013      	ands	r3, r2
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	429a      	cmp	r2, r3
 800514c:	d004      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2220      	movs	r2, #32
 8005154:	4013      	ands	r3, r2
 8005156:	d10d      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	23c0      	movs	r3, #192	; 0xc0
 800515e:	029b      	lsls	r3, r3, #10
 8005160:	4013      	ands	r3, r2
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d034      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	4013      	ands	r3, r2
 8005172:	d02e      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005174:	4b5c      	ldr	r3, [pc, #368]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	4a5d      	ldr	r2, [pc, #372]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800517e:	4b5a      	ldr	r3, [pc, #360]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005182:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	0309      	lsls	r1, r1, #12
 8005188:	430a      	orrs	r2, r1
 800518a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800518c:	4b56      	ldr	r3, [pc, #344]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800518e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005190:	4b55      	ldr	r3, [pc, #340]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005192:	4958      	ldr	r1, [pc, #352]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005194:	400a      	ands	r2, r1
 8005196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	4013      	ands	r3, r2
 80051a6:	d014      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fd fe2a 	bl	8002e00 <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b0:	e009      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fd fe25 	bl	8002e00 <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	4a4e      	ldr	r2, [pc, #312]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e08b      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c6:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4013      	ands	r3, r2
 80051d0:	d0ef      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	23c0      	movs	r3, #192	; 0xc0
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	401a      	ands	r2, r3
 80051dc:	23c0      	movs	r3, #192	; 0xc0
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d10c      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80051e4:	4b40      	ldr	r3, [pc, #256]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a44      	ldr	r2, [pc, #272]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	23c0      	movs	r3, #192	; 0xc0
 80051f4:	039b      	lsls	r3, r3, #14
 80051f6:	401a      	ands	r2, r3
 80051f8:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005200:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	23c0      	movs	r3, #192	; 0xc0
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	401a      	ands	r2, r3
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800520e:	430a      	orrs	r2, r1
 8005210:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005212:	2317      	movs	r3, #23
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800521e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005222:	4937      	ldr	r1, [pc, #220]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005224:	400a      	ands	r2, r1
 8005226:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2201      	movs	r2, #1
 800522e:	4013      	ands	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005232:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005236:	2203      	movs	r2, #3
 8005238:	4393      	bics	r3, r2
 800523a:	0019      	movs	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005242:	430a      	orrs	r2, r1
 8005244:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2202      	movs	r2, #2
 800524c:	4013      	ands	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005254:	220c      	movs	r2, #12
 8005256:	4393      	bics	r3, r2
 8005258:	0019      	movs	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	4b22      	ldr	r3, [pc, #136]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005260:	430a      	orrs	r2, r1
 8005262:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2204      	movs	r2, #4
 800526a:	4013      	ands	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005274:	4013      	ands	r3, r2
 8005276:	0019      	movs	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695a      	ldr	r2, [r3, #20]
 800527c:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800527e:	430a      	orrs	r2, r1
 8005280:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2208      	movs	r2, #8
 8005288:	4013      	ands	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800528c:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800528e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005292:	4013      	ands	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800529c:	430a      	orrs	r2, r1
 800529e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2240      	movs	r2, #64	; 0x40
 80052a6:	4013      	ands	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	4013      	ands	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052cc:	4a10      	ldr	r2, [pc, #64]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b006      	add	sp, #24
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40007000 	.word	0x40007000
 80052f0:	fffcffff 	.word	0xfffcffff
 80052f4:	fff7ffff 	.word	0xfff7ffff
 80052f8:	00001388 	.word	0x00001388
 80052fc:	ffcfffff 	.word	0xffcfffff
 8005300:	efffffff 	.word	0xefffffff
 8005304:	fffff3ff 	.word	0xfffff3ff
 8005308:	ffffcfff 	.word	0xffffcfff
 800530c:	fbffffff 	.word	0xfbffffff
 8005310:	fff3ffff 	.word	0xfff3ffff

08005314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e032      	b.n	800538c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2239      	movs	r2, #57	; 0x39
 800532a:	5c9b      	ldrb	r3, [r3, r2]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2238      	movs	r2, #56	; 0x38
 8005336:	2100      	movs	r1, #0
 8005338:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f7fd fbc7 	bl	8002ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2239      	movs	r2, #57	; 0x39
 8005346:	2102      	movs	r1, #2
 8005348:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	0019      	movs	r1, r3
 8005354:	0010      	movs	r0, r2
 8005356:	f000 fa3b 	bl	80057d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	223e      	movs	r2, #62	; 0x3e
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	223a      	movs	r2, #58	; 0x3a
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	223b      	movs	r2, #59	; 0x3b
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	223c      	movs	r2, #60	; 0x3c
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	223d      	movs	r2, #61	; 0x3d
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2239      	movs	r2, #57	; 0x39
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2239      	movs	r2, #57	; 0x39
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e02e      	b.n	800540a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2239      	movs	r2, #57	; 0x39
 80053b0:	2102      	movs	r1, #2
 80053b2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	05db      	lsls	r3, r3, #23
 80053bc:	429a      	cmp	r2, r3
 80053be:	d009      	beq.n	80053d4 <HAL_TIM_Base_Start+0x40>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a13      	ldr	r2, [pc, #76]	; (8005414 <HAL_TIM_Base_Start+0x80>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_TIM_Base_Start+0x40>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <HAL_TIM_Base_Start+0x84>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d111      	bne.n	80053f8 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2207      	movs	r2, #7
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b06      	cmp	r3, #6
 80053e4:	d010      	beq.n	8005408 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2101      	movs	r1, #1
 80053f2:	430a      	orrs	r2, r1
 80053f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	e007      	b.n	8005408 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2101      	movs	r1, #1
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b004      	add	sp, #16
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	40010800 	.word	0x40010800
 8005418:	40011400 	.word	0x40011400

0800541c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2202      	movs	r2, #2
 800542c:	4013      	ands	r3, r2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d124      	bne.n	800547c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	2202      	movs	r2, #2
 800543a:	4013      	ands	r3, r2
 800543c:	2b02      	cmp	r3, #2
 800543e:	d11d      	bne.n	800547c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2203      	movs	r2, #3
 8005446:	4252      	negs	r2, r2
 8005448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2203      	movs	r2, #3
 8005458:	4013      	ands	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f99e 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 8005464:	e007      	b.n	8005476 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	0018      	movs	r0, r3
 800546a:	f000 f991 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f000 f99d 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2204      	movs	r2, #4
 8005484:	4013      	ands	r3, r2
 8005486:	2b04      	cmp	r3, #4
 8005488:	d125      	bne.n	80054d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2204      	movs	r2, #4
 8005492:	4013      	ands	r3, r2
 8005494:	2b04      	cmp	r3, #4
 8005496:	d11e      	bne.n	80054d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2205      	movs	r2, #5
 800549e:	4252      	negs	r2, r2
 80054a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	23c0      	movs	r3, #192	; 0xc0
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4013      	ands	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 f971 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 80054be:	e007      	b.n	80054d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 f964 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 f970 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2208      	movs	r2, #8
 80054de:	4013      	ands	r3, r2
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d124      	bne.n	800552e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2208      	movs	r2, #8
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d11d      	bne.n	800552e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2209      	movs	r2, #9
 80054f8:	4252      	negs	r2, r2
 80054fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2204      	movs	r2, #4
 8005500:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2203      	movs	r2, #3
 800550a:	4013      	ands	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 f945 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 8005516:	e007      	b.n	8005528 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f000 f938 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	0018      	movs	r0, r3
 8005524:	f000 f944 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2210      	movs	r2, #16
 8005536:	4013      	ands	r3, r2
 8005538:	2b10      	cmp	r3, #16
 800553a:	d125      	bne.n	8005588 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2210      	movs	r2, #16
 8005544:	4013      	ands	r3, r2
 8005546:	2b10      	cmp	r3, #16
 8005548:	d11e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2211      	movs	r2, #17
 8005550:	4252      	negs	r2, r2
 8005552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2208      	movs	r2, #8
 8005558:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	23c0      	movs	r3, #192	; 0xc0
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4013      	ands	r3, r2
 8005566:	d004      	beq.n	8005572 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f000 f918 	bl	80057a0 <HAL_TIM_IC_CaptureCallback>
 8005570:	e007      	b.n	8005582 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0018      	movs	r0, r3
 8005576:	f000 f90b 	bl	8005790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 f917 	bl	80057b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2201      	movs	r2, #1
 8005590:	4013      	ands	r3, r2
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10f      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	4013      	ands	r3, r2
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d108      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	4252      	negs	r2, r2
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f000 f8e5 	bl	8005780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2240      	movs	r2, #64	; 0x40
 80055be:	4013      	ands	r3, r2
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d10f      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	4013      	ands	r3, r2
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d108      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2241      	movs	r2, #65	; 0x41
 80055d8:	4252      	negs	r2, r2
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 f8ee 	bl	80057c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b002      	add	sp, #8
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2238      	movs	r2, #56	; 0x38
 80055fa:	5c9b      	ldrb	r3, [r3, r2]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIM_ConfigClockSource+0x18>
 8005600:	2302      	movs	r3, #2
 8005602:	e0b7      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x188>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2238      	movs	r2, #56	; 0x38
 8005608:	2101      	movs	r1, #1
 800560a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2239      	movs	r2, #57	; 0x39
 8005610:	2102      	movs	r1, #2
 8005612:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2277      	movs	r2, #119	; 0x77
 8005620:	4393      	bics	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4a55      	ldr	r2, [pc, #340]	; (800577c <HAL_TIM_ConfigClockSource+0x190>)
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	0192      	lsls	r2, r2, #6
 800563c:	4293      	cmp	r3, r2
 800563e:	d040      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0xd6>
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	0192      	lsls	r2, r2, #6
 8005644:	4293      	cmp	r3, r2
 8005646:	d900      	bls.n	800564a <HAL_TIM_ConfigClockSource+0x5e>
 8005648:	e088      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	0152      	lsls	r2, r2, #5
 800564e:	4293      	cmp	r3, r2
 8005650:	d100      	bne.n	8005654 <HAL_TIM_ConfigClockSource+0x68>
 8005652:	e085      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x174>
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	0152      	lsls	r2, r2, #5
 8005658:	4293      	cmp	r3, r2
 800565a:	d900      	bls.n	800565e <HAL_TIM_ConfigClockSource+0x72>
 800565c:	e07e      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800565e:	2b70      	cmp	r3, #112	; 0x70
 8005660:	d018      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0xa8>
 8005662:	d900      	bls.n	8005666 <HAL_TIM_ConfigClockSource+0x7a>
 8005664:	e07a      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 8005666:	2b60      	cmp	r3, #96	; 0x60
 8005668:	d04f      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x11e>
 800566a:	d900      	bls.n	800566e <HAL_TIM_ConfigClockSource+0x82>
 800566c:	e076      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800566e:	2b50      	cmp	r3, #80	; 0x50
 8005670:	d03b      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0xfe>
 8005672:	d900      	bls.n	8005676 <HAL_TIM_ConfigClockSource+0x8a>
 8005674:	e072      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d057      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x13e>
 800567a:	d900      	bls.n	800567e <HAL_TIM_ConfigClockSource+0x92>
 800567c:	e06e      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800567e:	2b30      	cmp	r3, #48	; 0x30
 8005680:	d063      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 8005682:	d86b      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 8005684:	2b20      	cmp	r3, #32
 8005686:	d060      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 8005688:	d868      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d05d      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 800568e:	2b10      	cmp	r3, #16
 8005690:	d05b      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005692:	e063      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f000 f962 	bl	800596c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2277      	movs	r2, #119	; 0x77
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
      break;
 80056c0:	e04f      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f000 f94b 	bl	800596c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	01c9      	lsls	r1, r1, #7
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
      break;
 80056e8:	e03b      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	001a      	movs	r2, r3
 80056f8:	f000 f8be 	bl	8005878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2150      	movs	r1, #80	; 0x50
 8005702:	0018      	movs	r0, r3
 8005704:	f000 f918 	bl	8005938 <TIM_ITRx_SetConfig>
      break;
 8005708:	e02b      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	001a      	movs	r2, r3
 8005718:	f000 f8dc 	bl	80058d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2160      	movs	r1, #96	; 0x60
 8005722:	0018      	movs	r0, r3
 8005724:	f000 f908 	bl	8005938 <TIM_ITRx_SetConfig>
      break;
 8005728:	e01b      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6859      	ldr	r1, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	001a      	movs	r2, r3
 8005738:	f000 f89e 	bl	8005878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2140      	movs	r1, #64	; 0x40
 8005742:	0018      	movs	r0, r3
 8005744:	f000 f8f8 	bl	8005938 <TIM_ITRx_SetConfig>
      break;
 8005748:	e00b      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	0019      	movs	r1, r3
 8005754:	0010      	movs	r0, r2
 8005756:	f000 f8ef 	bl	8005938 <TIM_ITRx_SetConfig>
        break;
 800575a:	e002      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	e000      	b.n	8005762 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005760:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2239      	movs	r2, #57	; 0x39
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2238      	movs	r2, #56	; 0x38
 800576e:	2100      	movs	r1, #0
 8005770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b004      	add	sp, #16
 800577a:	bd80      	pop	{r7, pc}
 800577c:	ffff00ff 	.word	0xffff00ff

08005780 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005788:	46c0      	nop			; (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b002      	add	sp, #8
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b002      	add	sp, #8
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b002      	add	sp, #8
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	05db      	lsls	r3, r3, #23
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d007      	beq.n	80057fa <TIM_Base_SetConfig+0x2a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1f      	ldr	r2, [pc, #124]	; (800586c <TIM_Base_SetConfig+0x9c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_Base_SetConfig+0x2a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <TIM_Base_SetConfig+0xa0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d108      	bne.n	800580c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2270      	movs	r2, #112	; 0x70
 80057fe:	4393      	bics	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	05db      	lsls	r3, r3, #23
 8005812:	429a      	cmp	r2, r3
 8005814:	d007      	beq.n	8005826 <TIM_Base_SetConfig+0x56>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a14      	ldr	r2, [pc, #80]	; (800586c <TIM_Base_SetConfig+0x9c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_Base_SetConfig+0x56>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <TIM_Base_SetConfig+0xa0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d108      	bne.n	8005838 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a12      	ldr	r2, [pc, #72]	; (8005874 <TIM_Base_SetConfig+0xa4>)
 800582a:	4013      	ands	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	4393      	bics	r3, r2
 800583e:	001a      	movs	r2, r3
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	615a      	str	r2, [r3, #20]
}
 8005864:	46c0      	nop			; (mov r8, r8)
 8005866:	46bd      	mov	sp, r7
 8005868:	b004      	add	sp, #16
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40010800 	.word	0x40010800
 8005870:	40011400 	.word	0x40011400
 8005874:	fffffcff 	.word	0xfffffcff

08005878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	2201      	movs	r2, #1
 8005890:	4393      	bics	r3, r2
 8005892:	001a      	movs	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	22f0      	movs	r2, #240	; 0xf0
 80058a2:	4393      	bics	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	220a      	movs	r2, #10
 80058b4:	4393      	bics	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b006      	add	sp, #24
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	2210      	movs	r2, #16
 80058e6:	4393      	bics	r3, r2
 80058e8:	001a      	movs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4a0d      	ldr	r2, [pc, #52]	; (8005934 <TIM_TI2_ConfigInputStage+0x60>)
 80058fe:	4013      	ands	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	031b      	lsls	r3, r3, #12
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	22a0      	movs	r2, #160	; 0xa0
 8005910:	4393      	bics	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	46bd      	mov	sp, r7
 800592e:	b006      	add	sp, #24
 8005930:	bd80      	pop	{r7, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	ffff0fff 	.word	0xffff0fff

08005938 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2270      	movs	r2, #112	; 0x70
 800594c:	4393      	bics	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	2207      	movs	r2, #7
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b004      	add	sp, #16
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <TIM_ETR_SetConfig+0x3c>)
 8005984:	4013      	ands	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	021a      	lsls	r2, r3, #8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	431a      	orrs	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	609a      	str	r2, [r3, #8]
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b006      	add	sp, #24
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	ffff00ff 	.word	0xffff00ff

080059ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2238      	movs	r2, #56	; 0x38
 80059ba:	5c9b      	ldrb	r3, [r3, r2]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e042      	b.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2238      	movs	r2, #56	; 0x38
 80059c8:	2101      	movs	r1, #1
 80059ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2239      	movs	r2, #57	; 0x39
 80059d0:	2102      	movs	r1, #2
 80059d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2270      	movs	r2, #112	; 0x70
 80059e8:	4393      	bics	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	05db      	lsls	r3, r3, #23
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d009      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0f      	ldr	r2, [pc, #60]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d10c      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	4393      	bics	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2239      	movs	r2, #57	; 0x39
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2238      	movs	r2, #56	; 0x38
 8005a44:	2100      	movs	r1, #0
 8005a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b004      	add	sp, #16
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	40010800 	.word	0x40010800
 8005a58:	40011400 	.word	0x40011400

08005a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e044      	b.n	8005af8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2274      	movs	r2, #116	; 0x74
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fd f843 	bl	8002b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	; 0x24
 8005a8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2101      	movs	r1, #1
 8005a98:	438a      	bics	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	f000 fa50 	bl	8005f44 <UART_SetConfig>
 8005aa4:	0003      	movs	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e024      	b.n	8005af8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 fce3 	bl	8006484 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	490d      	ldr	r1, [pc, #52]	; (8005b00 <HAL_UART_Init+0xa4>)
 8005aca:	400a      	ands	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	212a      	movs	r1, #42	; 0x2a
 8005ada:	438a      	bics	r2, r1
 8005adc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2101      	movs	r1, #1
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0018      	movs	r0, r3
 8005af2:	f000 fd7b 	bl	80065ec <UART_CheckIdleState>
 8005af6:	0003      	movs	r3, r0
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b002      	add	sp, #8
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	ffffb7ff 	.word	0xffffb7ff

08005b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4ab5      	ldr	r2, [pc, #724]	; (8005dfc <HAL_UART_IRQHandler+0x2f8>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d112      	bne.n	8005b58 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2220      	movs	r2, #32
 8005b36:	4013      	ands	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d00a      	beq.n	8005b58 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d100      	bne.n	8005b4c <HAL_UART_IRQHandler+0x48>
 8005b4a:	e1d1      	b.n	8005ef0 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	0010      	movs	r0, r2
 8005b54:	4798      	blx	r3
      }
      return;
 8005b56:	e1cb      	b.n	8005ef0 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d100      	bne.n	8005b60 <HAL_UART_IRQHandler+0x5c>
 8005b5e:	e0d9      	b.n	8005d14 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2201      	movs	r2, #1
 8005b64:	4013      	ands	r3, r2
 8005b66:	d104      	bne.n	8005b72 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	4aa5      	ldr	r2, [pc, #660]	; (8005e00 <HAL_UART_IRQHandler+0x2fc>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d100      	bne.n	8005b72 <HAL_UART_IRQHandler+0x6e>
 8005b70:	e0d0      	b.n	8005d14 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2201      	movs	r2, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	d010      	beq.n	8005b9c <HAL_UART_IRQHandler+0x98>
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	4013      	ands	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	589b      	ldr	r3, [r3, r2]
 8005b92:	2201      	movs	r2, #1
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00f      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xc0>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4013      	ands	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2280      	movs	r2, #128	; 0x80
 8005bb8:	589b      	ldr	r3, [r3, r2]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d00f      	beq.n	8005bec <HAL_UART_IRQHandler+0xe8>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d00b      	beq.n	8005bec <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	589b      	ldr	r3, [r3, r2]
 8005be2:	2202      	movs	r2, #2
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2208      	movs	r2, #8
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d103      	bne.n	8005c04 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c02:	d00b      	beq.n	8005c1c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	589b      	ldr	r3, [r3, r2]
 8005c12:	2208      	movs	r2, #8
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	4013      	ands	r3, r2
 8005c24:	d011      	beq.n	8005c4a <HAL_UART_IRQHandler+0x146>
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	04db      	lsls	r3, r3, #19
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	d00c      	beq.n	8005c4a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	0112      	lsls	r2, r2, #4
 8005c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	589b      	ldr	r3, [r3, r2]
 8005c40:	2220      	movs	r2, #32
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2280      	movs	r2, #128	; 0x80
 8005c4e:	589b      	ldr	r3, [r3, r2]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d100      	bne.n	8005c56 <HAL_UART_IRQHandler+0x152>
 8005c54:	e14e      	b.n	8005ef4 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d00c      	beq.n	8005c78 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2220      	movs	r2, #32
 8005c62:	4013      	ands	r3, r2
 8005c64:	d008      	beq.n	8005c78 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	0010      	movs	r0, r2
 8005c76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	589b      	ldr	r3, [r3, r2]
 8005c7e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d003      	beq.n	8005c96 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2228      	movs	r2, #40	; 0x28
 8005c92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c94:	d033      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 fd6d 	bl	8006778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2240      	movs	r2, #64	; 0x40
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d123      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2140      	movs	r1, #64	; 0x40
 8005cb8:	438a      	bics	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d012      	beq.n	8005cea <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	4a4e      	ldr	r2, [pc, #312]	; (8005e04 <HAL_UART_IRQHandler+0x300>)
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7fe f8ad 	bl	8003e30 <HAL_DMA_Abort_IT>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d01a      	beq.n	8005d10 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e012      	b.n	8005d10 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 f915 	bl	8005f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf2:	e00d      	b.n	8005d10 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f000 f910 	bl	8005f1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e008      	b.n	8005d10 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 f90b 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005d0e:	e0f1      	b.n	8005ef4 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	46c0      	nop			; (mov r8, r8)
    return;
 8005d12:	e0ef      	b.n	8005ef4 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d000      	beq.n	8005d1e <HAL_UART_IRQHandler+0x21a>
 8005d1c:	e0b5      	b.n	8005e8a <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2210      	movs	r2, #16
 8005d22:	4013      	ands	r3, r2
 8005d24:	d100      	bne.n	8005d28 <HAL_UART_IRQHandler+0x224>
 8005d26:	e0b0      	b.n	8005e8a <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <HAL_UART_IRQHandler+0x22e>
 8005d30:	e0ab      	b.n	8005e8a <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2210      	movs	r2, #16
 8005d38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2240      	movs	r2, #64	; 0x40
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d161      	bne.n	8005e0c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	2108      	movs	r1, #8
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8005d56:	187b      	adds	r3, r7, r1
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d100      	bne.n	8005d60 <HAL_UART_IRQHandler+0x25c>
 8005d5e:	e0cb      	b.n	8005ef8 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2258      	movs	r2, #88	; 0x58
 8005d64:	5a9b      	ldrh	r3, [r3, r2]
 8005d66:	187a      	adds	r2, r7, r1
 8005d68:	8812      	ldrh	r2, [r2, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d300      	bcc.n	8005d70 <HAL_UART_IRQHandler+0x26c>
 8005d6e:	e0c3      	b.n	8005ef8 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	187a      	adds	r2, r7, r1
 8005d74:	215a      	movs	r1, #90	; 0x5a
 8005d76:	8812      	ldrh	r2, [r2, #0]
 8005d78:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2220      	movs	r2, #32
 8005d84:	4013      	ands	r3, r2
 8005d86:	d12a      	bne.n	8005dde <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	491d      	ldr	r1, [pc, #116]	; (8005e08 <HAL_UART_IRQHandler+0x304>)
 8005d94:	400a      	ands	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2101      	movs	r1, #1
 8005da4:	438a      	bics	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2140      	movs	r1, #64	; 0x40
 8005db4:	438a      	bics	r2, r1
 8005db6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2110      	movs	r1, #16
 8005dd0:	438a      	bics	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7fd ffe9 	bl	8003db0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2258      	movs	r2, #88	; 0x58
 8005de2:	5a9a      	ldrh	r2, [r3, r2]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	215a      	movs	r1, #90	; 0x5a
 8005de8:	5a5b      	ldrh	r3, [r3, r1]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	0011      	movs	r1, r2
 8005df4:	0018      	movs	r0, r3
 8005df6:	f000 f899 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dfa:	e07d      	b.n	8005ef8 <HAL_UART_IRQHandler+0x3f4>
 8005dfc:	0000080f 	.word	0x0000080f
 8005e00:	04000120 	.word	0x04000120
 8005e04:	080067d9 	.word	0x080067d9
 8005e08:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2258      	movs	r2, #88	; 0x58
 8005e10:	5a99      	ldrh	r1, [r3, r2]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	225a      	movs	r2, #90	; 0x5a
 8005e16:	5a9b      	ldrh	r3, [r3, r2]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	200a      	movs	r0, #10
 8005e1c:	183b      	adds	r3, r7, r0
 8005e1e:	1a8a      	subs	r2, r1, r2
 8005e20:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	225a      	movs	r2, #90	; 0x5a
 8005e26:	5a9b      	ldrh	r3, [r3, r2]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d100      	bne.n	8005e30 <HAL_UART_IRQHandler+0x32c>
 8005e2e:	e065      	b.n	8005efc <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8005e30:	183b      	adds	r3, r7, r0
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d061      	beq.n	8005efc <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4931      	ldr	r1, [pc, #196]	; (8005f08 <HAL_UART_IRQHandler+0x404>)
 8005e44:	400a      	ands	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2101      	movs	r1, #1
 8005e54:	438a      	bics	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2110      	movs	r1, #16
 8005e76:	438a      	bics	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e7a:	183b      	adds	r3, r7, r0
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	0011      	movs	r1, r2
 8005e82:	0018      	movs	r0, r3
 8005e84:	f000 f852 	bl	8005f2c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e88:	e038      	b.n	8005efc <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	2380      	movs	r3, #128	; 0x80
 8005e8e:	035b      	lsls	r3, r3, #13
 8005e90:	4013      	ands	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x3ae>
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	03db      	lsls	r3, r3, #15
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2280      	movs	r2, #128	; 0x80
 8005ea4:	0352      	lsls	r2, r2, #13
 8005ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 fcc5 	bl	800683a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eb0:	e027      	b.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2280      	movs	r2, #128	; 0x80
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d00d      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01a      	beq.n	8005f00 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	0010      	movs	r0, r2
 8005ed2:	4798      	blx	r3
    }
    return;
 8005ed4:	e014      	b.n	8005f00 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2240      	movs	r2, #64	; 0x40
 8005eda:	4013      	ands	r3, r2
 8005edc:	d011      	beq.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2240      	movs	r2, #64	; 0x40
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d00d      	beq.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f000 fc8c 	bl	8006806 <UART_EndTransmit_IT>
    return;
 8005eee:	e008      	b.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
      return;
 8005ef0:	46c0      	nop			; (mov r8, r8)
 8005ef2:	e006      	b.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
    return;
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	e004      	b.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
      return;
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	e002      	b.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
      return;
 8005efc:	46c0      	nop			; (mov r8, r8)
 8005efe:	e000      	b.n	8005f02 <HAL_UART_IRQHandler+0x3fe>
    return;
 8005f00:	46c0      	nop			; (mov r8, r8)
  }

}
 8005f02:	46bd      	mov	sp, r7
 8005f04:	b008      	add	sp, #32
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	fffffedf 	.word	0xfffffedf

08005f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f24:	46c0      	nop			; (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b002      	add	sp, #8
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	000a      	movs	r2, r1
 8005f36:	1cbb      	adds	r3, r7, #2
 8005f38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b002      	add	sp, #8
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f44:	b5b0      	push	{r4, r5, r7, lr}
 8005f46:	b08e      	sub	sp, #56	; 0x38
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4c:	231a      	movs	r3, #26
 8005f4e:	2218      	movs	r2, #24
 8005f50:	4694      	mov	ip, r2
 8005f52:	44bc      	add	ip, r7
 8005f54:	4463      	add	r3, ip
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4ac1      	ldr	r2, [pc, #772]	; (8006280 <UART_SetConfig+0x33c>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f84:	430a      	orrs	r2, r1
 8005f86:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4abd      	ldr	r2, [pc, #756]	; (8006284 <UART_SetConfig+0x340>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	0019      	movs	r1, r3
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4ab7      	ldr	r2, [pc, #732]	; (8006288 <UART_SetConfig+0x344>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4ab2      	ldr	r2, [pc, #712]	; (800628c <UART_SetConfig+0x348>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4aae      	ldr	r2, [pc, #696]	; (8006290 <UART_SetConfig+0x34c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d136      	bne.n	8006048 <UART_SetConfig+0x104>
 8005fda:	4bae      	ldr	r3, [pc, #696]	; (8006294 <UART_SetConfig+0x350>)
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	2203      	movs	r2, #3
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d020      	beq.n	8006028 <UART_SetConfig+0xe4>
 8005fe6:	d827      	bhi.n	8006038 <UART_SetConfig+0xf4>
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d00d      	beq.n	8006008 <UART_SetConfig+0xc4>
 8005fec:	d824      	bhi.n	8006038 <UART_SetConfig+0xf4>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <UART_SetConfig+0xb4>
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d010      	beq.n	8006018 <UART_SetConfig+0xd4>
 8005ff6:	e01f      	b.n	8006038 <UART_SetConfig+0xf4>
 8005ff8:	231b      	movs	r3, #27
 8005ffa:	2218      	movs	r2, #24
 8005ffc:	4694      	mov	ip, r2
 8005ffe:	44bc      	add	ip, r7
 8006000:	4463      	add	r3, ip
 8006002:	2201      	movs	r2, #1
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e0ab      	b.n	8006160 <UART_SetConfig+0x21c>
 8006008:	231b      	movs	r3, #27
 800600a:	2218      	movs	r2, #24
 800600c:	4694      	mov	ip, r2
 800600e:	44bc      	add	ip, r7
 8006010:	4463      	add	r3, ip
 8006012:	2202      	movs	r2, #2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e0a3      	b.n	8006160 <UART_SetConfig+0x21c>
 8006018:	231b      	movs	r3, #27
 800601a:	2218      	movs	r2, #24
 800601c:	4694      	mov	ip, r2
 800601e:	44bc      	add	ip, r7
 8006020:	4463      	add	r3, ip
 8006022:	2204      	movs	r2, #4
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e09b      	b.n	8006160 <UART_SetConfig+0x21c>
 8006028:	231b      	movs	r3, #27
 800602a:	2218      	movs	r2, #24
 800602c:	4694      	mov	ip, r2
 800602e:	44bc      	add	ip, r7
 8006030:	4463      	add	r3, ip
 8006032:	2208      	movs	r2, #8
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e093      	b.n	8006160 <UART_SetConfig+0x21c>
 8006038:	231b      	movs	r3, #27
 800603a:	2218      	movs	r2, #24
 800603c:	4694      	mov	ip, r2
 800603e:	44bc      	add	ip, r7
 8006040:	4463      	add	r3, ip
 8006042:	2210      	movs	r2, #16
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e08b      	b.n	8006160 <UART_SetConfig+0x21c>
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a92      	ldr	r2, [pc, #584]	; (8006298 <UART_SetConfig+0x354>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d136      	bne.n	80060c0 <UART_SetConfig+0x17c>
 8006052:	4b90      	ldr	r3, [pc, #576]	; (8006294 <UART_SetConfig+0x350>)
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	220c      	movs	r2, #12
 8006058:	4013      	ands	r3, r2
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d020      	beq.n	80060a0 <UART_SetConfig+0x15c>
 800605e:	d827      	bhi.n	80060b0 <UART_SetConfig+0x16c>
 8006060:	2b08      	cmp	r3, #8
 8006062:	d00d      	beq.n	8006080 <UART_SetConfig+0x13c>
 8006064:	d824      	bhi.n	80060b0 <UART_SetConfig+0x16c>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <UART_SetConfig+0x12c>
 800606a:	2b04      	cmp	r3, #4
 800606c:	d010      	beq.n	8006090 <UART_SetConfig+0x14c>
 800606e:	e01f      	b.n	80060b0 <UART_SetConfig+0x16c>
 8006070:	231b      	movs	r3, #27
 8006072:	2218      	movs	r2, #24
 8006074:	4694      	mov	ip, r2
 8006076:	44bc      	add	ip, r7
 8006078:	4463      	add	r3, ip
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	e06f      	b.n	8006160 <UART_SetConfig+0x21c>
 8006080:	231b      	movs	r3, #27
 8006082:	2218      	movs	r2, #24
 8006084:	4694      	mov	ip, r2
 8006086:	44bc      	add	ip, r7
 8006088:	4463      	add	r3, ip
 800608a:	2202      	movs	r2, #2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e067      	b.n	8006160 <UART_SetConfig+0x21c>
 8006090:	231b      	movs	r3, #27
 8006092:	2218      	movs	r2, #24
 8006094:	4694      	mov	ip, r2
 8006096:	44bc      	add	ip, r7
 8006098:	4463      	add	r3, ip
 800609a:	2204      	movs	r2, #4
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	e05f      	b.n	8006160 <UART_SetConfig+0x21c>
 80060a0:	231b      	movs	r3, #27
 80060a2:	2218      	movs	r2, #24
 80060a4:	4694      	mov	ip, r2
 80060a6:	44bc      	add	ip, r7
 80060a8:	4463      	add	r3, ip
 80060aa:	2208      	movs	r2, #8
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e057      	b.n	8006160 <UART_SetConfig+0x21c>
 80060b0:	231b      	movs	r3, #27
 80060b2:	2218      	movs	r2, #24
 80060b4:	4694      	mov	ip, r2
 80060b6:	44bc      	add	ip, r7
 80060b8:	4463      	add	r3, ip
 80060ba:	2210      	movs	r2, #16
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e04f      	b.n	8006160 <UART_SetConfig+0x21c>
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a70      	ldr	r2, [pc, #448]	; (8006288 <UART_SetConfig+0x344>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d143      	bne.n	8006152 <UART_SetConfig+0x20e>
 80060ca:	4b72      	ldr	r3, [pc, #456]	; (8006294 <UART_SetConfig+0x350>)
 80060cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ce:	23c0      	movs	r3, #192	; 0xc0
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	4013      	ands	r3, r2
 80060d4:	22c0      	movs	r2, #192	; 0xc0
 80060d6:	0112      	lsls	r2, r2, #4
 80060d8:	4293      	cmp	r3, r2
 80060da:	d02a      	beq.n	8006132 <UART_SetConfig+0x1ee>
 80060dc:	22c0      	movs	r2, #192	; 0xc0
 80060de:	0112      	lsls	r2, r2, #4
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d82e      	bhi.n	8006142 <UART_SetConfig+0x1fe>
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	0112      	lsls	r2, r2, #4
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d012      	beq.n	8006112 <UART_SetConfig+0x1ce>
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	0112      	lsls	r2, r2, #4
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d826      	bhi.n	8006142 <UART_SetConfig+0x1fe>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <UART_SetConfig+0x1be>
 80060f8:	2280      	movs	r2, #128	; 0x80
 80060fa:	00d2      	lsls	r2, r2, #3
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d010      	beq.n	8006122 <UART_SetConfig+0x1de>
 8006100:	e01f      	b.n	8006142 <UART_SetConfig+0x1fe>
 8006102:	231b      	movs	r3, #27
 8006104:	2218      	movs	r2, #24
 8006106:	4694      	mov	ip, r2
 8006108:	44bc      	add	ip, r7
 800610a:	4463      	add	r3, ip
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e026      	b.n	8006160 <UART_SetConfig+0x21c>
 8006112:	231b      	movs	r3, #27
 8006114:	2218      	movs	r2, #24
 8006116:	4694      	mov	ip, r2
 8006118:	44bc      	add	ip, r7
 800611a:	4463      	add	r3, ip
 800611c:	2202      	movs	r2, #2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	e01e      	b.n	8006160 <UART_SetConfig+0x21c>
 8006122:	231b      	movs	r3, #27
 8006124:	2218      	movs	r2, #24
 8006126:	4694      	mov	ip, r2
 8006128:	44bc      	add	ip, r7
 800612a:	4463      	add	r3, ip
 800612c:	2204      	movs	r2, #4
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e016      	b.n	8006160 <UART_SetConfig+0x21c>
 8006132:	231b      	movs	r3, #27
 8006134:	2218      	movs	r2, #24
 8006136:	4694      	mov	ip, r2
 8006138:	44bc      	add	ip, r7
 800613a:	4463      	add	r3, ip
 800613c:	2208      	movs	r2, #8
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e00e      	b.n	8006160 <UART_SetConfig+0x21c>
 8006142:	231b      	movs	r3, #27
 8006144:	2218      	movs	r2, #24
 8006146:	4694      	mov	ip, r2
 8006148:	44bc      	add	ip, r7
 800614a:	4463      	add	r3, ip
 800614c:	2210      	movs	r2, #16
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e006      	b.n	8006160 <UART_SetConfig+0x21c>
 8006152:	231b      	movs	r3, #27
 8006154:	2218      	movs	r2, #24
 8006156:	4694      	mov	ip, r2
 8006158:	44bc      	add	ip, r7
 800615a:	4463      	add	r3, ip
 800615c:	2210      	movs	r2, #16
 800615e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a48      	ldr	r2, [pc, #288]	; (8006288 <UART_SetConfig+0x344>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d000      	beq.n	800616c <UART_SetConfig+0x228>
 800616a:	e09b      	b.n	80062a4 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800616c:	231b      	movs	r3, #27
 800616e:	2218      	movs	r2, #24
 8006170:	4694      	mov	ip, r2
 8006172:	44bc      	add	ip, r7
 8006174:	4463      	add	r3, ip
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b08      	cmp	r3, #8
 800617a:	d01d      	beq.n	80061b8 <UART_SetConfig+0x274>
 800617c:	dc20      	bgt.n	80061c0 <UART_SetConfig+0x27c>
 800617e:	2b04      	cmp	r3, #4
 8006180:	d015      	beq.n	80061ae <UART_SetConfig+0x26a>
 8006182:	dc1d      	bgt.n	80061c0 <UART_SetConfig+0x27c>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <UART_SetConfig+0x24a>
 8006188:	2b02      	cmp	r3, #2
 800618a:	d005      	beq.n	8006198 <UART_SetConfig+0x254>
 800618c:	e018      	b.n	80061c0 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800618e:	f7fe feff 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8006192:	0003      	movs	r3, r0
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006196:	e01d      	b.n	80061d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006198:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <UART_SetConfig+0x350>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2210      	movs	r2, #16
 800619e:	4013      	ands	r3, r2
 80061a0:	d002      	beq.n	80061a8 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80061a2:	4b3e      	ldr	r3, [pc, #248]	; (800629c <UART_SetConfig+0x358>)
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061a6:	e015      	b.n	80061d4 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 80061a8:	4b3d      	ldr	r3, [pc, #244]	; (80062a0 <UART_SetConfig+0x35c>)
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ac:	e012      	b.n	80061d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ae:	f7fe fe1d 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 80061b2:	0003      	movs	r3, r0
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b6:	e00d      	b.n	80061d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061be:	e009      	b.n	80061d4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061c4:	231a      	movs	r3, #26
 80061c6:	2218      	movs	r2, #24
 80061c8:	4694      	mov	ip, r2
 80061ca:	44bc      	add	ip, r7
 80061cc:	4463      	add	r3, ip
 80061ce:	2201      	movs	r2, #1
 80061d0:	701a      	strb	r2, [r3, #0]
        break;
 80061d2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d100      	bne.n	80061dc <UART_SetConfig+0x298>
 80061da:	e139      	b.n	8006450 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	0013      	movs	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	189b      	adds	r3, r3, r2
 80061e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d305      	bcc.n	80061f8 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d907      	bls.n	8006208 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80061f8:	231a      	movs	r3, #26
 80061fa:	2218      	movs	r2, #24
 80061fc:	4694      	mov	ip, r2
 80061fe:	44bc      	add	ip, r7
 8006200:	4463      	add	r3, ip
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e123      	b.n	8006450 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	6939      	ldr	r1, [r7, #16]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	000b      	movs	r3, r1
 8006216:	0e1b      	lsrs	r3, r3, #24
 8006218:	0010      	movs	r0, r2
 800621a:	0205      	lsls	r5, r0, #8
 800621c:	431d      	orrs	r5, r3
 800621e:	000b      	movs	r3, r1
 8006220:	021c      	lsls	r4, r3, #8
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	68b8      	ldr	r0, [r7, #8]
 8006230:	68f9      	ldr	r1, [r7, #12]
 8006232:	1900      	adds	r0, r0, r4
 8006234:	4169      	adcs	r1, r5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	607b      	str	r3, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f7f9 ffec 	bl	8000220 <__aeabi_uldivmod>
 8006248:	0002      	movs	r2, r0
 800624a:	000b      	movs	r3, r1
 800624c:	0013      	movs	r3, r2
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006252:	23c0      	movs	r3, #192	; 0xc0
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	429a      	cmp	r2, r3
 8006258:	d309      	bcc.n	800626e <UART_SetConfig+0x32a>
 800625a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	035b      	lsls	r3, r3, #13
 8006260:	429a      	cmp	r2, r3
 8006262:	d204      	bcs.n	800626e <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e0f0      	b.n	8006450 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800626e:	231a      	movs	r3, #26
 8006270:	2218      	movs	r2, #24
 8006272:	4694      	mov	ip, r2
 8006274:	44bc      	add	ip, r7
 8006276:	4463      	add	r3, ip
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e0e8      	b.n	8006450 <UART_SetConfig+0x50c>
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	efff69f3 	.word	0xefff69f3
 8006284:	ffffcfff 	.word	0xffffcfff
 8006288:	40004800 	.word	0x40004800
 800628c:	fffff4ff 	.word	0xfffff4ff
 8006290:	40013800 	.word	0x40013800
 8006294:	40021000 	.word	0x40021000
 8006298:	40004400 	.word	0x40004400
 800629c:	003d0900 	.word	0x003d0900
 80062a0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d000      	beq.n	80062b2 <UART_SetConfig+0x36e>
 80062b0:	e074      	b.n	800639c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80062b2:	231b      	movs	r3, #27
 80062b4:	2218      	movs	r2, #24
 80062b6:	4694      	mov	ip, r2
 80062b8:	44bc      	add	ip, r7
 80062ba:	4463      	add	r3, ip
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d822      	bhi.n	8006308 <UART_SetConfig+0x3c4>
 80062c2:	009a      	lsls	r2, r3, #2
 80062c4:	4b6a      	ldr	r3, [pc, #424]	; (8006470 <UART_SetConfig+0x52c>)
 80062c6:	18d3      	adds	r3, r2, r3
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062cc:	f7fe fe60 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 80062d0:	0003      	movs	r3, r0
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d4:	e022      	b.n	800631c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d6:	f7fe fe71 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 80062da:	0003      	movs	r3, r0
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062de:	e01d      	b.n	800631c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e0:	4b64      	ldr	r3, [pc, #400]	; (8006474 <UART_SetConfig+0x530>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2210      	movs	r2, #16
 80062e6:	4013      	ands	r3, r2
 80062e8:	d002      	beq.n	80062f0 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <UART_SetConfig+0x534>)
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ee:	e015      	b.n	800631c <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 80062f0:	4b62      	ldr	r3, [pc, #392]	; (800647c <UART_SetConfig+0x538>)
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f4:	e012      	b.n	800631c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062f6:	f7fe fd79 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 80062fa:	0003      	movs	r3, r0
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062fe:	e00d      	b.n	800631c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006306:	e009      	b.n	800631c <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800630c:	231a      	movs	r3, #26
 800630e:	2218      	movs	r2, #24
 8006310:	4694      	mov	ip, r2
 8006312:	44bc      	add	ip, r7
 8006314:	4463      	add	r3, ip
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
        break;
 800631a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d100      	bne.n	8006324 <UART_SetConfig+0x3e0>
 8006322:	e095      	b.n	8006450 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	005a      	lsls	r2, r3, #1
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	18d2      	adds	r2, r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	0019      	movs	r1, r3
 8006336:	0010      	movs	r0, r2
 8006338:	f7f9 fee6 	bl	8000108 <__udivsi3>
 800633c:	0003      	movs	r3, r0
 800633e:	b29b      	uxth	r3, r3
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	2b0f      	cmp	r3, #15
 8006346:	d921      	bls.n	800638c <UART_SetConfig+0x448>
 8006348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	025b      	lsls	r3, r3, #9
 800634e:	429a      	cmp	r2, r3
 8006350:	d21c      	bcs.n	800638c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	b29a      	uxth	r2, r3
 8006356:	200e      	movs	r0, #14
 8006358:	2418      	movs	r4, #24
 800635a:	193b      	adds	r3, r7, r4
 800635c:	181b      	adds	r3, r3, r0
 800635e:	210f      	movs	r1, #15
 8006360:	438a      	bics	r2, r1
 8006362:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	2207      	movs	r2, #7
 800636c:	4013      	ands	r3, r2
 800636e:	b299      	uxth	r1, r3
 8006370:	193b      	adds	r3, r7, r4
 8006372:	181b      	adds	r3, r3, r0
 8006374:	193a      	adds	r2, r7, r4
 8006376:	1812      	adds	r2, r2, r0
 8006378:	8812      	ldrh	r2, [r2, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	193a      	adds	r2, r7, r4
 8006384:	1812      	adds	r2, r2, r0
 8006386:	8812      	ldrh	r2, [r2, #0]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	e061      	b.n	8006450 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800638c:	231a      	movs	r3, #26
 800638e:	2218      	movs	r2, #24
 8006390:	4694      	mov	ip, r2
 8006392:	44bc      	add	ip, r7
 8006394:	4463      	add	r3, ip
 8006396:	2201      	movs	r2, #1
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e059      	b.n	8006450 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800639c:	231b      	movs	r3, #27
 800639e:	2218      	movs	r2, #24
 80063a0:	4694      	mov	ip, r2
 80063a2:	44bc      	add	ip, r7
 80063a4:	4463      	add	r3, ip
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d822      	bhi.n	80063f2 <UART_SetConfig+0x4ae>
 80063ac:	009a      	lsls	r2, r3, #2
 80063ae:	4b34      	ldr	r3, [pc, #208]	; (8006480 <UART_SetConfig+0x53c>)
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7fe fdeb 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 80063ba:	0003      	movs	r3, r0
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063be:	e022      	b.n	8006406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c0:	f7fe fdfc 	bl	8004fbc <HAL_RCC_GetPCLK2Freq>
 80063c4:	0003      	movs	r3, r0
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063c8:	e01d      	b.n	8006406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ca:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <UART_SetConfig+0x530>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	4013      	ands	r3, r2
 80063d2:	d002      	beq.n	80063da <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063d4:	4b28      	ldr	r3, [pc, #160]	; (8006478 <UART_SetConfig+0x534>)
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063d8:	e015      	b.n	8006406 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80063da:	4b28      	ldr	r3, [pc, #160]	; (800647c <UART_SetConfig+0x538>)
 80063dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063de:	e012      	b.n	8006406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e0:	f7fe fd04 	bl	8004dec <HAL_RCC_GetSysClockFreq>
 80063e4:	0003      	movs	r3, r0
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063e8:	e00d      	b.n	8006406 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	021b      	lsls	r3, r3, #8
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063f0:	e009      	b.n	8006406 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063f6:	231a      	movs	r3, #26
 80063f8:	2218      	movs	r2, #24
 80063fa:	4694      	mov	ip, r2
 80063fc:	44bc      	add	ip, r7
 80063fe:	4463      	add	r3, ip
 8006400:	2201      	movs	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
        break;
 8006404:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d021      	beq.n	8006450 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	085a      	lsrs	r2, r3, #1
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	18d2      	adds	r2, r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	0019      	movs	r1, r3
 800641c:	0010      	movs	r0, r2
 800641e:	f7f9 fe73 	bl	8000108 <__udivsi3>
 8006422:	0003      	movs	r3, r0
 8006424:	b29b      	uxth	r3, r3
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d909      	bls.n	8006442 <UART_SetConfig+0x4fe>
 800642e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	025b      	lsls	r3, r3, #9
 8006434:	429a      	cmp	r2, r3
 8006436:	d204      	bcs.n	8006442 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643e:	60da      	str	r2, [r3, #12]
 8006440:	e006      	b.n	8006450 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006442:	231a      	movs	r3, #26
 8006444:	2218      	movs	r2, #24
 8006446:	4694      	mov	ip, r2
 8006448:	44bc      	add	ip, r7
 800644a:	4463      	add	r3, ip
 800644c:	2201      	movs	r2, #1
 800644e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2200      	movs	r2, #0
 8006454:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2200      	movs	r2, #0
 800645a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800645c:	231a      	movs	r3, #26
 800645e:	2218      	movs	r2, #24
 8006460:	4694      	mov	ip, r2
 8006462:	44bc      	add	ip, r7
 8006464:	4463      	add	r3, ip
 8006466:	781b      	ldrb	r3, [r3, #0]
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	b00e      	add	sp, #56	; 0x38
 800646e:	bdb0      	pop	{r4, r5, r7, pc}
 8006470:	08006b04 	.word	0x08006b04
 8006474:	40021000 	.word	0x40021000
 8006478:	003d0900 	.word	0x003d0900
 800647c:	00f42400 	.word	0x00f42400
 8006480:	08006b28 	.word	0x08006b28

08006484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2201      	movs	r2, #1
 8006492:	4013      	ands	r3, r2
 8006494:	d00b      	beq.n	80064ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <UART_AdvFeatureConfig+0x144>)
 800649e:	4013      	ands	r3, r2
 80064a0:	0019      	movs	r1, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	2202      	movs	r2, #2
 80064b4:	4013      	ands	r3, r2
 80064b6:	d00b      	beq.n	80064d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	4a43      	ldr	r2, [pc, #268]	; (80065cc <UART_AdvFeatureConfig+0x148>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	0019      	movs	r1, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2204      	movs	r2, #4
 80064d6:	4013      	ands	r3, r2
 80064d8:	d00b      	beq.n	80064f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4a3b      	ldr	r2, [pc, #236]	; (80065d0 <UART_AdvFeatureConfig+0x14c>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	0019      	movs	r1, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	2208      	movs	r2, #8
 80064f8:	4013      	ands	r3, r2
 80064fa:	d00b      	beq.n	8006514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4a34      	ldr	r2, [pc, #208]	; (80065d4 <UART_AdvFeatureConfig+0x150>)
 8006504:	4013      	ands	r3, r2
 8006506:	0019      	movs	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2210      	movs	r2, #16
 800651a:	4013      	ands	r3, r2
 800651c:	d00b      	beq.n	8006536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <UART_AdvFeatureConfig+0x154>)
 8006526:	4013      	ands	r3, r2
 8006528:	0019      	movs	r1, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	2220      	movs	r2, #32
 800653c:	4013      	ands	r3, r2
 800653e:	d00b      	beq.n	8006558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	4a25      	ldr	r2, [pc, #148]	; (80065dc <UART_AdvFeatureConfig+0x158>)
 8006548:	4013      	ands	r3, r2
 800654a:	0019      	movs	r1, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	4013      	ands	r3, r2
 8006560:	d01d      	beq.n	800659e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a1d      	ldr	r2, [pc, #116]	; (80065e0 <UART_AdvFeatureConfig+0x15c>)
 800656a:	4013      	ands	r3, r2
 800656c:	0019      	movs	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	035b      	lsls	r3, r3, #13
 8006582:	429a      	cmp	r2, r3
 8006584:	d10b      	bne.n	800659e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4a15      	ldr	r2, [pc, #84]	; (80065e4 <UART_AdvFeatureConfig+0x160>)
 800658e:	4013      	ands	r3, r2
 8006590:	0019      	movs	r1, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	4013      	ands	r3, r2
 80065a6:	d00b      	beq.n	80065c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <UART_AdvFeatureConfig+0x164>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	0019      	movs	r1, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }
}
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b002      	add	sp, #8
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	fffdffff 	.word	0xfffdffff
 80065cc:	fffeffff 	.word	0xfffeffff
 80065d0:	fffbffff 	.word	0xfffbffff
 80065d4:	ffff7fff 	.word	0xffff7fff
 80065d8:	ffffefff 	.word	0xffffefff
 80065dc:	ffffdfff 	.word	0xffffdfff
 80065e0:	ffefffff 	.word	0xffefffff
 80065e4:	ff9fffff 	.word	0xff9fffff
 80065e8:	fff7ffff 	.word	0xfff7ffff

080065ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	2100      	movs	r1, #0
 80065fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065fc:	f7fc fc00 	bl	8002e00 <HAL_GetTick>
 8006600:	0003      	movs	r3, r0
 8006602:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2208      	movs	r2, #8
 800660c:	4013      	ands	r3, r2
 800660e:	2b08      	cmp	r3, #8
 8006610:	d10c      	bne.n	800662c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2280      	movs	r2, #128	; 0x80
 8006616:	0391      	lsls	r1, r2, #14
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <UART_CheckIdleState+0x8c>)
 800661c:	9200      	str	r2, [sp, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	f000 f82c 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 8006624:	1e03      	subs	r3, r0, #0
 8006626:	d001      	beq.n	800662c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e021      	b.n	8006670 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2204      	movs	r2, #4
 8006634:	4013      	ands	r3, r2
 8006636:	2b04      	cmp	r3, #4
 8006638:	d10c      	bne.n	8006654 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	03d1      	lsls	r1, r2, #15
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4a0d      	ldr	r2, [pc, #52]	; (8006678 <UART_CheckIdleState+0x8c>)
 8006644:	9200      	str	r2, [sp, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	f000 f818 	bl	800667c <UART_WaitOnFlagUntilTimeout>
 800664c:	1e03      	subs	r3, r0, #0
 800664e:	d001      	beq.n	8006654 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e00d      	b.n	8006670 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2274      	movs	r2, #116	; 0x74
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bd80      	pop	{r7, pc}
 8006678:	01ffffff 	.word	0x01ffffff

0800667c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	1dfb      	adds	r3, r7, #7
 800668a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800668c:	e05e      	b.n	800674c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	3301      	adds	r3, #1
 8006692:	d05b      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006694:	f7fc fbb4 	bl	8002e00 <HAL_GetTick>
 8006698:	0002      	movs	r2, r0
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d11b      	bne.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	492f      	ldr	r1, [pc, #188]	; (8006774 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80066b6:	400a      	ands	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2101      	movs	r1, #1
 80066c6:	438a      	bics	r2, r1
 80066c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2274      	movs	r2, #116	; 0x74
 80066da:	2100      	movs	r1, #0
 80066dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e044      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2204      	movs	r2, #4
 80066ea:	4013      	ands	r3, r2
 80066ec:	d02e      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	401a      	ands	r2, r3
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	429a      	cmp	r2, r3
 8006700:	d124      	bne.n	800674c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	0112      	lsls	r2, r2, #4
 800670a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4917      	ldr	r1, [pc, #92]	; (8006774 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006718:	400a      	ands	r2, r1
 800671a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2101      	movs	r1, #1
 8006728:	438a      	bics	r2, r1
 800672a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2280      	movs	r2, #128	; 0x80
 800673c:	2120      	movs	r1, #32
 800673e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2274      	movs	r2, #116	; 0x74
 8006744:	2100      	movs	r1, #0
 8006746:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e00f      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	425a      	negs	r2, r3
 800675c:	4153      	adcs	r3, r2
 800675e:	b2db      	uxtb	r3, r3
 8006760:	001a      	movs	r2, r3
 8006762:	1dfb      	adds	r3, r7, #7
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d091      	beq.n	800668e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	0018      	movs	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	b004      	add	sp, #16
 8006772:	bd80      	pop	{r7, pc}
 8006774:	fffffe5f 	.word	0xfffffe5f

08006778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4912      	ldr	r1, [pc, #72]	; (80067d4 <UART_EndRxTransfer+0x5c>)
 800678c:	400a      	ands	r2, r1
 800678e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d107      	bne.n	80067b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2110      	movs	r1, #16
 80067b4:	438a      	bics	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	46bd      	mov	sp, r7
 80067ce:	b002      	add	sp, #8
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	fffffedf 	.word	0xfffffedf

080067d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	225a      	movs	r2, #90	; 0x5a
 80067ea:	2100      	movs	r1, #0
 80067ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2252      	movs	r2, #82	; 0x52
 80067f2:	2100      	movs	r1, #0
 80067f4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	0018      	movs	r0, r3
 80067fa:	f7ff fb8f 	bl	8005f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	46bd      	mov	sp, r7
 8006802:	b004      	add	sp, #16
 8006804:	bd80      	pop	{r7, pc}

08006806 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2140      	movs	r1, #64	; 0x40
 800681a:	438a      	bics	r2, r1
 800681c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff fb6d 	bl	8005f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	46bd      	mov	sp, r7
 8006836:	b002      	add	sp, #8
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	46bd      	mov	sp, r7
 8006846:	b002      	add	sp, #8
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <__errno>:
 800684c:	4b01      	ldr	r3, [pc, #4]	; (8006854 <__errno+0x8>)
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	4770      	bx	lr
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	2000000c 	.word	0x2000000c

08006858 <__libc_init_array>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	2600      	movs	r6, #0
 800685c:	4d0c      	ldr	r5, [pc, #48]	; (8006890 <__libc_init_array+0x38>)
 800685e:	4c0d      	ldr	r4, [pc, #52]	; (8006894 <__libc_init_array+0x3c>)
 8006860:	1b64      	subs	r4, r4, r5
 8006862:	10a4      	asrs	r4, r4, #2
 8006864:	42a6      	cmp	r6, r4
 8006866:	d109      	bne.n	800687c <__libc_init_array+0x24>
 8006868:	2600      	movs	r6, #0
 800686a:	f000 f8ad 	bl	80069c8 <_init>
 800686e:	4d0a      	ldr	r5, [pc, #40]	; (8006898 <__libc_init_array+0x40>)
 8006870:	4c0a      	ldr	r4, [pc, #40]	; (800689c <__libc_init_array+0x44>)
 8006872:	1b64      	subs	r4, r4, r5
 8006874:	10a4      	asrs	r4, r4, #2
 8006876:	42a6      	cmp	r6, r4
 8006878:	d105      	bne.n	8006886 <__libc_init_array+0x2e>
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	00b3      	lsls	r3, r6, #2
 800687e:	58eb      	ldr	r3, [r5, r3]
 8006880:	4798      	blx	r3
 8006882:	3601      	adds	r6, #1
 8006884:	e7ee      	b.n	8006864 <__libc_init_array+0xc>
 8006886:	00b3      	lsls	r3, r6, #2
 8006888:	58eb      	ldr	r3, [r5, r3]
 800688a:	4798      	blx	r3
 800688c:	3601      	adds	r6, #1
 800688e:	e7f2      	b.n	8006876 <__libc_init_array+0x1e>
 8006890:	08006b54 	.word	0x08006b54
 8006894:	08006b54 	.word	0x08006b54
 8006898:	08006b54 	.word	0x08006b54
 800689c:	08006b58 	.word	0x08006b58

080068a0 <malloc>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <malloc+0x10>)
 80068a4:	0001      	movs	r1, r0
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	f000 f80c 	bl	80068c4 <_malloc_r>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	2000000c 	.word	0x2000000c

080068b4 <memset>:
 80068b4:	0003      	movs	r3, r0
 80068b6:	1882      	adds	r2, r0, r2
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d100      	bne.n	80068be <memset+0xa>
 80068bc:	4770      	bx	lr
 80068be:	7019      	strb	r1, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	e7f9      	b.n	80068b8 <memset+0x4>

080068c4 <_malloc_r>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	2303      	movs	r3, #3
 80068c8:	1ccd      	adds	r5, r1, #3
 80068ca:	439d      	bics	r5, r3
 80068cc:	3508      	adds	r5, #8
 80068ce:	0006      	movs	r6, r0
 80068d0:	2d0c      	cmp	r5, #12
 80068d2:	d21f      	bcs.n	8006914 <_malloc_r+0x50>
 80068d4:	250c      	movs	r5, #12
 80068d6:	42a9      	cmp	r1, r5
 80068d8:	d81e      	bhi.n	8006918 <_malloc_r+0x54>
 80068da:	0030      	movs	r0, r6
 80068dc:	f000 f862 	bl	80069a4 <__malloc_lock>
 80068e0:	4925      	ldr	r1, [pc, #148]	; (8006978 <_malloc_r+0xb4>)
 80068e2:	680a      	ldr	r2, [r1, #0]
 80068e4:	0014      	movs	r4, r2
 80068e6:	2c00      	cmp	r4, #0
 80068e8:	d11a      	bne.n	8006920 <_malloc_r+0x5c>
 80068ea:	4f24      	ldr	r7, [pc, #144]	; (800697c <_malloc_r+0xb8>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <_malloc_r+0x38>
 80068f2:	0021      	movs	r1, r4
 80068f4:	0030      	movs	r0, r6
 80068f6:	f000 f843 	bl	8006980 <_sbrk_r>
 80068fa:	6038      	str	r0, [r7, #0]
 80068fc:	0029      	movs	r1, r5
 80068fe:	0030      	movs	r0, r6
 8006900:	f000 f83e 	bl	8006980 <_sbrk_r>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d12b      	bne.n	8006960 <_malloc_r+0x9c>
 8006908:	230c      	movs	r3, #12
 800690a:	0030      	movs	r0, r6
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	f000 f851 	bl	80069b4 <__malloc_unlock>
 8006912:	e003      	b.n	800691c <_malloc_r+0x58>
 8006914:	2d00      	cmp	r5, #0
 8006916:	dade      	bge.n	80068d6 <_malloc_r+0x12>
 8006918:	230c      	movs	r3, #12
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	2000      	movs	r0, #0
 800691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	1b5b      	subs	r3, r3, r5
 8006924:	d419      	bmi.n	800695a <_malloc_r+0x96>
 8006926:	2b0b      	cmp	r3, #11
 8006928:	d903      	bls.n	8006932 <_malloc_r+0x6e>
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	18e4      	adds	r4, r4, r3
 800692e:	6025      	str	r5, [r4, #0]
 8006930:	e003      	b.n	800693a <_malloc_r+0x76>
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	42a2      	cmp	r2, r4
 8006936:	d10e      	bne.n	8006956 <_malloc_r+0x92>
 8006938:	600b      	str	r3, [r1, #0]
 800693a:	0030      	movs	r0, r6
 800693c:	f000 f83a 	bl	80069b4 <__malloc_unlock>
 8006940:	0020      	movs	r0, r4
 8006942:	2207      	movs	r2, #7
 8006944:	300b      	adds	r0, #11
 8006946:	1d23      	adds	r3, r4, #4
 8006948:	4390      	bics	r0, r2
 800694a:	1ac2      	subs	r2, r0, r3
 800694c:	4298      	cmp	r0, r3
 800694e:	d0e6      	beq.n	800691e <_malloc_r+0x5a>
 8006950:	1a1b      	subs	r3, r3, r0
 8006952:	50a3      	str	r3, [r4, r2]
 8006954:	e7e3      	b.n	800691e <_malloc_r+0x5a>
 8006956:	6053      	str	r3, [r2, #4]
 8006958:	e7ef      	b.n	800693a <_malloc_r+0x76>
 800695a:	0022      	movs	r2, r4
 800695c:	6864      	ldr	r4, [r4, #4]
 800695e:	e7c2      	b.n	80068e6 <_malloc_r+0x22>
 8006960:	2303      	movs	r3, #3
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	439c      	bics	r4, r3
 8006966:	42a0      	cmp	r0, r4
 8006968:	d0e1      	beq.n	800692e <_malloc_r+0x6a>
 800696a:	1a21      	subs	r1, r4, r0
 800696c:	0030      	movs	r0, r6
 800696e:	f000 f807 	bl	8006980 <_sbrk_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d1db      	bne.n	800692e <_malloc_r+0x6a>
 8006976:	e7c7      	b.n	8006908 <_malloc_r+0x44>
 8006978:	20000090 	.word	0x20000090
 800697c:	20000094 	.word	0x20000094

08006980 <_sbrk_r>:
 8006980:	2300      	movs	r3, #0
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_sbrk_r+0x20>)
 8006986:	0004      	movs	r4, r0
 8006988:	0008      	movs	r0, r1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	f7fc f96c 	bl	8002c68 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d103      	bne.n	800699c <_sbrk_r+0x1c>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d000      	beq.n	800699c <_sbrk_r+0x1c>
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	20000360 	.word	0x20000360

080069a4 <__malloc_lock>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4802      	ldr	r0, [pc, #8]	; (80069b0 <__malloc_lock+0xc>)
 80069a8:	f000 f80c 	bl	80069c4 <__retarget_lock_acquire_recursive>
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	20000368 	.word	0x20000368

080069b4 <__malloc_unlock>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	4802      	ldr	r0, [pc, #8]	; (80069c0 <__malloc_unlock+0xc>)
 80069b8:	f000 f805 	bl	80069c6 <__retarget_lock_release_recursive>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	20000368 	.word	0x20000368

080069c4 <__retarget_lock_acquire_recursive>:
 80069c4:	4770      	bx	lr

080069c6 <__retarget_lock_release_recursive>:
 80069c6:	4770      	bx	lr

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	46c0      	nop			; (mov r8, r8)
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
