
Channel_Stimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800a6a8  0800a6a8  0001a6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac44  0800ac44  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac4c  0800ac4c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ac54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200001dc  0800ae30  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800ae30  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9f9  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f6  00000000  00000000  0002fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  000321f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00033090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163ae  00000000  00000000  00033e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb38  00000000  00000000  0004a1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a80  00000000  00000000  00059d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  000df7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a68c 	.word	0x0800a68c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800a68c 	.word	0x0800a68c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fea9 	bl	8002194 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fdf3 	bl	8002038 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe9b 	bl	8002194 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe91 	bl	8002194 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe15 	bl	80020b0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe0b 	bl	80020b0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f864 	bl	80005a4 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_f2uiz>:
 8000538:	219e      	movs	r1, #158	; 0x9e
 800053a:	b510      	push	{r4, lr}
 800053c:	05c9      	lsls	r1, r1, #23
 800053e:	1c04      	adds	r4, r0, #0
 8000540:	f002 fe40 	bl	80031c4 <__aeabi_fcmpge>
 8000544:	2800      	cmp	r0, #0
 8000546:	d103      	bne.n	8000550 <__aeabi_f2uiz+0x18>
 8000548:	1c20      	adds	r0, r4, #0
 800054a:	f000 fe81 	bl	8001250 <__aeabi_f2iz>
 800054e:	bd10      	pop	{r4, pc}
 8000550:	219e      	movs	r1, #158	; 0x9e
 8000552:	1c20      	adds	r0, r4, #0
 8000554:	05c9      	lsls	r1, r1, #23
 8000556:	f000 fcb3 	bl	8000ec0 <__aeabi_fsub>
 800055a:	f000 fe79 	bl	8001250 <__aeabi_f2iz>
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	061b      	lsls	r3, r3, #24
 8000562:	469c      	mov	ip, r3
 8000564:	4460      	add	r0, ip
 8000566:	e7f2      	b.n	800054e <__aeabi_f2uiz+0x16>

08000568 <__aeabi_d2uiz>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	2200      	movs	r2, #0
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <__aeabi_d2uiz+0x38>)
 800056e:	0004      	movs	r4, r0
 8000570:	000d      	movs	r5, r1
 8000572:	f7ff ff8f 	bl	8000494 <__aeabi_dcmpge>
 8000576:	2800      	cmp	r0, #0
 8000578:	d104      	bne.n	8000584 <__aeabi_d2uiz+0x1c>
 800057a:	0020      	movs	r0, r4
 800057c:	0029      	movs	r1, r5
 800057e:	f002 fc95 	bl	8002eac <__aeabi_d2iz>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <__aeabi_d2uiz+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	0020      	movs	r0, r4
 800058a:	0029      	movs	r1, r5
 800058c:	f002 f8de 	bl	800274c <__aeabi_dsub>
 8000590:	f002 fc8c 	bl	8002eac <__aeabi_d2iz>
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	469c      	mov	ip, r3
 800059a:	4460      	add	r0, ip
 800059c:	e7f1      	b.n	8000582 <__aeabi_d2uiz+0x1a>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	41e00000 	.word	0x41e00000

080005a4 <__udivmoddi4>:
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	4657      	mov	r7, sl
 80005a8:	464e      	mov	r6, r9
 80005aa:	4645      	mov	r5, r8
 80005ac:	46de      	mov	lr, fp
 80005ae:	b5e0      	push	{r5, r6, r7, lr}
 80005b0:	0004      	movs	r4, r0
 80005b2:	000d      	movs	r5, r1
 80005b4:	4692      	mov	sl, r2
 80005b6:	4699      	mov	r9, r3
 80005b8:	b083      	sub	sp, #12
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d830      	bhi.n	8000620 <__udivmoddi4+0x7c>
 80005be:	d02d      	beq.n	800061c <__udivmoddi4+0x78>
 80005c0:	4649      	mov	r1, r9
 80005c2:	4650      	mov	r0, sl
 80005c4:	f002 fe26 	bl	8003214 <__clzdi2>
 80005c8:	0029      	movs	r1, r5
 80005ca:	0006      	movs	r6, r0
 80005cc:	0020      	movs	r0, r4
 80005ce:	f002 fe21 	bl	8003214 <__clzdi2>
 80005d2:	1a33      	subs	r3, r6, r0
 80005d4:	4698      	mov	r8, r3
 80005d6:	3b20      	subs	r3, #32
 80005d8:	469b      	mov	fp, r3
 80005da:	d433      	bmi.n	8000644 <__udivmoddi4+0xa0>
 80005dc:	465a      	mov	r2, fp
 80005de:	4653      	mov	r3, sl
 80005e0:	4093      	lsls	r3, r2
 80005e2:	4642      	mov	r2, r8
 80005e4:	001f      	movs	r7, r3
 80005e6:	4653      	mov	r3, sl
 80005e8:	4093      	lsls	r3, r2
 80005ea:	001e      	movs	r6, r3
 80005ec:	42af      	cmp	r7, r5
 80005ee:	d83a      	bhi.n	8000666 <__udivmoddi4+0xc2>
 80005f0:	42af      	cmp	r7, r5
 80005f2:	d100      	bne.n	80005f6 <__udivmoddi4+0x52>
 80005f4:	e078      	b.n	80006e8 <__udivmoddi4+0x144>
 80005f6:	465b      	mov	r3, fp
 80005f8:	1ba4      	subs	r4, r4, r6
 80005fa:	41bd      	sbcs	r5, r7
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da00      	bge.n	8000602 <__udivmoddi4+0x5e>
 8000600:	e075      	b.n	80006ee <__udivmoddi4+0x14a>
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	465a      	mov	r2, fp
 800060e:	4093      	lsls	r3, r2
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2301      	movs	r3, #1
 8000614:	4642      	mov	r2, r8
 8000616:	4093      	lsls	r3, r2
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	e028      	b.n	800066e <__udivmoddi4+0xca>
 800061c:	4282      	cmp	r2, r0
 800061e:	d9cf      	bls.n	80005c0 <__udivmoddi4+0x1c>
 8000620:	2200      	movs	r2, #0
 8000622:	2300      	movs	r3, #0
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <__udivmoddi4+0x8e>
 800062e:	601c      	str	r4, [r3, #0]
 8000630:	605d      	str	r5, [r3, #4]
 8000632:	9800      	ldr	r0, [sp, #0]
 8000634:	9901      	ldr	r1, [sp, #4]
 8000636:	b003      	add	sp, #12
 8000638:	bcf0      	pop	{r4, r5, r6, r7}
 800063a:	46bb      	mov	fp, r7
 800063c:	46b2      	mov	sl, r6
 800063e:	46a9      	mov	r9, r5
 8000640:	46a0      	mov	r8, r4
 8000642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	4652      	mov	r2, sl
 800064c:	40da      	lsrs	r2, r3
 800064e:	4641      	mov	r1, r8
 8000650:	0013      	movs	r3, r2
 8000652:	464a      	mov	r2, r9
 8000654:	408a      	lsls	r2, r1
 8000656:	0017      	movs	r7, r2
 8000658:	4642      	mov	r2, r8
 800065a:	431f      	orrs	r7, r3
 800065c:	4653      	mov	r3, sl
 800065e:	4093      	lsls	r3, r2
 8000660:	001e      	movs	r6, r3
 8000662:	42af      	cmp	r7, r5
 8000664:	d9c4      	bls.n	80005f0 <__udivmoddi4+0x4c>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	4643      	mov	r3, r8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0d9      	beq.n	8000628 <__udivmoddi4+0x84>
 8000674:	07fb      	lsls	r3, r7, #31
 8000676:	0872      	lsrs	r2, r6, #1
 8000678:	431a      	orrs	r2, r3
 800067a:	4646      	mov	r6, r8
 800067c:	087b      	lsrs	r3, r7, #1
 800067e:	e00e      	b.n	800069e <__udivmoddi4+0xfa>
 8000680:	42ab      	cmp	r3, r5
 8000682:	d101      	bne.n	8000688 <__udivmoddi4+0xe4>
 8000684:	42a2      	cmp	r2, r4
 8000686:	d80c      	bhi.n	80006a2 <__udivmoddi4+0xfe>
 8000688:	1aa4      	subs	r4, r4, r2
 800068a:	419d      	sbcs	r5, r3
 800068c:	2001      	movs	r0, #1
 800068e:	1924      	adds	r4, r4, r4
 8000690:	416d      	adcs	r5, r5
 8000692:	2100      	movs	r1, #0
 8000694:	3e01      	subs	r6, #1
 8000696:	1824      	adds	r4, r4, r0
 8000698:	414d      	adcs	r5, r1
 800069a:	2e00      	cmp	r6, #0
 800069c:	d006      	beq.n	80006ac <__udivmoddi4+0x108>
 800069e:	42ab      	cmp	r3, r5
 80006a0:	d9ee      	bls.n	8000680 <__udivmoddi4+0xdc>
 80006a2:	3e01      	subs	r6, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2e00      	cmp	r6, #0
 80006aa:	d1f8      	bne.n	800069e <__udivmoddi4+0xfa>
 80006ac:	9800      	ldr	r0, [sp, #0]
 80006ae:	9901      	ldr	r1, [sp, #4]
 80006b0:	465b      	mov	r3, fp
 80006b2:	1900      	adds	r0, r0, r4
 80006b4:	4169      	adcs	r1, r5
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db24      	blt.n	8000704 <__udivmoddi4+0x160>
 80006ba:	002b      	movs	r3, r5
 80006bc:	465a      	mov	r2, fp
 80006be:	4644      	mov	r4, r8
 80006c0:	40d3      	lsrs	r3, r2
 80006c2:	002a      	movs	r2, r5
 80006c4:	40e2      	lsrs	r2, r4
 80006c6:	001c      	movs	r4, r3
 80006c8:	465b      	mov	r3, fp
 80006ca:	0015      	movs	r5, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db2a      	blt.n	8000726 <__udivmoddi4+0x182>
 80006d0:	0026      	movs	r6, r4
 80006d2:	409e      	lsls	r6, r3
 80006d4:	0033      	movs	r3, r6
 80006d6:	0026      	movs	r6, r4
 80006d8:	4647      	mov	r7, r8
 80006da:	40be      	lsls	r6, r7
 80006dc:	0032      	movs	r2, r6
 80006de:	1a80      	subs	r0, r0, r2
 80006e0:	4199      	sbcs	r1, r3
 80006e2:	9000      	str	r0, [sp, #0]
 80006e4:	9101      	str	r1, [sp, #4]
 80006e6:	e79f      	b.n	8000628 <__udivmoddi4+0x84>
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d8bc      	bhi.n	8000666 <__udivmoddi4+0xc2>
 80006ec:	e783      	b.n	80005f6 <__udivmoddi4+0x52>
 80006ee:	4642      	mov	r2, r8
 80006f0:	2320      	movs	r3, #32
 80006f2:	2100      	movs	r1, #0
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	9100      	str	r1, [sp, #0]
 80006fa:	9201      	str	r2, [sp, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	40da      	lsrs	r2, r3
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	e786      	b.n	8000612 <__udivmoddi4+0x6e>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	002a      	movs	r2, r5
 800070c:	4646      	mov	r6, r8
 800070e:	409a      	lsls	r2, r3
 8000710:	0023      	movs	r3, r4
 8000712:	40f3      	lsrs	r3, r6
 8000714:	4644      	mov	r4, r8
 8000716:	4313      	orrs	r3, r2
 8000718:	002a      	movs	r2, r5
 800071a:	40e2      	lsrs	r2, r4
 800071c:	001c      	movs	r4, r3
 800071e:	465b      	mov	r3, fp
 8000720:	0015      	movs	r5, r2
 8000722:	2b00      	cmp	r3, #0
 8000724:	dad4      	bge.n	80006d0 <__udivmoddi4+0x12c>
 8000726:	4642      	mov	r2, r8
 8000728:	002f      	movs	r7, r5
 800072a:	2320      	movs	r3, #32
 800072c:	0026      	movs	r6, r4
 800072e:	4097      	lsls	r7, r2
 8000730:	1a9b      	subs	r3, r3, r2
 8000732:	40de      	lsrs	r6, r3
 8000734:	003b      	movs	r3, r7
 8000736:	4333      	orrs	r3, r6
 8000738:	e7cd      	b.n	80006d6 <__udivmoddi4+0x132>
 800073a:	46c0      	nop			; (mov r8, r8)

0800073c <__aeabi_fadd>:
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	4646      	mov	r6, r8
 8000740:	46d6      	mov	lr, sl
 8000742:	464f      	mov	r7, r9
 8000744:	024d      	lsls	r5, r1, #9
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	b5c0      	push	{r6, r7, lr}
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	0a6e      	lsrs	r6, r5, #9
 800074e:	0047      	lsls	r7, r0, #1
 8000750:	46b0      	mov	r8, r6
 8000752:	0e3f      	lsrs	r7, r7, #24
 8000754:	004e      	lsls	r6, r1, #1
 8000756:	0fc4      	lsrs	r4, r0, #31
 8000758:	00d0      	lsls	r0, r2, #3
 800075a:	4694      	mov	ip, r2
 800075c:	003b      	movs	r3, r7
 800075e:	4682      	mov	sl, r0
 8000760:	0e36      	lsrs	r6, r6, #24
 8000762:	0fc9      	lsrs	r1, r1, #31
 8000764:	09ad      	lsrs	r5, r5, #6
 8000766:	428c      	cmp	r4, r1
 8000768:	d06d      	beq.n	8000846 <__aeabi_fadd+0x10a>
 800076a:	1bb8      	subs	r0, r7, r6
 800076c:	4681      	mov	r9, r0
 800076e:	2800      	cmp	r0, #0
 8000770:	dd4d      	ble.n	800080e <__aeabi_fadd+0xd2>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x3c>
 8000776:	e088      	b.n	800088a <__aeabi_fadd+0x14e>
 8000778:	2fff      	cmp	r7, #255	; 0xff
 800077a:	d05a      	beq.n	8000832 <__aeabi_fadd+0xf6>
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	04db      	lsls	r3, r3, #19
 8000780:	431d      	orrs	r5, r3
 8000782:	464b      	mov	r3, r9
 8000784:	2201      	movs	r2, #1
 8000786:	2b1b      	cmp	r3, #27
 8000788:	dc0a      	bgt.n	80007a0 <__aeabi_fadd+0x64>
 800078a:	002b      	movs	r3, r5
 800078c:	464a      	mov	r2, r9
 800078e:	4649      	mov	r1, r9
 8000790:	40d3      	lsrs	r3, r2
 8000792:	2220      	movs	r2, #32
 8000794:	1a52      	subs	r2, r2, r1
 8000796:	4095      	lsls	r5, r2
 8000798:	002a      	movs	r2, r5
 800079a:	1e55      	subs	r5, r2, #1
 800079c:	41aa      	sbcs	r2, r5
 800079e:	431a      	orrs	r2, r3
 80007a0:	4653      	mov	r3, sl
 80007a2:	1a9a      	subs	r2, r3, r2
 80007a4:	0153      	lsls	r3, r2, #5
 80007a6:	d400      	bmi.n	80007aa <__aeabi_fadd+0x6e>
 80007a8:	e0b9      	b.n	800091e <__aeabi_fadd+0x1e2>
 80007aa:	0192      	lsls	r2, r2, #6
 80007ac:	0996      	lsrs	r6, r2, #6
 80007ae:	0030      	movs	r0, r6
 80007b0:	f002 fd12 	bl	80031d8 <__clzsi2>
 80007b4:	3805      	subs	r0, #5
 80007b6:	4086      	lsls	r6, r0
 80007b8:	4287      	cmp	r7, r0
 80007ba:	dd00      	ble.n	80007be <__aeabi_fadd+0x82>
 80007bc:	e0d4      	b.n	8000968 <__aeabi_fadd+0x22c>
 80007be:	0033      	movs	r3, r6
 80007c0:	1bc7      	subs	r7, r0, r7
 80007c2:	2020      	movs	r0, #32
 80007c4:	3701      	adds	r7, #1
 80007c6:	40fb      	lsrs	r3, r7
 80007c8:	1bc7      	subs	r7, r0, r7
 80007ca:	40be      	lsls	r6, r7
 80007cc:	0032      	movs	r2, r6
 80007ce:	1e56      	subs	r6, r2, #1
 80007d0:	41b2      	sbcs	r2, r6
 80007d2:	2700      	movs	r7, #0
 80007d4:	431a      	orrs	r2, r3
 80007d6:	0753      	lsls	r3, r2, #29
 80007d8:	d004      	beq.n	80007e4 <__aeabi_fadd+0xa8>
 80007da:	230f      	movs	r3, #15
 80007dc:	4013      	ands	r3, r2
 80007de:	2b04      	cmp	r3, #4
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fadd+0xa8>
 80007e2:	3204      	adds	r2, #4
 80007e4:	0153      	lsls	r3, r2, #5
 80007e6:	d400      	bmi.n	80007ea <__aeabi_fadd+0xae>
 80007e8:	e09c      	b.n	8000924 <__aeabi_fadd+0x1e8>
 80007ea:	1c7b      	adds	r3, r7, #1
 80007ec:	2ffe      	cmp	r7, #254	; 0xfe
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0xb6>
 80007f0:	e09a      	b.n	8000928 <__aeabi_fadd+0x1ec>
 80007f2:	0192      	lsls	r2, r2, #6
 80007f4:	0a52      	lsrs	r2, r2, #9
 80007f6:	4694      	mov	ip, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	05d8      	lsls	r0, r3, #23
 80007fc:	4663      	mov	r3, ip
 80007fe:	07e4      	lsls	r4, r4, #31
 8000800:	4318      	orrs	r0, r3
 8000802:	4320      	orrs	r0, r4
 8000804:	bce0      	pop	{r5, r6, r7}
 8000806:	46ba      	mov	sl, r7
 8000808:	46b1      	mov	r9, r6
 800080a:	46a8      	mov	r8, r5
 800080c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080e:	2800      	cmp	r0, #0
 8000810:	d049      	beq.n	80008a6 <__aeabi_fadd+0x16a>
 8000812:	1bf3      	subs	r3, r6, r7
 8000814:	2f00      	cmp	r7, #0
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0xde>
 8000818:	e0b6      	b.n	8000988 <__aeabi_fadd+0x24c>
 800081a:	4652      	mov	r2, sl
 800081c:	2a00      	cmp	r2, #0
 800081e:	d060      	beq.n	80008e2 <__aeabi_fadd+0x1a6>
 8000820:	3b01      	subs	r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fadd+0xec>
 8000826:	e0fc      	b.n	8000a22 <__aeabi_fadd+0x2e6>
 8000828:	2eff      	cmp	r6, #255	; 0xff
 800082a:	d000      	beq.n	800082e <__aeabi_fadd+0xf2>
 800082c:	e0b4      	b.n	8000998 <__aeabi_fadd+0x25c>
 800082e:	000c      	movs	r4, r1
 8000830:	4642      	mov	r2, r8
 8000832:	2a00      	cmp	r2, #0
 8000834:	d078      	beq.n	8000928 <__aeabi_fadd+0x1ec>
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	03c0      	lsls	r0, r0, #15
 800083a:	4310      	orrs	r0, r2
 800083c:	0242      	lsls	r2, r0, #9
 800083e:	0a53      	lsrs	r3, r2, #9
 8000840:	469c      	mov	ip, r3
 8000842:	23ff      	movs	r3, #255	; 0xff
 8000844:	e7d9      	b.n	80007fa <__aeabi_fadd+0xbe>
 8000846:	1bb9      	subs	r1, r7, r6
 8000848:	2900      	cmp	r1, #0
 800084a:	dd71      	ble.n	8000930 <__aeabi_fadd+0x1f4>
 800084c:	2e00      	cmp	r6, #0
 800084e:	d03f      	beq.n	80008d0 <__aeabi_fadd+0x194>
 8000850:	2fff      	cmp	r7, #255	; 0xff
 8000852:	d0ee      	beq.n	8000832 <__aeabi_fadd+0xf6>
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	04db      	lsls	r3, r3, #19
 8000858:	431d      	orrs	r5, r3
 800085a:	2201      	movs	r2, #1
 800085c:	291b      	cmp	r1, #27
 800085e:	dc07      	bgt.n	8000870 <__aeabi_fadd+0x134>
 8000860:	002a      	movs	r2, r5
 8000862:	2320      	movs	r3, #32
 8000864:	40ca      	lsrs	r2, r1
 8000866:	1a59      	subs	r1, r3, r1
 8000868:	408d      	lsls	r5, r1
 800086a:	1e6b      	subs	r3, r5, #1
 800086c:	419d      	sbcs	r5, r3
 800086e:	432a      	orrs	r2, r5
 8000870:	4452      	add	r2, sl
 8000872:	0153      	lsls	r3, r2, #5
 8000874:	d553      	bpl.n	800091e <__aeabi_fadd+0x1e2>
 8000876:	3701      	adds	r7, #1
 8000878:	2fff      	cmp	r7, #255	; 0xff
 800087a:	d055      	beq.n	8000928 <__aeabi_fadd+0x1ec>
 800087c:	2301      	movs	r3, #1
 800087e:	497b      	ldr	r1, [pc, #492]	; (8000a6c <__aeabi_fadd+0x330>)
 8000880:	4013      	ands	r3, r2
 8000882:	0852      	lsrs	r2, r2, #1
 8000884:	400a      	ands	r2, r1
 8000886:	431a      	orrs	r2, r3
 8000888:	e7a5      	b.n	80007d6 <__aeabi_fadd+0x9a>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d02c      	beq.n	80008e8 <__aeabi_fadd+0x1ac>
 800088e:	2301      	movs	r3, #1
 8000890:	425b      	negs	r3, r3
 8000892:	469c      	mov	ip, r3
 8000894:	44e1      	add	r9, ip
 8000896:	464b      	mov	r3, r9
 8000898:	2b00      	cmp	r3, #0
 800089a:	d100      	bne.n	800089e <__aeabi_fadd+0x162>
 800089c:	e0ad      	b.n	80009fa <__aeabi_fadd+0x2be>
 800089e:	2fff      	cmp	r7, #255	; 0xff
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fadd+0x168>
 80008a2:	e76e      	b.n	8000782 <__aeabi_fadd+0x46>
 80008a4:	e7c5      	b.n	8000832 <__aeabi_fadd+0xf6>
 80008a6:	20fe      	movs	r0, #254	; 0xfe
 80008a8:	1c7e      	adds	r6, r7, #1
 80008aa:	4230      	tst	r0, r6
 80008ac:	d160      	bne.n	8000970 <__aeabi_fadd+0x234>
 80008ae:	2f00      	cmp	r7, #0
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fadd+0x178>
 80008b2:	e093      	b.n	80009dc <__aeabi_fadd+0x2a0>
 80008b4:	4652      	mov	r2, sl
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fadd+0x180>
 80008ba:	e0b6      	b.n	8000a2a <__aeabi_fadd+0x2ee>
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d09c      	beq.n	80007fa <__aeabi_fadd+0xbe>
 80008c0:	1b52      	subs	r2, r2, r5
 80008c2:	0150      	lsls	r0, r2, #5
 80008c4:	d400      	bmi.n	80008c8 <__aeabi_fadd+0x18c>
 80008c6:	e0c3      	b.n	8000a50 <__aeabi_fadd+0x314>
 80008c8:	4653      	mov	r3, sl
 80008ca:	000c      	movs	r4, r1
 80008cc:	1aea      	subs	r2, r5, r3
 80008ce:	e782      	b.n	80007d6 <__aeabi_fadd+0x9a>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d009      	beq.n	80008e8 <__aeabi_fadd+0x1ac>
 80008d4:	3901      	subs	r1, #1
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x1a0>
 80008da:	e08b      	b.n	80009f4 <__aeabi_fadd+0x2b8>
 80008dc:	2fff      	cmp	r7, #255	; 0xff
 80008de:	d1bc      	bne.n	800085a <__aeabi_fadd+0x11e>
 80008e0:	e7a7      	b.n	8000832 <__aeabi_fadd+0xf6>
 80008e2:	000c      	movs	r4, r1
 80008e4:	4642      	mov	r2, r8
 80008e6:	0037      	movs	r7, r6
 80008e8:	2fff      	cmp	r7, #255	; 0xff
 80008ea:	d0a2      	beq.n	8000832 <__aeabi_fadd+0xf6>
 80008ec:	0252      	lsls	r2, r2, #9
 80008ee:	0a53      	lsrs	r3, r2, #9
 80008f0:	469c      	mov	ip, r3
 80008f2:	b2fb      	uxtb	r3, r7
 80008f4:	e781      	b.n	80007fa <__aeabi_fadd+0xbe>
 80008f6:	21fe      	movs	r1, #254	; 0xfe
 80008f8:	3701      	adds	r7, #1
 80008fa:	4239      	tst	r1, r7
 80008fc:	d165      	bne.n	80009ca <__aeabi_fadd+0x28e>
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d17e      	bne.n	8000a00 <__aeabi_fadd+0x2c4>
 8000902:	2800      	cmp	r0, #0
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1cc>
 8000906:	e0aa      	b.n	8000a5e <__aeabi_fadd+0x322>
 8000908:	2d00      	cmp	r5, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fadd+0x1d2>
 800090c:	e775      	b.n	80007fa <__aeabi_fadd+0xbe>
 800090e:	002a      	movs	r2, r5
 8000910:	4452      	add	r2, sl
 8000912:	2700      	movs	r7, #0
 8000914:	0153      	lsls	r3, r2, #5
 8000916:	d502      	bpl.n	800091e <__aeabi_fadd+0x1e2>
 8000918:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <__aeabi_fadd+0x334>)
 800091a:	3701      	adds	r7, #1
 800091c:	401a      	ands	r2, r3
 800091e:	0753      	lsls	r3, r2, #29
 8000920:	d000      	beq.n	8000924 <__aeabi_fadd+0x1e8>
 8000922:	e75a      	b.n	80007da <__aeabi_fadd+0x9e>
 8000924:	08d2      	lsrs	r2, r2, #3
 8000926:	e7df      	b.n	80008e8 <__aeabi_fadd+0x1ac>
 8000928:	2200      	movs	r2, #0
 800092a:	23ff      	movs	r3, #255	; 0xff
 800092c:	4694      	mov	ip, r2
 800092e:	e764      	b.n	80007fa <__aeabi_fadd+0xbe>
 8000930:	2900      	cmp	r1, #0
 8000932:	d0e0      	beq.n	80008f6 <__aeabi_fadd+0x1ba>
 8000934:	1bf3      	subs	r3, r6, r7
 8000936:	2f00      	cmp	r7, #0
 8000938:	d03e      	beq.n	80009b8 <__aeabi_fadd+0x27c>
 800093a:	2eff      	cmp	r6, #255	; 0xff
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x204>
 800093e:	e777      	b.n	8000830 <__aeabi_fadd+0xf4>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	0001      	movs	r1, r0
 8000944:	04d2      	lsls	r2, r2, #19
 8000946:	4311      	orrs	r1, r2
 8000948:	468a      	mov	sl, r1
 800094a:	2201      	movs	r2, #1
 800094c:	2b1b      	cmp	r3, #27
 800094e:	dc08      	bgt.n	8000962 <__aeabi_fadd+0x226>
 8000950:	4652      	mov	r2, sl
 8000952:	2120      	movs	r1, #32
 8000954:	4650      	mov	r0, sl
 8000956:	40da      	lsrs	r2, r3
 8000958:	1acb      	subs	r3, r1, r3
 800095a:	4098      	lsls	r0, r3
 800095c:	1e43      	subs	r3, r0, #1
 800095e:	4198      	sbcs	r0, r3
 8000960:	4302      	orrs	r2, r0
 8000962:	0037      	movs	r7, r6
 8000964:	1952      	adds	r2, r2, r5
 8000966:	e784      	b.n	8000872 <__aeabi_fadd+0x136>
 8000968:	4a41      	ldr	r2, [pc, #260]	; (8000a70 <__aeabi_fadd+0x334>)
 800096a:	1a3f      	subs	r7, r7, r0
 800096c:	4032      	ands	r2, r6
 800096e:	e732      	b.n	80007d6 <__aeabi_fadd+0x9a>
 8000970:	4653      	mov	r3, sl
 8000972:	1b5e      	subs	r6, r3, r5
 8000974:	0173      	lsls	r3, r6, #5
 8000976:	d42d      	bmi.n	80009d4 <__aeabi_fadd+0x298>
 8000978:	2e00      	cmp	r6, #0
 800097a:	d000      	beq.n	800097e <__aeabi_fadd+0x242>
 800097c:	e717      	b.n	80007ae <__aeabi_fadd+0x72>
 800097e:	2200      	movs	r2, #0
 8000980:	2400      	movs	r4, #0
 8000982:	2300      	movs	r3, #0
 8000984:	4694      	mov	ip, r2
 8000986:	e738      	b.n	80007fa <__aeabi_fadd+0xbe>
 8000988:	2eff      	cmp	r6, #255	; 0xff
 800098a:	d100      	bne.n	800098e <__aeabi_fadd+0x252>
 800098c:	e74f      	b.n	800082e <__aeabi_fadd+0xf2>
 800098e:	2280      	movs	r2, #128	; 0x80
 8000990:	4650      	mov	r0, sl
 8000992:	04d2      	lsls	r2, r2, #19
 8000994:	4310      	orrs	r0, r2
 8000996:	4682      	mov	sl, r0
 8000998:	2201      	movs	r2, #1
 800099a:	2b1b      	cmp	r3, #27
 800099c:	dc08      	bgt.n	80009b0 <__aeabi_fadd+0x274>
 800099e:	4652      	mov	r2, sl
 80009a0:	2420      	movs	r4, #32
 80009a2:	4650      	mov	r0, sl
 80009a4:	40da      	lsrs	r2, r3
 80009a6:	1ae3      	subs	r3, r4, r3
 80009a8:	4098      	lsls	r0, r3
 80009aa:	1e43      	subs	r3, r0, #1
 80009ac:	4198      	sbcs	r0, r3
 80009ae:	4302      	orrs	r2, r0
 80009b0:	000c      	movs	r4, r1
 80009b2:	0037      	movs	r7, r6
 80009b4:	1aaa      	subs	r2, r5, r2
 80009b6:	e6f5      	b.n	80007a4 <__aeabi_fadd+0x68>
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d093      	beq.n	80008e4 <__aeabi_fadd+0x1a8>
 80009bc:	3b01      	subs	r3, #1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d04f      	beq.n	8000a62 <__aeabi_fadd+0x326>
 80009c2:	2eff      	cmp	r6, #255	; 0xff
 80009c4:	d1c1      	bne.n	800094a <__aeabi_fadd+0x20e>
 80009c6:	4642      	mov	r2, r8
 80009c8:	e733      	b.n	8000832 <__aeabi_fadd+0xf6>
 80009ca:	2fff      	cmp	r7, #255	; 0xff
 80009cc:	d0ac      	beq.n	8000928 <__aeabi_fadd+0x1ec>
 80009ce:	4455      	add	r5, sl
 80009d0:	086a      	lsrs	r2, r5, #1
 80009d2:	e7a4      	b.n	800091e <__aeabi_fadd+0x1e2>
 80009d4:	4653      	mov	r3, sl
 80009d6:	000c      	movs	r4, r1
 80009d8:	1aee      	subs	r6, r5, r3
 80009da:	e6e8      	b.n	80007ae <__aeabi_fadd+0x72>
 80009dc:	4653      	mov	r3, sl
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d128      	bne.n	8000a34 <__aeabi_fadd+0x2f8>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fadd+0x2ac>
 80009e6:	e722      	b.n	800082e <__aeabi_fadd+0xf2>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	469c      	mov	ip, r3
 80009ee:	2400      	movs	r4, #0
 80009f0:	23ff      	movs	r3, #255	; 0xff
 80009f2:	e702      	b.n	80007fa <__aeabi_fadd+0xbe>
 80009f4:	002a      	movs	r2, r5
 80009f6:	4452      	add	r2, sl
 80009f8:	e73b      	b.n	8000872 <__aeabi_fadd+0x136>
 80009fa:	4653      	mov	r3, sl
 80009fc:	1b5a      	subs	r2, r3, r5
 80009fe:	e6d1      	b.n	80007a4 <__aeabi_fadd+0x68>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fadd+0x2ca>
 8000a04:	e714      	b.n	8000830 <__aeabi_fadd+0xf4>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fadd+0x2d0>
 8000a0a:	e712      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	03db      	lsls	r3, r3, #15
 8000a10:	421a      	tst	r2, r3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x2da>
 8000a14:	e70d      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a16:	4641      	mov	r1, r8
 8000a18:	4219      	tst	r1, r3
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fadd+0x2e2>
 8000a1c:	e709      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a1e:	4642      	mov	r2, r8
 8000a20:	e707      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a22:	000c      	movs	r4, r1
 8000a24:	0037      	movs	r7, r6
 8000a26:	1aaa      	subs	r2, r5, r2
 8000a28:	e6bc      	b.n	80007a4 <__aeabi_fadd+0x68>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d013      	beq.n	8000a56 <__aeabi_fadd+0x31a>
 8000a2e:	000c      	movs	r4, r1
 8000a30:	46c4      	mov	ip, r8
 8000a32:	e6e2      	b.n	80007fa <__aeabi_fadd+0xbe>
 8000a34:	2d00      	cmp	r5, #0
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fadd+0x2fe>
 8000a38:	e6fb      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	03db      	lsls	r3, r3, #15
 8000a3e:	421a      	tst	r2, r3
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fadd+0x308>
 8000a42:	e6f6      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a44:	4640      	mov	r0, r8
 8000a46:	4218      	tst	r0, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fadd+0x310>
 8000a4a:	e6f2      	b.n	8000832 <__aeabi_fadd+0xf6>
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	e6ef      	b.n	8000830 <__aeabi_fadd+0xf4>
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fadd+0x31a>
 8000a54:	e763      	b.n	800091e <__aeabi_fadd+0x1e2>
 8000a56:	2200      	movs	r2, #0
 8000a58:	2400      	movs	r4, #0
 8000a5a:	4694      	mov	ip, r2
 8000a5c:	e6cd      	b.n	80007fa <__aeabi_fadd+0xbe>
 8000a5e:	46c4      	mov	ip, r8
 8000a60:	e6cb      	b.n	80007fa <__aeabi_fadd+0xbe>
 8000a62:	002a      	movs	r2, r5
 8000a64:	0037      	movs	r7, r6
 8000a66:	4452      	add	r2, sl
 8000a68:	e703      	b.n	8000872 <__aeabi_fadd+0x136>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	7dffffff 	.word	0x7dffffff
 8000a70:	fbffffff 	.word	0xfbffffff

08000a74 <__aeabi_fdiv>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	464f      	mov	r7, r9
 8000a78:	4646      	mov	r6, r8
 8000a7a:	46d6      	mov	lr, sl
 8000a7c:	0245      	lsls	r5, r0, #9
 8000a7e:	b5c0      	push	{r6, r7, lr}
 8000a80:	0047      	lsls	r7, r0, #1
 8000a82:	1c0c      	adds	r4, r1, #0
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	0e3f      	lsrs	r7, r7, #24
 8000a88:	0fc6      	lsrs	r6, r0, #31
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d066      	beq.n	8000b5c <__aeabi_fdiv+0xe8>
 8000a8e:	2fff      	cmp	r7, #255	; 0xff
 8000a90:	d06c      	beq.n	8000b6c <__aeabi_fdiv+0xf8>
 8000a92:	2300      	movs	r3, #0
 8000a94:	00ea      	lsls	r2, r5, #3
 8000a96:	2580      	movs	r5, #128	; 0x80
 8000a98:	4699      	mov	r9, r3
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	04ed      	lsls	r5, r5, #19
 8000a9e:	4315      	orrs	r5, r2
 8000aa0:	3f7f      	subs	r7, #127	; 0x7f
 8000aa2:	0260      	lsls	r0, r4, #9
 8000aa4:	0061      	lsls	r1, r4, #1
 8000aa6:	0a43      	lsrs	r3, r0, #9
 8000aa8:	4698      	mov	r8, r3
 8000aaa:	0e09      	lsrs	r1, r1, #24
 8000aac:	0fe4      	lsrs	r4, r4, #31
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d048      	beq.n	8000b44 <__aeabi_fdiv+0xd0>
 8000ab2:	29ff      	cmp	r1, #255	; 0xff
 8000ab4:	d010      	beq.n	8000ad8 <__aeabi_fdiv+0x64>
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	00d8      	lsls	r0, r3, #3
 8000aba:	04d2      	lsls	r2, r2, #19
 8000abc:	4302      	orrs	r2, r0
 8000abe:	4690      	mov	r8, r2
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	397f      	subs	r1, #127	; 0x7f
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	0033      	movs	r3, r6
 8000ac8:	1a7f      	subs	r7, r7, r1
 8000aca:	4302      	orrs	r2, r0
 8000acc:	496c      	ldr	r1, [pc, #432]	; (8000c80 <__aeabi_fdiv+0x20c>)
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	588a      	ldr	r2, [r1, r2]
 8000ad2:	4063      	eors	r3, r4
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4697      	mov	pc, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d16d      	bne.n	8000bb8 <__aeabi_fdiv+0x144>
 8000adc:	2002      	movs	r0, #2
 8000ade:	3fff      	subs	r7, #255	; 0xff
 8000ae0:	e033      	b.n	8000b4a <__aeabi_fdiv+0xd6>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	0026      	movs	r6, r4
 8000ae8:	4645      	mov	r5, r8
 8000aea:	4682      	mov	sl, r0
 8000aec:	4653      	mov	r3, sl
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d100      	bne.n	8000af4 <__aeabi_fdiv+0x80>
 8000af2:	e07f      	b.n	8000bf4 <__aeabi_fdiv+0x180>
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d100      	bne.n	8000afa <__aeabi_fdiv+0x86>
 8000af8:	e094      	b.n	8000c24 <__aeabi_fdiv+0x1b0>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d017      	beq.n	8000b2e <__aeabi_fdiv+0xba>
 8000afe:	0038      	movs	r0, r7
 8000b00:	307f      	adds	r0, #127	; 0x7f
 8000b02:	2800      	cmp	r0, #0
 8000b04:	dd5f      	ble.n	8000bc6 <__aeabi_fdiv+0x152>
 8000b06:	076b      	lsls	r3, r5, #29
 8000b08:	d004      	beq.n	8000b14 <__aeabi_fdiv+0xa0>
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	402b      	ands	r3, r5
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d000      	beq.n	8000b14 <__aeabi_fdiv+0xa0>
 8000b12:	3504      	adds	r5, #4
 8000b14:	012b      	lsls	r3, r5, #4
 8000b16:	d503      	bpl.n	8000b20 <__aeabi_fdiv+0xac>
 8000b18:	0038      	movs	r0, r7
 8000b1a:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <__aeabi_fdiv+0x210>)
 8000b1c:	3080      	adds	r0, #128	; 0x80
 8000b1e:	401d      	ands	r5, r3
 8000b20:	28fe      	cmp	r0, #254	; 0xfe
 8000b22:	dc67      	bgt.n	8000bf4 <__aeabi_fdiv+0x180>
 8000b24:	01ad      	lsls	r5, r5, #6
 8000b26:	0a6d      	lsrs	r5, r5, #9
 8000b28:	b2c0      	uxtb	r0, r0
 8000b2a:	e002      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000b2c:	001e      	movs	r6, r3
 8000b2e:	2000      	movs	r0, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	05c0      	lsls	r0, r0, #23
 8000b34:	4328      	orrs	r0, r5
 8000b36:	07f6      	lsls	r6, r6, #31
 8000b38:	4330      	orrs	r0, r6
 8000b3a:	bce0      	pop	{r5, r6, r7}
 8000b3c:	46ba      	mov	sl, r7
 8000b3e:	46b1      	mov	r9, r6
 8000b40:	46a8      	mov	r8, r5
 8000b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d12b      	bne.n	8000ba0 <__aeabi_fdiv+0x12c>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	464a      	mov	r2, r9
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	494e      	ldr	r1, [pc, #312]	; (8000c88 <__aeabi_fdiv+0x214>)
 8000b50:	4302      	orrs	r2, r0
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	588a      	ldr	r2, [r1, r2]
 8000b56:	4063      	eors	r3, r4
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4697      	mov	pc, r2
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d113      	bne.n	8000b88 <__aeabi_fdiv+0x114>
 8000b60:	2304      	movs	r3, #4
 8000b62:	4699      	mov	r9, r3
 8000b64:	3b03      	subs	r3, #3
 8000b66:	2700      	movs	r7, #0
 8000b68:	469a      	mov	sl, r3
 8000b6a:	e79a      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000b6c:	2d00      	cmp	r5, #0
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_fdiv+0x108>
 8000b70:	2308      	movs	r3, #8
 8000b72:	4699      	mov	r9, r3
 8000b74:	3b06      	subs	r3, #6
 8000b76:	27ff      	movs	r7, #255	; 0xff
 8000b78:	469a      	mov	sl, r3
 8000b7a:	e792      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	4699      	mov	r9, r3
 8000b80:	3b09      	subs	r3, #9
 8000b82:	27ff      	movs	r7, #255	; 0xff
 8000b84:	469a      	mov	sl, r3
 8000b86:	e78c      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000b88:	0028      	movs	r0, r5
 8000b8a:	f002 fb25 	bl	80031d8 <__clzsi2>
 8000b8e:	2776      	movs	r7, #118	; 0x76
 8000b90:	1f43      	subs	r3, r0, #5
 8000b92:	409d      	lsls	r5, r3
 8000b94:	2300      	movs	r3, #0
 8000b96:	427f      	negs	r7, r7
 8000b98:	4699      	mov	r9, r3
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	1a3f      	subs	r7, r7, r0
 8000b9e:	e780      	b.n	8000aa2 <__aeabi_fdiv+0x2e>
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f002 fb19 	bl	80031d8 <__clzsi2>
 8000ba6:	4642      	mov	r2, r8
 8000ba8:	1f43      	subs	r3, r0, #5
 8000baa:	2176      	movs	r1, #118	; 0x76
 8000bac:	409a      	lsls	r2, r3
 8000bae:	4249      	negs	r1, r1
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	4690      	mov	r8, r2
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e785      	b.n	8000ac4 <__aeabi_fdiv+0x50>
 8000bb8:	21ff      	movs	r1, #255	; 0xff
 8000bba:	2003      	movs	r0, #3
 8000bbc:	e782      	b.n	8000ac4 <__aeabi_fdiv+0x50>
 8000bbe:	001e      	movs	r6, r3
 8000bc0:	20ff      	movs	r0, #255	; 0xff
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	e7b5      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	1a1b      	subs	r3, r3, r0
 8000bca:	2b1b      	cmp	r3, #27
 8000bcc:	dcaf      	bgt.n	8000b2e <__aeabi_fdiv+0xba>
 8000bce:	379e      	adds	r7, #158	; 0x9e
 8000bd0:	0029      	movs	r1, r5
 8000bd2:	40bd      	lsls	r5, r7
 8000bd4:	40d9      	lsrs	r1, r3
 8000bd6:	1e6a      	subs	r2, r5, #1
 8000bd8:	4195      	sbcs	r5, r2
 8000bda:	430d      	orrs	r5, r1
 8000bdc:	076b      	lsls	r3, r5, #29
 8000bde:	d004      	beq.n	8000bea <__aeabi_fdiv+0x176>
 8000be0:	230f      	movs	r3, #15
 8000be2:	402b      	ands	r3, r5
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d000      	beq.n	8000bea <__aeabi_fdiv+0x176>
 8000be8:	3504      	adds	r5, #4
 8000bea:	016b      	lsls	r3, r5, #5
 8000bec:	d544      	bpl.n	8000c78 <__aeabi_fdiv+0x204>
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	e79e      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000bf4:	20ff      	movs	r0, #255	; 0xff
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	e79b      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000bfa:	2580      	movs	r5, #128	; 0x80
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	20ff      	movs	r0, #255	; 0xff
 8000c00:	03ed      	lsls	r5, r5, #15
 8000c02:	e796      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000c04:	2300      	movs	r3, #0
 8000c06:	4698      	mov	r8, r3
 8000c08:	2080      	movs	r0, #128	; 0x80
 8000c0a:	03c0      	lsls	r0, r0, #15
 8000c0c:	4205      	tst	r5, r0
 8000c0e:	d009      	beq.n	8000c24 <__aeabi_fdiv+0x1b0>
 8000c10:	4643      	mov	r3, r8
 8000c12:	4203      	tst	r3, r0
 8000c14:	d106      	bne.n	8000c24 <__aeabi_fdiv+0x1b0>
 8000c16:	4645      	mov	r5, r8
 8000c18:	4305      	orrs	r5, r0
 8000c1a:	026d      	lsls	r5, r5, #9
 8000c1c:	0026      	movs	r6, r4
 8000c1e:	20ff      	movs	r0, #255	; 0xff
 8000c20:	0a6d      	lsrs	r5, r5, #9
 8000c22:	e786      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000c24:	2080      	movs	r0, #128	; 0x80
 8000c26:	03c0      	lsls	r0, r0, #15
 8000c28:	4305      	orrs	r5, r0
 8000c2a:	026d      	lsls	r5, r5, #9
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	0a6d      	lsrs	r5, r5, #9
 8000c30:	e77f      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000c32:	4641      	mov	r1, r8
 8000c34:	016a      	lsls	r2, r5, #5
 8000c36:	0148      	lsls	r0, r1, #5
 8000c38:	4282      	cmp	r2, r0
 8000c3a:	d219      	bcs.n	8000c70 <__aeabi_fdiv+0x1fc>
 8000c3c:	211b      	movs	r1, #27
 8000c3e:	2500      	movs	r5, #0
 8000c40:	3f01      	subs	r7, #1
 8000c42:	2601      	movs	r6, #1
 8000c44:	0014      	movs	r4, r2
 8000c46:	006d      	lsls	r5, r5, #1
 8000c48:	0052      	lsls	r2, r2, #1
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	db01      	blt.n	8000c52 <__aeabi_fdiv+0x1de>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	d801      	bhi.n	8000c56 <__aeabi_fdiv+0x1e2>
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	4335      	orrs	r5, r6
 8000c56:	3901      	subs	r1, #1
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	d1f3      	bne.n	8000c44 <__aeabi_fdiv+0x1d0>
 8000c5c:	1e50      	subs	r0, r2, #1
 8000c5e:	4182      	sbcs	r2, r0
 8000c60:	0038      	movs	r0, r7
 8000c62:	307f      	adds	r0, #127	; 0x7f
 8000c64:	001e      	movs	r6, r3
 8000c66:	4315      	orrs	r5, r2
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	dd00      	ble.n	8000c6e <__aeabi_fdiv+0x1fa>
 8000c6c:	e74b      	b.n	8000b06 <__aeabi_fdiv+0x92>
 8000c6e:	e7aa      	b.n	8000bc6 <__aeabi_fdiv+0x152>
 8000c70:	211a      	movs	r1, #26
 8000c72:	2501      	movs	r5, #1
 8000c74:	1a12      	subs	r2, r2, r0
 8000c76:	e7e4      	b.n	8000c42 <__aeabi_fdiv+0x1ce>
 8000c78:	01ad      	lsls	r5, r5, #6
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	0a6d      	lsrs	r5, r5, #9
 8000c7e:	e758      	b.n	8000b32 <__aeabi_fdiv+0xbe>
 8000c80:	0800a6b4 	.word	0x0800a6b4
 8000c84:	f7ffffff 	.word	0xf7ffffff
 8000c88:	0800a6f4 	.word	0x0800a6f4

08000c8c <__aeabi_fmul>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	4657      	mov	r7, sl
 8000c90:	464e      	mov	r6, r9
 8000c92:	4645      	mov	r5, r8
 8000c94:	46de      	mov	lr, fp
 8000c96:	0244      	lsls	r4, r0, #9
 8000c98:	b5e0      	push	{r5, r6, r7, lr}
 8000c9a:	0045      	lsls	r5, r0, #1
 8000c9c:	1c0f      	adds	r7, r1, #0
 8000c9e:	0a64      	lsrs	r4, r4, #9
 8000ca0:	0e2d      	lsrs	r5, r5, #24
 8000ca2:	0fc6      	lsrs	r6, r0, #31
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d047      	beq.n	8000d38 <__aeabi_fmul+0xac>
 8000ca8:	2dff      	cmp	r5, #255	; 0xff
 8000caa:	d04d      	beq.n	8000d48 <__aeabi_fmul+0xbc>
 8000cac:	2300      	movs	r3, #0
 8000cae:	2080      	movs	r0, #128	; 0x80
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	00e4      	lsls	r4, r4, #3
 8000cb6:	04c0      	lsls	r0, r0, #19
 8000cb8:	4304      	orrs	r4, r0
 8000cba:	3d7f      	subs	r5, #127	; 0x7f
 8000cbc:	0278      	lsls	r0, r7, #9
 8000cbe:	0a43      	lsrs	r3, r0, #9
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	007a      	lsls	r2, r7, #1
 8000cc4:	0ffb      	lsrs	r3, r7, #31
 8000cc6:	4698      	mov	r8, r3
 8000cc8:	0e12      	lsrs	r2, r2, #24
 8000cca:	464b      	mov	r3, r9
 8000ccc:	d044      	beq.n	8000d58 <__aeabi_fmul+0xcc>
 8000cce:	2aff      	cmp	r2, #255	; 0xff
 8000cd0:	d011      	beq.n	8000cf6 <__aeabi_fmul+0x6a>
 8000cd2:	00d8      	lsls	r0, r3, #3
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	04db      	lsls	r3, r3, #19
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	4699      	mov	r9, r3
 8000cdc:	2000      	movs	r0, #0
 8000cde:	3a7f      	subs	r2, #127	; 0x7f
 8000ce0:	18ad      	adds	r5, r5, r2
 8000ce2:	4647      	mov	r7, r8
 8000ce4:	4653      	mov	r3, sl
 8000ce6:	4077      	eors	r7, r6
 8000ce8:	1c69      	adds	r1, r5, #1
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d83f      	bhi.n	8000d6e <__aeabi_fmul+0xe2>
 8000cee:	4a72      	ldr	r2, [pc, #456]	; (8000eb8 <__aeabi_fmul+0x22c>)
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	58d3      	ldr	r3, [r2, r3]
 8000cf4:	469f      	mov	pc, r3
 8000cf6:	35ff      	adds	r5, #255	; 0xff
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fmul+0x72>
 8000cfc:	e079      	b.n	8000df2 <__aeabi_fmul+0x166>
 8000cfe:	4652      	mov	r2, sl
 8000d00:	2302      	movs	r3, #2
 8000d02:	431a      	orrs	r2, r3
 8000d04:	4692      	mov	sl, r2
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7eb      	b.n	8000ce2 <__aeabi_fmul+0x56>
 8000d0a:	4647      	mov	r7, r8
 8000d0c:	464c      	mov	r4, r9
 8000d0e:	4683      	mov	fp, r0
 8000d10:	465b      	mov	r3, fp
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d028      	beq.n	8000d68 <__aeabi_fmul+0xdc>
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d100      	bne.n	8000d1c <__aeabi_fmul+0x90>
 8000d1a:	e0c6      	b.n	8000eaa <__aeabi_fmul+0x21e>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d14f      	bne.n	8000dc0 <__aeabi_fmul+0x134>
 8000d20:	2000      	movs	r0, #0
 8000d22:	2400      	movs	r4, #0
 8000d24:	05c0      	lsls	r0, r0, #23
 8000d26:	07ff      	lsls	r7, r7, #31
 8000d28:	4320      	orrs	r0, r4
 8000d2a:	4338      	orrs	r0, r7
 8000d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d2e:	46bb      	mov	fp, r7
 8000d30:	46b2      	mov	sl, r6
 8000d32:	46a9      	mov	r9, r5
 8000d34:	46a0      	mov	r8, r4
 8000d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d171      	bne.n	8000e20 <__aeabi_fmul+0x194>
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	469a      	mov	sl, r3
 8000d40:	3b03      	subs	r3, #3
 8000d42:	2500      	movs	r5, #0
 8000d44:	469b      	mov	fp, r3
 8000d46:	e7b9      	b.n	8000cbc <__aeabi_fmul+0x30>
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	d163      	bne.n	8000e14 <__aeabi_fmul+0x188>
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	469a      	mov	sl, r3
 8000d50:	3b06      	subs	r3, #6
 8000d52:	25ff      	movs	r5, #255	; 0xff
 8000d54:	469b      	mov	fp, r3
 8000d56:	e7b1      	b.n	8000cbc <__aeabi_fmul+0x30>
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d150      	bne.n	8000dfe <__aeabi_fmul+0x172>
 8000d5c:	4652      	mov	r2, sl
 8000d5e:	3301      	adds	r3, #1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	4692      	mov	sl, r2
 8000d64:	2001      	movs	r0, #1
 8000d66:	e7bc      	b.n	8000ce2 <__aeabi_fmul+0x56>
 8000d68:	20ff      	movs	r0, #255	; 0xff
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	e7da      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000d6e:	4648      	mov	r0, r9
 8000d70:	0c26      	lsrs	r6, r4, #16
 8000d72:	0424      	lsls	r4, r4, #16
 8000d74:	0c22      	lsrs	r2, r4, #16
 8000d76:	0404      	lsls	r4, r0, #16
 8000d78:	0c24      	lsrs	r4, r4, #16
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	4350      	muls	r0, r2
 8000d82:	4374      	muls	r4, r6
 8000d84:	435a      	muls	r2, r3
 8000d86:	435e      	muls	r6, r3
 8000d88:	1912      	adds	r2, r2, r4
 8000d8a:	0c03      	lsrs	r3, r0, #16
 8000d8c:	189b      	adds	r3, r3, r2
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	d903      	bls.n	8000d9a <__aeabi_fmul+0x10e>
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	0252      	lsls	r2, r2, #9
 8000d96:	4694      	mov	ip, r2
 8000d98:	4466      	add	r6, ip
 8000d9a:	0400      	lsls	r0, r0, #16
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	0c00      	lsrs	r0, r0, #16
 8000da0:	1812      	adds	r2, r2, r0
 8000da2:	0194      	lsls	r4, r2, #6
 8000da4:	1e60      	subs	r0, r4, #1
 8000da6:	4184      	sbcs	r4, r0
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	0e92      	lsrs	r2, r2, #26
 8000dac:	199b      	adds	r3, r3, r6
 8000dae:	4314      	orrs	r4, r2
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	d572      	bpl.n	8000e9e <__aeabi_fmul+0x212>
 8000db8:	2001      	movs	r0, #1
 8000dba:	0863      	lsrs	r3, r4, #1
 8000dbc:	4004      	ands	r4, r0
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	0008      	movs	r0, r1
 8000dc2:	307f      	adds	r0, #127	; 0x7f
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	dd3c      	ble.n	8000e42 <__aeabi_fmul+0x1b6>
 8000dc8:	0763      	lsls	r3, r4, #29
 8000dca:	d004      	beq.n	8000dd6 <__aeabi_fmul+0x14a>
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fmul+0x14a>
 8000dd4:	3404      	adds	r4, #4
 8000dd6:	0123      	lsls	r3, r4, #4
 8000dd8:	d503      	bpl.n	8000de2 <__aeabi_fmul+0x156>
 8000dda:	3180      	adds	r1, #128	; 0x80
 8000ddc:	0008      	movs	r0, r1
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <__aeabi_fmul+0x230>)
 8000de0:	401c      	ands	r4, r3
 8000de2:	28fe      	cmp	r0, #254	; 0xfe
 8000de4:	dcc0      	bgt.n	8000d68 <__aeabi_fmul+0xdc>
 8000de6:	01a4      	lsls	r4, r4, #6
 8000de8:	0a64      	lsrs	r4, r4, #9
 8000dea:	b2c0      	uxtb	r0, r0
 8000dec:	e79a      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000dee:	0037      	movs	r7, r6
 8000df0:	e78e      	b.n	8000d10 <__aeabi_fmul+0x84>
 8000df2:	4652      	mov	r2, sl
 8000df4:	2303      	movs	r3, #3
 8000df6:	431a      	orrs	r2, r3
 8000df8:	4692      	mov	sl, r2
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	e771      	b.n	8000ce2 <__aeabi_fmul+0x56>
 8000dfe:	4648      	mov	r0, r9
 8000e00:	f002 f9ea 	bl	80031d8 <__clzsi2>
 8000e04:	464a      	mov	r2, r9
 8000e06:	1f43      	subs	r3, r0, #5
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	1a2d      	subs	r5, r5, r0
 8000e0c:	4691      	mov	r9, r2
 8000e0e:	2000      	movs	r0, #0
 8000e10:	3d76      	subs	r5, #118	; 0x76
 8000e12:	e766      	b.n	8000ce2 <__aeabi_fmul+0x56>
 8000e14:	230c      	movs	r3, #12
 8000e16:	469a      	mov	sl, r3
 8000e18:	3b09      	subs	r3, #9
 8000e1a:	25ff      	movs	r5, #255	; 0xff
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	e74d      	b.n	8000cbc <__aeabi_fmul+0x30>
 8000e20:	0020      	movs	r0, r4
 8000e22:	f002 f9d9 	bl	80031d8 <__clzsi2>
 8000e26:	2576      	movs	r5, #118	; 0x76
 8000e28:	1f43      	subs	r3, r0, #5
 8000e2a:	409c      	lsls	r4, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	426d      	negs	r5, r5
 8000e30:	469a      	mov	sl, r3
 8000e32:	469b      	mov	fp, r3
 8000e34:	1a2d      	subs	r5, r5, r0
 8000e36:	e741      	b.n	8000cbc <__aeabi_fmul+0x30>
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	20ff      	movs	r0, #255	; 0xff
 8000e3e:	03e4      	lsls	r4, r4, #15
 8000e40:	e770      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000e42:	2301      	movs	r3, #1
 8000e44:	1a1b      	subs	r3, r3, r0
 8000e46:	2b1b      	cmp	r3, #27
 8000e48:	dd00      	ble.n	8000e4c <__aeabi_fmul+0x1c0>
 8000e4a:	e769      	b.n	8000d20 <__aeabi_fmul+0x94>
 8000e4c:	319e      	adds	r1, #158	; 0x9e
 8000e4e:	0020      	movs	r0, r4
 8000e50:	408c      	lsls	r4, r1
 8000e52:	40d8      	lsrs	r0, r3
 8000e54:	1e63      	subs	r3, r4, #1
 8000e56:	419c      	sbcs	r4, r3
 8000e58:	4304      	orrs	r4, r0
 8000e5a:	0763      	lsls	r3, r4, #29
 8000e5c:	d004      	beq.n	8000e68 <__aeabi_fmul+0x1dc>
 8000e5e:	230f      	movs	r3, #15
 8000e60:	4023      	ands	r3, r4
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fmul+0x1dc>
 8000e66:	3404      	adds	r4, #4
 8000e68:	0163      	lsls	r3, r4, #5
 8000e6a:	d51a      	bpl.n	8000ea2 <__aeabi_fmul+0x216>
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	2400      	movs	r4, #0
 8000e70:	e758      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000e72:	2080      	movs	r0, #128	; 0x80
 8000e74:	03c0      	lsls	r0, r0, #15
 8000e76:	4204      	tst	r4, r0
 8000e78:	d009      	beq.n	8000e8e <__aeabi_fmul+0x202>
 8000e7a:	464b      	mov	r3, r9
 8000e7c:	4203      	tst	r3, r0
 8000e7e:	d106      	bne.n	8000e8e <__aeabi_fmul+0x202>
 8000e80:	464c      	mov	r4, r9
 8000e82:	4304      	orrs	r4, r0
 8000e84:	0264      	lsls	r4, r4, #9
 8000e86:	4647      	mov	r7, r8
 8000e88:	20ff      	movs	r0, #255	; 0xff
 8000e8a:	0a64      	lsrs	r4, r4, #9
 8000e8c:	e74a      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000e8e:	2080      	movs	r0, #128	; 0x80
 8000e90:	03c0      	lsls	r0, r0, #15
 8000e92:	4304      	orrs	r4, r0
 8000e94:	0264      	lsls	r4, r4, #9
 8000e96:	0037      	movs	r7, r6
 8000e98:	20ff      	movs	r0, #255	; 0xff
 8000e9a:	0a64      	lsrs	r4, r4, #9
 8000e9c:	e742      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000e9e:	0029      	movs	r1, r5
 8000ea0:	e78e      	b.n	8000dc0 <__aeabi_fmul+0x134>
 8000ea2:	01a4      	lsls	r4, r4, #6
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	0a64      	lsrs	r4, r4, #9
 8000ea8:	e73c      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000eaa:	2080      	movs	r0, #128	; 0x80
 8000eac:	03c0      	lsls	r0, r0, #15
 8000eae:	4304      	orrs	r4, r0
 8000eb0:	0264      	lsls	r4, r4, #9
 8000eb2:	20ff      	movs	r0, #255	; 0xff
 8000eb4:	0a64      	lsrs	r4, r4, #9
 8000eb6:	e735      	b.n	8000d24 <__aeabi_fmul+0x98>
 8000eb8:	0800a734 	.word	0x0800a734
 8000ebc:	f7ffffff 	.word	0xf7ffffff

08000ec0 <__aeabi_fsub>:
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	4646      	mov	r6, r8
 8000ec4:	46d6      	mov	lr, sl
 8000ec6:	464f      	mov	r7, r9
 8000ec8:	0243      	lsls	r3, r0, #9
 8000eca:	0a5b      	lsrs	r3, r3, #9
 8000ecc:	00da      	lsls	r2, r3, #3
 8000ece:	4694      	mov	ip, r2
 8000ed0:	024a      	lsls	r2, r1, #9
 8000ed2:	b5c0      	push	{r6, r7, lr}
 8000ed4:	0044      	lsls	r4, r0, #1
 8000ed6:	0a56      	lsrs	r6, r2, #9
 8000ed8:	1c05      	adds	r5, r0, #0
 8000eda:	46b0      	mov	r8, r6
 8000edc:	0e24      	lsrs	r4, r4, #24
 8000ede:	004e      	lsls	r6, r1, #1
 8000ee0:	0992      	lsrs	r2, r2, #6
 8000ee2:	001f      	movs	r7, r3
 8000ee4:	0020      	movs	r0, r4
 8000ee6:	4692      	mov	sl, r2
 8000ee8:	0fed      	lsrs	r5, r5, #31
 8000eea:	0e36      	lsrs	r6, r6, #24
 8000eec:	0fc9      	lsrs	r1, r1, #31
 8000eee:	2eff      	cmp	r6, #255	; 0xff
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x34>
 8000ef2:	e07f      	b.n	8000ff4 <__aeabi_fsub+0x134>
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4051      	eors	r1, r2
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d051      	beq.n	8000fa0 <__aeabi_fsub+0xe0>
 8000efc:	1ba2      	subs	r2, r4, r6
 8000efe:	4691      	mov	r9, r2
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_fsub+0x46>
 8000f04:	e07e      	b.n	8001004 <__aeabi_fsub+0x144>
 8000f06:	2e00      	cmp	r6, #0
 8000f08:	d100      	bne.n	8000f0c <__aeabi_fsub+0x4c>
 8000f0a:	e099      	b.n	8001040 <__aeabi_fsub+0x180>
 8000f0c:	2cff      	cmp	r4, #255	; 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x52>
 8000f10:	e08c      	b.n	800102c <__aeabi_fsub+0x16c>
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	4652      	mov	r2, sl
 8000f16:	04db      	lsls	r3, r3, #19
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	464a      	mov	r2, r9
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2a1b      	cmp	r2, #27
 8000f22:	dc08      	bgt.n	8000f36 <__aeabi_fsub+0x76>
 8000f24:	4653      	mov	r3, sl
 8000f26:	2120      	movs	r1, #32
 8000f28:	40d3      	lsrs	r3, r2
 8000f2a:	1a89      	subs	r1, r1, r2
 8000f2c:	4652      	mov	r2, sl
 8000f2e:	408a      	lsls	r2, r1
 8000f30:	1e51      	subs	r1, r2, #1
 8000f32:	418a      	sbcs	r2, r1
 8000f34:	4313      	orrs	r3, r2
 8000f36:	4662      	mov	r2, ip
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	015a      	lsls	r2, r3, #5
 8000f3c:	d400      	bmi.n	8000f40 <__aeabi_fsub+0x80>
 8000f3e:	e0f3      	b.n	8001128 <__aeabi_fsub+0x268>
 8000f40:	019b      	lsls	r3, r3, #6
 8000f42:	099e      	lsrs	r6, r3, #6
 8000f44:	0030      	movs	r0, r6
 8000f46:	f002 f947 	bl	80031d8 <__clzsi2>
 8000f4a:	3805      	subs	r0, #5
 8000f4c:	4086      	lsls	r6, r0
 8000f4e:	4284      	cmp	r4, r0
 8000f50:	dd00      	ble.n	8000f54 <__aeabi_fsub+0x94>
 8000f52:	e0f7      	b.n	8001144 <__aeabi_fsub+0x284>
 8000f54:	0032      	movs	r2, r6
 8000f56:	1b04      	subs	r4, r0, r4
 8000f58:	2020      	movs	r0, #32
 8000f5a:	3401      	adds	r4, #1
 8000f5c:	40e2      	lsrs	r2, r4
 8000f5e:	1b04      	subs	r4, r0, r4
 8000f60:	40a6      	lsls	r6, r4
 8000f62:	0033      	movs	r3, r6
 8000f64:	1e5e      	subs	r6, r3, #1
 8000f66:	41b3      	sbcs	r3, r6
 8000f68:	2400      	movs	r4, #0
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	075a      	lsls	r2, r3, #29
 8000f6e:	d004      	beq.n	8000f7a <__aeabi_fsub+0xba>
 8000f70:	220f      	movs	r2, #15
 8000f72:	401a      	ands	r2, r3
 8000f74:	2a04      	cmp	r2, #4
 8000f76:	d000      	beq.n	8000f7a <__aeabi_fsub+0xba>
 8000f78:	3304      	adds	r3, #4
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d400      	bmi.n	8000f80 <__aeabi_fsub+0xc0>
 8000f7e:	e0d6      	b.n	800112e <__aeabi_fsub+0x26e>
 8000f80:	1c62      	adds	r2, r4, #1
 8000f82:	2cfe      	cmp	r4, #254	; 0xfe
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0xc8>
 8000f86:	e0da      	b.n	800113e <__aeabi_fsub+0x27e>
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	0a5f      	lsrs	r7, r3, #9
 8000f8c:	b2d0      	uxtb	r0, r2
 8000f8e:	05c0      	lsls	r0, r0, #23
 8000f90:	4338      	orrs	r0, r7
 8000f92:	07ed      	lsls	r5, r5, #31
 8000f94:	4328      	orrs	r0, r5
 8000f96:	bce0      	pop	{r5, r6, r7}
 8000f98:	46ba      	mov	sl, r7
 8000f9a:	46b1      	mov	r9, r6
 8000f9c:	46a8      	mov	r8, r5
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa0:	1ba2      	subs	r2, r4, r6
 8000fa2:	4691      	mov	r9, r2
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	dd63      	ble.n	8001070 <__aeabi_fsub+0x1b0>
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fsub+0xee>
 8000fac:	e099      	b.n	80010e2 <__aeabi_fsub+0x222>
 8000fae:	2cff      	cmp	r4, #255	; 0xff
 8000fb0:	d03c      	beq.n	800102c <__aeabi_fsub+0x16c>
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	4652      	mov	r2, sl
 8000fb6:	04db      	lsls	r3, r3, #19
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	4692      	mov	sl, r2
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	2a1b      	cmp	r2, #27
 8000fc2:	dc08      	bgt.n	8000fd6 <__aeabi_fsub+0x116>
 8000fc4:	4653      	mov	r3, sl
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	40d3      	lsrs	r3, r2
 8000fca:	1a89      	subs	r1, r1, r2
 8000fcc:	4652      	mov	r2, sl
 8000fce:	408a      	lsls	r2, r1
 8000fd0:	1e51      	subs	r1, r2, #1
 8000fd2:	418a      	sbcs	r2, r1
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	d400      	bmi.n	8000fde <__aeabi_fsub+0x11e>
 8000fdc:	e0a4      	b.n	8001128 <__aeabi_fsub+0x268>
 8000fde:	3401      	adds	r4, #1
 8000fe0:	2cff      	cmp	r4, #255	; 0xff
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x126>
 8000fe4:	e0ab      	b.n	800113e <__aeabi_fsub+0x27e>
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4997      	ldr	r1, [pc, #604]	; (8001248 <__aeabi_fsub+0x388>)
 8000fea:	401a      	ands	r2, r3
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	400b      	ands	r3, r1
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	e7bb      	b.n	8000f6c <__aeabi_fsub+0xac>
 8000ff4:	2a00      	cmp	r2, #0
 8000ff6:	d032      	beq.n	800105e <__aeabi_fsub+0x19e>
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	d035      	beq.n	8001068 <__aeabi_fsub+0x1a8>
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	4252      	negs	r2, r2
 8001000:	4691      	mov	r9, r2
 8001002:	44a1      	add	r9, r4
 8001004:	464a      	mov	r2, r9
 8001006:	2a00      	cmp	r2, #0
 8001008:	d051      	beq.n	80010ae <__aeabi_fsub+0x1ee>
 800100a:	1b30      	subs	r0, r6, r4
 800100c:	2c00      	cmp	r4, #0
 800100e:	d000      	beq.n	8001012 <__aeabi_fsub+0x152>
 8001010:	e09c      	b.n	800114c <__aeabi_fsub+0x28c>
 8001012:	4663      	mov	r3, ip
 8001014:	2b00      	cmp	r3, #0
 8001016:	d100      	bne.n	800101a <__aeabi_fsub+0x15a>
 8001018:	e0df      	b.n	80011da <__aeabi_fsub+0x31a>
 800101a:	3801      	subs	r0, #1
 800101c:	2800      	cmp	r0, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x162>
 8001020:	e0f7      	b.n	8001212 <__aeabi_fsub+0x352>
 8001022:	2eff      	cmp	r6, #255	; 0xff
 8001024:	d000      	beq.n	8001028 <__aeabi_fsub+0x168>
 8001026:	e099      	b.n	800115c <__aeabi_fsub+0x29c>
 8001028:	000d      	movs	r5, r1
 800102a:	4643      	mov	r3, r8
 800102c:	2b00      	cmp	r3, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x172>
 8001030:	e085      	b.n	800113e <__aeabi_fsub+0x27e>
 8001032:	2780      	movs	r7, #128	; 0x80
 8001034:	03ff      	lsls	r7, r7, #15
 8001036:	431f      	orrs	r7, r3
 8001038:	027f      	lsls	r7, r7, #9
 800103a:	20ff      	movs	r0, #255	; 0xff
 800103c:	0a7f      	lsrs	r7, r7, #9
 800103e:	e7a6      	b.n	8000f8e <__aeabi_fsub+0xce>
 8001040:	4652      	mov	r2, sl
 8001042:	2a00      	cmp	r2, #0
 8001044:	d074      	beq.n	8001130 <__aeabi_fsub+0x270>
 8001046:	2201      	movs	r2, #1
 8001048:	4252      	negs	r2, r2
 800104a:	4690      	mov	r8, r2
 800104c:	44c1      	add	r9, r8
 800104e:	464a      	mov	r2, r9
 8001050:	2a00      	cmp	r2, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x196>
 8001054:	e0c8      	b.n	80011e8 <__aeabi_fsub+0x328>
 8001056:	2cff      	cmp	r4, #255	; 0xff
 8001058:	d000      	beq.n	800105c <__aeabi_fsub+0x19c>
 800105a:	e75f      	b.n	8000f1c <__aeabi_fsub+0x5c>
 800105c:	e7e6      	b.n	800102c <__aeabi_fsub+0x16c>
 800105e:	2201      	movs	r2, #1
 8001060:	4051      	eors	r1, r2
 8001062:	42a9      	cmp	r1, r5
 8001064:	d000      	beq.n	8001068 <__aeabi_fsub+0x1a8>
 8001066:	e749      	b.n	8000efc <__aeabi_fsub+0x3c>
 8001068:	22ff      	movs	r2, #255	; 0xff
 800106a:	4252      	negs	r2, r2
 800106c:	4691      	mov	r9, r2
 800106e:	44a1      	add	r9, r4
 8001070:	464a      	mov	r2, r9
 8001072:	2a00      	cmp	r2, #0
 8001074:	d043      	beq.n	80010fe <__aeabi_fsub+0x23e>
 8001076:	1b31      	subs	r1, r6, r4
 8001078:	2c00      	cmp	r4, #0
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x1be>
 800107c:	e08c      	b.n	8001198 <__aeabi_fsub+0x2d8>
 800107e:	2eff      	cmp	r6, #255	; 0xff
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x1c4>
 8001082:	e092      	b.n	80011aa <__aeabi_fsub+0x2ea>
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	4662      	mov	r2, ip
 8001088:	04db      	lsls	r3, r3, #19
 800108a:	431a      	orrs	r2, r3
 800108c:	4694      	mov	ip, r2
 800108e:	2301      	movs	r3, #1
 8001090:	291b      	cmp	r1, #27
 8001092:	dc09      	bgt.n	80010a8 <__aeabi_fsub+0x1e8>
 8001094:	2020      	movs	r0, #32
 8001096:	4663      	mov	r3, ip
 8001098:	4662      	mov	r2, ip
 800109a:	40cb      	lsrs	r3, r1
 800109c:	1a41      	subs	r1, r0, r1
 800109e:	408a      	lsls	r2, r1
 80010a0:	0011      	movs	r1, r2
 80010a2:	1e48      	subs	r0, r1, #1
 80010a4:	4181      	sbcs	r1, r0
 80010a6:	430b      	orrs	r3, r1
 80010a8:	0034      	movs	r4, r6
 80010aa:	4453      	add	r3, sl
 80010ac:	e794      	b.n	8000fd8 <__aeabi_fsub+0x118>
 80010ae:	22fe      	movs	r2, #254	; 0xfe
 80010b0:	1c66      	adds	r6, r4, #1
 80010b2:	4232      	tst	r2, r6
 80010b4:	d164      	bne.n	8001180 <__aeabi_fsub+0x2c0>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d000      	beq.n	80010bc <__aeabi_fsub+0x1fc>
 80010ba:	e082      	b.n	80011c2 <__aeabi_fsub+0x302>
 80010bc:	4663      	mov	r3, ip
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <__aeabi_fsub+0x204>
 80010c2:	e0ab      	b.n	800121c <__aeabi_fsub+0x35c>
 80010c4:	4653      	mov	r3, sl
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d100      	bne.n	80010cc <__aeabi_fsub+0x20c>
 80010ca:	e760      	b.n	8000f8e <__aeabi_fsub+0xce>
 80010cc:	4663      	mov	r3, ip
 80010ce:	4652      	mov	r2, sl
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	d400      	bmi.n	80010d8 <__aeabi_fsub+0x218>
 80010d6:	e0aa      	b.n	800122e <__aeabi_fsub+0x36e>
 80010d8:	4663      	mov	r3, ip
 80010da:	4652      	mov	r2, sl
 80010dc:	000d      	movs	r5, r1
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	e744      	b.n	8000f6c <__aeabi_fsub+0xac>
 80010e2:	4652      	mov	r2, sl
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d023      	beq.n	8001130 <__aeabi_fsub+0x270>
 80010e8:	2201      	movs	r2, #1
 80010ea:	4252      	negs	r2, r2
 80010ec:	4690      	mov	r8, r2
 80010ee:	44c1      	add	r9, r8
 80010f0:	464a      	mov	r2, r9
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d075      	beq.n	80011e2 <__aeabi_fsub+0x322>
 80010f6:	2cff      	cmp	r4, #255	; 0xff
 80010f8:	d000      	beq.n	80010fc <__aeabi_fsub+0x23c>
 80010fa:	e75f      	b.n	8000fbc <__aeabi_fsub+0xfc>
 80010fc:	e796      	b.n	800102c <__aeabi_fsub+0x16c>
 80010fe:	26fe      	movs	r6, #254	; 0xfe
 8001100:	3401      	adds	r4, #1
 8001102:	4226      	tst	r6, r4
 8001104:	d153      	bne.n	80011ae <__aeabi_fsub+0x2ee>
 8001106:	2800      	cmp	r0, #0
 8001108:	d172      	bne.n	80011f0 <__aeabi_fsub+0x330>
 800110a:	4663      	mov	r3, ip
 800110c:	2b00      	cmp	r3, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x252>
 8001110:	e093      	b.n	800123a <__aeabi_fsub+0x37a>
 8001112:	4653      	mov	r3, sl
 8001114:	2b00      	cmp	r3, #0
 8001116:	d100      	bne.n	800111a <__aeabi_fsub+0x25a>
 8001118:	e739      	b.n	8000f8e <__aeabi_fsub+0xce>
 800111a:	4463      	add	r3, ip
 800111c:	2400      	movs	r4, #0
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	d502      	bpl.n	8001128 <__aeabi_fsub+0x268>
 8001122:	4a4a      	ldr	r2, [pc, #296]	; (800124c <__aeabi_fsub+0x38c>)
 8001124:	3401      	adds	r4, #1
 8001126:	4013      	ands	r3, r2
 8001128:	075a      	lsls	r2, r3, #29
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0x26e>
 800112c:	e720      	b.n	8000f70 <__aeabi_fsub+0xb0>
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	2cff      	cmp	r4, #255	; 0xff
 8001132:	d100      	bne.n	8001136 <__aeabi_fsub+0x276>
 8001134:	e77a      	b.n	800102c <__aeabi_fsub+0x16c>
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	0a5f      	lsrs	r7, r3, #9
 800113a:	b2e0      	uxtb	r0, r4
 800113c:	e727      	b.n	8000f8e <__aeabi_fsub+0xce>
 800113e:	20ff      	movs	r0, #255	; 0xff
 8001140:	2700      	movs	r7, #0
 8001142:	e724      	b.n	8000f8e <__aeabi_fsub+0xce>
 8001144:	4b41      	ldr	r3, [pc, #260]	; (800124c <__aeabi_fsub+0x38c>)
 8001146:	1a24      	subs	r4, r4, r0
 8001148:	4033      	ands	r3, r6
 800114a:	e70f      	b.n	8000f6c <__aeabi_fsub+0xac>
 800114c:	2eff      	cmp	r6, #255	; 0xff
 800114e:	d100      	bne.n	8001152 <__aeabi_fsub+0x292>
 8001150:	e76a      	b.n	8001028 <__aeabi_fsub+0x168>
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	4662      	mov	r2, ip
 8001156:	04db      	lsls	r3, r3, #19
 8001158:	431a      	orrs	r2, r3
 800115a:	4694      	mov	ip, r2
 800115c:	2301      	movs	r3, #1
 800115e:	281b      	cmp	r0, #27
 8001160:	dc09      	bgt.n	8001176 <__aeabi_fsub+0x2b6>
 8001162:	2420      	movs	r4, #32
 8001164:	4663      	mov	r3, ip
 8001166:	4662      	mov	r2, ip
 8001168:	40c3      	lsrs	r3, r0
 800116a:	1a20      	subs	r0, r4, r0
 800116c:	4082      	lsls	r2, r0
 800116e:	0010      	movs	r0, r2
 8001170:	1e44      	subs	r4, r0, #1
 8001172:	41a0      	sbcs	r0, r4
 8001174:	4303      	orrs	r3, r0
 8001176:	4652      	mov	r2, sl
 8001178:	000d      	movs	r5, r1
 800117a:	0034      	movs	r4, r6
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	e6dc      	b.n	8000f3a <__aeabi_fsub+0x7a>
 8001180:	4663      	mov	r3, ip
 8001182:	4652      	mov	r2, sl
 8001184:	1a9e      	subs	r6, r3, r2
 8001186:	0173      	lsls	r3, r6, #5
 8001188:	d417      	bmi.n	80011ba <__aeabi_fsub+0x2fa>
 800118a:	2e00      	cmp	r6, #0
 800118c:	d000      	beq.n	8001190 <__aeabi_fsub+0x2d0>
 800118e:	e6d9      	b.n	8000f44 <__aeabi_fsub+0x84>
 8001190:	2500      	movs	r5, #0
 8001192:	2000      	movs	r0, #0
 8001194:	2700      	movs	r7, #0
 8001196:	e6fa      	b.n	8000f8e <__aeabi_fsub+0xce>
 8001198:	4663      	mov	r3, ip
 800119a:	2b00      	cmp	r3, #0
 800119c:	d044      	beq.n	8001228 <__aeabi_fsub+0x368>
 800119e:	3901      	subs	r1, #1
 80011a0:	2900      	cmp	r1, #0
 80011a2:	d04c      	beq.n	800123e <__aeabi_fsub+0x37e>
 80011a4:	2eff      	cmp	r6, #255	; 0xff
 80011a6:	d000      	beq.n	80011aa <__aeabi_fsub+0x2ea>
 80011a8:	e771      	b.n	800108e <__aeabi_fsub+0x1ce>
 80011aa:	4643      	mov	r3, r8
 80011ac:	e73e      	b.n	800102c <__aeabi_fsub+0x16c>
 80011ae:	2cff      	cmp	r4, #255	; 0xff
 80011b0:	d0c5      	beq.n	800113e <__aeabi_fsub+0x27e>
 80011b2:	4652      	mov	r2, sl
 80011b4:	4462      	add	r2, ip
 80011b6:	0853      	lsrs	r3, r2, #1
 80011b8:	e7b6      	b.n	8001128 <__aeabi_fsub+0x268>
 80011ba:	4663      	mov	r3, ip
 80011bc:	000d      	movs	r5, r1
 80011be:	1ad6      	subs	r6, r2, r3
 80011c0:	e6c0      	b.n	8000f44 <__aeabi_fsub+0x84>
 80011c2:	4662      	mov	r2, ip
 80011c4:	2a00      	cmp	r2, #0
 80011c6:	d116      	bne.n	80011f6 <__aeabi_fsub+0x336>
 80011c8:	4653      	mov	r3, sl
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d000      	beq.n	80011d0 <__aeabi_fsub+0x310>
 80011ce:	e72b      	b.n	8001028 <__aeabi_fsub+0x168>
 80011d0:	2780      	movs	r7, #128	; 0x80
 80011d2:	2500      	movs	r5, #0
 80011d4:	20ff      	movs	r0, #255	; 0xff
 80011d6:	03ff      	lsls	r7, r7, #15
 80011d8:	e6d9      	b.n	8000f8e <__aeabi_fsub+0xce>
 80011da:	000d      	movs	r5, r1
 80011dc:	4643      	mov	r3, r8
 80011de:	0034      	movs	r4, r6
 80011e0:	e7a6      	b.n	8001130 <__aeabi_fsub+0x270>
 80011e2:	4653      	mov	r3, sl
 80011e4:	4463      	add	r3, ip
 80011e6:	e6f7      	b.n	8000fd8 <__aeabi_fsub+0x118>
 80011e8:	4663      	mov	r3, ip
 80011ea:	4652      	mov	r2, sl
 80011ec:	1a9b      	subs	r3, r3, r2
 80011ee:	e6a4      	b.n	8000f3a <__aeabi_fsub+0x7a>
 80011f0:	4662      	mov	r2, ip
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d0d9      	beq.n	80011aa <__aeabi_fsub+0x2ea>
 80011f6:	4652      	mov	r2, sl
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	d100      	bne.n	80011fe <__aeabi_fsub+0x33e>
 80011fc:	e716      	b.n	800102c <__aeabi_fsub+0x16c>
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	03d2      	lsls	r2, r2, #15
 8001202:	4213      	tst	r3, r2
 8001204:	d100      	bne.n	8001208 <__aeabi_fsub+0x348>
 8001206:	e711      	b.n	800102c <__aeabi_fsub+0x16c>
 8001208:	4640      	mov	r0, r8
 800120a:	4210      	tst	r0, r2
 800120c:	d000      	beq.n	8001210 <__aeabi_fsub+0x350>
 800120e:	e70d      	b.n	800102c <__aeabi_fsub+0x16c>
 8001210:	e70a      	b.n	8001028 <__aeabi_fsub+0x168>
 8001212:	4652      	mov	r2, sl
 8001214:	000d      	movs	r5, r1
 8001216:	0034      	movs	r4, r6
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	e68e      	b.n	8000f3a <__aeabi_fsub+0x7a>
 800121c:	4653      	mov	r3, sl
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <__aeabi_fsub+0x374>
 8001222:	000d      	movs	r5, r1
 8001224:	4647      	mov	r7, r8
 8001226:	e6b2      	b.n	8000f8e <__aeabi_fsub+0xce>
 8001228:	4643      	mov	r3, r8
 800122a:	0034      	movs	r4, r6
 800122c:	e780      	b.n	8001130 <__aeabi_fsub+0x270>
 800122e:	2b00      	cmp	r3, #0
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0x374>
 8001232:	e779      	b.n	8001128 <__aeabi_fsub+0x268>
 8001234:	2500      	movs	r5, #0
 8001236:	2700      	movs	r7, #0
 8001238:	e6a9      	b.n	8000f8e <__aeabi_fsub+0xce>
 800123a:	4647      	mov	r7, r8
 800123c:	e6a7      	b.n	8000f8e <__aeabi_fsub+0xce>
 800123e:	4653      	mov	r3, sl
 8001240:	0034      	movs	r4, r6
 8001242:	4463      	add	r3, ip
 8001244:	e6c8      	b.n	8000fd8 <__aeabi_fsub+0x118>
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	7dffffff 	.word	0x7dffffff
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_f2iz>:
 8001250:	0241      	lsls	r1, r0, #9
 8001252:	0042      	lsls	r2, r0, #1
 8001254:	0fc3      	lsrs	r3, r0, #31
 8001256:	0a49      	lsrs	r1, r1, #9
 8001258:	2000      	movs	r0, #0
 800125a:	0e12      	lsrs	r2, r2, #24
 800125c:	2a7e      	cmp	r2, #126	; 0x7e
 800125e:	d903      	bls.n	8001268 <__aeabi_f2iz+0x18>
 8001260:	2a9d      	cmp	r2, #157	; 0x9d
 8001262:	d902      	bls.n	800126a <__aeabi_f2iz+0x1a>
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <__aeabi_f2iz+0x3c>)
 8001266:	1898      	adds	r0, r3, r2
 8001268:	4770      	bx	lr
 800126a:	2080      	movs	r0, #128	; 0x80
 800126c:	0400      	lsls	r0, r0, #16
 800126e:	4301      	orrs	r1, r0
 8001270:	2a95      	cmp	r2, #149	; 0x95
 8001272:	dc07      	bgt.n	8001284 <__aeabi_f2iz+0x34>
 8001274:	2096      	movs	r0, #150	; 0x96
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	40d1      	lsrs	r1, r2
 800127a:	4248      	negs	r0, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f3      	bne.n	8001268 <__aeabi_f2iz+0x18>
 8001280:	0008      	movs	r0, r1
 8001282:	e7f1      	b.n	8001268 <__aeabi_f2iz+0x18>
 8001284:	3a96      	subs	r2, #150	; 0x96
 8001286:	4091      	lsls	r1, r2
 8001288:	e7f7      	b.n	800127a <__aeabi_f2iz+0x2a>
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	7fffffff 	.word	0x7fffffff

08001290 <__aeabi_i2f>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	2800      	cmp	r0, #0
 8001294:	d013      	beq.n	80012be <__aeabi_i2f+0x2e>
 8001296:	17c3      	asrs	r3, r0, #31
 8001298:	18c5      	adds	r5, r0, r3
 800129a:	405d      	eors	r5, r3
 800129c:	0fc4      	lsrs	r4, r0, #31
 800129e:	0028      	movs	r0, r5
 80012a0:	f001 ff9a 	bl	80031d8 <__clzsi2>
 80012a4:	239e      	movs	r3, #158	; 0x9e
 80012a6:	0001      	movs	r1, r0
 80012a8:	1a1b      	subs	r3, r3, r0
 80012aa:	2b96      	cmp	r3, #150	; 0x96
 80012ac:	dc0f      	bgt.n	80012ce <__aeabi_i2f+0x3e>
 80012ae:	2808      	cmp	r0, #8
 80012b0:	dd01      	ble.n	80012b6 <__aeabi_i2f+0x26>
 80012b2:	3908      	subs	r1, #8
 80012b4:	408d      	lsls	r5, r1
 80012b6:	026d      	lsls	r5, r5, #9
 80012b8:	0a6d      	lsrs	r5, r5, #9
 80012ba:	b2d8      	uxtb	r0, r3
 80012bc:	e002      	b.n	80012c4 <__aeabi_i2f+0x34>
 80012be:	2400      	movs	r4, #0
 80012c0:	2000      	movs	r0, #0
 80012c2:	2500      	movs	r5, #0
 80012c4:	05c0      	lsls	r0, r0, #23
 80012c6:	4328      	orrs	r0, r5
 80012c8:	07e4      	lsls	r4, r4, #31
 80012ca:	4320      	orrs	r0, r4
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
 80012ce:	2b99      	cmp	r3, #153	; 0x99
 80012d0:	dd0b      	ble.n	80012ea <__aeabi_i2f+0x5a>
 80012d2:	2205      	movs	r2, #5
 80012d4:	002e      	movs	r6, r5
 80012d6:	1a12      	subs	r2, r2, r0
 80012d8:	40d6      	lsrs	r6, r2
 80012da:	0002      	movs	r2, r0
 80012dc:	321b      	adds	r2, #27
 80012de:	4095      	lsls	r5, r2
 80012e0:	0028      	movs	r0, r5
 80012e2:	1e45      	subs	r5, r0, #1
 80012e4:	41a8      	sbcs	r0, r5
 80012e6:	0035      	movs	r5, r6
 80012e8:	4305      	orrs	r5, r0
 80012ea:	2905      	cmp	r1, #5
 80012ec:	dd01      	ble.n	80012f2 <__aeabi_i2f+0x62>
 80012ee:	1f4a      	subs	r2, r1, #5
 80012f0:	4095      	lsls	r5, r2
 80012f2:	002a      	movs	r2, r5
 80012f4:	4e08      	ldr	r6, [pc, #32]	; (8001318 <__aeabi_i2f+0x88>)
 80012f6:	4032      	ands	r2, r6
 80012f8:	0768      	lsls	r0, r5, #29
 80012fa:	d009      	beq.n	8001310 <__aeabi_i2f+0x80>
 80012fc:	200f      	movs	r0, #15
 80012fe:	4028      	ands	r0, r5
 8001300:	2804      	cmp	r0, #4
 8001302:	d005      	beq.n	8001310 <__aeabi_i2f+0x80>
 8001304:	3204      	adds	r2, #4
 8001306:	0150      	lsls	r0, r2, #5
 8001308:	d502      	bpl.n	8001310 <__aeabi_i2f+0x80>
 800130a:	239f      	movs	r3, #159	; 0x9f
 800130c:	4032      	ands	r2, r6
 800130e:	1a5b      	subs	r3, r3, r1
 8001310:	0192      	lsls	r2, r2, #6
 8001312:	0a55      	lsrs	r5, r2, #9
 8001314:	b2d8      	uxtb	r0, r3
 8001316:	e7d5      	b.n	80012c4 <__aeabi_i2f+0x34>
 8001318:	fbffffff 	.word	0xfbffffff

0800131c <__aeabi_ui2f>:
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	1e05      	subs	r5, r0, #0
 8001320:	d00e      	beq.n	8001340 <__aeabi_ui2f+0x24>
 8001322:	f001 ff59 	bl	80031d8 <__clzsi2>
 8001326:	239e      	movs	r3, #158	; 0x9e
 8001328:	0004      	movs	r4, r0
 800132a:	1a1b      	subs	r3, r3, r0
 800132c:	2b96      	cmp	r3, #150	; 0x96
 800132e:	dc0c      	bgt.n	800134a <__aeabi_ui2f+0x2e>
 8001330:	2808      	cmp	r0, #8
 8001332:	dd01      	ble.n	8001338 <__aeabi_ui2f+0x1c>
 8001334:	3c08      	subs	r4, #8
 8001336:	40a5      	lsls	r5, r4
 8001338:	026d      	lsls	r5, r5, #9
 800133a:	0a6d      	lsrs	r5, r5, #9
 800133c:	b2d8      	uxtb	r0, r3
 800133e:	e001      	b.n	8001344 <__aeabi_ui2f+0x28>
 8001340:	2000      	movs	r0, #0
 8001342:	2500      	movs	r5, #0
 8001344:	05c0      	lsls	r0, r0, #23
 8001346:	4328      	orrs	r0, r5
 8001348:	bd70      	pop	{r4, r5, r6, pc}
 800134a:	2b99      	cmp	r3, #153	; 0x99
 800134c:	dd09      	ble.n	8001362 <__aeabi_ui2f+0x46>
 800134e:	0002      	movs	r2, r0
 8001350:	0029      	movs	r1, r5
 8001352:	321b      	adds	r2, #27
 8001354:	4091      	lsls	r1, r2
 8001356:	1e4a      	subs	r2, r1, #1
 8001358:	4191      	sbcs	r1, r2
 800135a:	2205      	movs	r2, #5
 800135c:	1a12      	subs	r2, r2, r0
 800135e:	40d5      	lsrs	r5, r2
 8001360:	430d      	orrs	r5, r1
 8001362:	2c05      	cmp	r4, #5
 8001364:	dd01      	ble.n	800136a <__aeabi_ui2f+0x4e>
 8001366:	1f62      	subs	r2, r4, #5
 8001368:	4095      	lsls	r5, r2
 800136a:	0029      	movs	r1, r5
 800136c:	4e08      	ldr	r6, [pc, #32]	; (8001390 <__aeabi_ui2f+0x74>)
 800136e:	4031      	ands	r1, r6
 8001370:	076a      	lsls	r2, r5, #29
 8001372:	d009      	beq.n	8001388 <__aeabi_ui2f+0x6c>
 8001374:	200f      	movs	r0, #15
 8001376:	4028      	ands	r0, r5
 8001378:	2804      	cmp	r0, #4
 800137a:	d005      	beq.n	8001388 <__aeabi_ui2f+0x6c>
 800137c:	3104      	adds	r1, #4
 800137e:	014a      	lsls	r2, r1, #5
 8001380:	d502      	bpl.n	8001388 <__aeabi_ui2f+0x6c>
 8001382:	239f      	movs	r3, #159	; 0x9f
 8001384:	4031      	ands	r1, r6
 8001386:	1b1b      	subs	r3, r3, r4
 8001388:	0189      	lsls	r1, r1, #6
 800138a:	0a4d      	lsrs	r5, r1, #9
 800138c:	b2d8      	uxtb	r0, r3
 800138e:	e7d9      	b.n	8001344 <__aeabi_ui2f+0x28>
 8001390:	fbffffff 	.word	0xfbffffff

08001394 <__aeabi_dadd>:
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	464f      	mov	r7, r9
 8001398:	46d6      	mov	lr, sl
 800139a:	4646      	mov	r6, r8
 800139c:	000d      	movs	r5, r1
 800139e:	0001      	movs	r1, r0
 80013a0:	0018      	movs	r0, r3
 80013a2:	b5c0      	push	{r6, r7, lr}
 80013a4:	0017      	movs	r7, r2
 80013a6:	032b      	lsls	r3, r5, #12
 80013a8:	0a5a      	lsrs	r2, r3, #9
 80013aa:	0f4b      	lsrs	r3, r1, #29
 80013ac:	4313      	orrs	r3, r2
 80013ae:	00ca      	lsls	r2, r1, #3
 80013b0:	4691      	mov	r9, r2
 80013b2:	0302      	lsls	r2, r0, #12
 80013b4:	006e      	lsls	r6, r5, #1
 80013b6:	0041      	lsls	r1, r0, #1
 80013b8:	0a52      	lsrs	r2, r2, #9
 80013ba:	0fec      	lsrs	r4, r5, #31
 80013bc:	0f7d      	lsrs	r5, r7, #29
 80013be:	4315      	orrs	r5, r2
 80013c0:	0d76      	lsrs	r6, r6, #21
 80013c2:	0d49      	lsrs	r1, r1, #21
 80013c4:	0fc0      	lsrs	r0, r0, #31
 80013c6:	4682      	mov	sl, r0
 80013c8:	46ac      	mov	ip, r5
 80013ca:	00ff      	lsls	r7, r7, #3
 80013cc:	1a72      	subs	r2, r6, r1
 80013ce:	4284      	cmp	r4, r0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x40>
 80013d2:	e098      	b.n	8001506 <__aeabi_dadd+0x172>
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	dc00      	bgt.n	80013da <__aeabi_dadd+0x46>
 80013d8:	e081      	b.n	80014de <__aeabi_dadd+0x14a>
 80013da:	2900      	cmp	r1, #0
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dadd+0x4c>
 80013de:	e0b6      	b.n	800154e <__aeabi_dadd+0x1ba>
 80013e0:	49c9      	ldr	r1, [pc, #804]	; (8001708 <__aeabi_dadd+0x374>)
 80013e2:	428e      	cmp	r6, r1
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dadd+0x54>
 80013e6:	e172      	b.n	80016ce <__aeabi_dadd+0x33a>
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0028      	movs	r0, r5
 80013ec:	0409      	lsls	r1, r1, #16
 80013ee:	4308      	orrs	r0, r1
 80013f0:	4684      	mov	ip, r0
 80013f2:	2a38      	cmp	r2, #56	; 0x38
 80013f4:	dd00      	ble.n	80013f8 <__aeabi_dadd+0x64>
 80013f6:	e15e      	b.n	80016b6 <__aeabi_dadd+0x322>
 80013f8:	2a1f      	cmp	r2, #31
 80013fa:	dd00      	ble.n	80013fe <__aeabi_dadd+0x6a>
 80013fc:	e1ee      	b.n	80017dc <__aeabi_dadd+0x448>
 80013fe:	2020      	movs	r0, #32
 8001400:	0039      	movs	r1, r7
 8001402:	4665      	mov	r5, ip
 8001404:	1a80      	subs	r0, r0, r2
 8001406:	4087      	lsls	r7, r0
 8001408:	40d1      	lsrs	r1, r2
 800140a:	4085      	lsls	r5, r0
 800140c:	430d      	orrs	r5, r1
 800140e:	0039      	movs	r1, r7
 8001410:	1e4f      	subs	r7, r1, #1
 8001412:	41b9      	sbcs	r1, r7
 8001414:	4667      	mov	r7, ip
 8001416:	40d7      	lsrs	r7, r2
 8001418:	4329      	orrs	r1, r5
 800141a:	1bdb      	subs	r3, r3, r7
 800141c:	464a      	mov	r2, r9
 800141e:	1a55      	subs	r5, r2, r1
 8001420:	45a9      	cmp	r9, r5
 8001422:	4189      	sbcs	r1, r1
 8001424:	4249      	negs	r1, r1
 8001426:	1a5b      	subs	r3, r3, r1
 8001428:	4698      	mov	r8, r3
 800142a:	4643      	mov	r3, r8
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	d400      	bmi.n	8001432 <__aeabi_dadd+0x9e>
 8001430:	e0cc      	b.n	80015cc <__aeabi_dadd+0x238>
 8001432:	4643      	mov	r3, r8
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	0a5b      	lsrs	r3, r3, #9
 8001438:	4698      	mov	r8, r3
 800143a:	4643      	mov	r3, r8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0xae>
 8001440:	e12c      	b.n	800169c <__aeabi_dadd+0x308>
 8001442:	4640      	mov	r0, r8
 8001444:	f001 fec8 	bl	80031d8 <__clzsi2>
 8001448:	0001      	movs	r1, r0
 800144a:	3908      	subs	r1, #8
 800144c:	2220      	movs	r2, #32
 800144e:	0028      	movs	r0, r5
 8001450:	4643      	mov	r3, r8
 8001452:	1a52      	subs	r2, r2, r1
 8001454:	408b      	lsls	r3, r1
 8001456:	40d0      	lsrs	r0, r2
 8001458:	408d      	lsls	r5, r1
 800145a:	4303      	orrs	r3, r0
 800145c:	428e      	cmp	r6, r1
 800145e:	dd00      	ble.n	8001462 <__aeabi_dadd+0xce>
 8001460:	e117      	b.n	8001692 <__aeabi_dadd+0x2fe>
 8001462:	1b8e      	subs	r6, r1, r6
 8001464:	1c72      	adds	r2, r6, #1
 8001466:	2a1f      	cmp	r2, #31
 8001468:	dd00      	ble.n	800146c <__aeabi_dadd+0xd8>
 800146a:	e1a7      	b.n	80017bc <__aeabi_dadd+0x428>
 800146c:	2120      	movs	r1, #32
 800146e:	0018      	movs	r0, r3
 8001470:	002e      	movs	r6, r5
 8001472:	1a89      	subs	r1, r1, r2
 8001474:	408d      	lsls	r5, r1
 8001476:	4088      	lsls	r0, r1
 8001478:	40d6      	lsrs	r6, r2
 800147a:	40d3      	lsrs	r3, r2
 800147c:	1e69      	subs	r1, r5, #1
 800147e:	418d      	sbcs	r5, r1
 8001480:	4330      	orrs	r0, r6
 8001482:	4698      	mov	r8, r3
 8001484:	2600      	movs	r6, #0
 8001486:	4305      	orrs	r5, r0
 8001488:	076b      	lsls	r3, r5, #29
 800148a:	d009      	beq.n	80014a0 <__aeabi_dadd+0x10c>
 800148c:	230f      	movs	r3, #15
 800148e:	402b      	ands	r3, r5
 8001490:	2b04      	cmp	r3, #4
 8001492:	d005      	beq.n	80014a0 <__aeabi_dadd+0x10c>
 8001494:	1d2b      	adds	r3, r5, #4
 8001496:	42ab      	cmp	r3, r5
 8001498:	41ad      	sbcs	r5, r5
 800149a:	426d      	negs	r5, r5
 800149c:	44a8      	add	r8, r5
 800149e:	001d      	movs	r5, r3
 80014a0:	4643      	mov	r3, r8
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	d400      	bmi.n	80014a8 <__aeabi_dadd+0x114>
 80014a6:	e094      	b.n	80015d2 <__aeabi_dadd+0x23e>
 80014a8:	4b97      	ldr	r3, [pc, #604]	; (8001708 <__aeabi_dadd+0x374>)
 80014aa:	1c72      	adds	r2, r6, #1
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x11e>
 80014b0:	e09d      	b.n	80015ee <__aeabi_dadd+0x25a>
 80014b2:	4641      	mov	r1, r8
 80014b4:	4b95      	ldr	r3, [pc, #596]	; (800170c <__aeabi_dadd+0x378>)
 80014b6:	08ed      	lsrs	r5, r5, #3
 80014b8:	4019      	ands	r1, r3
 80014ba:	000b      	movs	r3, r1
 80014bc:	0552      	lsls	r2, r2, #21
 80014be:	0749      	lsls	r1, r1, #29
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4329      	orrs	r1, r5
 80014c4:	0b1b      	lsrs	r3, r3, #12
 80014c6:	0d52      	lsrs	r2, r2, #21
 80014c8:	0512      	lsls	r2, r2, #20
 80014ca:	4313      	orrs	r3, r2
 80014cc:	07e4      	lsls	r4, r4, #31
 80014ce:	4323      	orrs	r3, r4
 80014d0:	0008      	movs	r0, r1
 80014d2:	0019      	movs	r1, r3
 80014d4:	bce0      	pop	{r5, r6, r7}
 80014d6:	46ba      	mov	sl, r7
 80014d8:	46b1      	mov	r9, r6
 80014da:	46a8      	mov	r8, r5
 80014dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d043      	beq.n	800156a <__aeabi_dadd+0x1d6>
 80014e2:	1b8a      	subs	r2, r1, r6
 80014e4:	2e00      	cmp	r6, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x156>
 80014e8:	e12a      	b.n	8001740 <__aeabi_dadd+0x3ac>
 80014ea:	464c      	mov	r4, r9
 80014ec:	431c      	orrs	r4, r3
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x15e>
 80014f0:	e1d1      	b.n	8001896 <__aeabi_dadd+0x502>
 80014f2:	1e54      	subs	r4, r2, #1
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x166>
 80014f8:	e21f      	b.n	800193a <__aeabi_dadd+0x5a6>
 80014fa:	4d83      	ldr	r5, [pc, #524]	; (8001708 <__aeabi_dadd+0x374>)
 80014fc:	42aa      	cmp	r2, r5
 80014fe:	d100      	bne.n	8001502 <__aeabi_dadd+0x16e>
 8001500:	e272      	b.n	80019e8 <__aeabi_dadd+0x654>
 8001502:	0022      	movs	r2, r4
 8001504:	e123      	b.n	800174e <__aeabi_dadd+0x3ba>
 8001506:	2a00      	cmp	r2, #0
 8001508:	dc00      	bgt.n	800150c <__aeabi_dadd+0x178>
 800150a:	e098      	b.n	800163e <__aeabi_dadd+0x2aa>
 800150c:	2900      	cmp	r1, #0
 800150e:	d042      	beq.n	8001596 <__aeabi_dadd+0x202>
 8001510:	497d      	ldr	r1, [pc, #500]	; (8001708 <__aeabi_dadd+0x374>)
 8001512:	428e      	cmp	r6, r1
 8001514:	d100      	bne.n	8001518 <__aeabi_dadd+0x184>
 8001516:	e0da      	b.n	80016ce <__aeabi_dadd+0x33a>
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0028      	movs	r0, r5
 800151c:	0409      	lsls	r1, r1, #16
 800151e:	4308      	orrs	r0, r1
 8001520:	4684      	mov	ip, r0
 8001522:	2a38      	cmp	r2, #56	; 0x38
 8001524:	dd00      	ble.n	8001528 <__aeabi_dadd+0x194>
 8001526:	e129      	b.n	800177c <__aeabi_dadd+0x3e8>
 8001528:	2a1f      	cmp	r2, #31
 800152a:	dc00      	bgt.n	800152e <__aeabi_dadd+0x19a>
 800152c:	e187      	b.n	800183e <__aeabi_dadd+0x4aa>
 800152e:	0011      	movs	r1, r2
 8001530:	4665      	mov	r5, ip
 8001532:	3920      	subs	r1, #32
 8001534:	40cd      	lsrs	r5, r1
 8001536:	2a20      	cmp	r2, #32
 8001538:	d004      	beq.n	8001544 <__aeabi_dadd+0x1b0>
 800153a:	2040      	movs	r0, #64	; 0x40
 800153c:	4661      	mov	r1, ip
 800153e:	1a82      	subs	r2, r0, r2
 8001540:	4091      	lsls	r1, r2
 8001542:	430f      	orrs	r7, r1
 8001544:	0039      	movs	r1, r7
 8001546:	1e4f      	subs	r7, r1, #1
 8001548:	41b9      	sbcs	r1, r7
 800154a:	430d      	orrs	r5, r1
 800154c:	e11b      	b.n	8001786 <__aeabi_dadd+0x3f2>
 800154e:	0029      	movs	r1, r5
 8001550:	4339      	orrs	r1, r7
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x1c2>
 8001554:	e0b5      	b.n	80016c2 <__aeabi_dadd+0x32e>
 8001556:	1e51      	subs	r1, r2, #1
 8001558:	2a01      	cmp	r2, #1
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x1ca>
 800155c:	e1ab      	b.n	80018b6 <__aeabi_dadd+0x522>
 800155e:	486a      	ldr	r0, [pc, #424]	; (8001708 <__aeabi_dadd+0x374>)
 8001560:	4282      	cmp	r2, r0
 8001562:	d100      	bne.n	8001566 <__aeabi_dadd+0x1d2>
 8001564:	e1b2      	b.n	80018cc <__aeabi_dadd+0x538>
 8001566:	000a      	movs	r2, r1
 8001568:	e743      	b.n	80013f2 <__aeabi_dadd+0x5e>
 800156a:	4969      	ldr	r1, [pc, #420]	; (8001710 <__aeabi_dadd+0x37c>)
 800156c:	1c75      	adds	r5, r6, #1
 800156e:	420d      	tst	r5, r1
 8001570:	d000      	beq.n	8001574 <__aeabi_dadd+0x1e0>
 8001572:	e0cf      	b.n	8001714 <__aeabi_dadd+0x380>
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x1e6>
 8001578:	e193      	b.n	80018a2 <__aeabi_dadd+0x50e>
 800157a:	4649      	mov	r1, r9
 800157c:	4319      	orrs	r1, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x1ee>
 8001580:	e1d1      	b.n	8001926 <__aeabi_dadd+0x592>
 8001582:	4661      	mov	r1, ip
 8001584:	4339      	orrs	r1, r7
 8001586:	d000      	beq.n	800158a <__aeabi_dadd+0x1f6>
 8001588:	e1e3      	b.n	8001952 <__aeabi_dadd+0x5be>
 800158a:	4649      	mov	r1, r9
 800158c:	0758      	lsls	r0, r3, #29
 800158e:	08c9      	lsrs	r1, r1, #3
 8001590:	4301      	orrs	r1, r0
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	e026      	b.n	80015e4 <__aeabi_dadd+0x250>
 8001596:	0029      	movs	r1, r5
 8001598:	4339      	orrs	r1, r7
 800159a:	d100      	bne.n	800159e <__aeabi_dadd+0x20a>
 800159c:	e091      	b.n	80016c2 <__aeabi_dadd+0x32e>
 800159e:	1e51      	subs	r1, r2, #1
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d005      	beq.n	80015b0 <__aeabi_dadd+0x21c>
 80015a4:	4858      	ldr	r0, [pc, #352]	; (8001708 <__aeabi_dadd+0x374>)
 80015a6:	4282      	cmp	r2, r0
 80015a8:	d100      	bne.n	80015ac <__aeabi_dadd+0x218>
 80015aa:	e18f      	b.n	80018cc <__aeabi_dadd+0x538>
 80015ac:	000a      	movs	r2, r1
 80015ae:	e7b8      	b.n	8001522 <__aeabi_dadd+0x18e>
 80015b0:	003d      	movs	r5, r7
 80015b2:	444d      	add	r5, r9
 80015b4:	454d      	cmp	r5, r9
 80015b6:	4189      	sbcs	r1, r1
 80015b8:	4463      	add	r3, ip
 80015ba:	4698      	mov	r8, r3
 80015bc:	4249      	negs	r1, r1
 80015be:	4488      	add	r8, r1
 80015c0:	4643      	mov	r3, r8
 80015c2:	2602      	movs	r6, #2
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	d500      	bpl.n	80015ca <__aeabi_dadd+0x236>
 80015c8:	e0eb      	b.n	80017a2 <__aeabi_dadd+0x40e>
 80015ca:	3e01      	subs	r6, #1
 80015cc:	076b      	lsls	r3, r5, #29
 80015ce:	d000      	beq.n	80015d2 <__aeabi_dadd+0x23e>
 80015d0:	e75c      	b.n	800148c <__aeabi_dadd+0xf8>
 80015d2:	4643      	mov	r3, r8
 80015d4:	08e9      	lsrs	r1, r5, #3
 80015d6:	075a      	lsls	r2, r3, #29
 80015d8:	4311      	orrs	r1, r2
 80015da:	0032      	movs	r2, r6
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	484a      	ldr	r0, [pc, #296]	; (8001708 <__aeabi_dadd+0x374>)
 80015e0:	4282      	cmp	r2, r0
 80015e2:	d021      	beq.n	8001628 <__aeabi_dadd+0x294>
 80015e4:	031b      	lsls	r3, r3, #12
 80015e6:	0552      	lsls	r2, r2, #21
 80015e8:	0b1b      	lsrs	r3, r3, #12
 80015ea:	0d52      	lsrs	r2, r2, #21
 80015ec:	e76c      	b.n	80014c8 <__aeabi_dadd+0x134>
 80015ee:	2300      	movs	r3, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x134>
 80015f4:	002a      	movs	r2, r5
 80015f6:	433a      	orrs	r2, r7
 80015f8:	d069      	beq.n	80016ce <__aeabi_dadd+0x33a>
 80015fa:	464a      	mov	r2, r9
 80015fc:	0758      	lsls	r0, r3, #29
 80015fe:	08d1      	lsrs	r1, r2, #3
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	031b      	lsls	r3, r3, #12
 8001606:	4308      	orrs	r0, r1
 8001608:	421a      	tst	r2, r3
 800160a:	d007      	beq.n	800161c <__aeabi_dadd+0x288>
 800160c:	0029      	movs	r1, r5
 800160e:	08ed      	lsrs	r5, r5, #3
 8001610:	421d      	tst	r5, r3
 8001612:	d103      	bne.n	800161c <__aeabi_dadd+0x288>
 8001614:	002a      	movs	r2, r5
 8001616:	08ff      	lsrs	r7, r7, #3
 8001618:	0748      	lsls	r0, r1, #29
 800161a:	4338      	orrs	r0, r7
 800161c:	0f43      	lsrs	r3, r0, #29
 800161e:	00c1      	lsls	r1, r0, #3
 8001620:	075b      	lsls	r3, r3, #29
 8001622:	08c9      	lsrs	r1, r1, #3
 8001624:	4319      	orrs	r1, r3
 8001626:	0013      	movs	r3, r2
 8001628:	000a      	movs	r2, r1
 800162a:	431a      	orrs	r2, r3
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x29c>
 800162e:	e213      	b.n	8001a58 <__aeabi_dadd+0x6c4>
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	0312      	lsls	r2, r2, #12
 8001634:	4313      	orrs	r3, r2
 8001636:	031b      	lsls	r3, r3, #12
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <__aeabi_dadd+0x374>)
 800163a:	0b1b      	lsrs	r3, r3, #12
 800163c:	e744      	b.n	80014c8 <__aeabi_dadd+0x134>
 800163e:	2a00      	cmp	r2, #0
 8001640:	d04b      	beq.n	80016da <__aeabi_dadd+0x346>
 8001642:	1b8a      	subs	r2, r1, r6
 8001644:	2e00      	cmp	r6, #0
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x2b6>
 8001648:	e0e7      	b.n	800181a <__aeabi_dadd+0x486>
 800164a:	482f      	ldr	r0, [pc, #188]	; (8001708 <__aeabi_dadd+0x374>)
 800164c:	4281      	cmp	r1, r0
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x2be>
 8001650:	e195      	b.n	800197e <__aeabi_dadd+0x5ea>
 8001652:	2080      	movs	r0, #128	; 0x80
 8001654:	0400      	lsls	r0, r0, #16
 8001656:	4303      	orrs	r3, r0
 8001658:	2a38      	cmp	r2, #56	; 0x38
 800165a:	dd00      	ble.n	800165e <__aeabi_dadd+0x2ca>
 800165c:	e143      	b.n	80018e6 <__aeabi_dadd+0x552>
 800165e:	2a1f      	cmp	r2, #31
 8001660:	dd00      	ble.n	8001664 <__aeabi_dadd+0x2d0>
 8001662:	e1db      	b.n	8001a1c <__aeabi_dadd+0x688>
 8001664:	2020      	movs	r0, #32
 8001666:	001d      	movs	r5, r3
 8001668:	464e      	mov	r6, r9
 800166a:	1a80      	subs	r0, r0, r2
 800166c:	4085      	lsls	r5, r0
 800166e:	40d6      	lsrs	r6, r2
 8001670:	4335      	orrs	r5, r6
 8001672:	464e      	mov	r6, r9
 8001674:	4086      	lsls	r6, r0
 8001676:	0030      	movs	r0, r6
 8001678:	40d3      	lsrs	r3, r2
 800167a:	1e46      	subs	r6, r0, #1
 800167c:	41b0      	sbcs	r0, r6
 800167e:	449c      	add	ip, r3
 8001680:	4305      	orrs	r5, r0
 8001682:	19ed      	adds	r5, r5, r7
 8001684:	42bd      	cmp	r5, r7
 8001686:	419b      	sbcs	r3, r3
 8001688:	425b      	negs	r3, r3
 800168a:	4463      	add	r3, ip
 800168c:	4698      	mov	r8, r3
 800168e:	000e      	movs	r6, r1
 8001690:	e07f      	b.n	8001792 <__aeabi_dadd+0x3fe>
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <__aeabi_dadd+0x378>)
 8001694:	1a76      	subs	r6, r6, r1
 8001696:	4013      	ands	r3, r2
 8001698:	4698      	mov	r8, r3
 800169a:	e6f5      	b.n	8001488 <__aeabi_dadd+0xf4>
 800169c:	0028      	movs	r0, r5
 800169e:	f001 fd9b 	bl	80031d8 <__clzsi2>
 80016a2:	0001      	movs	r1, r0
 80016a4:	3118      	adds	r1, #24
 80016a6:	291f      	cmp	r1, #31
 80016a8:	dc00      	bgt.n	80016ac <__aeabi_dadd+0x318>
 80016aa:	e6cf      	b.n	800144c <__aeabi_dadd+0xb8>
 80016ac:	002b      	movs	r3, r5
 80016ae:	3808      	subs	r0, #8
 80016b0:	4083      	lsls	r3, r0
 80016b2:	2500      	movs	r5, #0
 80016b4:	e6d2      	b.n	800145c <__aeabi_dadd+0xc8>
 80016b6:	4662      	mov	r2, ip
 80016b8:	433a      	orrs	r2, r7
 80016ba:	0011      	movs	r1, r2
 80016bc:	1e4f      	subs	r7, r1, #1
 80016be:	41b9      	sbcs	r1, r7
 80016c0:	e6ac      	b.n	800141c <__aeabi_dadd+0x88>
 80016c2:	4649      	mov	r1, r9
 80016c4:	0758      	lsls	r0, r3, #29
 80016c6:	08c9      	lsrs	r1, r1, #3
 80016c8:	4301      	orrs	r1, r0
 80016ca:	08db      	lsrs	r3, r3, #3
 80016cc:	e787      	b.n	80015de <__aeabi_dadd+0x24a>
 80016ce:	4649      	mov	r1, r9
 80016d0:	075a      	lsls	r2, r3, #29
 80016d2:	08c9      	lsrs	r1, r1, #3
 80016d4:	4311      	orrs	r1, r2
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	e7a6      	b.n	8001628 <__aeabi_dadd+0x294>
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <__aeabi_dadd+0x37c>)
 80016dc:	1c70      	adds	r0, r6, #1
 80016de:	4208      	tst	r0, r1
 80016e0:	d000      	beq.n	80016e4 <__aeabi_dadd+0x350>
 80016e2:	e0bb      	b.n	800185c <__aeabi_dadd+0x4c8>
 80016e4:	2e00      	cmp	r6, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x356>
 80016e8:	e114      	b.n	8001914 <__aeabi_dadd+0x580>
 80016ea:	4649      	mov	r1, r9
 80016ec:	4319      	orrs	r1, r3
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dadd+0x35e>
 80016f0:	e175      	b.n	80019de <__aeabi_dadd+0x64a>
 80016f2:	0029      	movs	r1, r5
 80016f4:	4339      	orrs	r1, r7
 80016f6:	d000      	beq.n	80016fa <__aeabi_dadd+0x366>
 80016f8:	e17e      	b.n	80019f8 <__aeabi_dadd+0x664>
 80016fa:	4649      	mov	r1, r9
 80016fc:	0758      	lsls	r0, r3, #29
 80016fe:	08c9      	lsrs	r1, r1, #3
 8001700:	4301      	orrs	r1, r0
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	e76e      	b.n	80015e4 <__aeabi_dadd+0x250>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000007ff 	.word	0x000007ff
 800170c:	ff7fffff 	.word	0xff7fffff
 8001710:	000007fe 	.word	0x000007fe
 8001714:	4649      	mov	r1, r9
 8001716:	1bcd      	subs	r5, r1, r7
 8001718:	4661      	mov	r1, ip
 800171a:	1a58      	subs	r0, r3, r1
 800171c:	45a9      	cmp	r9, r5
 800171e:	4189      	sbcs	r1, r1
 8001720:	4249      	negs	r1, r1
 8001722:	4688      	mov	r8, r1
 8001724:	0001      	movs	r1, r0
 8001726:	4640      	mov	r0, r8
 8001728:	1a09      	subs	r1, r1, r0
 800172a:	4688      	mov	r8, r1
 800172c:	0209      	lsls	r1, r1, #8
 800172e:	d500      	bpl.n	8001732 <__aeabi_dadd+0x39e>
 8001730:	e0a6      	b.n	8001880 <__aeabi_dadd+0x4ec>
 8001732:	4641      	mov	r1, r8
 8001734:	4329      	orrs	r1, r5
 8001736:	d000      	beq.n	800173a <__aeabi_dadd+0x3a6>
 8001738:	e67f      	b.n	800143a <__aeabi_dadd+0xa6>
 800173a:	2300      	movs	r3, #0
 800173c:	2400      	movs	r4, #0
 800173e:	e751      	b.n	80015e4 <__aeabi_dadd+0x250>
 8001740:	4cc7      	ldr	r4, [pc, #796]	; (8001a60 <__aeabi_dadd+0x6cc>)
 8001742:	42a1      	cmp	r1, r4
 8001744:	d100      	bne.n	8001748 <__aeabi_dadd+0x3b4>
 8001746:	e0c7      	b.n	80018d8 <__aeabi_dadd+0x544>
 8001748:	2480      	movs	r4, #128	; 0x80
 800174a:	0424      	lsls	r4, r4, #16
 800174c:	4323      	orrs	r3, r4
 800174e:	2a38      	cmp	r2, #56	; 0x38
 8001750:	dc54      	bgt.n	80017fc <__aeabi_dadd+0x468>
 8001752:	2a1f      	cmp	r2, #31
 8001754:	dd00      	ble.n	8001758 <__aeabi_dadd+0x3c4>
 8001756:	e0cc      	b.n	80018f2 <__aeabi_dadd+0x55e>
 8001758:	2420      	movs	r4, #32
 800175a:	4648      	mov	r0, r9
 800175c:	1aa4      	subs	r4, r4, r2
 800175e:	001d      	movs	r5, r3
 8001760:	464e      	mov	r6, r9
 8001762:	40a0      	lsls	r0, r4
 8001764:	40d6      	lsrs	r6, r2
 8001766:	40a5      	lsls	r5, r4
 8001768:	0004      	movs	r4, r0
 800176a:	40d3      	lsrs	r3, r2
 800176c:	4662      	mov	r2, ip
 800176e:	4335      	orrs	r5, r6
 8001770:	1e66      	subs	r6, r4, #1
 8001772:	41b4      	sbcs	r4, r6
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	469c      	mov	ip, r3
 8001778:	4325      	orrs	r5, r4
 800177a:	e044      	b.n	8001806 <__aeabi_dadd+0x472>
 800177c:	4662      	mov	r2, ip
 800177e:	433a      	orrs	r2, r7
 8001780:	0015      	movs	r5, r2
 8001782:	1e6f      	subs	r7, r5, #1
 8001784:	41bd      	sbcs	r5, r7
 8001786:	444d      	add	r5, r9
 8001788:	454d      	cmp	r5, r9
 800178a:	4189      	sbcs	r1, r1
 800178c:	4249      	negs	r1, r1
 800178e:	4688      	mov	r8, r1
 8001790:	4498      	add	r8, r3
 8001792:	4643      	mov	r3, r8
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	d400      	bmi.n	800179a <__aeabi_dadd+0x406>
 8001798:	e718      	b.n	80015cc <__aeabi_dadd+0x238>
 800179a:	4bb1      	ldr	r3, [pc, #708]	; (8001a60 <__aeabi_dadd+0x6cc>)
 800179c:	3601      	adds	r6, #1
 800179e:	429e      	cmp	r6, r3
 80017a0:	d049      	beq.n	8001836 <__aeabi_dadd+0x4a2>
 80017a2:	4642      	mov	r2, r8
 80017a4:	4baf      	ldr	r3, [pc, #700]	; (8001a64 <__aeabi_dadd+0x6d0>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	401a      	ands	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	086a      	lsrs	r2, r5, #1
 80017ae:	400d      	ands	r5, r1
 80017b0:	4315      	orrs	r5, r2
 80017b2:	07d9      	lsls	r1, r3, #31
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	4698      	mov	r8, r3
 80017b8:	430d      	orrs	r5, r1
 80017ba:	e665      	b.n	8001488 <__aeabi_dadd+0xf4>
 80017bc:	0018      	movs	r0, r3
 80017be:	3e1f      	subs	r6, #31
 80017c0:	40f0      	lsrs	r0, r6
 80017c2:	2a20      	cmp	r2, #32
 80017c4:	d003      	beq.n	80017ce <__aeabi_dadd+0x43a>
 80017c6:	2140      	movs	r1, #64	; 0x40
 80017c8:	1a8a      	subs	r2, r1, r2
 80017ca:	4093      	lsls	r3, r2
 80017cc:	431d      	orrs	r5, r3
 80017ce:	1e69      	subs	r1, r5, #1
 80017d0:	418d      	sbcs	r5, r1
 80017d2:	2300      	movs	r3, #0
 80017d4:	2600      	movs	r6, #0
 80017d6:	4698      	mov	r8, r3
 80017d8:	4305      	orrs	r5, r0
 80017da:	e6f7      	b.n	80015cc <__aeabi_dadd+0x238>
 80017dc:	0011      	movs	r1, r2
 80017de:	4665      	mov	r5, ip
 80017e0:	3920      	subs	r1, #32
 80017e2:	40cd      	lsrs	r5, r1
 80017e4:	2a20      	cmp	r2, #32
 80017e6:	d004      	beq.n	80017f2 <__aeabi_dadd+0x45e>
 80017e8:	2040      	movs	r0, #64	; 0x40
 80017ea:	4661      	mov	r1, ip
 80017ec:	1a82      	subs	r2, r0, r2
 80017ee:	4091      	lsls	r1, r2
 80017f0:	430f      	orrs	r7, r1
 80017f2:	0039      	movs	r1, r7
 80017f4:	1e4f      	subs	r7, r1, #1
 80017f6:	41b9      	sbcs	r1, r7
 80017f8:	4329      	orrs	r1, r5
 80017fa:	e60f      	b.n	800141c <__aeabi_dadd+0x88>
 80017fc:	464a      	mov	r2, r9
 80017fe:	4313      	orrs	r3, r2
 8001800:	001d      	movs	r5, r3
 8001802:	1e6b      	subs	r3, r5, #1
 8001804:	419d      	sbcs	r5, r3
 8001806:	1b7d      	subs	r5, r7, r5
 8001808:	42af      	cmp	r7, r5
 800180a:	419b      	sbcs	r3, r3
 800180c:	4662      	mov	r2, ip
 800180e:	425b      	negs	r3, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4698      	mov	r8, r3
 8001814:	4654      	mov	r4, sl
 8001816:	000e      	movs	r6, r1
 8001818:	e607      	b.n	800142a <__aeabi_dadd+0x96>
 800181a:	4648      	mov	r0, r9
 800181c:	4318      	orrs	r0, r3
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x48e>
 8001820:	e0b3      	b.n	800198a <__aeabi_dadd+0x5f6>
 8001822:	1e50      	subs	r0, r2, #1
 8001824:	2a01      	cmp	r2, #1
 8001826:	d100      	bne.n	800182a <__aeabi_dadd+0x496>
 8001828:	e10d      	b.n	8001a46 <__aeabi_dadd+0x6b2>
 800182a:	4d8d      	ldr	r5, [pc, #564]	; (8001a60 <__aeabi_dadd+0x6cc>)
 800182c:	42aa      	cmp	r2, r5
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x49e>
 8001830:	e0a5      	b.n	800197e <__aeabi_dadd+0x5ea>
 8001832:	0002      	movs	r2, r0
 8001834:	e710      	b.n	8001658 <__aeabi_dadd+0x2c4>
 8001836:	0032      	movs	r2, r6
 8001838:	2300      	movs	r3, #0
 800183a:	2100      	movs	r1, #0
 800183c:	e644      	b.n	80014c8 <__aeabi_dadd+0x134>
 800183e:	2120      	movs	r1, #32
 8001840:	0038      	movs	r0, r7
 8001842:	1a89      	subs	r1, r1, r2
 8001844:	4665      	mov	r5, ip
 8001846:	408f      	lsls	r7, r1
 8001848:	408d      	lsls	r5, r1
 800184a:	40d0      	lsrs	r0, r2
 800184c:	1e79      	subs	r1, r7, #1
 800184e:	418f      	sbcs	r7, r1
 8001850:	4305      	orrs	r5, r0
 8001852:	433d      	orrs	r5, r7
 8001854:	4667      	mov	r7, ip
 8001856:	40d7      	lsrs	r7, r2
 8001858:	19db      	adds	r3, r3, r7
 800185a:	e794      	b.n	8001786 <__aeabi_dadd+0x3f2>
 800185c:	4a80      	ldr	r2, [pc, #512]	; (8001a60 <__aeabi_dadd+0x6cc>)
 800185e:	4290      	cmp	r0, r2
 8001860:	d100      	bne.n	8001864 <__aeabi_dadd+0x4d0>
 8001862:	e0ec      	b.n	8001a3e <__aeabi_dadd+0x6aa>
 8001864:	0039      	movs	r1, r7
 8001866:	4449      	add	r1, r9
 8001868:	4549      	cmp	r1, r9
 800186a:	4192      	sbcs	r2, r2
 800186c:	4463      	add	r3, ip
 800186e:	4252      	negs	r2, r2
 8001870:	189b      	adds	r3, r3, r2
 8001872:	07dd      	lsls	r5, r3, #31
 8001874:	0849      	lsrs	r1, r1, #1
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	4698      	mov	r8, r3
 800187a:	0006      	movs	r6, r0
 800187c:	430d      	orrs	r5, r1
 800187e:	e6a5      	b.n	80015cc <__aeabi_dadd+0x238>
 8001880:	464a      	mov	r2, r9
 8001882:	1abd      	subs	r5, r7, r2
 8001884:	42af      	cmp	r7, r5
 8001886:	4189      	sbcs	r1, r1
 8001888:	4662      	mov	r2, ip
 800188a:	4249      	negs	r1, r1
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	1a5b      	subs	r3, r3, r1
 8001890:	4698      	mov	r8, r3
 8001892:	4654      	mov	r4, sl
 8001894:	e5d1      	b.n	800143a <__aeabi_dadd+0xa6>
 8001896:	076c      	lsls	r4, r5, #29
 8001898:	08f9      	lsrs	r1, r7, #3
 800189a:	4321      	orrs	r1, r4
 800189c:	08eb      	lsrs	r3, r5, #3
 800189e:	0004      	movs	r4, r0
 80018a0:	e69d      	b.n	80015de <__aeabi_dadd+0x24a>
 80018a2:	464a      	mov	r2, r9
 80018a4:	431a      	orrs	r2, r3
 80018a6:	d175      	bne.n	8001994 <__aeabi_dadd+0x600>
 80018a8:	4661      	mov	r1, ip
 80018aa:	4339      	orrs	r1, r7
 80018ac:	d114      	bne.n	80018d8 <__aeabi_dadd+0x544>
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	2400      	movs	r4, #0
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	e6bc      	b.n	8001630 <__aeabi_dadd+0x29c>
 80018b6:	464a      	mov	r2, r9
 80018b8:	1bd5      	subs	r5, r2, r7
 80018ba:	45a9      	cmp	r9, r5
 80018bc:	4189      	sbcs	r1, r1
 80018be:	4662      	mov	r2, ip
 80018c0:	4249      	negs	r1, r1
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	1a5b      	subs	r3, r3, r1
 80018c6:	4698      	mov	r8, r3
 80018c8:	2601      	movs	r6, #1
 80018ca:	e5ae      	b.n	800142a <__aeabi_dadd+0x96>
 80018cc:	464a      	mov	r2, r9
 80018ce:	08d1      	lsrs	r1, r2, #3
 80018d0:	075a      	lsls	r2, r3, #29
 80018d2:	4311      	orrs	r1, r2
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	e6a7      	b.n	8001628 <__aeabi_dadd+0x294>
 80018d8:	4663      	mov	r3, ip
 80018da:	08f9      	lsrs	r1, r7, #3
 80018dc:	075a      	lsls	r2, r3, #29
 80018de:	4654      	mov	r4, sl
 80018e0:	4311      	orrs	r1, r2
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	e6a0      	b.n	8001628 <__aeabi_dadd+0x294>
 80018e6:	464a      	mov	r2, r9
 80018e8:	4313      	orrs	r3, r2
 80018ea:	001d      	movs	r5, r3
 80018ec:	1e6b      	subs	r3, r5, #1
 80018ee:	419d      	sbcs	r5, r3
 80018f0:	e6c7      	b.n	8001682 <__aeabi_dadd+0x2ee>
 80018f2:	0014      	movs	r4, r2
 80018f4:	001e      	movs	r6, r3
 80018f6:	3c20      	subs	r4, #32
 80018f8:	40e6      	lsrs	r6, r4
 80018fa:	2a20      	cmp	r2, #32
 80018fc:	d005      	beq.n	800190a <__aeabi_dadd+0x576>
 80018fe:	2440      	movs	r4, #64	; 0x40
 8001900:	1aa2      	subs	r2, r4, r2
 8001902:	4093      	lsls	r3, r2
 8001904:	464a      	mov	r2, r9
 8001906:	431a      	orrs	r2, r3
 8001908:	4691      	mov	r9, r2
 800190a:	464d      	mov	r5, r9
 800190c:	1e6b      	subs	r3, r5, #1
 800190e:	419d      	sbcs	r5, r3
 8001910:	4335      	orrs	r5, r6
 8001912:	e778      	b.n	8001806 <__aeabi_dadd+0x472>
 8001914:	464a      	mov	r2, r9
 8001916:	431a      	orrs	r2, r3
 8001918:	d000      	beq.n	800191c <__aeabi_dadd+0x588>
 800191a:	e66b      	b.n	80015f4 <__aeabi_dadd+0x260>
 800191c:	076b      	lsls	r3, r5, #29
 800191e:	08f9      	lsrs	r1, r7, #3
 8001920:	4319      	orrs	r1, r3
 8001922:	08eb      	lsrs	r3, r5, #3
 8001924:	e680      	b.n	8001628 <__aeabi_dadd+0x294>
 8001926:	4661      	mov	r1, ip
 8001928:	4339      	orrs	r1, r7
 800192a:	d054      	beq.n	80019d6 <__aeabi_dadd+0x642>
 800192c:	4663      	mov	r3, ip
 800192e:	08f9      	lsrs	r1, r7, #3
 8001930:	075c      	lsls	r4, r3, #29
 8001932:	4321      	orrs	r1, r4
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	0004      	movs	r4, r0
 8001938:	e654      	b.n	80015e4 <__aeabi_dadd+0x250>
 800193a:	464a      	mov	r2, r9
 800193c:	1abd      	subs	r5, r7, r2
 800193e:	42af      	cmp	r7, r5
 8001940:	4189      	sbcs	r1, r1
 8001942:	4662      	mov	r2, ip
 8001944:	4249      	negs	r1, r1
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	1a5b      	subs	r3, r3, r1
 800194a:	4698      	mov	r8, r3
 800194c:	0004      	movs	r4, r0
 800194e:	2601      	movs	r6, #1
 8001950:	e56b      	b.n	800142a <__aeabi_dadd+0x96>
 8001952:	464a      	mov	r2, r9
 8001954:	1bd5      	subs	r5, r2, r7
 8001956:	45a9      	cmp	r9, r5
 8001958:	4189      	sbcs	r1, r1
 800195a:	4662      	mov	r2, ip
 800195c:	4249      	negs	r1, r1
 800195e:	1a9a      	subs	r2, r3, r2
 8001960:	1a52      	subs	r2, r2, r1
 8001962:	4690      	mov	r8, r2
 8001964:	0212      	lsls	r2, r2, #8
 8001966:	d532      	bpl.n	80019ce <__aeabi_dadd+0x63a>
 8001968:	464a      	mov	r2, r9
 800196a:	1abd      	subs	r5, r7, r2
 800196c:	42af      	cmp	r7, r5
 800196e:	4189      	sbcs	r1, r1
 8001970:	4662      	mov	r2, ip
 8001972:	4249      	negs	r1, r1
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	1a5b      	subs	r3, r3, r1
 8001978:	4698      	mov	r8, r3
 800197a:	0004      	movs	r4, r0
 800197c:	e584      	b.n	8001488 <__aeabi_dadd+0xf4>
 800197e:	4663      	mov	r3, ip
 8001980:	08f9      	lsrs	r1, r7, #3
 8001982:	075a      	lsls	r2, r3, #29
 8001984:	4311      	orrs	r1, r2
 8001986:	08db      	lsrs	r3, r3, #3
 8001988:	e64e      	b.n	8001628 <__aeabi_dadd+0x294>
 800198a:	08f9      	lsrs	r1, r7, #3
 800198c:	0768      	lsls	r0, r5, #29
 800198e:	4301      	orrs	r1, r0
 8001990:	08eb      	lsrs	r3, r5, #3
 8001992:	e624      	b.n	80015de <__aeabi_dadd+0x24a>
 8001994:	4662      	mov	r2, ip
 8001996:	433a      	orrs	r2, r7
 8001998:	d100      	bne.n	800199c <__aeabi_dadd+0x608>
 800199a:	e698      	b.n	80016ce <__aeabi_dadd+0x33a>
 800199c:	464a      	mov	r2, r9
 800199e:	08d1      	lsrs	r1, r2, #3
 80019a0:	075a      	lsls	r2, r3, #29
 80019a2:	4311      	orrs	r1, r2
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	031b      	lsls	r3, r3, #12
 80019aa:	421a      	tst	r2, r3
 80019ac:	d008      	beq.n	80019c0 <__aeabi_dadd+0x62c>
 80019ae:	4660      	mov	r0, ip
 80019b0:	08c5      	lsrs	r5, r0, #3
 80019b2:	421d      	tst	r5, r3
 80019b4:	d104      	bne.n	80019c0 <__aeabi_dadd+0x62c>
 80019b6:	4654      	mov	r4, sl
 80019b8:	002a      	movs	r2, r5
 80019ba:	08f9      	lsrs	r1, r7, #3
 80019bc:	0743      	lsls	r3, r0, #29
 80019be:	4319      	orrs	r1, r3
 80019c0:	0f4b      	lsrs	r3, r1, #29
 80019c2:	00c9      	lsls	r1, r1, #3
 80019c4:	075b      	lsls	r3, r3, #29
 80019c6:	08c9      	lsrs	r1, r1, #3
 80019c8:	4319      	orrs	r1, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	e62c      	b.n	8001628 <__aeabi_dadd+0x294>
 80019ce:	4641      	mov	r1, r8
 80019d0:	4329      	orrs	r1, r5
 80019d2:	d000      	beq.n	80019d6 <__aeabi_dadd+0x642>
 80019d4:	e5fa      	b.n	80015cc <__aeabi_dadd+0x238>
 80019d6:	2300      	movs	r3, #0
 80019d8:	000a      	movs	r2, r1
 80019da:	2400      	movs	r4, #0
 80019dc:	e602      	b.n	80015e4 <__aeabi_dadd+0x250>
 80019de:	076b      	lsls	r3, r5, #29
 80019e0:	08f9      	lsrs	r1, r7, #3
 80019e2:	4319      	orrs	r1, r3
 80019e4:	08eb      	lsrs	r3, r5, #3
 80019e6:	e5fd      	b.n	80015e4 <__aeabi_dadd+0x250>
 80019e8:	4663      	mov	r3, ip
 80019ea:	08f9      	lsrs	r1, r7, #3
 80019ec:	075b      	lsls	r3, r3, #29
 80019ee:	4319      	orrs	r1, r3
 80019f0:	4663      	mov	r3, ip
 80019f2:	0004      	movs	r4, r0
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	e617      	b.n	8001628 <__aeabi_dadd+0x294>
 80019f8:	003d      	movs	r5, r7
 80019fa:	444d      	add	r5, r9
 80019fc:	4463      	add	r3, ip
 80019fe:	454d      	cmp	r5, r9
 8001a00:	4189      	sbcs	r1, r1
 8001a02:	4698      	mov	r8, r3
 8001a04:	4249      	negs	r1, r1
 8001a06:	4488      	add	r8, r1
 8001a08:	4643      	mov	r3, r8
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	d400      	bmi.n	8001a10 <__aeabi_dadd+0x67c>
 8001a0e:	e5dd      	b.n	80015cc <__aeabi_dadd+0x238>
 8001a10:	4642      	mov	r2, r8
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <__aeabi_dadd+0x6d0>)
 8001a14:	2601      	movs	r6, #1
 8001a16:	401a      	ands	r2, r3
 8001a18:	4690      	mov	r8, r2
 8001a1a:	e5d7      	b.n	80015cc <__aeabi_dadd+0x238>
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	001e      	movs	r6, r3
 8001a20:	3820      	subs	r0, #32
 8001a22:	40c6      	lsrs	r6, r0
 8001a24:	2a20      	cmp	r2, #32
 8001a26:	d005      	beq.n	8001a34 <__aeabi_dadd+0x6a0>
 8001a28:	2040      	movs	r0, #64	; 0x40
 8001a2a:	1a82      	subs	r2, r0, r2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	464a      	mov	r2, r9
 8001a30:	431a      	orrs	r2, r3
 8001a32:	4691      	mov	r9, r2
 8001a34:	464d      	mov	r5, r9
 8001a36:	1e6b      	subs	r3, r5, #1
 8001a38:	419d      	sbcs	r5, r3
 8001a3a:	4335      	orrs	r5, r6
 8001a3c:	e621      	b.n	8001682 <__aeabi_dadd+0x2ee>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	2300      	movs	r3, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	e540      	b.n	80014c8 <__aeabi_dadd+0x134>
 8001a46:	464a      	mov	r2, r9
 8001a48:	19d5      	adds	r5, r2, r7
 8001a4a:	42bd      	cmp	r5, r7
 8001a4c:	4189      	sbcs	r1, r1
 8001a4e:	4463      	add	r3, ip
 8001a50:	4698      	mov	r8, r3
 8001a52:	4249      	negs	r1, r1
 8001a54:	4488      	add	r8, r1
 8001a56:	e5b3      	b.n	80015c0 <__aeabi_dadd+0x22c>
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4a01      	ldr	r2, [pc, #4]	; (8001a60 <__aeabi_dadd+0x6cc>)
 8001a5c:	000b      	movs	r3, r1
 8001a5e:	e533      	b.n	80014c8 <__aeabi_dadd+0x134>
 8001a60:	000007ff 	.word	0x000007ff
 8001a64:	ff7fffff 	.word	0xff7fffff

08001a68 <__aeabi_ddiv>:
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	4657      	mov	r7, sl
 8001a6c:	464e      	mov	r6, r9
 8001a6e:	4645      	mov	r5, r8
 8001a70:	46de      	mov	lr, fp
 8001a72:	b5e0      	push	{r5, r6, r7, lr}
 8001a74:	4681      	mov	r9, r0
 8001a76:	0005      	movs	r5, r0
 8001a78:	030c      	lsls	r4, r1, #12
 8001a7a:	0048      	lsls	r0, r1, #1
 8001a7c:	4692      	mov	sl, r2
 8001a7e:	001f      	movs	r7, r3
 8001a80:	b085      	sub	sp, #20
 8001a82:	0b24      	lsrs	r4, r4, #12
 8001a84:	0d40      	lsrs	r0, r0, #21
 8001a86:	0fce      	lsrs	r6, r1, #31
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d059      	beq.n	8001b40 <__aeabi_ddiv+0xd8>
 8001a8c:	4b87      	ldr	r3, [pc, #540]	; (8001cac <__aeabi_ddiv+0x244>)
 8001a8e:	4298      	cmp	r0, r3
 8001a90:	d100      	bne.n	8001a94 <__aeabi_ddiv+0x2c>
 8001a92:	e098      	b.n	8001bc6 <__aeabi_ddiv+0x15e>
 8001a94:	0f6b      	lsrs	r3, r5, #29
 8001a96:	00e4      	lsls	r4, r4, #3
 8001a98:	431c      	orrs	r4, r3
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	4323      	orrs	r3, r4
 8001aa0:	4698      	mov	r8, r3
 8001aa2:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <__aeabi_ddiv+0x248>)
 8001aa4:	00ed      	lsls	r5, r5, #3
 8001aa6:	469b      	mov	fp, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4699      	mov	r9, r3
 8001aac:	4483      	add	fp, r0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	033c      	lsls	r4, r7, #12
 8001ab2:	007b      	lsls	r3, r7, #1
 8001ab4:	4650      	mov	r0, sl
 8001ab6:	0b24      	lsrs	r4, r4, #12
 8001ab8:	0d5b      	lsrs	r3, r3, #21
 8001aba:	0fff      	lsrs	r7, r7, #31
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d067      	beq.n	8001b90 <__aeabi_ddiv+0x128>
 8001ac0:	4a7a      	ldr	r2, [pc, #488]	; (8001cac <__aeabi_ddiv+0x244>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d018      	beq.n	8001af8 <__aeabi_ddiv+0x90>
 8001ac6:	497a      	ldr	r1, [pc, #488]	; (8001cb0 <__aeabi_ddiv+0x248>)
 8001ac8:	0f42      	lsrs	r2, r0, #29
 8001aca:	468c      	mov	ip, r1
 8001acc:	00e4      	lsls	r4, r4, #3
 8001ace:	4659      	mov	r1, fp
 8001ad0:	4314      	orrs	r4, r2
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	4463      	add	r3, ip
 8001ad6:	0412      	lsls	r2, r2, #16
 8001ad8:	1acb      	subs	r3, r1, r3
 8001ada:	4314      	orrs	r4, r2
 8001adc:	469b      	mov	fp, r3
 8001ade:	00c2      	lsls	r2, r0, #3
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	0033      	movs	r3, r6
 8001ae4:	407b      	eors	r3, r7
 8001ae6:	469a      	mov	sl, r3
 8001ae8:	464b      	mov	r3, r9
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d900      	bls.n	8001af0 <__aeabi_ddiv+0x88>
 8001aee:	e0ef      	b.n	8001cd0 <__aeabi_ddiv+0x268>
 8001af0:	4970      	ldr	r1, [pc, #448]	; (8001cb4 <__aeabi_ddiv+0x24c>)
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	58cb      	ldr	r3, [r1, r3]
 8001af6:	469f      	mov	pc, r3
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <__aeabi_ddiv+0x250>)
 8001afa:	4652      	mov	r2, sl
 8001afc:	469c      	mov	ip, r3
 8001afe:	4322      	orrs	r2, r4
 8001b00:	44e3      	add	fp, ip
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d000      	beq.n	8001b08 <__aeabi_ddiv+0xa0>
 8001b06:	e095      	b.n	8001c34 <__aeabi_ddiv+0x1cc>
 8001b08:	4649      	mov	r1, r9
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	4319      	orrs	r1, r3
 8001b0e:	4689      	mov	r9, r1
 8001b10:	2400      	movs	r4, #0
 8001b12:	2002      	movs	r0, #2
 8001b14:	e7e5      	b.n	8001ae2 <__aeabi_ddiv+0x7a>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2400      	movs	r4, #0
 8001b1a:	2500      	movs	r5, #0
 8001b1c:	4652      	mov	r2, sl
 8001b1e:	051b      	lsls	r3, r3, #20
 8001b20:	4323      	orrs	r3, r4
 8001b22:	07d2      	lsls	r2, r2, #31
 8001b24:	4313      	orrs	r3, r2
 8001b26:	0028      	movs	r0, r5
 8001b28:	0019      	movs	r1, r3
 8001b2a:	b005      	add	sp, #20
 8001b2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b2e:	46bb      	mov	fp, r7
 8001b30:	46b2      	mov	sl, r6
 8001b32:	46a9      	mov	r9, r5
 8001b34:	46a0      	mov	r8, r4
 8001b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b38:	2400      	movs	r4, #0
 8001b3a:	2500      	movs	r5, #0
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <__aeabi_ddiv+0x244>)
 8001b3e:	e7ed      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001b40:	464b      	mov	r3, r9
 8001b42:	4323      	orrs	r3, r4
 8001b44:	4698      	mov	r8, r3
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0xe2>
 8001b48:	e089      	b.n	8001c5e <__aeabi_ddiv+0x1f6>
 8001b4a:	2c00      	cmp	r4, #0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_ddiv+0xe8>
 8001b4e:	e1e0      	b.n	8001f12 <__aeabi_ddiv+0x4aa>
 8001b50:	0020      	movs	r0, r4
 8001b52:	f001 fb41 	bl	80031d8 <__clzsi2>
 8001b56:	0001      	movs	r1, r0
 8001b58:	0002      	movs	r2, r0
 8001b5a:	390b      	subs	r1, #11
 8001b5c:	231d      	movs	r3, #29
 8001b5e:	1a5b      	subs	r3, r3, r1
 8001b60:	4649      	mov	r1, r9
 8001b62:	0010      	movs	r0, r2
 8001b64:	40d9      	lsrs	r1, r3
 8001b66:	3808      	subs	r0, #8
 8001b68:	4084      	lsls	r4, r0
 8001b6a:	000b      	movs	r3, r1
 8001b6c:	464d      	mov	r5, r9
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	4698      	mov	r8, r3
 8001b72:	4085      	lsls	r5, r0
 8001b74:	4851      	ldr	r0, [pc, #324]	; (8001cbc <__aeabi_ddiv+0x254>)
 8001b76:	033c      	lsls	r4, r7, #12
 8001b78:	1a83      	subs	r3, r0, r2
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4699      	mov	r9, r3
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	007b      	lsls	r3, r7, #1
 8001b84:	4650      	mov	r0, sl
 8001b86:	0b24      	lsrs	r4, r4, #12
 8001b88:	0d5b      	lsrs	r3, r3, #21
 8001b8a:	0fff      	lsrs	r7, r7, #31
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d197      	bne.n	8001ac0 <__aeabi_ddiv+0x58>
 8001b90:	4652      	mov	r2, sl
 8001b92:	4322      	orrs	r2, r4
 8001b94:	d055      	beq.n	8001c42 <__aeabi_ddiv+0x1da>
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_ddiv+0x134>
 8001b9a:	e1ca      	b.n	8001f32 <__aeabi_ddiv+0x4ca>
 8001b9c:	0020      	movs	r0, r4
 8001b9e:	f001 fb1b 	bl	80031d8 <__clzsi2>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	3a0b      	subs	r2, #11
 8001ba6:	231d      	movs	r3, #29
 8001ba8:	0001      	movs	r1, r0
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	4652      	mov	r2, sl
 8001bae:	3908      	subs	r1, #8
 8001bb0:	40da      	lsrs	r2, r3
 8001bb2:	408c      	lsls	r4, r1
 8001bb4:	4314      	orrs	r4, r2
 8001bb6:	4652      	mov	r2, sl
 8001bb8:	408a      	lsls	r2, r1
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <__aeabi_ddiv+0x258>)
 8001bbc:	4458      	add	r0, fp
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4483      	add	fp, r0
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e78d      	b.n	8001ae2 <__aeabi_ddiv+0x7a>
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	4323      	orrs	r3, r4
 8001bca:	4698      	mov	r8, r3
 8001bcc:	d140      	bne.n	8001c50 <__aeabi_ddiv+0x1e8>
 8001bce:	2308      	movs	r3, #8
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	3b06      	subs	r3, #6
 8001bd4:	2500      	movs	r5, #0
 8001bd6:	4683      	mov	fp, r0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	e769      	b.n	8001ab0 <__aeabi_ddiv+0x48>
 8001bdc:	46b2      	mov	sl, r6
 8001bde:	9b00      	ldr	r3, [sp, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d0a9      	beq.n	8001b38 <__aeabi_ddiv+0xd0>
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d100      	bne.n	8001bea <__aeabi_ddiv+0x182>
 8001be8:	e211      	b.n	800200e <__aeabi_ddiv+0x5a6>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d093      	beq.n	8001b16 <__aeabi_ddiv+0xae>
 8001bee:	4a35      	ldr	r2, [pc, #212]	; (8001cc4 <__aeabi_ddiv+0x25c>)
 8001bf0:	445a      	add	r2, fp
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	dc00      	bgt.n	8001bf8 <__aeabi_ddiv+0x190>
 8001bf6:	e13c      	b.n	8001e72 <__aeabi_ddiv+0x40a>
 8001bf8:	076b      	lsls	r3, r5, #29
 8001bfa:	d000      	beq.n	8001bfe <__aeabi_ddiv+0x196>
 8001bfc:	e1a7      	b.n	8001f4e <__aeabi_ddiv+0x4e6>
 8001bfe:	08ed      	lsrs	r5, r5, #3
 8001c00:	4643      	mov	r3, r8
 8001c02:	01db      	lsls	r3, r3, #7
 8001c04:	d506      	bpl.n	8001c14 <__aeabi_ddiv+0x1ac>
 8001c06:	4642      	mov	r2, r8
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <__aeabi_ddiv+0x260>)
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	4690      	mov	r8, r2
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	00d2      	lsls	r2, r2, #3
 8001c12:	445a      	add	r2, fp
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <__aeabi_ddiv+0x264>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dc8e      	bgt.n	8001b38 <__aeabi_ddiv+0xd0>
 8001c1a:	4643      	mov	r3, r8
 8001c1c:	0552      	lsls	r2, r2, #21
 8001c1e:	0758      	lsls	r0, r3, #29
 8001c20:	025c      	lsls	r4, r3, #9
 8001c22:	4305      	orrs	r5, r0
 8001c24:	0b24      	lsrs	r4, r4, #12
 8001c26:	0d53      	lsrs	r3, r2, #21
 8001c28:	e778      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001c2a:	46ba      	mov	sl, r7
 8001c2c:	46a0      	mov	r8, r4
 8001c2e:	0015      	movs	r5, r2
 8001c30:	9000      	str	r0, [sp, #0]
 8001c32:	e7d4      	b.n	8001bde <__aeabi_ddiv+0x176>
 8001c34:	464a      	mov	r2, r9
 8001c36:	2303      	movs	r3, #3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	4691      	mov	r9, r2
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	4652      	mov	r2, sl
 8001c40:	e74f      	b.n	8001ae2 <__aeabi_ddiv+0x7a>
 8001c42:	4649      	mov	r1, r9
 8001c44:	2301      	movs	r3, #1
 8001c46:	4319      	orrs	r1, r3
 8001c48:	4689      	mov	r9, r1
 8001c4a:	2400      	movs	r4, #0
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	e748      	b.n	8001ae2 <__aeabi_ddiv+0x7a>
 8001c50:	230c      	movs	r3, #12
 8001c52:	4699      	mov	r9, r3
 8001c54:	3b09      	subs	r3, #9
 8001c56:	46a0      	mov	r8, r4
 8001c58:	4683      	mov	fp, r0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	e728      	b.n	8001ab0 <__aeabi_ddiv+0x48>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	4699      	mov	r9, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	469b      	mov	fp, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	2500      	movs	r5, #0
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	e720      	b.n	8001ab0 <__aeabi_ddiv+0x48>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2480      	movs	r4, #128	; 0x80
 8001c72:	469a      	mov	sl, r3
 8001c74:	2500      	movs	r5, #0
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <__aeabi_ddiv+0x244>)
 8001c78:	0324      	lsls	r4, r4, #12
 8001c7a:	e74f      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	4641      	mov	r1, r8
 8001c80:	031b      	lsls	r3, r3, #12
 8001c82:	4219      	tst	r1, r3
 8001c84:	d008      	beq.n	8001c98 <__aeabi_ddiv+0x230>
 8001c86:	421c      	tst	r4, r3
 8001c88:	d106      	bne.n	8001c98 <__aeabi_ddiv+0x230>
 8001c8a:	431c      	orrs	r4, r3
 8001c8c:	0324      	lsls	r4, r4, #12
 8001c8e:	46ba      	mov	sl, r7
 8001c90:	0015      	movs	r5, r2
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <__aeabi_ddiv+0x244>)
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	e741      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001c98:	2480      	movs	r4, #128	; 0x80
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	431c      	orrs	r4, r3
 8001ca0:	0324      	lsls	r4, r4, #12
 8001ca2:	46b2      	mov	sl, r6
 8001ca4:	4b01      	ldr	r3, [pc, #4]	; (8001cac <__aeabi_ddiv+0x244>)
 8001ca6:	0b24      	lsrs	r4, r4, #12
 8001ca8:	e738      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	000007ff 	.word	0x000007ff
 8001cb0:	fffffc01 	.word	0xfffffc01
 8001cb4:	0800a774 	.word	0x0800a774
 8001cb8:	fffff801 	.word	0xfffff801
 8001cbc:	fffffc0d 	.word	0xfffffc0d
 8001cc0:	000003f3 	.word	0x000003f3
 8001cc4:	000003ff 	.word	0x000003ff
 8001cc8:	feffffff 	.word	0xfeffffff
 8001ccc:	000007fe 	.word	0x000007fe
 8001cd0:	4544      	cmp	r4, r8
 8001cd2:	d200      	bcs.n	8001cd6 <__aeabi_ddiv+0x26e>
 8001cd4:	e116      	b.n	8001f04 <__aeabi_ddiv+0x49c>
 8001cd6:	d100      	bne.n	8001cda <__aeabi_ddiv+0x272>
 8001cd8:	e111      	b.n	8001efe <__aeabi_ddiv+0x496>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	425b      	negs	r3, r3
 8001cde:	469c      	mov	ip, r3
 8001ce0:	002e      	movs	r6, r5
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	44e3      	add	fp, ip
 8001ce8:	0223      	lsls	r3, r4, #8
 8001cea:	0e14      	lsrs	r4, r2, #24
 8001cec:	431c      	orrs	r4, r3
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	0423      	lsls	r3, r4, #16
 8001cf4:	0c1f      	lsrs	r7, r3, #16
 8001cf6:	0212      	lsls	r2, r2, #8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	9200      	str	r2, [sp, #0]
 8001cfc:	9701      	str	r7, [sp, #4]
 8001cfe:	f7fe faa5 	bl	800024c <__aeabi_uidivmod>
 8001d02:	0002      	movs	r2, r0
 8001d04:	437a      	muls	r2, r7
 8001d06:	040b      	lsls	r3, r1, #16
 8001d08:	0c31      	lsrs	r1, r6, #16
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	4319      	orrs	r1, r3
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d90b      	bls.n	8001d2a <__aeabi_ddiv+0x2c2>
 8001d12:	2301      	movs	r3, #1
 8001d14:	425b      	negs	r3, r3
 8001d16:	469c      	mov	ip, r3
 8001d18:	1909      	adds	r1, r1, r4
 8001d1a:	44e0      	add	r8, ip
 8001d1c:	428c      	cmp	r4, r1
 8001d1e:	d804      	bhi.n	8001d2a <__aeabi_ddiv+0x2c2>
 8001d20:	428a      	cmp	r2, r1
 8001d22:	d902      	bls.n	8001d2a <__aeabi_ddiv+0x2c2>
 8001d24:	1e83      	subs	r3, r0, #2
 8001d26:	4698      	mov	r8, r3
 8001d28:	1909      	adds	r1, r1, r4
 8001d2a:	1a88      	subs	r0, r1, r2
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	f7fe fa8d 	bl	800024c <__aeabi_uidivmod>
 8001d32:	0409      	lsls	r1, r1, #16
 8001d34:	468c      	mov	ip, r1
 8001d36:	0431      	lsls	r1, r6, #16
 8001d38:	4666      	mov	r6, ip
 8001d3a:	9a01      	ldr	r2, [sp, #4]
 8001d3c:	0c09      	lsrs	r1, r1, #16
 8001d3e:	4342      	muls	r2, r0
 8001d40:	0003      	movs	r3, r0
 8001d42:	4331      	orrs	r1, r6
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d904      	bls.n	8001d52 <__aeabi_ddiv+0x2ea>
 8001d48:	1909      	adds	r1, r1, r4
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	428c      	cmp	r4, r1
 8001d4e:	d800      	bhi.n	8001d52 <__aeabi_ddiv+0x2ea>
 8001d50:	e111      	b.n	8001f76 <__aeabi_ddiv+0x50e>
 8001d52:	1a89      	subs	r1, r1, r2
 8001d54:	4642      	mov	r2, r8
 8001d56:	9e00      	ldr	r6, [sp, #0]
 8001d58:	0412      	lsls	r2, r2, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	0c33      	lsrs	r3, r6, #16
 8001d5e:	001f      	movs	r7, r3
 8001d60:	0c10      	lsrs	r0, r2, #16
 8001d62:	4690      	mov	r8, r2
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	0413      	lsls	r3, r2, #16
 8001d68:	0432      	lsls	r2, r6, #16
 8001d6a:	0c16      	lsrs	r6, r2, #16
 8001d6c:	0032      	movs	r2, r6
 8001d6e:	0c1b      	lsrs	r3, r3, #16
 8001d70:	435a      	muls	r2, r3
 8001d72:	9603      	str	r6, [sp, #12]
 8001d74:	437b      	muls	r3, r7
 8001d76:	4346      	muls	r6, r0
 8001d78:	4378      	muls	r0, r7
 8001d7a:	0c17      	lsrs	r7, r2, #16
 8001d7c:	46bc      	mov	ip, r7
 8001d7e:	199b      	adds	r3, r3, r6
 8001d80:	4463      	add	r3, ip
 8001d82:	429e      	cmp	r6, r3
 8001d84:	d903      	bls.n	8001d8e <__aeabi_ddiv+0x326>
 8001d86:	2680      	movs	r6, #128	; 0x80
 8001d88:	0276      	lsls	r6, r6, #9
 8001d8a:	46b4      	mov	ip, r6
 8001d8c:	4460      	add	r0, ip
 8001d8e:	0c1e      	lsrs	r6, r3, #16
 8001d90:	1830      	adds	r0, r6, r0
 8001d92:	0416      	lsls	r6, r2, #16
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	0c36      	lsrs	r6, r6, #16
 8001d98:	199e      	adds	r6, r3, r6
 8001d9a:	4281      	cmp	r1, r0
 8001d9c:	d200      	bcs.n	8001da0 <__aeabi_ddiv+0x338>
 8001d9e:	e09c      	b.n	8001eda <__aeabi_ddiv+0x472>
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x33c>
 8001da2:	e097      	b.n	8001ed4 <__aeabi_ddiv+0x46c>
 8001da4:	1bae      	subs	r6, r5, r6
 8001da6:	1a09      	subs	r1, r1, r0
 8001da8:	42b5      	cmp	r5, r6
 8001daa:	4180      	sbcs	r0, r0
 8001dac:	4240      	negs	r0, r0
 8001dae:	1a08      	subs	r0, r1, r0
 8001db0:	4284      	cmp	r4, r0
 8001db2:	d100      	bne.n	8001db6 <__aeabi_ddiv+0x34e>
 8001db4:	e111      	b.n	8001fda <__aeabi_ddiv+0x572>
 8001db6:	4649      	mov	r1, r9
 8001db8:	f7fe fa48 	bl	800024c <__aeabi_uidivmod>
 8001dbc:	9a01      	ldr	r2, [sp, #4]
 8001dbe:	040b      	lsls	r3, r1, #16
 8001dc0:	4342      	muls	r2, r0
 8001dc2:	0c31      	lsrs	r1, r6, #16
 8001dc4:	0005      	movs	r5, r0
 8001dc6:	4319      	orrs	r1, r3
 8001dc8:	428a      	cmp	r2, r1
 8001dca:	d907      	bls.n	8001ddc <__aeabi_ddiv+0x374>
 8001dcc:	1909      	adds	r1, r1, r4
 8001dce:	3d01      	subs	r5, #1
 8001dd0:	428c      	cmp	r4, r1
 8001dd2:	d803      	bhi.n	8001ddc <__aeabi_ddiv+0x374>
 8001dd4:	428a      	cmp	r2, r1
 8001dd6:	d901      	bls.n	8001ddc <__aeabi_ddiv+0x374>
 8001dd8:	1e85      	subs	r5, r0, #2
 8001dda:	1909      	adds	r1, r1, r4
 8001ddc:	1a88      	subs	r0, r1, r2
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe fa34 	bl	800024c <__aeabi_uidivmod>
 8001de4:	0409      	lsls	r1, r1, #16
 8001de6:	468c      	mov	ip, r1
 8001de8:	0431      	lsls	r1, r6, #16
 8001dea:	4666      	mov	r6, ip
 8001dec:	9a01      	ldr	r2, [sp, #4]
 8001dee:	0c09      	lsrs	r1, r1, #16
 8001df0:	4342      	muls	r2, r0
 8001df2:	0003      	movs	r3, r0
 8001df4:	4331      	orrs	r1, r6
 8001df6:	428a      	cmp	r2, r1
 8001df8:	d907      	bls.n	8001e0a <__aeabi_ddiv+0x3a2>
 8001dfa:	1909      	adds	r1, r1, r4
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d803      	bhi.n	8001e0a <__aeabi_ddiv+0x3a2>
 8001e02:	428a      	cmp	r2, r1
 8001e04:	d901      	bls.n	8001e0a <__aeabi_ddiv+0x3a2>
 8001e06:	1e83      	subs	r3, r0, #2
 8001e08:	1909      	adds	r1, r1, r4
 8001e0a:	9e03      	ldr	r6, [sp, #12]
 8001e0c:	1a89      	subs	r1, r1, r2
 8001e0e:	0032      	movs	r2, r6
 8001e10:	042d      	lsls	r5, r5, #16
 8001e12:	431d      	orrs	r5, r3
 8001e14:	9f02      	ldr	r7, [sp, #8]
 8001e16:	042b      	lsls	r3, r5, #16
 8001e18:	0c1b      	lsrs	r3, r3, #16
 8001e1a:	435a      	muls	r2, r3
 8001e1c:	437b      	muls	r3, r7
 8001e1e:	469c      	mov	ip, r3
 8001e20:	0c28      	lsrs	r0, r5, #16
 8001e22:	4346      	muls	r6, r0
 8001e24:	0c13      	lsrs	r3, r2, #16
 8001e26:	44b4      	add	ip, r6
 8001e28:	4463      	add	r3, ip
 8001e2a:	4378      	muls	r0, r7
 8001e2c:	429e      	cmp	r6, r3
 8001e2e:	d903      	bls.n	8001e38 <__aeabi_ddiv+0x3d0>
 8001e30:	2680      	movs	r6, #128	; 0x80
 8001e32:	0276      	lsls	r6, r6, #9
 8001e34:	46b4      	mov	ip, r6
 8001e36:	4460      	add	r0, ip
 8001e38:	0c1e      	lsrs	r6, r3, #16
 8001e3a:	0412      	lsls	r2, r2, #16
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	0c12      	lsrs	r2, r2, #16
 8001e40:	1830      	adds	r0, r6, r0
 8001e42:	189b      	adds	r3, r3, r2
 8001e44:	4281      	cmp	r1, r0
 8001e46:	d306      	bcc.n	8001e56 <__aeabi_ddiv+0x3ee>
 8001e48:	d002      	beq.n	8001e50 <__aeabi_ddiv+0x3e8>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	431d      	orrs	r5, r3
 8001e4e:	e6ce      	b.n	8001bee <__aeabi_ddiv+0x186>
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_ddiv+0x3ee>
 8001e54:	e6cb      	b.n	8001bee <__aeabi_ddiv+0x186>
 8001e56:	1861      	adds	r1, r4, r1
 8001e58:	1e6e      	subs	r6, r5, #1
 8001e5a:	42a1      	cmp	r1, r4
 8001e5c:	d200      	bcs.n	8001e60 <__aeabi_ddiv+0x3f8>
 8001e5e:	e0a4      	b.n	8001faa <__aeabi_ddiv+0x542>
 8001e60:	4281      	cmp	r1, r0
 8001e62:	d200      	bcs.n	8001e66 <__aeabi_ddiv+0x3fe>
 8001e64:	e0c9      	b.n	8001ffa <__aeabi_ddiv+0x592>
 8001e66:	d100      	bne.n	8001e6a <__aeabi_ddiv+0x402>
 8001e68:	e0d9      	b.n	800201e <__aeabi_ddiv+0x5b6>
 8001e6a:	0035      	movs	r5, r6
 8001e6c:	e7ed      	b.n	8001e4a <__aeabi_ddiv+0x3e2>
 8001e6e:	2501      	movs	r5, #1
 8001e70:	426d      	negs	r5, r5
 8001e72:	2101      	movs	r1, #1
 8001e74:	1a89      	subs	r1, r1, r2
 8001e76:	2938      	cmp	r1, #56	; 0x38
 8001e78:	dd00      	ble.n	8001e7c <__aeabi_ddiv+0x414>
 8001e7a:	e64c      	b.n	8001b16 <__aeabi_ddiv+0xae>
 8001e7c:	291f      	cmp	r1, #31
 8001e7e:	dc00      	bgt.n	8001e82 <__aeabi_ddiv+0x41a>
 8001e80:	e07f      	b.n	8001f82 <__aeabi_ddiv+0x51a>
 8001e82:	231f      	movs	r3, #31
 8001e84:	425b      	negs	r3, r3
 8001e86:	1a9a      	subs	r2, r3, r2
 8001e88:	4643      	mov	r3, r8
 8001e8a:	40d3      	lsrs	r3, r2
 8001e8c:	2920      	cmp	r1, #32
 8001e8e:	d004      	beq.n	8001e9a <__aeabi_ddiv+0x432>
 8001e90:	4644      	mov	r4, r8
 8001e92:	4a65      	ldr	r2, [pc, #404]	; (8002028 <__aeabi_ddiv+0x5c0>)
 8001e94:	445a      	add	r2, fp
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4325      	orrs	r5, r4
 8001e9a:	1e6a      	subs	r2, r5, #1
 8001e9c:	4195      	sbcs	r5, r2
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	432b      	orrs	r3, r5
 8001ea2:	0015      	movs	r5, r2
 8001ea4:	2400      	movs	r4, #0
 8001ea6:	401d      	ands	r5, r3
 8001ea8:	421a      	tst	r2, r3
 8001eaa:	d100      	bne.n	8001eae <__aeabi_ddiv+0x446>
 8001eac:	e0a1      	b.n	8001ff2 <__aeabi_ddiv+0x58a>
 8001eae:	220f      	movs	r2, #15
 8001eb0:	2400      	movs	r4, #0
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	2a04      	cmp	r2, #4
 8001eb6:	d100      	bne.n	8001eba <__aeabi_ddiv+0x452>
 8001eb8:	e098      	b.n	8001fec <__aeabi_ddiv+0x584>
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	419b      	sbcs	r3, r3
 8001ec0:	425b      	negs	r3, r3
 8001ec2:	18e4      	adds	r4, r4, r3
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	0222      	lsls	r2, r4, #8
 8001ec8:	d400      	bmi.n	8001ecc <__aeabi_ddiv+0x464>
 8001eca:	e08f      	b.n	8001fec <__aeabi_ddiv+0x584>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	2400      	movs	r4, #0
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	e623      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001ed4:	42b5      	cmp	r5, r6
 8001ed6:	d300      	bcc.n	8001eda <__aeabi_ddiv+0x472>
 8001ed8:	e764      	b.n	8001da4 <__aeabi_ddiv+0x33c>
 8001eda:	4643      	mov	r3, r8
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	9b00      	ldr	r3, [sp, #0]
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	4465      	add	r5, ip
 8001ee4:	001f      	movs	r7, r3
 8001ee6:	429d      	cmp	r5, r3
 8001ee8:	419b      	sbcs	r3, r3
 8001eea:	425b      	negs	r3, r3
 8001eec:	191b      	adds	r3, r3, r4
 8001eee:	18c9      	adds	r1, r1, r3
 8001ef0:	428c      	cmp	r4, r1
 8001ef2:	d23a      	bcs.n	8001f6a <__aeabi_ddiv+0x502>
 8001ef4:	4288      	cmp	r0, r1
 8001ef6:	d863      	bhi.n	8001fc0 <__aeabi_ddiv+0x558>
 8001ef8:	d060      	beq.n	8001fbc <__aeabi_ddiv+0x554>
 8001efa:	4690      	mov	r8, r2
 8001efc:	e752      	b.n	8001da4 <__aeabi_ddiv+0x33c>
 8001efe:	42aa      	cmp	r2, r5
 8001f00:	d900      	bls.n	8001f04 <__aeabi_ddiv+0x49c>
 8001f02:	e6ea      	b.n	8001cda <__aeabi_ddiv+0x272>
 8001f04:	4643      	mov	r3, r8
 8001f06:	07de      	lsls	r6, r3, #31
 8001f08:	0858      	lsrs	r0, r3, #1
 8001f0a:	086b      	lsrs	r3, r5, #1
 8001f0c:	431e      	orrs	r6, r3
 8001f0e:	07ed      	lsls	r5, r5, #31
 8001f10:	e6ea      	b.n	8001ce8 <__aeabi_ddiv+0x280>
 8001f12:	4648      	mov	r0, r9
 8001f14:	f001 f960 	bl	80031d8 <__clzsi2>
 8001f18:	0001      	movs	r1, r0
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	3115      	adds	r1, #21
 8001f1e:	3220      	adds	r2, #32
 8001f20:	291c      	cmp	r1, #28
 8001f22:	dc00      	bgt.n	8001f26 <__aeabi_ddiv+0x4be>
 8001f24:	e61a      	b.n	8001b5c <__aeabi_ddiv+0xf4>
 8001f26:	464b      	mov	r3, r9
 8001f28:	3808      	subs	r0, #8
 8001f2a:	4083      	lsls	r3, r0
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	4698      	mov	r8, r3
 8001f30:	e620      	b.n	8001b74 <__aeabi_ddiv+0x10c>
 8001f32:	f001 f951 	bl	80031d8 <__clzsi2>
 8001f36:	0003      	movs	r3, r0
 8001f38:	001a      	movs	r2, r3
 8001f3a:	3215      	adds	r2, #21
 8001f3c:	3020      	adds	r0, #32
 8001f3e:	2a1c      	cmp	r2, #28
 8001f40:	dc00      	bgt.n	8001f44 <__aeabi_ddiv+0x4dc>
 8001f42:	e630      	b.n	8001ba6 <__aeabi_ddiv+0x13e>
 8001f44:	4654      	mov	r4, sl
 8001f46:	3b08      	subs	r3, #8
 8001f48:	2200      	movs	r2, #0
 8001f4a:	409c      	lsls	r4, r3
 8001f4c:	e635      	b.n	8001bba <__aeabi_ddiv+0x152>
 8001f4e:	230f      	movs	r3, #15
 8001f50:	402b      	ands	r3, r5
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_ddiv+0x4f0>
 8001f56:	e652      	b.n	8001bfe <__aeabi_ddiv+0x196>
 8001f58:	2305      	movs	r3, #5
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	42ab      	cmp	r3, r5
 8001f5e:	419b      	sbcs	r3, r3
 8001f60:	3504      	adds	r5, #4
 8001f62:	425b      	negs	r3, r3
 8001f64:	08ed      	lsrs	r5, r5, #3
 8001f66:	4498      	add	r8, r3
 8001f68:	e64a      	b.n	8001c00 <__aeabi_ddiv+0x198>
 8001f6a:	428c      	cmp	r4, r1
 8001f6c:	d1c5      	bne.n	8001efa <__aeabi_ddiv+0x492>
 8001f6e:	42af      	cmp	r7, r5
 8001f70:	d9c0      	bls.n	8001ef4 <__aeabi_ddiv+0x48c>
 8001f72:	4690      	mov	r8, r2
 8001f74:	e716      	b.n	8001da4 <__aeabi_ddiv+0x33c>
 8001f76:	428a      	cmp	r2, r1
 8001f78:	d800      	bhi.n	8001f7c <__aeabi_ddiv+0x514>
 8001f7a:	e6ea      	b.n	8001d52 <__aeabi_ddiv+0x2ea>
 8001f7c:	1e83      	subs	r3, r0, #2
 8001f7e:	1909      	adds	r1, r1, r4
 8001f80:	e6e7      	b.n	8001d52 <__aeabi_ddiv+0x2ea>
 8001f82:	4a2a      	ldr	r2, [pc, #168]	; (800202c <__aeabi_ddiv+0x5c4>)
 8001f84:	0028      	movs	r0, r5
 8001f86:	445a      	add	r2, fp
 8001f88:	4643      	mov	r3, r8
 8001f8a:	4095      	lsls	r5, r2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	40c8      	lsrs	r0, r1
 8001f90:	1e6a      	subs	r2, r5, #1
 8001f92:	4195      	sbcs	r5, r2
 8001f94:	4644      	mov	r4, r8
 8001f96:	4303      	orrs	r3, r0
 8001f98:	432b      	orrs	r3, r5
 8001f9a:	40cc      	lsrs	r4, r1
 8001f9c:	075a      	lsls	r2, r3, #29
 8001f9e:	d092      	beq.n	8001ec6 <__aeabi_ddiv+0x45e>
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	2a04      	cmp	r2, #4
 8001fa6:	d188      	bne.n	8001eba <__aeabi_ddiv+0x452>
 8001fa8:	e78d      	b.n	8001ec6 <__aeabi_ddiv+0x45e>
 8001faa:	0035      	movs	r5, r6
 8001fac:	4281      	cmp	r1, r0
 8001fae:	d000      	beq.n	8001fb2 <__aeabi_ddiv+0x54a>
 8001fb0:	e74b      	b.n	8001e4a <__aeabi_ddiv+0x3e2>
 8001fb2:	9a00      	ldr	r2, [sp, #0]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d000      	beq.n	8001fba <__aeabi_ddiv+0x552>
 8001fb8:	e747      	b.n	8001e4a <__aeabi_ddiv+0x3e2>
 8001fba:	e618      	b.n	8001bee <__aeabi_ddiv+0x186>
 8001fbc:	42ae      	cmp	r6, r5
 8001fbe:	d99c      	bls.n	8001efa <__aeabi_ddiv+0x492>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	425b      	negs	r3, r3
 8001fc4:	469c      	mov	ip, r3
 8001fc6:	9b00      	ldr	r3, [sp, #0]
 8001fc8:	44e0      	add	r8, ip
 8001fca:	469c      	mov	ip, r3
 8001fcc:	4465      	add	r5, ip
 8001fce:	429d      	cmp	r5, r3
 8001fd0:	419b      	sbcs	r3, r3
 8001fd2:	425b      	negs	r3, r3
 8001fd4:	191b      	adds	r3, r3, r4
 8001fd6:	18c9      	adds	r1, r1, r3
 8001fd8:	e6e4      	b.n	8001da4 <__aeabi_ddiv+0x33c>
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <__aeabi_ddiv+0x5c8>)
 8001fdc:	445a      	add	r2, fp
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	dc00      	bgt.n	8001fe4 <__aeabi_ddiv+0x57c>
 8001fe2:	e744      	b.n	8001e6e <__aeabi_ddiv+0x406>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	2500      	movs	r5, #0
 8001fe8:	4498      	add	r8, r3
 8001fea:	e609      	b.n	8001c00 <__aeabi_ddiv+0x198>
 8001fec:	0765      	lsls	r5, r4, #29
 8001fee:	0264      	lsls	r4, r4, #9
 8001ff0:	0b24      	lsrs	r4, r4, #12
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	431d      	orrs	r5, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e590      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 8001ffa:	9e00      	ldr	r6, [sp, #0]
 8001ffc:	3d02      	subs	r5, #2
 8001ffe:	0072      	lsls	r2, r6, #1
 8002000:	42b2      	cmp	r2, r6
 8002002:	41bf      	sbcs	r7, r7
 8002004:	427f      	negs	r7, r7
 8002006:	193c      	adds	r4, r7, r4
 8002008:	1909      	adds	r1, r1, r4
 800200a:	9200      	str	r2, [sp, #0]
 800200c:	e7ce      	b.n	8001fac <__aeabi_ddiv+0x544>
 800200e:	2480      	movs	r4, #128	; 0x80
 8002010:	4643      	mov	r3, r8
 8002012:	0324      	lsls	r4, r4, #12
 8002014:	431c      	orrs	r4, r3
 8002016:	0324      	lsls	r4, r4, #12
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <__aeabi_ddiv+0x5cc>)
 800201a:	0b24      	lsrs	r4, r4, #12
 800201c:	e57e      	b.n	8001b1c <__aeabi_ddiv+0xb4>
 800201e:	9a00      	ldr	r2, [sp, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3ea      	bcc.n	8001ffa <__aeabi_ddiv+0x592>
 8002024:	0035      	movs	r5, r6
 8002026:	e7c4      	b.n	8001fb2 <__aeabi_ddiv+0x54a>
 8002028:	0000043e 	.word	0x0000043e
 800202c:	0000041e 	.word	0x0000041e
 8002030:	000003ff 	.word	0x000003ff
 8002034:	000007ff 	.word	0x000007ff

08002038 <__eqdf2>:
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	464f      	mov	r7, r9
 800203c:	4646      	mov	r6, r8
 800203e:	46d6      	mov	lr, sl
 8002040:	4694      	mov	ip, r2
 8002042:	4691      	mov	r9, r2
 8002044:	031a      	lsls	r2, r3, #12
 8002046:	0b12      	lsrs	r2, r2, #12
 8002048:	4d18      	ldr	r5, [pc, #96]	; (80020ac <__eqdf2+0x74>)
 800204a:	b5c0      	push	{r6, r7, lr}
 800204c:	004c      	lsls	r4, r1, #1
 800204e:	030f      	lsls	r7, r1, #12
 8002050:	4692      	mov	sl, r2
 8002052:	005a      	lsls	r2, r3, #1
 8002054:	0006      	movs	r6, r0
 8002056:	4680      	mov	r8, r0
 8002058:	0b3f      	lsrs	r7, r7, #12
 800205a:	2001      	movs	r0, #1
 800205c:	0d64      	lsrs	r4, r4, #21
 800205e:	0fc9      	lsrs	r1, r1, #31
 8002060:	0d52      	lsrs	r2, r2, #21
 8002062:	0fdb      	lsrs	r3, r3, #31
 8002064:	42ac      	cmp	r4, r5
 8002066:	d00a      	beq.n	800207e <__eqdf2+0x46>
 8002068:	42aa      	cmp	r2, r5
 800206a:	d003      	beq.n	8002074 <__eqdf2+0x3c>
 800206c:	4294      	cmp	r4, r2
 800206e:	d101      	bne.n	8002074 <__eqdf2+0x3c>
 8002070:	4557      	cmp	r7, sl
 8002072:	d00d      	beq.n	8002090 <__eqdf2+0x58>
 8002074:	bce0      	pop	{r5, r6, r7}
 8002076:	46ba      	mov	sl, r7
 8002078:	46b1      	mov	r9, r6
 800207a:	46a8      	mov	r8, r5
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	003d      	movs	r5, r7
 8002080:	4335      	orrs	r5, r6
 8002082:	d1f7      	bne.n	8002074 <__eqdf2+0x3c>
 8002084:	42a2      	cmp	r2, r4
 8002086:	d1f5      	bne.n	8002074 <__eqdf2+0x3c>
 8002088:	4652      	mov	r2, sl
 800208a:	4665      	mov	r5, ip
 800208c:	432a      	orrs	r2, r5
 800208e:	d1f1      	bne.n	8002074 <__eqdf2+0x3c>
 8002090:	2001      	movs	r0, #1
 8002092:	45c8      	cmp	r8, r9
 8002094:	d1ee      	bne.n	8002074 <__eqdf2+0x3c>
 8002096:	4299      	cmp	r1, r3
 8002098:	d006      	beq.n	80020a8 <__eqdf2+0x70>
 800209a:	2c00      	cmp	r4, #0
 800209c:	d1ea      	bne.n	8002074 <__eqdf2+0x3c>
 800209e:	433e      	orrs	r6, r7
 80020a0:	0030      	movs	r0, r6
 80020a2:	1e46      	subs	r6, r0, #1
 80020a4:	41b0      	sbcs	r0, r6
 80020a6:	e7e5      	b.n	8002074 <__eqdf2+0x3c>
 80020a8:	2000      	movs	r0, #0
 80020aa:	e7e3      	b.n	8002074 <__eqdf2+0x3c>
 80020ac:	000007ff 	.word	0x000007ff

080020b0 <__gedf2>:
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	464e      	mov	r6, r9
 80020b4:	4645      	mov	r5, r8
 80020b6:	4657      	mov	r7, sl
 80020b8:	46de      	mov	lr, fp
 80020ba:	0004      	movs	r4, r0
 80020bc:	0018      	movs	r0, r3
 80020be:	b5e0      	push	{r5, r6, r7, lr}
 80020c0:	0016      	movs	r6, r2
 80020c2:	031b      	lsls	r3, r3, #12
 80020c4:	0b1b      	lsrs	r3, r3, #12
 80020c6:	4d32      	ldr	r5, [pc, #200]	; (8002190 <__gedf2+0xe0>)
 80020c8:	030f      	lsls	r7, r1, #12
 80020ca:	004a      	lsls	r2, r1, #1
 80020cc:	4699      	mov	r9, r3
 80020ce:	0043      	lsls	r3, r0, #1
 80020d0:	46a4      	mov	ip, r4
 80020d2:	46b0      	mov	r8, r6
 80020d4:	0b3f      	lsrs	r7, r7, #12
 80020d6:	0d52      	lsrs	r2, r2, #21
 80020d8:	0fc9      	lsrs	r1, r1, #31
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	0fc0      	lsrs	r0, r0, #31
 80020de:	42aa      	cmp	r2, r5
 80020e0:	d029      	beq.n	8002136 <__gedf2+0x86>
 80020e2:	42ab      	cmp	r3, r5
 80020e4:	d018      	beq.n	8002118 <__gedf2+0x68>
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d12a      	bne.n	8002140 <__gedf2+0x90>
 80020ea:	433c      	orrs	r4, r7
 80020ec:	46a3      	mov	fp, r4
 80020ee:	4265      	negs	r5, r4
 80020f0:	4165      	adcs	r5, r4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <__gedf2+0x4c>
 80020f6:	464c      	mov	r4, r9
 80020f8:	4326      	orrs	r6, r4
 80020fa:	d027      	beq.n	800214c <__gedf2+0x9c>
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	d115      	bne.n	800212c <__gedf2+0x7c>
 8002100:	4281      	cmp	r1, r0
 8002102:	d028      	beq.n	8002156 <__gedf2+0xa6>
 8002104:	2002      	movs	r0, #2
 8002106:	3901      	subs	r1, #1
 8002108:	4008      	ands	r0, r1
 800210a:	3801      	subs	r0, #1
 800210c:	bcf0      	pop	{r4, r5, r6, r7}
 800210e:	46bb      	mov	fp, r7
 8002110:	46b2      	mov	sl, r6
 8002112:	46a9      	mov	r9, r5
 8002114:	46a0      	mov	r8, r4
 8002116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002118:	464d      	mov	r5, r9
 800211a:	432e      	orrs	r6, r5
 800211c:	d12f      	bne.n	800217e <__gedf2+0xce>
 800211e:	2a00      	cmp	r2, #0
 8002120:	d1ee      	bne.n	8002100 <__gedf2+0x50>
 8002122:	433c      	orrs	r4, r7
 8002124:	4265      	negs	r5, r4
 8002126:	4165      	adcs	r5, r4
 8002128:	2d00      	cmp	r5, #0
 800212a:	d0e9      	beq.n	8002100 <__gedf2+0x50>
 800212c:	2800      	cmp	r0, #0
 800212e:	d1ed      	bne.n	800210c <__gedf2+0x5c>
 8002130:	2001      	movs	r0, #1
 8002132:	4240      	negs	r0, r0
 8002134:	e7ea      	b.n	800210c <__gedf2+0x5c>
 8002136:	003d      	movs	r5, r7
 8002138:	4325      	orrs	r5, r4
 800213a:	d120      	bne.n	800217e <__gedf2+0xce>
 800213c:	4293      	cmp	r3, r2
 800213e:	d0eb      	beq.n	8002118 <__gedf2+0x68>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1dd      	bne.n	8002100 <__gedf2+0x50>
 8002144:	464c      	mov	r4, r9
 8002146:	4326      	orrs	r6, r4
 8002148:	d1da      	bne.n	8002100 <__gedf2+0x50>
 800214a:	e7db      	b.n	8002104 <__gedf2+0x54>
 800214c:	465b      	mov	r3, fp
 800214e:	2000      	movs	r0, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0db      	beq.n	800210c <__gedf2+0x5c>
 8002154:	e7d6      	b.n	8002104 <__gedf2+0x54>
 8002156:	429a      	cmp	r2, r3
 8002158:	dc0a      	bgt.n	8002170 <__gedf2+0xc0>
 800215a:	dbe7      	blt.n	800212c <__gedf2+0x7c>
 800215c:	454f      	cmp	r7, r9
 800215e:	d8d1      	bhi.n	8002104 <__gedf2+0x54>
 8002160:	d010      	beq.n	8002184 <__gedf2+0xd4>
 8002162:	2000      	movs	r0, #0
 8002164:	454f      	cmp	r7, r9
 8002166:	d2d1      	bcs.n	800210c <__gedf2+0x5c>
 8002168:	2900      	cmp	r1, #0
 800216a:	d0e1      	beq.n	8002130 <__gedf2+0x80>
 800216c:	0008      	movs	r0, r1
 800216e:	e7cd      	b.n	800210c <__gedf2+0x5c>
 8002170:	4243      	negs	r3, r0
 8002172:	4158      	adcs	r0, r3
 8002174:	2302      	movs	r3, #2
 8002176:	4240      	negs	r0, r0
 8002178:	4018      	ands	r0, r3
 800217a:	3801      	subs	r0, #1
 800217c:	e7c6      	b.n	800210c <__gedf2+0x5c>
 800217e:	2002      	movs	r0, #2
 8002180:	4240      	negs	r0, r0
 8002182:	e7c3      	b.n	800210c <__gedf2+0x5c>
 8002184:	45c4      	cmp	ip, r8
 8002186:	d8bd      	bhi.n	8002104 <__gedf2+0x54>
 8002188:	2000      	movs	r0, #0
 800218a:	45c4      	cmp	ip, r8
 800218c:	d2be      	bcs.n	800210c <__gedf2+0x5c>
 800218e:	e7eb      	b.n	8002168 <__gedf2+0xb8>
 8002190:	000007ff 	.word	0x000007ff

08002194 <__ledf2>:
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	464e      	mov	r6, r9
 8002198:	4645      	mov	r5, r8
 800219a:	4657      	mov	r7, sl
 800219c:	46de      	mov	lr, fp
 800219e:	0004      	movs	r4, r0
 80021a0:	0018      	movs	r0, r3
 80021a2:	b5e0      	push	{r5, r6, r7, lr}
 80021a4:	0016      	movs	r6, r2
 80021a6:	031b      	lsls	r3, r3, #12
 80021a8:	0b1b      	lsrs	r3, r3, #12
 80021aa:	4d31      	ldr	r5, [pc, #196]	; (8002270 <__ledf2+0xdc>)
 80021ac:	030f      	lsls	r7, r1, #12
 80021ae:	004a      	lsls	r2, r1, #1
 80021b0:	4699      	mov	r9, r3
 80021b2:	0043      	lsls	r3, r0, #1
 80021b4:	46a4      	mov	ip, r4
 80021b6:	46b0      	mov	r8, r6
 80021b8:	0b3f      	lsrs	r7, r7, #12
 80021ba:	0d52      	lsrs	r2, r2, #21
 80021bc:	0fc9      	lsrs	r1, r1, #31
 80021be:	0d5b      	lsrs	r3, r3, #21
 80021c0:	0fc0      	lsrs	r0, r0, #31
 80021c2:	42aa      	cmp	r2, r5
 80021c4:	d011      	beq.n	80021ea <__ledf2+0x56>
 80021c6:	42ab      	cmp	r3, r5
 80021c8:	d014      	beq.n	80021f4 <__ledf2+0x60>
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d12f      	bne.n	800222e <__ledf2+0x9a>
 80021ce:	433c      	orrs	r4, r7
 80021d0:	46a3      	mov	fp, r4
 80021d2:	4265      	negs	r5, r4
 80021d4:	4165      	adcs	r5, r4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d114      	bne.n	8002204 <__ledf2+0x70>
 80021da:	464c      	mov	r4, r9
 80021dc:	4326      	orrs	r6, r4
 80021de:	d111      	bne.n	8002204 <__ledf2+0x70>
 80021e0:	465b      	mov	r3, fp
 80021e2:	2000      	movs	r0, #0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <__ledf2+0x84>
 80021e8:	e010      	b.n	800220c <__ledf2+0x78>
 80021ea:	003d      	movs	r5, r7
 80021ec:	4325      	orrs	r5, r4
 80021ee:	d112      	bne.n	8002216 <__ledf2+0x82>
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d11c      	bne.n	800222e <__ledf2+0x9a>
 80021f4:	464d      	mov	r5, r9
 80021f6:	432e      	orrs	r6, r5
 80021f8:	d10d      	bne.n	8002216 <__ledf2+0x82>
 80021fa:	2a00      	cmp	r2, #0
 80021fc:	d104      	bne.n	8002208 <__ledf2+0x74>
 80021fe:	433c      	orrs	r4, r7
 8002200:	4265      	negs	r5, r4
 8002202:	4165      	adcs	r5, r4
 8002204:	2d00      	cmp	r5, #0
 8002206:	d10d      	bne.n	8002224 <__ledf2+0x90>
 8002208:	4281      	cmp	r1, r0
 800220a:	d016      	beq.n	800223a <__ledf2+0xa6>
 800220c:	2002      	movs	r0, #2
 800220e:	3901      	subs	r1, #1
 8002210:	4008      	ands	r0, r1
 8002212:	3801      	subs	r0, #1
 8002214:	e000      	b.n	8002218 <__ledf2+0x84>
 8002216:	2002      	movs	r0, #2
 8002218:	bcf0      	pop	{r4, r5, r6, r7}
 800221a:	46bb      	mov	fp, r7
 800221c:	46b2      	mov	sl, r6
 800221e:	46a9      	mov	r9, r5
 8002220:	46a0      	mov	r8, r4
 8002222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002224:	2800      	cmp	r0, #0
 8002226:	d1f7      	bne.n	8002218 <__ledf2+0x84>
 8002228:	2001      	movs	r0, #1
 800222a:	4240      	negs	r0, r0
 800222c:	e7f4      	b.n	8002218 <__ledf2+0x84>
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ea      	bne.n	8002208 <__ledf2+0x74>
 8002232:	464c      	mov	r4, r9
 8002234:	4326      	orrs	r6, r4
 8002236:	d1e7      	bne.n	8002208 <__ledf2+0x74>
 8002238:	e7e8      	b.n	800220c <__ledf2+0x78>
 800223a:	429a      	cmp	r2, r3
 800223c:	dd06      	ble.n	800224c <__ledf2+0xb8>
 800223e:	4243      	negs	r3, r0
 8002240:	4158      	adcs	r0, r3
 8002242:	2302      	movs	r3, #2
 8002244:	4240      	negs	r0, r0
 8002246:	4018      	ands	r0, r3
 8002248:	3801      	subs	r0, #1
 800224a:	e7e5      	b.n	8002218 <__ledf2+0x84>
 800224c:	429a      	cmp	r2, r3
 800224e:	dbe9      	blt.n	8002224 <__ledf2+0x90>
 8002250:	454f      	cmp	r7, r9
 8002252:	d8db      	bhi.n	800220c <__ledf2+0x78>
 8002254:	d006      	beq.n	8002264 <__ledf2+0xd0>
 8002256:	2000      	movs	r0, #0
 8002258:	454f      	cmp	r7, r9
 800225a:	d2dd      	bcs.n	8002218 <__ledf2+0x84>
 800225c:	2900      	cmp	r1, #0
 800225e:	d0e3      	beq.n	8002228 <__ledf2+0x94>
 8002260:	0008      	movs	r0, r1
 8002262:	e7d9      	b.n	8002218 <__ledf2+0x84>
 8002264:	45c4      	cmp	ip, r8
 8002266:	d8d1      	bhi.n	800220c <__ledf2+0x78>
 8002268:	2000      	movs	r0, #0
 800226a:	45c4      	cmp	ip, r8
 800226c:	d2d4      	bcs.n	8002218 <__ledf2+0x84>
 800226e:	e7f5      	b.n	800225c <__ledf2+0xc8>
 8002270:	000007ff 	.word	0x000007ff

08002274 <__aeabi_dmul>:
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	4657      	mov	r7, sl
 8002278:	464e      	mov	r6, r9
 800227a:	4645      	mov	r5, r8
 800227c:	46de      	mov	lr, fp
 800227e:	b5e0      	push	{r5, r6, r7, lr}
 8002280:	4698      	mov	r8, r3
 8002282:	030c      	lsls	r4, r1, #12
 8002284:	004b      	lsls	r3, r1, #1
 8002286:	0006      	movs	r6, r0
 8002288:	4692      	mov	sl, r2
 800228a:	b087      	sub	sp, #28
 800228c:	0b24      	lsrs	r4, r4, #12
 800228e:	0d5b      	lsrs	r3, r3, #21
 8002290:	0fcf      	lsrs	r7, r1, #31
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06c      	beq.n	8002370 <__aeabi_dmul+0xfc>
 8002296:	4add      	ldr	r2, [pc, #884]	; (800260c <__aeabi_dmul+0x398>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d100      	bne.n	800229e <__aeabi_dmul+0x2a>
 800229c:	e086      	b.n	80023ac <__aeabi_dmul+0x138>
 800229e:	0f42      	lsrs	r2, r0, #29
 80022a0:	00e4      	lsls	r4, r4, #3
 80022a2:	4314      	orrs	r4, r2
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	0412      	lsls	r2, r2, #16
 80022a8:	4314      	orrs	r4, r2
 80022aa:	4ad9      	ldr	r2, [pc, #868]	; (8002610 <__aeabi_dmul+0x39c>)
 80022ac:	00c5      	lsls	r5, r0, #3
 80022ae:	4694      	mov	ip, r2
 80022b0:	4463      	add	r3, ip
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	4699      	mov	r9, r3
 80022b8:	469b      	mov	fp, r3
 80022ba:	4643      	mov	r3, r8
 80022bc:	4642      	mov	r2, r8
 80022be:	031e      	lsls	r6, r3, #12
 80022c0:	0fd2      	lsrs	r2, r2, #31
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4650      	mov	r0, sl
 80022c6:	4690      	mov	r8, r2
 80022c8:	0b36      	lsrs	r6, r6, #12
 80022ca:	0d5b      	lsrs	r3, r3, #21
 80022cc:	d100      	bne.n	80022d0 <__aeabi_dmul+0x5c>
 80022ce:	e078      	b.n	80023c2 <__aeabi_dmul+0x14e>
 80022d0:	4ace      	ldr	r2, [pc, #824]	; (800260c <__aeabi_dmul+0x398>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01d      	beq.n	8002312 <__aeabi_dmul+0x9e>
 80022d6:	49ce      	ldr	r1, [pc, #824]	; (8002610 <__aeabi_dmul+0x39c>)
 80022d8:	0f42      	lsrs	r2, r0, #29
 80022da:	468c      	mov	ip, r1
 80022dc:	9900      	ldr	r1, [sp, #0]
 80022de:	4463      	add	r3, ip
 80022e0:	00f6      	lsls	r6, r6, #3
 80022e2:	468c      	mov	ip, r1
 80022e4:	4316      	orrs	r6, r2
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	449c      	add	ip, r3
 80022ea:	0412      	lsls	r2, r2, #16
 80022ec:	4663      	mov	r3, ip
 80022ee:	4316      	orrs	r6, r2
 80022f0:	00c2      	lsls	r2, r0, #3
 80022f2:	2000      	movs	r0, #0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	9900      	ldr	r1, [sp, #0]
 80022f8:	4643      	mov	r3, r8
 80022fa:	3101      	adds	r1, #1
 80022fc:	468c      	mov	ip, r1
 80022fe:	4649      	mov	r1, r9
 8002300:	407b      	eors	r3, r7
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	290f      	cmp	r1, #15
 8002306:	d900      	bls.n	800230a <__aeabi_dmul+0x96>
 8002308:	e07e      	b.n	8002408 <__aeabi_dmul+0x194>
 800230a:	4bc2      	ldr	r3, [pc, #776]	; (8002614 <__aeabi_dmul+0x3a0>)
 800230c:	0089      	lsls	r1, r1, #2
 800230e:	5859      	ldr	r1, [r3, r1]
 8002310:	468f      	mov	pc, r1
 8002312:	4652      	mov	r2, sl
 8002314:	9b00      	ldr	r3, [sp, #0]
 8002316:	4332      	orrs	r2, r6
 8002318:	d000      	beq.n	800231c <__aeabi_dmul+0xa8>
 800231a:	e156      	b.n	80025ca <__aeabi_dmul+0x356>
 800231c:	49bb      	ldr	r1, [pc, #748]	; (800260c <__aeabi_dmul+0x398>)
 800231e:	2600      	movs	r6, #0
 8002320:	468c      	mov	ip, r1
 8002322:	4463      	add	r3, ip
 8002324:	4649      	mov	r1, r9
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2302      	movs	r3, #2
 800232a:	4319      	orrs	r1, r3
 800232c:	4689      	mov	r9, r1
 800232e:	2002      	movs	r0, #2
 8002330:	e7e1      	b.n	80022f6 <__aeabi_dmul+0x82>
 8002332:	4643      	mov	r3, r8
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	0034      	movs	r4, r6
 8002338:	0015      	movs	r5, r2
 800233a:	4683      	mov	fp, r0
 800233c:	465b      	mov	r3, fp
 800233e:	2b02      	cmp	r3, #2
 8002340:	d05e      	beq.n	8002400 <__aeabi_dmul+0x18c>
 8002342:	2b03      	cmp	r3, #3
 8002344:	d100      	bne.n	8002348 <__aeabi_dmul+0xd4>
 8002346:	e1f3      	b.n	8002730 <__aeabi_dmul+0x4bc>
 8002348:	2b01      	cmp	r3, #1
 800234a:	d000      	beq.n	800234e <__aeabi_dmul+0xda>
 800234c:	e118      	b.n	8002580 <__aeabi_dmul+0x30c>
 800234e:	2200      	movs	r2, #0
 8002350:	2400      	movs	r4, #0
 8002352:	2500      	movs	r5, #0
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	0512      	lsls	r2, r2, #20
 8002358:	4322      	orrs	r2, r4
 800235a:	07db      	lsls	r3, r3, #31
 800235c:	431a      	orrs	r2, r3
 800235e:	0028      	movs	r0, r5
 8002360:	0011      	movs	r1, r2
 8002362:	b007      	add	sp, #28
 8002364:	bcf0      	pop	{r4, r5, r6, r7}
 8002366:	46bb      	mov	fp, r7
 8002368:	46b2      	mov	sl, r6
 800236a:	46a9      	mov	r9, r5
 800236c:	46a0      	mov	r8, r4
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002370:	0025      	movs	r5, r4
 8002372:	4305      	orrs	r5, r0
 8002374:	d100      	bne.n	8002378 <__aeabi_dmul+0x104>
 8002376:	e141      	b.n	80025fc <__aeabi_dmul+0x388>
 8002378:	2c00      	cmp	r4, #0
 800237a:	d100      	bne.n	800237e <__aeabi_dmul+0x10a>
 800237c:	e1ad      	b.n	80026da <__aeabi_dmul+0x466>
 800237e:	0020      	movs	r0, r4
 8002380:	f000 ff2a 	bl	80031d8 <__clzsi2>
 8002384:	0001      	movs	r1, r0
 8002386:	0002      	movs	r2, r0
 8002388:	390b      	subs	r1, #11
 800238a:	231d      	movs	r3, #29
 800238c:	0010      	movs	r0, r2
 800238e:	1a5b      	subs	r3, r3, r1
 8002390:	0031      	movs	r1, r6
 8002392:	0035      	movs	r5, r6
 8002394:	3808      	subs	r0, #8
 8002396:	4084      	lsls	r4, r0
 8002398:	40d9      	lsrs	r1, r3
 800239a:	4085      	lsls	r5, r0
 800239c:	430c      	orrs	r4, r1
 800239e:	489e      	ldr	r0, [pc, #632]	; (8002618 <__aeabi_dmul+0x3a4>)
 80023a0:	1a83      	subs	r3, r0, r2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	4699      	mov	r9, r3
 80023a8:	469b      	mov	fp, r3
 80023aa:	e786      	b.n	80022ba <__aeabi_dmul+0x46>
 80023ac:	0005      	movs	r5, r0
 80023ae:	4325      	orrs	r5, r4
 80023b0:	d000      	beq.n	80023b4 <__aeabi_dmul+0x140>
 80023b2:	e11c      	b.n	80025ee <__aeabi_dmul+0x37a>
 80023b4:	2208      	movs	r2, #8
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2302      	movs	r3, #2
 80023ba:	2400      	movs	r4, #0
 80023bc:	4691      	mov	r9, r2
 80023be:	469b      	mov	fp, r3
 80023c0:	e77b      	b.n	80022ba <__aeabi_dmul+0x46>
 80023c2:	4652      	mov	r2, sl
 80023c4:	4332      	orrs	r2, r6
 80023c6:	d100      	bne.n	80023ca <__aeabi_dmul+0x156>
 80023c8:	e10a      	b.n	80025e0 <__aeabi_dmul+0x36c>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dmul+0x15c>
 80023ce:	e176      	b.n	80026be <__aeabi_dmul+0x44a>
 80023d0:	0030      	movs	r0, r6
 80023d2:	f000 ff01 	bl	80031d8 <__clzsi2>
 80023d6:	0002      	movs	r2, r0
 80023d8:	3a0b      	subs	r2, #11
 80023da:	231d      	movs	r3, #29
 80023dc:	0001      	movs	r1, r0
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	4652      	mov	r2, sl
 80023e2:	3908      	subs	r1, #8
 80023e4:	40da      	lsrs	r2, r3
 80023e6:	408e      	lsls	r6, r1
 80023e8:	4316      	orrs	r6, r2
 80023ea:	4652      	mov	r2, sl
 80023ec:	408a      	lsls	r2, r1
 80023ee:	9b00      	ldr	r3, [sp, #0]
 80023f0:	4989      	ldr	r1, [pc, #548]	; (8002618 <__aeabi_dmul+0x3a4>)
 80023f2:	1a18      	subs	r0, r3, r0
 80023f4:	0003      	movs	r3, r0
 80023f6:	468c      	mov	ip, r1
 80023f8:	4463      	add	r3, ip
 80023fa:	2000      	movs	r0, #0
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	e77a      	b.n	80022f6 <__aeabi_dmul+0x82>
 8002400:	2400      	movs	r4, #0
 8002402:	2500      	movs	r5, #0
 8002404:	4a81      	ldr	r2, [pc, #516]	; (800260c <__aeabi_dmul+0x398>)
 8002406:	e7a5      	b.n	8002354 <__aeabi_dmul+0xe0>
 8002408:	0c2f      	lsrs	r7, r5, #16
 800240a:	042d      	lsls	r5, r5, #16
 800240c:	0c2d      	lsrs	r5, r5, #16
 800240e:	002b      	movs	r3, r5
 8002410:	0c11      	lsrs	r1, r2, #16
 8002412:	0412      	lsls	r2, r2, #16
 8002414:	0c12      	lsrs	r2, r2, #16
 8002416:	4353      	muls	r3, r2
 8002418:	4698      	mov	r8, r3
 800241a:	0013      	movs	r3, r2
 800241c:	0028      	movs	r0, r5
 800241e:	437b      	muls	r3, r7
 8002420:	4699      	mov	r9, r3
 8002422:	4348      	muls	r0, r1
 8002424:	4448      	add	r0, r9
 8002426:	4683      	mov	fp, r0
 8002428:	4640      	mov	r0, r8
 800242a:	000b      	movs	r3, r1
 800242c:	0c00      	lsrs	r0, r0, #16
 800242e:	4682      	mov	sl, r0
 8002430:	4658      	mov	r0, fp
 8002432:	437b      	muls	r3, r7
 8002434:	4450      	add	r0, sl
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	4581      	cmp	r9, r0
 800243a:	d906      	bls.n	800244a <__aeabi_dmul+0x1d6>
 800243c:	469a      	mov	sl, r3
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	025b      	lsls	r3, r3, #9
 8002442:	4699      	mov	r9, r3
 8002444:	44ca      	add	sl, r9
 8002446:	4653      	mov	r3, sl
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	0c03      	lsrs	r3, r0, #16
 800244c:	469b      	mov	fp, r3
 800244e:	4643      	mov	r3, r8
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	0400      	lsls	r0, r0, #16
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	4698      	mov	r8, r3
 8002458:	0003      	movs	r3, r0
 800245a:	4443      	add	r3, r8
 800245c:	9304      	str	r3, [sp, #16]
 800245e:	0c33      	lsrs	r3, r6, #16
 8002460:	4699      	mov	r9, r3
 8002462:	002b      	movs	r3, r5
 8002464:	0436      	lsls	r6, r6, #16
 8002466:	0c36      	lsrs	r6, r6, #16
 8002468:	4373      	muls	r3, r6
 800246a:	4698      	mov	r8, r3
 800246c:	0033      	movs	r3, r6
 800246e:	437b      	muls	r3, r7
 8002470:	469a      	mov	sl, r3
 8002472:	464b      	mov	r3, r9
 8002474:	435d      	muls	r5, r3
 8002476:	435f      	muls	r7, r3
 8002478:	4643      	mov	r3, r8
 800247a:	4455      	add	r5, sl
 800247c:	0c18      	lsrs	r0, r3, #16
 800247e:	1940      	adds	r0, r0, r5
 8002480:	4582      	cmp	sl, r0
 8002482:	d903      	bls.n	800248c <__aeabi_dmul+0x218>
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	469a      	mov	sl, r3
 800248a:	4457      	add	r7, sl
 800248c:	0c05      	lsrs	r5, r0, #16
 800248e:	19eb      	adds	r3, r5, r7
 8002490:	9305      	str	r3, [sp, #20]
 8002492:	4643      	mov	r3, r8
 8002494:	041d      	lsls	r5, r3, #16
 8002496:	0c2d      	lsrs	r5, r5, #16
 8002498:	0400      	lsls	r0, r0, #16
 800249a:	1940      	adds	r0, r0, r5
 800249c:	0c25      	lsrs	r5, r4, #16
 800249e:	0424      	lsls	r4, r4, #16
 80024a0:	0c24      	lsrs	r4, r4, #16
 80024a2:	0027      	movs	r7, r4
 80024a4:	4357      	muls	r7, r2
 80024a6:	436a      	muls	r2, r5
 80024a8:	4690      	mov	r8, r2
 80024aa:	002a      	movs	r2, r5
 80024ac:	0c3b      	lsrs	r3, r7, #16
 80024ae:	469a      	mov	sl, r3
 80024b0:	434a      	muls	r2, r1
 80024b2:	4361      	muls	r1, r4
 80024b4:	4441      	add	r1, r8
 80024b6:	4451      	add	r1, sl
 80024b8:	4483      	add	fp, r0
 80024ba:	4588      	cmp	r8, r1
 80024bc:	d903      	bls.n	80024c6 <__aeabi_dmul+0x252>
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	025b      	lsls	r3, r3, #9
 80024c2:	4698      	mov	r8, r3
 80024c4:	4442      	add	r2, r8
 80024c6:	043f      	lsls	r7, r7, #16
 80024c8:	0c0b      	lsrs	r3, r1, #16
 80024ca:	0c3f      	lsrs	r7, r7, #16
 80024cc:	0409      	lsls	r1, r1, #16
 80024ce:	19c9      	adds	r1, r1, r7
 80024d0:	0027      	movs	r7, r4
 80024d2:	4698      	mov	r8, r3
 80024d4:	464b      	mov	r3, r9
 80024d6:	4377      	muls	r7, r6
 80024d8:	435c      	muls	r4, r3
 80024da:	436e      	muls	r6, r5
 80024dc:	435d      	muls	r5, r3
 80024de:	0c3b      	lsrs	r3, r7, #16
 80024e0:	4699      	mov	r9, r3
 80024e2:	19a4      	adds	r4, r4, r6
 80024e4:	444c      	add	r4, r9
 80024e6:	4442      	add	r2, r8
 80024e8:	9503      	str	r5, [sp, #12]
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d904      	bls.n	80024f8 <__aeabi_dmul+0x284>
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	025b      	lsls	r3, r3, #9
 80024f2:	4698      	mov	r8, r3
 80024f4:	4445      	add	r5, r8
 80024f6:	9503      	str	r5, [sp, #12]
 80024f8:	9b02      	ldr	r3, [sp, #8]
 80024fa:	043f      	lsls	r7, r7, #16
 80024fc:	445b      	add	r3, fp
 80024fe:	001e      	movs	r6, r3
 8002500:	4283      	cmp	r3, r0
 8002502:	4180      	sbcs	r0, r0
 8002504:	0423      	lsls	r3, r4, #16
 8002506:	4698      	mov	r8, r3
 8002508:	9b05      	ldr	r3, [sp, #20]
 800250a:	0c3f      	lsrs	r7, r7, #16
 800250c:	4447      	add	r7, r8
 800250e:	4698      	mov	r8, r3
 8002510:	1876      	adds	r6, r6, r1
 8002512:	428e      	cmp	r6, r1
 8002514:	4189      	sbcs	r1, r1
 8002516:	4447      	add	r7, r8
 8002518:	4240      	negs	r0, r0
 800251a:	183d      	adds	r5, r7, r0
 800251c:	46a8      	mov	r8, r5
 800251e:	4693      	mov	fp, r2
 8002520:	4249      	negs	r1, r1
 8002522:	468a      	mov	sl, r1
 8002524:	44c3      	add	fp, r8
 8002526:	429f      	cmp	r7, r3
 8002528:	41bf      	sbcs	r7, r7
 800252a:	4580      	cmp	r8, r0
 800252c:	4180      	sbcs	r0, r0
 800252e:	9b03      	ldr	r3, [sp, #12]
 8002530:	44da      	add	sl, fp
 8002532:	4698      	mov	r8, r3
 8002534:	4653      	mov	r3, sl
 8002536:	4240      	negs	r0, r0
 8002538:	427f      	negs	r7, r7
 800253a:	4307      	orrs	r7, r0
 800253c:	0c24      	lsrs	r4, r4, #16
 800253e:	4593      	cmp	fp, r2
 8002540:	4192      	sbcs	r2, r2
 8002542:	458a      	cmp	sl, r1
 8002544:	4189      	sbcs	r1, r1
 8002546:	193f      	adds	r7, r7, r4
 8002548:	0ddc      	lsrs	r4, r3, #23
 800254a:	9b04      	ldr	r3, [sp, #16]
 800254c:	0275      	lsls	r5, r6, #9
 800254e:	431d      	orrs	r5, r3
 8002550:	1e68      	subs	r0, r5, #1
 8002552:	4185      	sbcs	r5, r0
 8002554:	4653      	mov	r3, sl
 8002556:	4252      	negs	r2, r2
 8002558:	4249      	negs	r1, r1
 800255a:	430a      	orrs	r2, r1
 800255c:	18bf      	adds	r7, r7, r2
 800255e:	4447      	add	r7, r8
 8002560:	0df6      	lsrs	r6, r6, #23
 8002562:	027f      	lsls	r7, r7, #9
 8002564:	4335      	orrs	r5, r6
 8002566:	025a      	lsls	r2, r3, #9
 8002568:	433c      	orrs	r4, r7
 800256a:	4315      	orrs	r5, r2
 800256c:	01fb      	lsls	r3, r7, #7
 800256e:	d400      	bmi.n	8002572 <__aeabi_dmul+0x2fe>
 8002570:	e0c1      	b.n	80026f6 <__aeabi_dmul+0x482>
 8002572:	2101      	movs	r1, #1
 8002574:	086a      	lsrs	r2, r5, #1
 8002576:	400d      	ands	r5, r1
 8002578:	4315      	orrs	r5, r2
 800257a:	07e2      	lsls	r2, r4, #31
 800257c:	4315      	orrs	r5, r2
 800257e:	0864      	lsrs	r4, r4, #1
 8002580:	4926      	ldr	r1, [pc, #152]	; (800261c <__aeabi_dmul+0x3a8>)
 8002582:	4461      	add	r1, ip
 8002584:	2900      	cmp	r1, #0
 8002586:	dd56      	ble.n	8002636 <__aeabi_dmul+0x3c2>
 8002588:	076b      	lsls	r3, r5, #29
 800258a:	d009      	beq.n	80025a0 <__aeabi_dmul+0x32c>
 800258c:	220f      	movs	r2, #15
 800258e:	402a      	ands	r2, r5
 8002590:	2a04      	cmp	r2, #4
 8002592:	d005      	beq.n	80025a0 <__aeabi_dmul+0x32c>
 8002594:	1d2a      	adds	r2, r5, #4
 8002596:	42aa      	cmp	r2, r5
 8002598:	41ad      	sbcs	r5, r5
 800259a:	426d      	negs	r5, r5
 800259c:	1964      	adds	r4, r4, r5
 800259e:	0015      	movs	r5, r2
 80025a0:	01e3      	lsls	r3, r4, #7
 80025a2:	d504      	bpl.n	80025ae <__aeabi_dmul+0x33a>
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <__aeabi_dmul+0x3ac>)
 80025a8:	00c9      	lsls	r1, r1, #3
 80025aa:	4014      	ands	r4, r2
 80025ac:	4461      	add	r1, ip
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <__aeabi_dmul+0x3b0>)
 80025b0:	4291      	cmp	r1, r2
 80025b2:	dd00      	ble.n	80025b6 <__aeabi_dmul+0x342>
 80025b4:	e724      	b.n	8002400 <__aeabi_dmul+0x18c>
 80025b6:	0762      	lsls	r2, r4, #29
 80025b8:	08ed      	lsrs	r5, r5, #3
 80025ba:	0264      	lsls	r4, r4, #9
 80025bc:	0549      	lsls	r1, r1, #21
 80025be:	4315      	orrs	r5, r2
 80025c0:	0b24      	lsrs	r4, r4, #12
 80025c2:	0d4a      	lsrs	r2, r1, #21
 80025c4:	e6c6      	b.n	8002354 <__aeabi_dmul+0xe0>
 80025c6:	9701      	str	r7, [sp, #4]
 80025c8:	e6b8      	b.n	800233c <__aeabi_dmul+0xc8>
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <__aeabi_dmul+0x398>)
 80025cc:	2003      	movs	r0, #3
 80025ce:	4694      	mov	ip, r2
 80025d0:	4463      	add	r3, ip
 80025d2:	464a      	mov	r2, r9
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2303      	movs	r3, #3
 80025d8:	431a      	orrs	r2, r3
 80025da:	4691      	mov	r9, r2
 80025dc:	4652      	mov	r2, sl
 80025de:	e68a      	b.n	80022f6 <__aeabi_dmul+0x82>
 80025e0:	4649      	mov	r1, r9
 80025e2:	2301      	movs	r3, #1
 80025e4:	4319      	orrs	r1, r3
 80025e6:	4689      	mov	r9, r1
 80025e8:	2600      	movs	r6, #0
 80025ea:	2001      	movs	r0, #1
 80025ec:	e683      	b.n	80022f6 <__aeabi_dmul+0x82>
 80025ee:	220c      	movs	r2, #12
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2303      	movs	r3, #3
 80025f4:	0005      	movs	r5, r0
 80025f6:	4691      	mov	r9, r2
 80025f8:	469b      	mov	fp, r3
 80025fa:	e65e      	b.n	80022ba <__aeabi_dmul+0x46>
 80025fc:	2304      	movs	r3, #4
 80025fe:	4699      	mov	r9, r3
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	2400      	movs	r4, #0
 8002608:	469b      	mov	fp, r3
 800260a:	e656      	b.n	80022ba <__aeabi_dmul+0x46>
 800260c:	000007ff 	.word	0x000007ff
 8002610:	fffffc01 	.word	0xfffffc01
 8002614:	0800a7b4 	.word	0x0800a7b4
 8002618:	fffffc0d 	.word	0xfffffc0d
 800261c:	000003ff 	.word	0x000003ff
 8002620:	feffffff 	.word	0xfeffffff
 8002624:	000007fe 	.word	0x000007fe
 8002628:	2300      	movs	r3, #0
 800262a:	2480      	movs	r4, #128	; 0x80
 800262c:	2500      	movs	r5, #0
 800262e:	4a44      	ldr	r2, [pc, #272]	; (8002740 <__aeabi_dmul+0x4cc>)
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	0324      	lsls	r4, r4, #12
 8002634:	e68e      	b.n	8002354 <__aeabi_dmul+0xe0>
 8002636:	2001      	movs	r0, #1
 8002638:	1a40      	subs	r0, r0, r1
 800263a:	2838      	cmp	r0, #56	; 0x38
 800263c:	dd00      	ble.n	8002640 <__aeabi_dmul+0x3cc>
 800263e:	e686      	b.n	800234e <__aeabi_dmul+0xda>
 8002640:	281f      	cmp	r0, #31
 8002642:	dd5b      	ble.n	80026fc <__aeabi_dmul+0x488>
 8002644:	221f      	movs	r2, #31
 8002646:	0023      	movs	r3, r4
 8002648:	4252      	negs	r2, r2
 800264a:	1a51      	subs	r1, r2, r1
 800264c:	40cb      	lsrs	r3, r1
 800264e:	0019      	movs	r1, r3
 8002650:	2820      	cmp	r0, #32
 8002652:	d003      	beq.n	800265c <__aeabi_dmul+0x3e8>
 8002654:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <__aeabi_dmul+0x4d0>)
 8002656:	4462      	add	r2, ip
 8002658:	4094      	lsls	r4, r2
 800265a:	4325      	orrs	r5, r4
 800265c:	1e6a      	subs	r2, r5, #1
 800265e:	4195      	sbcs	r5, r2
 8002660:	002a      	movs	r2, r5
 8002662:	430a      	orrs	r2, r1
 8002664:	2107      	movs	r1, #7
 8002666:	000d      	movs	r5, r1
 8002668:	2400      	movs	r4, #0
 800266a:	4015      	ands	r5, r2
 800266c:	4211      	tst	r1, r2
 800266e:	d05b      	beq.n	8002728 <__aeabi_dmul+0x4b4>
 8002670:	210f      	movs	r1, #15
 8002672:	2400      	movs	r4, #0
 8002674:	4011      	ands	r1, r2
 8002676:	2904      	cmp	r1, #4
 8002678:	d053      	beq.n	8002722 <__aeabi_dmul+0x4ae>
 800267a:	1d11      	adds	r1, r2, #4
 800267c:	4291      	cmp	r1, r2
 800267e:	4192      	sbcs	r2, r2
 8002680:	4252      	negs	r2, r2
 8002682:	18a4      	adds	r4, r4, r2
 8002684:	000a      	movs	r2, r1
 8002686:	0223      	lsls	r3, r4, #8
 8002688:	d54b      	bpl.n	8002722 <__aeabi_dmul+0x4ae>
 800268a:	2201      	movs	r2, #1
 800268c:	2400      	movs	r4, #0
 800268e:	2500      	movs	r5, #0
 8002690:	e660      	b.n	8002354 <__aeabi_dmul+0xe0>
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	031b      	lsls	r3, r3, #12
 8002696:	421c      	tst	r4, r3
 8002698:	d009      	beq.n	80026ae <__aeabi_dmul+0x43a>
 800269a:	421e      	tst	r6, r3
 800269c:	d107      	bne.n	80026ae <__aeabi_dmul+0x43a>
 800269e:	4333      	orrs	r3, r6
 80026a0:	031c      	lsls	r4, r3, #12
 80026a2:	4643      	mov	r3, r8
 80026a4:	0015      	movs	r5, r2
 80026a6:	0b24      	lsrs	r4, r4, #12
 80026a8:	4a25      	ldr	r2, [pc, #148]	; (8002740 <__aeabi_dmul+0x4cc>)
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	e652      	b.n	8002354 <__aeabi_dmul+0xe0>
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	0312      	lsls	r2, r2, #12
 80026b2:	4314      	orrs	r4, r2
 80026b4:	0324      	lsls	r4, r4, #12
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <__aeabi_dmul+0x4cc>)
 80026b8:	0b24      	lsrs	r4, r4, #12
 80026ba:	9701      	str	r7, [sp, #4]
 80026bc:	e64a      	b.n	8002354 <__aeabi_dmul+0xe0>
 80026be:	f000 fd8b 	bl	80031d8 <__clzsi2>
 80026c2:	0003      	movs	r3, r0
 80026c4:	001a      	movs	r2, r3
 80026c6:	3215      	adds	r2, #21
 80026c8:	3020      	adds	r0, #32
 80026ca:	2a1c      	cmp	r2, #28
 80026cc:	dc00      	bgt.n	80026d0 <__aeabi_dmul+0x45c>
 80026ce:	e684      	b.n	80023da <__aeabi_dmul+0x166>
 80026d0:	4656      	mov	r6, sl
 80026d2:	3b08      	subs	r3, #8
 80026d4:	2200      	movs	r2, #0
 80026d6:	409e      	lsls	r6, r3
 80026d8:	e689      	b.n	80023ee <__aeabi_dmul+0x17a>
 80026da:	f000 fd7d 	bl	80031d8 <__clzsi2>
 80026de:	0001      	movs	r1, r0
 80026e0:	0002      	movs	r2, r0
 80026e2:	3115      	adds	r1, #21
 80026e4:	3220      	adds	r2, #32
 80026e6:	291c      	cmp	r1, #28
 80026e8:	dc00      	bgt.n	80026ec <__aeabi_dmul+0x478>
 80026ea:	e64e      	b.n	800238a <__aeabi_dmul+0x116>
 80026ec:	0034      	movs	r4, r6
 80026ee:	3808      	subs	r0, #8
 80026f0:	2500      	movs	r5, #0
 80026f2:	4084      	lsls	r4, r0
 80026f4:	e653      	b.n	800239e <__aeabi_dmul+0x12a>
 80026f6:	9b00      	ldr	r3, [sp, #0]
 80026f8:	469c      	mov	ip, r3
 80026fa:	e741      	b.n	8002580 <__aeabi_dmul+0x30c>
 80026fc:	4912      	ldr	r1, [pc, #72]	; (8002748 <__aeabi_dmul+0x4d4>)
 80026fe:	0022      	movs	r2, r4
 8002700:	4461      	add	r1, ip
 8002702:	002e      	movs	r6, r5
 8002704:	408d      	lsls	r5, r1
 8002706:	408a      	lsls	r2, r1
 8002708:	40c6      	lsrs	r6, r0
 800270a:	1e69      	subs	r1, r5, #1
 800270c:	418d      	sbcs	r5, r1
 800270e:	4332      	orrs	r2, r6
 8002710:	432a      	orrs	r2, r5
 8002712:	40c4      	lsrs	r4, r0
 8002714:	0753      	lsls	r3, r2, #29
 8002716:	d0b6      	beq.n	8002686 <__aeabi_dmul+0x412>
 8002718:	210f      	movs	r1, #15
 800271a:	4011      	ands	r1, r2
 800271c:	2904      	cmp	r1, #4
 800271e:	d1ac      	bne.n	800267a <__aeabi_dmul+0x406>
 8002720:	e7b1      	b.n	8002686 <__aeabi_dmul+0x412>
 8002722:	0765      	lsls	r5, r4, #29
 8002724:	0264      	lsls	r4, r4, #9
 8002726:	0b24      	lsrs	r4, r4, #12
 8002728:	08d2      	lsrs	r2, r2, #3
 800272a:	4315      	orrs	r5, r2
 800272c:	2200      	movs	r2, #0
 800272e:	e611      	b.n	8002354 <__aeabi_dmul+0xe0>
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	0312      	lsls	r2, r2, #12
 8002734:	4314      	orrs	r4, r2
 8002736:	0324      	lsls	r4, r4, #12
 8002738:	4a01      	ldr	r2, [pc, #4]	; (8002740 <__aeabi_dmul+0x4cc>)
 800273a:	0b24      	lsrs	r4, r4, #12
 800273c:	e60a      	b.n	8002354 <__aeabi_dmul+0xe0>
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	000007ff 	.word	0x000007ff
 8002744:	0000043e 	.word	0x0000043e
 8002748:	0000041e 	.word	0x0000041e

0800274c <__aeabi_dsub>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	4657      	mov	r7, sl
 8002750:	464e      	mov	r6, r9
 8002752:	4645      	mov	r5, r8
 8002754:	46de      	mov	lr, fp
 8002756:	0004      	movs	r4, r0
 8002758:	b5e0      	push	{r5, r6, r7, lr}
 800275a:	001f      	movs	r7, r3
 800275c:	0010      	movs	r0, r2
 800275e:	030b      	lsls	r3, r1, #12
 8002760:	0f62      	lsrs	r2, r4, #29
 8002762:	004e      	lsls	r6, r1, #1
 8002764:	0fcd      	lsrs	r5, r1, #31
 8002766:	0a5b      	lsrs	r3, r3, #9
 8002768:	0339      	lsls	r1, r7, #12
 800276a:	4313      	orrs	r3, r2
 800276c:	0a49      	lsrs	r1, r1, #9
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	0f44      	lsrs	r4, r0, #29
 8002772:	4321      	orrs	r1, r4
 8002774:	4cc2      	ldr	r4, [pc, #776]	; (8002a80 <__aeabi_dsub+0x334>)
 8002776:	4691      	mov	r9, r2
 8002778:	4692      	mov	sl, r2
 800277a:	00c0      	lsls	r0, r0, #3
 800277c:	007a      	lsls	r2, r7, #1
 800277e:	4680      	mov	r8, r0
 8002780:	0d76      	lsrs	r6, r6, #21
 8002782:	0d52      	lsrs	r2, r2, #21
 8002784:	0fff      	lsrs	r7, r7, #31
 8002786:	42a2      	cmp	r2, r4
 8002788:	d100      	bne.n	800278c <__aeabi_dsub+0x40>
 800278a:	e0b4      	b.n	80028f6 <__aeabi_dsub+0x1aa>
 800278c:	2401      	movs	r4, #1
 800278e:	4067      	eors	r7, r4
 8002790:	46bb      	mov	fp, r7
 8002792:	42bd      	cmp	r5, r7
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x4c>
 8002796:	e088      	b.n	80028aa <__aeabi_dsub+0x15e>
 8002798:	1ab4      	subs	r4, r6, r2
 800279a:	46a4      	mov	ip, r4
 800279c:	2c00      	cmp	r4, #0
 800279e:	dc00      	bgt.n	80027a2 <__aeabi_dsub+0x56>
 80027a0:	e0b2      	b.n	8002908 <__aeabi_dsub+0x1bc>
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x5c>
 80027a6:	e0c5      	b.n	8002934 <__aeabi_dsub+0x1e8>
 80027a8:	4ab5      	ldr	r2, [pc, #724]	; (8002a80 <__aeabi_dsub+0x334>)
 80027aa:	4296      	cmp	r6, r2
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x64>
 80027ae:	e28b      	b.n	8002cc8 <__aeabi_dsub+0x57c>
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	0412      	lsls	r2, r2, #16
 80027b4:	4311      	orrs	r1, r2
 80027b6:	4662      	mov	r2, ip
 80027b8:	2a38      	cmp	r2, #56	; 0x38
 80027ba:	dd00      	ble.n	80027be <__aeabi_dsub+0x72>
 80027bc:	e1a1      	b.n	8002b02 <__aeabi_dsub+0x3b6>
 80027be:	2a1f      	cmp	r2, #31
 80027c0:	dd00      	ble.n	80027c4 <__aeabi_dsub+0x78>
 80027c2:	e216      	b.n	8002bf2 <__aeabi_dsub+0x4a6>
 80027c4:	2720      	movs	r7, #32
 80027c6:	000c      	movs	r4, r1
 80027c8:	1abf      	subs	r7, r7, r2
 80027ca:	40bc      	lsls	r4, r7
 80027cc:	0002      	movs	r2, r0
 80027ce:	46a0      	mov	r8, r4
 80027d0:	4664      	mov	r4, ip
 80027d2:	40b8      	lsls	r0, r7
 80027d4:	40e2      	lsrs	r2, r4
 80027d6:	4644      	mov	r4, r8
 80027d8:	4314      	orrs	r4, r2
 80027da:	0002      	movs	r2, r0
 80027dc:	1e50      	subs	r0, r2, #1
 80027de:	4182      	sbcs	r2, r0
 80027e0:	4660      	mov	r0, ip
 80027e2:	40c1      	lsrs	r1, r0
 80027e4:	4322      	orrs	r2, r4
 80027e6:	1a5b      	subs	r3, r3, r1
 80027e8:	4649      	mov	r1, r9
 80027ea:	1a8c      	subs	r4, r1, r2
 80027ec:	45a1      	cmp	r9, r4
 80027ee:	4192      	sbcs	r2, r2
 80027f0:	4252      	negs	r2, r2
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	4698      	mov	r8, r3
 80027f6:	4643      	mov	r3, r8
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	d400      	bmi.n	80027fe <__aeabi_dsub+0xb2>
 80027fc:	e117      	b.n	8002a2e <__aeabi_dsub+0x2e2>
 80027fe:	4643      	mov	r3, r8
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	4698      	mov	r8, r3
 8002806:	4643      	mov	r3, r8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0xc2>
 800280c:	e16c      	b.n	8002ae8 <__aeabi_dsub+0x39c>
 800280e:	4640      	mov	r0, r8
 8002810:	f000 fce2 	bl	80031d8 <__clzsi2>
 8002814:	0002      	movs	r2, r0
 8002816:	3a08      	subs	r2, #8
 8002818:	2120      	movs	r1, #32
 800281a:	0020      	movs	r0, r4
 800281c:	4643      	mov	r3, r8
 800281e:	1a89      	subs	r1, r1, r2
 8002820:	4093      	lsls	r3, r2
 8002822:	40c8      	lsrs	r0, r1
 8002824:	4094      	lsls	r4, r2
 8002826:	4303      	orrs	r3, r0
 8002828:	4296      	cmp	r6, r2
 800282a:	dd00      	ble.n	800282e <__aeabi_dsub+0xe2>
 800282c:	e157      	b.n	8002ade <__aeabi_dsub+0x392>
 800282e:	1b96      	subs	r6, r2, r6
 8002830:	1c71      	adds	r1, r6, #1
 8002832:	291f      	cmp	r1, #31
 8002834:	dd00      	ble.n	8002838 <__aeabi_dsub+0xec>
 8002836:	e1cb      	b.n	8002bd0 <__aeabi_dsub+0x484>
 8002838:	2220      	movs	r2, #32
 800283a:	0018      	movs	r0, r3
 800283c:	0026      	movs	r6, r4
 800283e:	1a52      	subs	r2, r2, r1
 8002840:	4094      	lsls	r4, r2
 8002842:	4090      	lsls	r0, r2
 8002844:	40ce      	lsrs	r6, r1
 8002846:	40cb      	lsrs	r3, r1
 8002848:	1e62      	subs	r2, r4, #1
 800284a:	4194      	sbcs	r4, r2
 800284c:	4330      	orrs	r0, r6
 800284e:	4698      	mov	r8, r3
 8002850:	2600      	movs	r6, #0
 8002852:	4304      	orrs	r4, r0
 8002854:	0763      	lsls	r3, r4, #29
 8002856:	d009      	beq.n	800286c <__aeabi_dsub+0x120>
 8002858:	230f      	movs	r3, #15
 800285a:	4023      	ands	r3, r4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d005      	beq.n	800286c <__aeabi_dsub+0x120>
 8002860:	1d23      	adds	r3, r4, #4
 8002862:	42a3      	cmp	r3, r4
 8002864:	41a4      	sbcs	r4, r4
 8002866:	4264      	negs	r4, r4
 8002868:	44a0      	add	r8, r4
 800286a:	001c      	movs	r4, r3
 800286c:	4643      	mov	r3, r8
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	d400      	bmi.n	8002874 <__aeabi_dsub+0x128>
 8002872:	e0df      	b.n	8002a34 <__aeabi_dsub+0x2e8>
 8002874:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <__aeabi_dsub+0x334>)
 8002876:	3601      	adds	r6, #1
 8002878:	429e      	cmp	r6, r3
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x132>
 800287c:	e0fb      	b.n	8002a76 <__aeabi_dsub+0x32a>
 800287e:	4642      	mov	r2, r8
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <__aeabi_dsub+0x338>)
 8002882:	08e4      	lsrs	r4, r4, #3
 8002884:	401a      	ands	r2, r3
 8002886:	0013      	movs	r3, r2
 8002888:	0571      	lsls	r1, r6, #21
 800288a:	0752      	lsls	r2, r2, #29
 800288c:	025b      	lsls	r3, r3, #9
 800288e:	4322      	orrs	r2, r4
 8002890:	0b1b      	lsrs	r3, r3, #12
 8002892:	0d49      	lsrs	r1, r1, #21
 8002894:	0509      	lsls	r1, r1, #20
 8002896:	07ed      	lsls	r5, r5, #31
 8002898:	4319      	orrs	r1, r3
 800289a:	4329      	orrs	r1, r5
 800289c:	0010      	movs	r0, r2
 800289e:	bcf0      	pop	{r4, r5, r6, r7}
 80028a0:	46bb      	mov	fp, r7
 80028a2:	46b2      	mov	sl, r6
 80028a4:	46a9      	mov	r9, r5
 80028a6:	46a0      	mov	r8, r4
 80028a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dd58      	ble.n	8002964 <__aeabi_dsub+0x218>
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x16c>
 80028b6:	e09e      	b.n	80029f6 <__aeabi_dsub+0x2aa>
 80028b8:	4a71      	ldr	r2, [pc, #452]	; (8002a80 <__aeabi_dsub+0x334>)
 80028ba:	4296      	cmp	r6, r2
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x174>
 80028be:	e13b      	b.n	8002b38 <__aeabi_dsub+0x3ec>
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0412      	lsls	r2, r2, #16
 80028c4:	4311      	orrs	r1, r2
 80028c6:	4662      	mov	r2, ip
 80028c8:	2a38      	cmp	r2, #56	; 0x38
 80028ca:	dd00      	ble.n	80028ce <__aeabi_dsub+0x182>
 80028cc:	e0c1      	b.n	8002a52 <__aeabi_dsub+0x306>
 80028ce:	2a1f      	cmp	r2, #31
 80028d0:	dc00      	bgt.n	80028d4 <__aeabi_dsub+0x188>
 80028d2:	e1bb      	b.n	8002c4c <__aeabi_dsub+0x500>
 80028d4:	000c      	movs	r4, r1
 80028d6:	3a20      	subs	r2, #32
 80028d8:	40d4      	lsrs	r4, r2
 80028da:	0022      	movs	r2, r4
 80028dc:	4664      	mov	r4, ip
 80028de:	2c20      	cmp	r4, #32
 80028e0:	d004      	beq.n	80028ec <__aeabi_dsub+0x1a0>
 80028e2:	2740      	movs	r7, #64	; 0x40
 80028e4:	1b3f      	subs	r7, r7, r4
 80028e6:	40b9      	lsls	r1, r7
 80028e8:	4308      	orrs	r0, r1
 80028ea:	4680      	mov	r8, r0
 80028ec:	4644      	mov	r4, r8
 80028ee:	1e61      	subs	r1, r4, #1
 80028f0:	418c      	sbcs	r4, r1
 80028f2:	4314      	orrs	r4, r2
 80028f4:	e0b1      	b.n	8002a5a <__aeabi_dsub+0x30e>
 80028f6:	000c      	movs	r4, r1
 80028f8:	4304      	orrs	r4, r0
 80028fa:	d02a      	beq.n	8002952 <__aeabi_dsub+0x206>
 80028fc:	46bb      	mov	fp, r7
 80028fe:	42bd      	cmp	r5, r7
 8002900:	d02d      	beq.n	800295e <__aeabi_dsub+0x212>
 8002902:	4c61      	ldr	r4, [pc, #388]	; (8002a88 <__aeabi_dsub+0x33c>)
 8002904:	46a4      	mov	ip, r4
 8002906:	44b4      	add	ip, r6
 8002908:	4664      	mov	r4, ip
 800290a:	2c00      	cmp	r4, #0
 800290c:	d05c      	beq.n	80029c8 <__aeabi_dsub+0x27c>
 800290e:	1b94      	subs	r4, r2, r6
 8002910:	46a4      	mov	ip, r4
 8002912:	2e00      	cmp	r6, #0
 8002914:	d000      	beq.n	8002918 <__aeabi_dsub+0x1cc>
 8002916:	e115      	b.n	8002b44 <__aeabi_dsub+0x3f8>
 8002918:	464d      	mov	r5, r9
 800291a:	431d      	orrs	r5, r3
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x1d4>
 800291e:	e1c3      	b.n	8002ca8 <__aeabi_dsub+0x55c>
 8002920:	1e65      	subs	r5, r4, #1
 8002922:	2c01      	cmp	r4, #1
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x1dc>
 8002926:	e20c      	b.n	8002d42 <__aeabi_dsub+0x5f6>
 8002928:	4e55      	ldr	r6, [pc, #340]	; (8002a80 <__aeabi_dsub+0x334>)
 800292a:	42b4      	cmp	r4, r6
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x1e4>
 800292e:	e1f8      	b.n	8002d22 <__aeabi_dsub+0x5d6>
 8002930:	46ac      	mov	ip, r5
 8002932:	e10e      	b.n	8002b52 <__aeabi_dsub+0x406>
 8002934:	000a      	movs	r2, r1
 8002936:	4302      	orrs	r2, r0
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x1f0>
 800293a:	e136      	b.n	8002baa <__aeabi_dsub+0x45e>
 800293c:	0022      	movs	r2, r4
 800293e:	3a01      	subs	r2, #1
 8002940:	2c01      	cmp	r4, #1
 8002942:	d100      	bne.n	8002946 <__aeabi_dsub+0x1fa>
 8002944:	e1c6      	b.n	8002cd4 <__aeabi_dsub+0x588>
 8002946:	4c4e      	ldr	r4, [pc, #312]	; (8002a80 <__aeabi_dsub+0x334>)
 8002948:	45a4      	cmp	ip, r4
 800294a:	d100      	bne.n	800294e <__aeabi_dsub+0x202>
 800294c:	e0f4      	b.n	8002b38 <__aeabi_dsub+0x3ec>
 800294e:	4694      	mov	ip, r2
 8002950:	e731      	b.n	80027b6 <__aeabi_dsub+0x6a>
 8002952:	2401      	movs	r4, #1
 8002954:	4067      	eors	r7, r4
 8002956:	46bb      	mov	fp, r7
 8002958:	42bd      	cmp	r5, r7
 800295a:	d000      	beq.n	800295e <__aeabi_dsub+0x212>
 800295c:	e71c      	b.n	8002798 <__aeabi_dsub+0x4c>
 800295e:	4c4a      	ldr	r4, [pc, #296]	; (8002a88 <__aeabi_dsub+0x33c>)
 8002960:	46a4      	mov	ip, r4
 8002962:	44b4      	add	ip, r6
 8002964:	4664      	mov	r4, ip
 8002966:	2c00      	cmp	r4, #0
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x220>
 800296a:	e0cf      	b.n	8002b0c <__aeabi_dsub+0x3c0>
 800296c:	1b94      	subs	r4, r2, r6
 800296e:	46a4      	mov	ip, r4
 8002970:	2e00      	cmp	r6, #0
 8002972:	d100      	bne.n	8002976 <__aeabi_dsub+0x22a>
 8002974:	e15c      	b.n	8002c30 <__aeabi_dsub+0x4e4>
 8002976:	4e42      	ldr	r6, [pc, #264]	; (8002a80 <__aeabi_dsub+0x334>)
 8002978:	42b2      	cmp	r2, r6
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x232>
 800297c:	e1ec      	b.n	8002d58 <__aeabi_dsub+0x60c>
 800297e:	2680      	movs	r6, #128	; 0x80
 8002980:	0436      	lsls	r6, r6, #16
 8002982:	4333      	orrs	r3, r6
 8002984:	4664      	mov	r4, ip
 8002986:	2c38      	cmp	r4, #56	; 0x38
 8002988:	dd00      	ble.n	800298c <__aeabi_dsub+0x240>
 800298a:	e1b3      	b.n	8002cf4 <__aeabi_dsub+0x5a8>
 800298c:	2c1f      	cmp	r4, #31
 800298e:	dd00      	ble.n	8002992 <__aeabi_dsub+0x246>
 8002990:	e238      	b.n	8002e04 <__aeabi_dsub+0x6b8>
 8002992:	2620      	movs	r6, #32
 8002994:	1b36      	subs	r6, r6, r4
 8002996:	001c      	movs	r4, r3
 8002998:	40b4      	lsls	r4, r6
 800299a:	464f      	mov	r7, r9
 800299c:	46a0      	mov	r8, r4
 800299e:	4664      	mov	r4, ip
 80029a0:	40e7      	lsrs	r7, r4
 80029a2:	4644      	mov	r4, r8
 80029a4:	433c      	orrs	r4, r7
 80029a6:	464f      	mov	r7, r9
 80029a8:	40b7      	lsls	r7, r6
 80029aa:	003e      	movs	r6, r7
 80029ac:	1e77      	subs	r7, r6, #1
 80029ae:	41be      	sbcs	r6, r7
 80029b0:	4334      	orrs	r4, r6
 80029b2:	4666      	mov	r6, ip
 80029b4:	40f3      	lsrs	r3, r6
 80029b6:	18c9      	adds	r1, r1, r3
 80029b8:	1824      	adds	r4, r4, r0
 80029ba:	4284      	cmp	r4, r0
 80029bc:	419b      	sbcs	r3, r3
 80029be:	425b      	negs	r3, r3
 80029c0:	4698      	mov	r8, r3
 80029c2:	0016      	movs	r6, r2
 80029c4:	4488      	add	r8, r1
 80029c6:	e04e      	b.n	8002a66 <__aeabi_dsub+0x31a>
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <__aeabi_dsub+0x340>)
 80029ca:	1c74      	adds	r4, r6, #1
 80029cc:	4214      	tst	r4, r2
 80029ce:	d000      	beq.n	80029d2 <__aeabi_dsub+0x286>
 80029d0:	e0d6      	b.n	8002b80 <__aeabi_dsub+0x434>
 80029d2:	464a      	mov	r2, r9
 80029d4:	431a      	orrs	r2, r3
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	d000      	beq.n	80029dc <__aeabi_dsub+0x290>
 80029da:	e15b      	b.n	8002c94 <__aeabi_dsub+0x548>
 80029dc:	2a00      	cmp	r2, #0
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x296>
 80029e0:	e1a5      	b.n	8002d2e <__aeabi_dsub+0x5e2>
 80029e2:	000a      	movs	r2, r1
 80029e4:	4302      	orrs	r2, r0
 80029e6:	d000      	beq.n	80029ea <__aeabi_dsub+0x29e>
 80029e8:	e1bb      	b.n	8002d62 <__aeabi_dsub+0x616>
 80029ea:	464a      	mov	r2, r9
 80029ec:	0759      	lsls	r1, r3, #29
 80029ee:	08d2      	lsrs	r2, r2, #3
 80029f0:	430a      	orrs	r2, r1
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	e027      	b.n	8002a46 <__aeabi_dsub+0x2fa>
 80029f6:	000a      	movs	r2, r1
 80029f8:	4302      	orrs	r2, r0
 80029fa:	d100      	bne.n	80029fe <__aeabi_dsub+0x2b2>
 80029fc:	e174      	b.n	8002ce8 <__aeabi_dsub+0x59c>
 80029fe:	0022      	movs	r2, r4
 8002a00:	3a01      	subs	r2, #1
 8002a02:	2c01      	cmp	r4, #1
 8002a04:	d005      	beq.n	8002a12 <__aeabi_dsub+0x2c6>
 8002a06:	4c1e      	ldr	r4, [pc, #120]	; (8002a80 <__aeabi_dsub+0x334>)
 8002a08:	45a4      	cmp	ip, r4
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x2c2>
 8002a0c:	e094      	b.n	8002b38 <__aeabi_dsub+0x3ec>
 8002a0e:	4694      	mov	ip, r2
 8002a10:	e759      	b.n	80028c6 <__aeabi_dsub+0x17a>
 8002a12:	4448      	add	r0, r9
 8002a14:	4548      	cmp	r0, r9
 8002a16:	4192      	sbcs	r2, r2
 8002a18:	185b      	adds	r3, r3, r1
 8002a1a:	4698      	mov	r8, r3
 8002a1c:	0004      	movs	r4, r0
 8002a1e:	4252      	negs	r2, r2
 8002a20:	4490      	add	r8, r2
 8002a22:	4643      	mov	r3, r8
 8002a24:	2602      	movs	r6, #2
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	d500      	bpl.n	8002a2c <__aeabi_dsub+0x2e0>
 8002a2a:	e0c4      	b.n	8002bb6 <__aeabi_dsub+0x46a>
 8002a2c:	3e01      	subs	r6, #1
 8002a2e:	0763      	lsls	r3, r4, #29
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x2e8>
 8002a32:	e711      	b.n	8002858 <__aeabi_dsub+0x10c>
 8002a34:	4643      	mov	r3, r8
 8002a36:	46b4      	mov	ip, r6
 8002a38:	0759      	lsls	r1, r3, #29
 8002a3a:	08e2      	lsrs	r2, r4, #3
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	490f      	ldr	r1, [pc, #60]	; (8002a80 <__aeabi_dsub+0x334>)
 8002a42:	458c      	cmp	ip, r1
 8002a44:	d040      	beq.n	8002ac8 <__aeabi_dsub+0x37c>
 8002a46:	4661      	mov	r1, ip
 8002a48:	031b      	lsls	r3, r3, #12
 8002a4a:	0549      	lsls	r1, r1, #21
 8002a4c:	0b1b      	lsrs	r3, r3, #12
 8002a4e:	0d49      	lsrs	r1, r1, #21
 8002a50:	e720      	b.n	8002894 <__aeabi_dsub+0x148>
 8002a52:	4301      	orrs	r1, r0
 8002a54:	000c      	movs	r4, r1
 8002a56:	1e61      	subs	r1, r4, #1
 8002a58:	418c      	sbcs	r4, r1
 8002a5a:	444c      	add	r4, r9
 8002a5c:	454c      	cmp	r4, r9
 8002a5e:	4192      	sbcs	r2, r2
 8002a60:	4252      	negs	r2, r2
 8002a62:	4690      	mov	r8, r2
 8002a64:	4498      	add	r8, r3
 8002a66:	4643      	mov	r3, r8
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	d5e0      	bpl.n	8002a2e <__aeabi_dsub+0x2e2>
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__aeabi_dsub+0x334>)
 8002a6e:	3601      	adds	r6, #1
 8002a70:	429e      	cmp	r6, r3
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x32a>
 8002a74:	e09f      	b.n	8002bb6 <__aeabi_dsub+0x46a>
 8002a76:	0031      	movs	r1, r6
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	e70a      	b.n	8002894 <__aeabi_dsub+0x148>
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	000007ff 	.word	0x000007ff
 8002a84:	ff7fffff 	.word	0xff7fffff
 8002a88:	fffff801 	.word	0xfffff801
 8002a8c:	000007fe 	.word	0x000007fe
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d100      	bne.n	8002a96 <__aeabi_dsub+0x34a>
 8002a94:	e160      	b.n	8002d58 <__aeabi_dsub+0x60c>
 8002a96:	000a      	movs	r2, r1
 8002a98:	4302      	orrs	r2, r0
 8002a9a:	d04d      	beq.n	8002b38 <__aeabi_dsub+0x3ec>
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	075c      	lsls	r4, r3, #29
 8002aa0:	08d2      	lsrs	r2, r2, #3
 8002aa2:	4322      	orrs	r2, r4
 8002aa4:	2480      	movs	r4, #128	; 0x80
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	0324      	lsls	r4, r4, #12
 8002aaa:	4223      	tst	r3, r4
 8002aac:	d007      	beq.n	8002abe <__aeabi_dsub+0x372>
 8002aae:	08ce      	lsrs	r6, r1, #3
 8002ab0:	4226      	tst	r6, r4
 8002ab2:	d104      	bne.n	8002abe <__aeabi_dsub+0x372>
 8002ab4:	465d      	mov	r5, fp
 8002ab6:	0033      	movs	r3, r6
 8002ab8:	08c2      	lsrs	r2, r0, #3
 8002aba:	0749      	lsls	r1, r1, #29
 8002abc:	430a      	orrs	r2, r1
 8002abe:	0f51      	lsrs	r1, r2, #29
 8002ac0:	00d2      	lsls	r2, r2, #3
 8002ac2:	08d2      	lsrs	r2, r2, #3
 8002ac4:	0749      	lsls	r1, r1, #29
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	0011      	movs	r1, r2
 8002aca:	4319      	orrs	r1, r3
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x384>
 8002ace:	e1c8      	b.n	8002e62 <__aeabi_dsub+0x716>
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	0309      	lsls	r1, r1, #12
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	49d5      	ldr	r1, [pc, #852]	; (8002e30 <__aeabi_dsub+0x6e4>)
 8002ada:	0b1b      	lsrs	r3, r3, #12
 8002adc:	e6da      	b.n	8002894 <__aeabi_dsub+0x148>
 8002ade:	49d5      	ldr	r1, [pc, #852]	; (8002e34 <__aeabi_dsub+0x6e8>)
 8002ae0:	1ab6      	subs	r6, r6, r2
 8002ae2:	400b      	ands	r3, r1
 8002ae4:	4698      	mov	r8, r3
 8002ae6:	e6b5      	b.n	8002854 <__aeabi_dsub+0x108>
 8002ae8:	0020      	movs	r0, r4
 8002aea:	f000 fb75 	bl	80031d8 <__clzsi2>
 8002aee:	0002      	movs	r2, r0
 8002af0:	3218      	adds	r2, #24
 8002af2:	2a1f      	cmp	r2, #31
 8002af4:	dc00      	bgt.n	8002af8 <__aeabi_dsub+0x3ac>
 8002af6:	e68f      	b.n	8002818 <__aeabi_dsub+0xcc>
 8002af8:	0023      	movs	r3, r4
 8002afa:	3808      	subs	r0, #8
 8002afc:	4083      	lsls	r3, r0
 8002afe:	2400      	movs	r4, #0
 8002b00:	e692      	b.n	8002828 <__aeabi_dsub+0xdc>
 8002b02:	4308      	orrs	r0, r1
 8002b04:	0002      	movs	r2, r0
 8002b06:	1e50      	subs	r0, r2, #1
 8002b08:	4182      	sbcs	r2, r0
 8002b0a:	e66d      	b.n	80027e8 <__aeabi_dsub+0x9c>
 8002b0c:	4cca      	ldr	r4, [pc, #808]	; (8002e38 <__aeabi_dsub+0x6ec>)
 8002b0e:	1c72      	adds	r2, r6, #1
 8002b10:	4222      	tst	r2, r4
 8002b12:	d000      	beq.n	8002b16 <__aeabi_dsub+0x3ca>
 8002b14:	e0ad      	b.n	8002c72 <__aeabi_dsub+0x526>
 8002b16:	464a      	mov	r2, r9
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	2e00      	cmp	r6, #0
 8002b1c:	d1b8      	bne.n	8002a90 <__aeabi_dsub+0x344>
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	d100      	bne.n	8002b24 <__aeabi_dsub+0x3d8>
 8002b22:	e158      	b.n	8002dd6 <__aeabi_dsub+0x68a>
 8002b24:	000a      	movs	r2, r1
 8002b26:	4302      	orrs	r2, r0
 8002b28:	d000      	beq.n	8002b2c <__aeabi_dsub+0x3e0>
 8002b2a:	e159      	b.n	8002de0 <__aeabi_dsub+0x694>
 8002b2c:	464a      	mov	r2, r9
 8002b2e:	0759      	lsls	r1, r3, #29
 8002b30:	08d2      	lsrs	r2, r2, #3
 8002b32:	430a      	orrs	r2, r1
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	e786      	b.n	8002a46 <__aeabi_dsub+0x2fa>
 8002b38:	464a      	mov	r2, r9
 8002b3a:	0759      	lsls	r1, r3, #29
 8002b3c:	08d2      	lsrs	r2, r2, #3
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	e7c1      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002b44:	4dba      	ldr	r5, [pc, #744]	; (8002e30 <__aeabi_dsub+0x6e4>)
 8002b46:	42aa      	cmp	r2, r5
 8002b48:	d100      	bne.n	8002b4c <__aeabi_dsub+0x400>
 8002b4a:	e11e      	b.n	8002d8a <__aeabi_dsub+0x63e>
 8002b4c:	2580      	movs	r5, #128	; 0x80
 8002b4e:	042d      	lsls	r5, r5, #16
 8002b50:	432b      	orrs	r3, r5
 8002b52:	4664      	mov	r4, ip
 8002b54:	2c38      	cmp	r4, #56	; 0x38
 8002b56:	dc5d      	bgt.n	8002c14 <__aeabi_dsub+0x4c8>
 8002b58:	2c1f      	cmp	r4, #31
 8002b5a:	dd00      	ble.n	8002b5e <__aeabi_dsub+0x412>
 8002b5c:	e0d0      	b.n	8002d00 <__aeabi_dsub+0x5b4>
 8002b5e:	2520      	movs	r5, #32
 8002b60:	4667      	mov	r7, ip
 8002b62:	1b2d      	subs	r5, r5, r4
 8002b64:	464e      	mov	r6, r9
 8002b66:	001c      	movs	r4, r3
 8002b68:	40fe      	lsrs	r6, r7
 8002b6a:	40ac      	lsls	r4, r5
 8002b6c:	4334      	orrs	r4, r6
 8002b6e:	464e      	mov	r6, r9
 8002b70:	40ae      	lsls	r6, r5
 8002b72:	0035      	movs	r5, r6
 8002b74:	40fb      	lsrs	r3, r7
 8002b76:	1e6e      	subs	r6, r5, #1
 8002b78:	41b5      	sbcs	r5, r6
 8002b7a:	1ac9      	subs	r1, r1, r3
 8002b7c:	432c      	orrs	r4, r5
 8002b7e:	e04e      	b.n	8002c1e <__aeabi_dsub+0x4d2>
 8002b80:	464a      	mov	r2, r9
 8002b82:	1a14      	subs	r4, r2, r0
 8002b84:	45a1      	cmp	r9, r4
 8002b86:	4192      	sbcs	r2, r2
 8002b88:	4252      	negs	r2, r2
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	1a5f      	subs	r7, r3, r1
 8002b8e:	003a      	movs	r2, r7
 8002b90:	4647      	mov	r7, r8
 8002b92:	1bd2      	subs	r2, r2, r7
 8002b94:	4690      	mov	r8, r2
 8002b96:	0212      	lsls	r2, r2, #8
 8002b98:	d500      	bpl.n	8002b9c <__aeabi_dsub+0x450>
 8002b9a:	e08b      	b.n	8002cb4 <__aeabi_dsub+0x568>
 8002b9c:	4642      	mov	r2, r8
 8002b9e:	4322      	orrs	r2, r4
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dsub+0x458>
 8002ba2:	e630      	b.n	8002806 <__aeabi_dsub+0xba>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	e74d      	b.n	8002a46 <__aeabi_dsub+0x2fa>
 8002baa:	464a      	mov	r2, r9
 8002bac:	0759      	lsls	r1, r3, #29
 8002bae:	08d2      	lsrs	r2, r2, #3
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	08db      	lsrs	r3, r3, #3
 8002bb4:	e744      	b.n	8002a40 <__aeabi_dsub+0x2f4>
 8002bb6:	4642      	mov	r2, r8
 8002bb8:	4b9e      	ldr	r3, [pc, #632]	; (8002e34 <__aeabi_dsub+0x6e8>)
 8002bba:	0861      	lsrs	r1, r4, #1
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4014      	ands	r4, r2
 8002bc4:	430c      	orrs	r4, r1
 8002bc6:	07da      	lsls	r2, r3, #31
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	4698      	mov	r8, r3
 8002bcc:	4314      	orrs	r4, r2
 8002bce:	e641      	b.n	8002854 <__aeabi_dsub+0x108>
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	3e1f      	subs	r6, #31
 8002bd4:	40f2      	lsrs	r2, r6
 8002bd6:	0016      	movs	r6, r2
 8002bd8:	2920      	cmp	r1, #32
 8002bda:	d003      	beq.n	8002be4 <__aeabi_dsub+0x498>
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	1a51      	subs	r1, r2, r1
 8002be0:	408b      	lsls	r3, r1
 8002be2:	431c      	orrs	r4, r3
 8002be4:	1e62      	subs	r2, r4, #1
 8002be6:	4194      	sbcs	r4, r2
 8002be8:	2300      	movs	r3, #0
 8002bea:	4334      	orrs	r4, r6
 8002bec:	4698      	mov	r8, r3
 8002bee:	2600      	movs	r6, #0
 8002bf0:	e71d      	b.n	8002a2e <__aeabi_dsub+0x2e2>
 8002bf2:	000c      	movs	r4, r1
 8002bf4:	3a20      	subs	r2, #32
 8002bf6:	40d4      	lsrs	r4, r2
 8002bf8:	0022      	movs	r2, r4
 8002bfa:	4664      	mov	r4, ip
 8002bfc:	2c20      	cmp	r4, #32
 8002bfe:	d004      	beq.n	8002c0a <__aeabi_dsub+0x4be>
 8002c00:	2740      	movs	r7, #64	; 0x40
 8002c02:	1b3f      	subs	r7, r7, r4
 8002c04:	40b9      	lsls	r1, r7
 8002c06:	4308      	orrs	r0, r1
 8002c08:	4680      	mov	r8, r0
 8002c0a:	4644      	mov	r4, r8
 8002c0c:	1e61      	subs	r1, r4, #1
 8002c0e:	418c      	sbcs	r4, r1
 8002c10:	4322      	orrs	r2, r4
 8002c12:	e5e9      	b.n	80027e8 <__aeabi_dsub+0x9c>
 8002c14:	464c      	mov	r4, r9
 8002c16:	4323      	orrs	r3, r4
 8002c18:	001c      	movs	r4, r3
 8002c1a:	1e63      	subs	r3, r4, #1
 8002c1c:	419c      	sbcs	r4, r3
 8002c1e:	1b04      	subs	r4, r0, r4
 8002c20:	42a0      	cmp	r0, r4
 8002c22:	419b      	sbcs	r3, r3
 8002c24:	425b      	negs	r3, r3
 8002c26:	1acb      	subs	r3, r1, r3
 8002c28:	4698      	mov	r8, r3
 8002c2a:	465d      	mov	r5, fp
 8002c2c:	0016      	movs	r6, r2
 8002c2e:	e5e2      	b.n	80027f6 <__aeabi_dsub+0xaa>
 8002c30:	464e      	mov	r6, r9
 8002c32:	431e      	orrs	r6, r3
 8002c34:	d100      	bne.n	8002c38 <__aeabi_dsub+0x4ec>
 8002c36:	e0ae      	b.n	8002d96 <__aeabi_dsub+0x64a>
 8002c38:	1e66      	subs	r6, r4, #1
 8002c3a:	2c01      	cmp	r4, #1
 8002c3c:	d100      	bne.n	8002c40 <__aeabi_dsub+0x4f4>
 8002c3e:	e0fd      	b.n	8002e3c <__aeabi_dsub+0x6f0>
 8002c40:	4f7b      	ldr	r7, [pc, #492]	; (8002e30 <__aeabi_dsub+0x6e4>)
 8002c42:	42bc      	cmp	r4, r7
 8002c44:	d100      	bne.n	8002c48 <__aeabi_dsub+0x4fc>
 8002c46:	e107      	b.n	8002e58 <__aeabi_dsub+0x70c>
 8002c48:	46b4      	mov	ip, r6
 8002c4a:	e69b      	b.n	8002984 <__aeabi_dsub+0x238>
 8002c4c:	4664      	mov	r4, ip
 8002c4e:	2220      	movs	r2, #32
 8002c50:	1b12      	subs	r2, r2, r4
 8002c52:	000c      	movs	r4, r1
 8002c54:	4094      	lsls	r4, r2
 8002c56:	0007      	movs	r7, r0
 8002c58:	4090      	lsls	r0, r2
 8002c5a:	46a0      	mov	r8, r4
 8002c5c:	4664      	mov	r4, ip
 8002c5e:	1e42      	subs	r2, r0, #1
 8002c60:	4190      	sbcs	r0, r2
 8002c62:	4662      	mov	r2, ip
 8002c64:	40e7      	lsrs	r7, r4
 8002c66:	4644      	mov	r4, r8
 8002c68:	40d1      	lsrs	r1, r2
 8002c6a:	433c      	orrs	r4, r7
 8002c6c:	4304      	orrs	r4, r0
 8002c6e:	185b      	adds	r3, r3, r1
 8002c70:	e6f3      	b.n	8002a5a <__aeabi_dsub+0x30e>
 8002c72:	4c6f      	ldr	r4, [pc, #444]	; (8002e30 <__aeabi_dsub+0x6e4>)
 8002c74:	42a2      	cmp	r2, r4
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dsub+0x52e>
 8002c78:	e0d5      	b.n	8002e26 <__aeabi_dsub+0x6da>
 8002c7a:	4448      	add	r0, r9
 8002c7c:	185b      	adds	r3, r3, r1
 8002c7e:	4548      	cmp	r0, r9
 8002c80:	4189      	sbcs	r1, r1
 8002c82:	4249      	negs	r1, r1
 8002c84:	185b      	adds	r3, r3, r1
 8002c86:	07dc      	lsls	r4, r3, #31
 8002c88:	0840      	lsrs	r0, r0, #1
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	4698      	mov	r8, r3
 8002c8e:	0016      	movs	r6, r2
 8002c90:	4304      	orrs	r4, r0
 8002c92:	e6cc      	b.n	8002a2e <__aeabi_dsub+0x2e2>
 8002c94:	2a00      	cmp	r2, #0
 8002c96:	d000      	beq.n	8002c9a <__aeabi_dsub+0x54e>
 8002c98:	e082      	b.n	8002da0 <__aeabi_dsub+0x654>
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	4302      	orrs	r2, r0
 8002c9e:	d140      	bne.n	8002d22 <__aeabi_dsub+0x5d6>
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	2500      	movs	r5, #0
 8002ca4:	031b      	lsls	r3, r3, #12
 8002ca6:	e713      	b.n	8002ad0 <__aeabi_dsub+0x384>
 8002ca8:	074b      	lsls	r3, r1, #29
 8002caa:	08c2      	lsrs	r2, r0, #3
 8002cac:	431a      	orrs	r2, r3
 8002cae:	465d      	mov	r5, fp
 8002cb0:	08cb      	lsrs	r3, r1, #3
 8002cb2:	e6c5      	b.n	8002a40 <__aeabi_dsub+0x2f4>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a84      	subs	r4, r0, r2
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	4192      	sbcs	r2, r2
 8002cbc:	1acb      	subs	r3, r1, r3
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	465d      	mov	r5, fp
 8002cc6:	e59e      	b.n	8002806 <__aeabi_dsub+0xba>
 8002cc8:	464a      	mov	r2, r9
 8002cca:	0759      	lsls	r1, r3, #29
 8002ccc:	08d2      	lsrs	r2, r2, #3
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	08db      	lsrs	r3, r3, #3
 8002cd2:	e6f9      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002cd4:	464a      	mov	r2, r9
 8002cd6:	1a14      	subs	r4, r2, r0
 8002cd8:	45a1      	cmp	r9, r4
 8002cda:	4192      	sbcs	r2, r2
 8002cdc:	1a5b      	subs	r3, r3, r1
 8002cde:	4252      	negs	r2, r2
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	2601      	movs	r6, #1
 8002ce6:	e586      	b.n	80027f6 <__aeabi_dsub+0xaa>
 8002ce8:	464a      	mov	r2, r9
 8002cea:	0759      	lsls	r1, r3, #29
 8002cec:	08d2      	lsrs	r2, r2, #3
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	e6a5      	b.n	8002a40 <__aeabi_dsub+0x2f4>
 8002cf4:	464c      	mov	r4, r9
 8002cf6:	4323      	orrs	r3, r4
 8002cf8:	001c      	movs	r4, r3
 8002cfa:	1e63      	subs	r3, r4, #1
 8002cfc:	419c      	sbcs	r4, r3
 8002cfe:	e65b      	b.n	80029b8 <__aeabi_dsub+0x26c>
 8002d00:	4665      	mov	r5, ip
 8002d02:	001e      	movs	r6, r3
 8002d04:	3d20      	subs	r5, #32
 8002d06:	40ee      	lsrs	r6, r5
 8002d08:	2c20      	cmp	r4, #32
 8002d0a:	d005      	beq.n	8002d18 <__aeabi_dsub+0x5cc>
 8002d0c:	2540      	movs	r5, #64	; 0x40
 8002d0e:	1b2d      	subs	r5, r5, r4
 8002d10:	40ab      	lsls	r3, r5
 8002d12:	464c      	mov	r4, r9
 8002d14:	431c      	orrs	r4, r3
 8002d16:	46a2      	mov	sl, r4
 8002d18:	4654      	mov	r4, sl
 8002d1a:	1e63      	subs	r3, r4, #1
 8002d1c:	419c      	sbcs	r4, r3
 8002d1e:	4334      	orrs	r4, r6
 8002d20:	e77d      	b.n	8002c1e <__aeabi_dsub+0x4d2>
 8002d22:	074b      	lsls	r3, r1, #29
 8002d24:	08c2      	lsrs	r2, r0, #3
 8002d26:	431a      	orrs	r2, r3
 8002d28:	465d      	mov	r5, fp
 8002d2a:	08cb      	lsrs	r3, r1, #3
 8002d2c:	e6cc      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002d2e:	000a      	movs	r2, r1
 8002d30:	4302      	orrs	r2, r0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x5ea>
 8002d34:	e736      	b.n	8002ba4 <__aeabi_dsub+0x458>
 8002d36:	074b      	lsls	r3, r1, #29
 8002d38:	08c2      	lsrs	r2, r0, #3
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	465d      	mov	r5, fp
 8002d3e:	08cb      	lsrs	r3, r1, #3
 8002d40:	e681      	b.n	8002a46 <__aeabi_dsub+0x2fa>
 8002d42:	464a      	mov	r2, r9
 8002d44:	1a84      	subs	r4, r0, r2
 8002d46:	42a0      	cmp	r0, r4
 8002d48:	4192      	sbcs	r2, r2
 8002d4a:	1acb      	subs	r3, r1, r3
 8002d4c:	4252      	negs	r2, r2
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	4698      	mov	r8, r3
 8002d52:	465d      	mov	r5, fp
 8002d54:	2601      	movs	r6, #1
 8002d56:	e54e      	b.n	80027f6 <__aeabi_dsub+0xaa>
 8002d58:	074b      	lsls	r3, r1, #29
 8002d5a:	08c2      	lsrs	r2, r0, #3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	08cb      	lsrs	r3, r1, #3
 8002d60:	e6b2      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002d62:	464a      	mov	r2, r9
 8002d64:	1a14      	subs	r4, r2, r0
 8002d66:	45a1      	cmp	r9, r4
 8002d68:	4192      	sbcs	r2, r2
 8002d6a:	1a5f      	subs	r7, r3, r1
 8002d6c:	4252      	negs	r2, r2
 8002d6e:	1aba      	subs	r2, r7, r2
 8002d70:	4690      	mov	r8, r2
 8002d72:	0212      	lsls	r2, r2, #8
 8002d74:	d56b      	bpl.n	8002e4e <__aeabi_dsub+0x702>
 8002d76:	464a      	mov	r2, r9
 8002d78:	1a84      	subs	r4, r0, r2
 8002d7a:	42a0      	cmp	r0, r4
 8002d7c:	4192      	sbcs	r2, r2
 8002d7e:	1acb      	subs	r3, r1, r3
 8002d80:	4252      	negs	r2, r2
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	4698      	mov	r8, r3
 8002d86:	465d      	mov	r5, fp
 8002d88:	e564      	b.n	8002854 <__aeabi_dsub+0x108>
 8002d8a:	074b      	lsls	r3, r1, #29
 8002d8c:	08c2      	lsrs	r2, r0, #3
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	465d      	mov	r5, fp
 8002d92:	08cb      	lsrs	r3, r1, #3
 8002d94:	e698      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002d96:	074b      	lsls	r3, r1, #29
 8002d98:	08c2      	lsrs	r2, r0, #3
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	08cb      	lsrs	r3, r1, #3
 8002d9e:	e64f      	b.n	8002a40 <__aeabi_dsub+0x2f4>
 8002da0:	000a      	movs	r2, r1
 8002da2:	4302      	orrs	r2, r0
 8002da4:	d090      	beq.n	8002cc8 <__aeabi_dsub+0x57c>
 8002da6:	464a      	mov	r2, r9
 8002da8:	075c      	lsls	r4, r3, #29
 8002daa:	08d2      	lsrs	r2, r2, #3
 8002dac:	4314      	orrs	r4, r2
 8002dae:	2280      	movs	r2, #128	; 0x80
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	0312      	lsls	r2, r2, #12
 8002db4:	4213      	tst	r3, r2
 8002db6:	d008      	beq.n	8002dca <__aeabi_dsub+0x67e>
 8002db8:	08ce      	lsrs	r6, r1, #3
 8002dba:	4216      	tst	r6, r2
 8002dbc:	d105      	bne.n	8002dca <__aeabi_dsub+0x67e>
 8002dbe:	08c0      	lsrs	r0, r0, #3
 8002dc0:	0749      	lsls	r1, r1, #29
 8002dc2:	4308      	orrs	r0, r1
 8002dc4:	0004      	movs	r4, r0
 8002dc6:	465d      	mov	r5, fp
 8002dc8:	0033      	movs	r3, r6
 8002dca:	0f61      	lsrs	r1, r4, #29
 8002dcc:	00e2      	lsls	r2, r4, #3
 8002dce:	0749      	lsls	r1, r1, #29
 8002dd0:	08d2      	lsrs	r2, r2, #3
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	e678      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002dd6:	074b      	lsls	r3, r1, #29
 8002dd8:	08c2      	lsrs	r2, r0, #3
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	08cb      	lsrs	r3, r1, #3
 8002dde:	e632      	b.n	8002a46 <__aeabi_dsub+0x2fa>
 8002de0:	4448      	add	r0, r9
 8002de2:	185b      	adds	r3, r3, r1
 8002de4:	4548      	cmp	r0, r9
 8002de6:	4192      	sbcs	r2, r2
 8002de8:	4698      	mov	r8, r3
 8002dea:	4252      	negs	r2, r2
 8002dec:	4490      	add	r8, r2
 8002dee:	4643      	mov	r3, r8
 8002df0:	0004      	movs	r4, r0
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	d400      	bmi.n	8002df8 <__aeabi_dsub+0x6ac>
 8002df6:	e61a      	b.n	8002a2e <__aeabi_dsub+0x2e2>
 8002df8:	4642      	mov	r2, r8
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <__aeabi_dsub+0x6e8>)
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	401a      	ands	r2, r3
 8002e00:	4690      	mov	r8, r2
 8002e02:	e614      	b.n	8002a2e <__aeabi_dsub+0x2e2>
 8002e04:	4666      	mov	r6, ip
 8002e06:	001f      	movs	r7, r3
 8002e08:	3e20      	subs	r6, #32
 8002e0a:	40f7      	lsrs	r7, r6
 8002e0c:	2c20      	cmp	r4, #32
 8002e0e:	d005      	beq.n	8002e1c <__aeabi_dsub+0x6d0>
 8002e10:	2640      	movs	r6, #64	; 0x40
 8002e12:	1b36      	subs	r6, r6, r4
 8002e14:	40b3      	lsls	r3, r6
 8002e16:	464c      	mov	r4, r9
 8002e18:	431c      	orrs	r4, r3
 8002e1a:	46a2      	mov	sl, r4
 8002e1c:	4654      	mov	r4, sl
 8002e1e:	1e63      	subs	r3, r4, #1
 8002e20:	419c      	sbcs	r4, r3
 8002e22:	433c      	orrs	r4, r7
 8002e24:	e5c8      	b.n	80029b8 <__aeabi_dsub+0x26c>
 8002e26:	0011      	movs	r1, r2
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	e532      	b.n	8002894 <__aeabi_dsub+0x148>
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	000007ff 	.word	0x000007ff
 8002e34:	ff7fffff 	.word	0xff7fffff
 8002e38:	000007fe 	.word	0x000007fe
 8002e3c:	464a      	mov	r2, r9
 8002e3e:	1814      	adds	r4, r2, r0
 8002e40:	4284      	cmp	r4, r0
 8002e42:	4192      	sbcs	r2, r2
 8002e44:	185b      	adds	r3, r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4252      	negs	r2, r2
 8002e4a:	4490      	add	r8, r2
 8002e4c:	e5e9      	b.n	8002a22 <__aeabi_dsub+0x2d6>
 8002e4e:	4642      	mov	r2, r8
 8002e50:	4322      	orrs	r2, r4
 8002e52:	d100      	bne.n	8002e56 <__aeabi_dsub+0x70a>
 8002e54:	e6a6      	b.n	8002ba4 <__aeabi_dsub+0x458>
 8002e56:	e5ea      	b.n	8002a2e <__aeabi_dsub+0x2e2>
 8002e58:	074b      	lsls	r3, r1, #29
 8002e5a:	08c2      	lsrs	r2, r0, #3
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	08cb      	lsrs	r3, r1, #3
 8002e60:	e632      	b.n	8002ac8 <__aeabi_dsub+0x37c>
 8002e62:	2200      	movs	r2, #0
 8002e64:	4901      	ldr	r1, [pc, #4]	; (8002e6c <__aeabi_dsub+0x720>)
 8002e66:	0013      	movs	r3, r2
 8002e68:	e514      	b.n	8002894 <__aeabi_dsub+0x148>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	000007ff 	.word	0x000007ff

08002e70 <__aeabi_dcmpun>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	0005      	movs	r5, r0
 8002e74:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <__aeabi_dcmpun+0x38>)
 8002e76:	030c      	lsls	r4, r1, #12
 8002e78:	0016      	movs	r6, r2
 8002e7a:	0049      	lsls	r1, r1, #1
 8002e7c:	031a      	lsls	r2, r3, #12
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	0b24      	lsrs	r4, r4, #12
 8002e82:	0d49      	lsrs	r1, r1, #21
 8002e84:	0b12      	lsrs	r2, r2, #12
 8002e86:	0d5b      	lsrs	r3, r3, #21
 8002e88:	4281      	cmp	r1, r0
 8002e8a:	d008      	beq.n	8002e9e <__aeabi_dcmpun+0x2e>
 8002e8c:	4906      	ldr	r1, [pc, #24]	; (8002ea8 <__aeabi_dcmpun+0x38>)
 8002e8e:	2000      	movs	r0, #0
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d103      	bne.n	8002e9c <__aeabi_dcmpun+0x2c>
 8002e94:	4332      	orrs	r2, r6
 8002e96:	0010      	movs	r0, r2
 8002e98:	1e42      	subs	r2, r0, #1
 8002e9a:	4190      	sbcs	r0, r2
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	432c      	orrs	r4, r5
 8002ea2:	d1fb      	bne.n	8002e9c <__aeabi_dcmpun+0x2c>
 8002ea4:	e7f2      	b.n	8002e8c <__aeabi_dcmpun+0x1c>
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	000007ff 	.word	0x000007ff

08002eac <__aeabi_d2iz>:
 8002eac:	000a      	movs	r2, r1
 8002eae:	b530      	push	{r4, r5, lr}
 8002eb0:	4c13      	ldr	r4, [pc, #76]	; (8002f00 <__aeabi_d2iz+0x54>)
 8002eb2:	0053      	lsls	r3, r2, #1
 8002eb4:	0309      	lsls	r1, r1, #12
 8002eb6:	0005      	movs	r5, r0
 8002eb8:	0b09      	lsrs	r1, r1, #12
 8002eba:	2000      	movs	r0, #0
 8002ebc:	0d5b      	lsrs	r3, r3, #21
 8002ebe:	0fd2      	lsrs	r2, r2, #31
 8002ec0:	42a3      	cmp	r3, r4
 8002ec2:	dd04      	ble.n	8002ece <__aeabi_d2iz+0x22>
 8002ec4:	480f      	ldr	r0, [pc, #60]	; (8002f04 <__aeabi_d2iz+0x58>)
 8002ec6:	4283      	cmp	r3, r0
 8002ec8:	dd02      	ble.n	8002ed0 <__aeabi_d2iz+0x24>
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <__aeabi_d2iz+0x5c>)
 8002ecc:	18d0      	adds	r0, r2, r3
 8002ece:	bd30      	pop	{r4, r5, pc}
 8002ed0:	2080      	movs	r0, #128	; 0x80
 8002ed2:	0340      	lsls	r0, r0, #13
 8002ed4:	4301      	orrs	r1, r0
 8002ed6:	480d      	ldr	r0, [pc, #52]	; (8002f0c <__aeabi_d2iz+0x60>)
 8002ed8:	1ac0      	subs	r0, r0, r3
 8002eda:	281f      	cmp	r0, #31
 8002edc:	dd08      	ble.n	8002ef0 <__aeabi_d2iz+0x44>
 8002ede:	480c      	ldr	r0, [pc, #48]	; (8002f10 <__aeabi_d2iz+0x64>)
 8002ee0:	1ac3      	subs	r3, r0, r3
 8002ee2:	40d9      	lsrs	r1, r3
 8002ee4:	000b      	movs	r3, r1
 8002ee6:	4258      	negs	r0, r3
 8002ee8:	2a00      	cmp	r2, #0
 8002eea:	d1f0      	bne.n	8002ece <__aeabi_d2iz+0x22>
 8002eec:	0018      	movs	r0, r3
 8002eee:	e7ee      	b.n	8002ece <__aeabi_d2iz+0x22>
 8002ef0:	4c08      	ldr	r4, [pc, #32]	; (8002f14 <__aeabi_d2iz+0x68>)
 8002ef2:	40c5      	lsrs	r5, r0
 8002ef4:	46a4      	mov	ip, r4
 8002ef6:	4463      	add	r3, ip
 8002ef8:	4099      	lsls	r1, r3
 8002efa:	000b      	movs	r3, r1
 8002efc:	432b      	orrs	r3, r5
 8002efe:	e7f2      	b.n	8002ee6 <__aeabi_d2iz+0x3a>
 8002f00:	000003fe 	.word	0x000003fe
 8002f04:	0000041d 	.word	0x0000041d
 8002f08:	7fffffff 	.word	0x7fffffff
 8002f0c:	00000433 	.word	0x00000433
 8002f10:	00000413 	.word	0x00000413
 8002f14:	fffffbed 	.word	0xfffffbed

08002f18 <__aeabi_i2d>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d016      	beq.n	8002f4c <__aeabi_i2d+0x34>
 8002f1e:	17c3      	asrs	r3, r0, #31
 8002f20:	18c5      	adds	r5, r0, r3
 8002f22:	405d      	eors	r5, r3
 8002f24:	0fc4      	lsrs	r4, r0, #31
 8002f26:	0028      	movs	r0, r5
 8002f28:	f000 f956 	bl	80031d8 <__clzsi2>
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <__aeabi_i2d+0x5c>)
 8002f2e:	1a12      	subs	r2, r2, r0
 8002f30:	280a      	cmp	r0, #10
 8002f32:	dc16      	bgt.n	8002f62 <__aeabi_i2d+0x4a>
 8002f34:	0003      	movs	r3, r0
 8002f36:	002e      	movs	r6, r5
 8002f38:	3315      	adds	r3, #21
 8002f3a:	409e      	lsls	r6, r3
 8002f3c:	230b      	movs	r3, #11
 8002f3e:	1a18      	subs	r0, r3, r0
 8002f40:	40c5      	lsrs	r5, r0
 8002f42:	0553      	lsls	r3, r2, #21
 8002f44:	032d      	lsls	r5, r5, #12
 8002f46:	0b2d      	lsrs	r5, r5, #12
 8002f48:	0d5b      	lsrs	r3, r3, #21
 8002f4a:	e003      	b.n	8002f54 <__aeabi_i2d+0x3c>
 8002f4c:	2400      	movs	r4, #0
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2500      	movs	r5, #0
 8002f52:	2600      	movs	r6, #0
 8002f54:	051b      	lsls	r3, r3, #20
 8002f56:	432b      	orrs	r3, r5
 8002f58:	07e4      	lsls	r4, r4, #31
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	0030      	movs	r0, r6
 8002f5e:	0019      	movs	r1, r3
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
 8002f62:	380b      	subs	r0, #11
 8002f64:	4085      	lsls	r5, r0
 8002f66:	0553      	lsls	r3, r2, #21
 8002f68:	032d      	lsls	r5, r5, #12
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	0b2d      	lsrs	r5, r5, #12
 8002f6e:	0d5b      	lsrs	r3, r3, #21
 8002f70:	e7f0      	b.n	8002f54 <__aeabi_i2d+0x3c>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	0000041e 	.word	0x0000041e

08002f78 <__aeabi_ui2d>:
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	1e04      	subs	r4, r0, #0
 8002f7c:	d010      	beq.n	8002fa0 <__aeabi_ui2d+0x28>
 8002f7e:	f000 f92b 	bl	80031d8 <__clzsi2>
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <__aeabi_ui2d+0x48>)
 8002f84:	1a1b      	subs	r3, r3, r0
 8002f86:	280a      	cmp	r0, #10
 8002f88:	dc11      	bgt.n	8002fae <__aeabi_ui2d+0x36>
 8002f8a:	220b      	movs	r2, #11
 8002f8c:	0021      	movs	r1, r4
 8002f8e:	1a12      	subs	r2, r2, r0
 8002f90:	40d1      	lsrs	r1, r2
 8002f92:	3015      	adds	r0, #21
 8002f94:	030a      	lsls	r2, r1, #12
 8002f96:	055b      	lsls	r3, r3, #21
 8002f98:	4084      	lsls	r4, r0
 8002f9a:	0b12      	lsrs	r2, r2, #12
 8002f9c:	0d5b      	lsrs	r3, r3, #21
 8002f9e:	e001      	b.n	8002fa4 <__aeabi_ui2d+0x2c>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	051b      	lsls	r3, r3, #20
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	0020      	movs	r0, r4
 8002faa:	0019      	movs	r1, r3
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	0022      	movs	r2, r4
 8002fb0:	380b      	subs	r0, #11
 8002fb2:	4082      	lsls	r2, r0
 8002fb4:	055b      	lsls	r3, r3, #21
 8002fb6:	0312      	lsls	r2, r2, #12
 8002fb8:	2400      	movs	r4, #0
 8002fba:	0b12      	lsrs	r2, r2, #12
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	e7f1      	b.n	8002fa4 <__aeabi_ui2d+0x2c>
 8002fc0:	0000041e 	.word	0x0000041e

08002fc4 <__aeabi_f2d>:
 8002fc4:	b570      	push	{r4, r5, r6, lr}
 8002fc6:	0043      	lsls	r3, r0, #1
 8002fc8:	0246      	lsls	r6, r0, #9
 8002fca:	0fc4      	lsrs	r4, r0, #31
 8002fcc:	20fe      	movs	r0, #254	; 0xfe
 8002fce:	0e1b      	lsrs	r3, r3, #24
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	0a75      	lsrs	r5, r6, #9
 8002fd4:	4208      	tst	r0, r1
 8002fd6:	d00c      	beq.n	8002ff2 <__aeabi_f2d+0x2e>
 8002fd8:	22e0      	movs	r2, #224	; 0xe0
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4694      	mov	ip, r2
 8002fde:	076d      	lsls	r5, r5, #29
 8002fe0:	0b36      	lsrs	r6, r6, #12
 8002fe2:	4463      	add	r3, ip
 8002fe4:	051b      	lsls	r3, r3, #20
 8002fe6:	4333      	orrs	r3, r6
 8002fe8:	07e4      	lsls	r4, r4, #31
 8002fea:	4323      	orrs	r3, r4
 8002fec:	0028      	movs	r0, r5
 8002fee:	0019      	movs	r1, r3
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d114      	bne.n	8003020 <__aeabi_f2d+0x5c>
 8002ff6:	2d00      	cmp	r5, #0
 8002ff8:	d01b      	beq.n	8003032 <__aeabi_f2d+0x6e>
 8002ffa:	0028      	movs	r0, r5
 8002ffc:	f000 f8ec 	bl	80031d8 <__clzsi2>
 8003000:	280a      	cmp	r0, #10
 8003002:	dc1c      	bgt.n	800303e <__aeabi_f2d+0x7a>
 8003004:	230b      	movs	r3, #11
 8003006:	002a      	movs	r2, r5
 8003008:	1a1b      	subs	r3, r3, r0
 800300a:	40da      	lsrs	r2, r3
 800300c:	0003      	movs	r3, r0
 800300e:	3315      	adds	r3, #21
 8003010:	409d      	lsls	r5, r3
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <__aeabi_f2d+0x88>)
 8003014:	0312      	lsls	r2, r2, #12
 8003016:	1a1b      	subs	r3, r3, r0
 8003018:	055b      	lsls	r3, r3, #21
 800301a:	0b16      	lsrs	r6, r2, #12
 800301c:	0d5b      	lsrs	r3, r3, #21
 800301e:	e7e1      	b.n	8002fe4 <__aeabi_f2d+0x20>
 8003020:	2d00      	cmp	r5, #0
 8003022:	d009      	beq.n	8003038 <__aeabi_f2d+0x74>
 8003024:	0b32      	lsrs	r2, r6, #12
 8003026:	2680      	movs	r6, #128	; 0x80
 8003028:	0336      	lsls	r6, r6, #12
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <__aeabi_f2d+0x8c>)
 800302c:	076d      	lsls	r5, r5, #29
 800302e:	4316      	orrs	r6, r2
 8003030:	e7d8      	b.n	8002fe4 <__aeabi_f2d+0x20>
 8003032:	2300      	movs	r3, #0
 8003034:	2600      	movs	r6, #0
 8003036:	e7d5      	b.n	8002fe4 <__aeabi_f2d+0x20>
 8003038:	2600      	movs	r6, #0
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <__aeabi_f2d+0x8c>)
 800303c:	e7d2      	b.n	8002fe4 <__aeabi_f2d+0x20>
 800303e:	0003      	movs	r3, r0
 8003040:	002a      	movs	r2, r5
 8003042:	3b0b      	subs	r3, #11
 8003044:	409a      	lsls	r2, r3
 8003046:	2500      	movs	r5, #0
 8003048:	e7e3      	b.n	8003012 <__aeabi_f2d+0x4e>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	00000389 	.word	0x00000389
 8003050:	000007ff 	.word	0x000007ff

08003054 <__aeabi_d2f>:
 8003054:	0002      	movs	r2, r0
 8003056:	004b      	lsls	r3, r1, #1
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	0308      	lsls	r0, r1, #12
 800305c:	0d5b      	lsrs	r3, r3, #21
 800305e:	4e3d      	ldr	r6, [pc, #244]	; (8003154 <__aeabi_d2f+0x100>)
 8003060:	0fcc      	lsrs	r4, r1, #31
 8003062:	0a40      	lsrs	r0, r0, #9
 8003064:	0f51      	lsrs	r1, r2, #29
 8003066:	1c5f      	adds	r7, r3, #1
 8003068:	4308      	orrs	r0, r1
 800306a:	00d5      	lsls	r5, r2, #3
 800306c:	4237      	tst	r7, r6
 800306e:	d00a      	beq.n	8003086 <__aeabi_d2f+0x32>
 8003070:	4939      	ldr	r1, [pc, #228]	; (8003158 <__aeabi_d2f+0x104>)
 8003072:	185e      	adds	r6, r3, r1
 8003074:	2efe      	cmp	r6, #254	; 0xfe
 8003076:	dd16      	ble.n	80030a6 <__aeabi_d2f+0x52>
 8003078:	23ff      	movs	r3, #255	; 0xff
 800307a:	2100      	movs	r1, #0
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	430b      	orrs	r3, r1
 8003080:	07e0      	lsls	r0, r4, #31
 8003082:	4318      	orrs	r0, r3
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <__aeabi_d2f+0x44>
 800308a:	4328      	orrs	r0, r5
 800308c:	d027      	beq.n	80030de <__aeabi_d2f+0x8a>
 800308e:	2105      	movs	r1, #5
 8003090:	0189      	lsls	r1, r1, #6
 8003092:	0a49      	lsrs	r1, r1, #9
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e7f1      	b.n	800307c <__aeabi_d2f+0x28>
 8003098:	4305      	orrs	r5, r0
 800309a:	d0ed      	beq.n	8003078 <__aeabi_d2f+0x24>
 800309c:	2180      	movs	r1, #128	; 0x80
 800309e:	03c9      	lsls	r1, r1, #15
 80030a0:	23ff      	movs	r3, #255	; 0xff
 80030a2:	4301      	orrs	r1, r0
 80030a4:	e7ea      	b.n	800307c <__aeabi_d2f+0x28>
 80030a6:	2e00      	cmp	r6, #0
 80030a8:	dd1c      	ble.n	80030e4 <__aeabi_d2f+0x90>
 80030aa:	0192      	lsls	r2, r2, #6
 80030ac:	0011      	movs	r1, r2
 80030ae:	1e4a      	subs	r2, r1, #1
 80030b0:	4191      	sbcs	r1, r2
 80030b2:	00c0      	lsls	r0, r0, #3
 80030b4:	0f6d      	lsrs	r5, r5, #29
 80030b6:	4301      	orrs	r1, r0
 80030b8:	4329      	orrs	r1, r5
 80030ba:	074b      	lsls	r3, r1, #29
 80030bc:	d048      	beq.n	8003150 <__aeabi_d2f+0xfc>
 80030be:	230f      	movs	r3, #15
 80030c0:	400b      	ands	r3, r1
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d000      	beq.n	80030c8 <__aeabi_d2f+0x74>
 80030c6:	3104      	adds	r1, #4
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	04db      	lsls	r3, r3, #19
 80030cc:	400b      	ands	r3, r1
 80030ce:	d03f      	beq.n	8003150 <__aeabi_d2f+0xfc>
 80030d0:	1c72      	adds	r2, r6, #1
 80030d2:	2efe      	cmp	r6, #254	; 0xfe
 80030d4:	d0d0      	beq.n	8003078 <__aeabi_d2f+0x24>
 80030d6:	0189      	lsls	r1, r1, #6
 80030d8:	0a49      	lsrs	r1, r1, #9
 80030da:	b2d3      	uxtb	r3, r2
 80030dc:	e7ce      	b.n	800307c <__aeabi_d2f+0x28>
 80030de:	2300      	movs	r3, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	e7cb      	b.n	800307c <__aeabi_d2f+0x28>
 80030e4:	0032      	movs	r2, r6
 80030e6:	3217      	adds	r2, #23
 80030e8:	db22      	blt.n	8003130 <__aeabi_d2f+0xdc>
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	221e      	movs	r2, #30
 80030ee:	0409      	lsls	r1, r1, #16
 80030f0:	4308      	orrs	r0, r1
 80030f2:	1b92      	subs	r2, r2, r6
 80030f4:	2a1f      	cmp	r2, #31
 80030f6:	dd1d      	ble.n	8003134 <__aeabi_d2f+0xe0>
 80030f8:	2102      	movs	r1, #2
 80030fa:	4249      	negs	r1, r1
 80030fc:	1b8e      	subs	r6, r1, r6
 80030fe:	0001      	movs	r1, r0
 8003100:	40f1      	lsrs	r1, r6
 8003102:	000e      	movs	r6, r1
 8003104:	2a20      	cmp	r2, #32
 8003106:	d004      	beq.n	8003112 <__aeabi_d2f+0xbe>
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <__aeabi_d2f+0x108>)
 800310a:	4694      	mov	ip, r2
 800310c:	4463      	add	r3, ip
 800310e:	4098      	lsls	r0, r3
 8003110:	4305      	orrs	r5, r0
 8003112:	0029      	movs	r1, r5
 8003114:	1e4d      	subs	r5, r1, #1
 8003116:	41a9      	sbcs	r1, r5
 8003118:	4331      	orrs	r1, r6
 800311a:	2600      	movs	r6, #0
 800311c:	074b      	lsls	r3, r1, #29
 800311e:	d1ce      	bne.n	80030be <__aeabi_d2f+0x6a>
 8003120:	2080      	movs	r0, #128	; 0x80
 8003122:	000b      	movs	r3, r1
 8003124:	04c0      	lsls	r0, r0, #19
 8003126:	2201      	movs	r2, #1
 8003128:	4003      	ands	r3, r0
 800312a:	4201      	tst	r1, r0
 800312c:	d1d3      	bne.n	80030d6 <__aeabi_d2f+0x82>
 800312e:	e7af      	b.n	8003090 <__aeabi_d2f+0x3c>
 8003130:	2300      	movs	r3, #0
 8003132:	e7ac      	b.n	800308e <__aeabi_d2f+0x3a>
 8003134:	490a      	ldr	r1, [pc, #40]	; (8003160 <__aeabi_d2f+0x10c>)
 8003136:	468c      	mov	ip, r1
 8003138:	0029      	movs	r1, r5
 800313a:	4463      	add	r3, ip
 800313c:	40d1      	lsrs	r1, r2
 800313e:	409d      	lsls	r5, r3
 8003140:	000a      	movs	r2, r1
 8003142:	0029      	movs	r1, r5
 8003144:	4098      	lsls	r0, r3
 8003146:	1e4d      	subs	r5, r1, #1
 8003148:	41a9      	sbcs	r1, r5
 800314a:	4301      	orrs	r1, r0
 800314c:	4311      	orrs	r1, r2
 800314e:	e7e4      	b.n	800311a <__aeabi_d2f+0xc6>
 8003150:	0033      	movs	r3, r6
 8003152:	e79d      	b.n	8003090 <__aeabi_d2f+0x3c>
 8003154:	000007fe 	.word	0x000007fe
 8003158:	fffffc80 	.word	0xfffffc80
 800315c:	fffffca2 	.word	0xfffffca2
 8003160:	fffffc82 	.word	0xfffffc82

08003164 <__aeabi_cfrcmple>:
 8003164:	4684      	mov	ip, r0
 8003166:	1c08      	adds	r0, r1, #0
 8003168:	4661      	mov	r1, ip
 800316a:	e7ff      	b.n	800316c <__aeabi_cfcmpeq>

0800316c <__aeabi_cfcmpeq>:
 800316c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800316e:	f000 f8d1 	bl	8003314 <__lesf2>
 8003172:	2800      	cmp	r0, #0
 8003174:	d401      	bmi.n	800317a <__aeabi_cfcmpeq+0xe>
 8003176:	2100      	movs	r1, #0
 8003178:	42c8      	cmn	r0, r1
 800317a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800317c <__aeabi_fcmpeq>:
 800317c:	b510      	push	{r4, lr}
 800317e:	f000 f855 	bl	800322c <__eqsf2>
 8003182:	4240      	negs	r0, r0
 8003184:	3001      	adds	r0, #1
 8003186:	bd10      	pop	{r4, pc}

08003188 <__aeabi_fcmplt>:
 8003188:	b510      	push	{r4, lr}
 800318a:	f000 f8c3 	bl	8003314 <__lesf2>
 800318e:	2800      	cmp	r0, #0
 8003190:	db01      	blt.n	8003196 <__aeabi_fcmplt+0xe>
 8003192:	2000      	movs	r0, #0
 8003194:	bd10      	pop	{r4, pc}
 8003196:	2001      	movs	r0, #1
 8003198:	bd10      	pop	{r4, pc}
 800319a:	46c0      	nop			; (mov r8, r8)

0800319c <__aeabi_fcmple>:
 800319c:	b510      	push	{r4, lr}
 800319e:	f000 f8b9 	bl	8003314 <__lesf2>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	dd01      	ble.n	80031aa <__aeabi_fcmple+0xe>
 80031a6:	2000      	movs	r0, #0
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	2001      	movs	r0, #1
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)

080031b0 <__aeabi_fcmpgt>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	f000 f863 	bl	800327c <__gesf2>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	dc01      	bgt.n	80031be <__aeabi_fcmpgt+0xe>
 80031ba:	2000      	movs	r0, #0
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	2001      	movs	r0, #1
 80031c0:	bd10      	pop	{r4, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)

080031c4 <__aeabi_fcmpge>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	f000 f859 	bl	800327c <__gesf2>
 80031ca:	2800      	cmp	r0, #0
 80031cc:	da01      	bge.n	80031d2 <__aeabi_fcmpge+0xe>
 80031ce:	2000      	movs	r0, #0
 80031d0:	bd10      	pop	{r4, pc}
 80031d2:	2001      	movs	r0, #1
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)

080031d8 <__clzsi2>:
 80031d8:	211c      	movs	r1, #28
 80031da:	2301      	movs	r3, #1
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	4298      	cmp	r0, r3
 80031e0:	d301      	bcc.n	80031e6 <__clzsi2+0xe>
 80031e2:	0c00      	lsrs	r0, r0, #16
 80031e4:	3910      	subs	r1, #16
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	4298      	cmp	r0, r3
 80031ea:	d301      	bcc.n	80031f0 <__clzsi2+0x18>
 80031ec:	0a00      	lsrs	r0, r0, #8
 80031ee:	3908      	subs	r1, #8
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	4298      	cmp	r0, r3
 80031f4:	d301      	bcc.n	80031fa <__clzsi2+0x22>
 80031f6:	0900      	lsrs	r0, r0, #4
 80031f8:	3904      	subs	r1, #4
 80031fa:	a202      	add	r2, pc, #8	; (adr r2, 8003204 <__clzsi2+0x2c>)
 80031fc:	5c10      	ldrb	r0, [r2, r0]
 80031fe:	1840      	adds	r0, r0, r1
 8003200:	4770      	bx	lr
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	02020304 	.word	0x02020304
 8003208:	01010101 	.word	0x01010101
	...

08003214 <__clzdi2>:
 8003214:	b510      	push	{r4, lr}
 8003216:	2900      	cmp	r1, #0
 8003218:	d103      	bne.n	8003222 <__clzdi2+0xe>
 800321a:	f7ff ffdd 	bl	80031d8 <__clzsi2>
 800321e:	3020      	adds	r0, #32
 8003220:	e002      	b.n	8003228 <__clzdi2+0x14>
 8003222:	1c08      	adds	r0, r1, #0
 8003224:	f7ff ffd8 	bl	80031d8 <__clzsi2>
 8003228:	bd10      	pop	{r4, pc}
 800322a:	46c0      	nop			; (mov r8, r8)

0800322c <__eqsf2>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	0042      	lsls	r2, r0, #1
 8003230:	024e      	lsls	r6, r1, #9
 8003232:	004c      	lsls	r4, r1, #1
 8003234:	0245      	lsls	r5, r0, #9
 8003236:	0a6d      	lsrs	r5, r5, #9
 8003238:	0e12      	lsrs	r2, r2, #24
 800323a:	0fc3      	lsrs	r3, r0, #31
 800323c:	0a76      	lsrs	r6, r6, #9
 800323e:	0e24      	lsrs	r4, r4, #24
 8003240:	0fc9      	lsrs	r1, r1, #31
 8003242:	2aff      	cmp	r2, #255	; 0xff
 8003244:	d00f      	beq.n	8003266 <__eqsf2+0x3a>
 8003246:	2cff      	cmp	r4, #255	; 0xff
 8003248:	d011      	beq.n	800326e <__eqsf2+0x42>
 800324a:	2001      	movs	r0, #1
 800324c:	42a2      	cmp	r2, r4
 800324e:	d000      	beq.n	8003252 <__eqsf2+0x26>
 8003250:	bd70      	pop	{r4, r5, r6, pc}
 8003252:	42b5      	cmp	r5, r6
 8003254:	d1fc      	bne.n	8003250 <__eqsf2+0x24>
 8003256:	428b      	cmp	r3, r1
 8003258:	d00d      	beq.n	8003276 <__eqsf2+0x4a>
 800325a:	2a00      	cmp	r2, #0
 800325c:	d1f8      	bne.n	8003250 <__eqsf2+0x24>
 800325e:	0028      	movs	r0, r5
 8003260:	1e45      	subs	r5, r0, #1
 8003262:	41a8      	sbcs	r0, r5
 8003264:	e7f4      	b.n	8003250 <__eqsf2+0x24>
 8003266:	2001      	movs	r0, #1
 8003268:	2d00      	cmp	r5, #0
 800326a:	d1f1      	bne.n	8003250 <__eqsf2+0x24>
 800326c:	e7eb      	b.n	8003246 <__eqsf2+0x1a>
 800326e:	2001      	movs	r0, #1
 8003270:	2e00      	cmp	r6, #0
 8003272:	d1ed      	bne.n	8003250 <__eqsf2+0x24>
 8003274:	e7e9      	b.n	800324a <__eqsf2+0x1e>
 8003276:	2000      	movs	r0, #0
 8003278:	e7ea      	b.n	8003250 <__eqsf2+0x24>
 800327a:	46c0      	nop			; (mov r8, r8)

0800327c <__gesf2>:
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	0042      	lsls	r2, r0, #1
 8003280:	0246      	lsls	r6, r0, #9
 8003282:	024d      	lsls	r5, r1, #9
 8003284:	004c      	lsls	r4, r1, #1
 8003286:	0fc3      	lsrs	r3, r0, #31
 8003288:	0a76      	lsrs	r6, r6, #9
 800328a:	0e12      	lsrs	r2, r2, #24
 800328c:	0a6d      	lsrs	r5, r5, #9
 800328e:	0e24      	lsrs	r4, r4, #24
 8003290:	0fc8      	lsrs	r0, r1, #31
 8003292:	2aff      	cmp	r2, #255	; 0xff
 8003294:	d01f      	beq.n	80032d6 <__gesf2+0x5a>
 8003296:	2cff      	cmp	r4, #255	; 0xff
 8003298:	d010      	beq.n	80032bc <__gesf2+0x40>
 800329a:	2a00      	cmp	r2, #0
 800329c:	d11f      	bne.n	80032de <__gesf2+0x62>
 800329e:	4271      	negs	r1, r6
 80032a0:	4171      	adcs	r1, r6
 80032a2:	2c00      	cmp	r4, #0
 80032a4:	d101      	bne.n	80032aa <__gesf2+0x2e>
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	d01e      	beq.n	80032e8 <__gesf2+0x6c>
 80032aa:	2900      	cmp	r1, #0
 80032ac:	d10e      	bne.n	80032cc <__gesf2+0x50>
 80032ae:	4283      	cmp	r3, r0
 80032b0:	d01e      	beq.n	80032f0 <__gesf2+0x74>
 80032b2:	2102      	movs	r1, #2
 80032b4:	1e58      	subs	r0, r3, #1
 80032b6:	4008      	ands	r0, r1
 80032b8:	3801      	subs	r0, #1
 80032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032bc:	2d00      	cmp	r5, #0
 80032be:	d126      	bne.n	800330e <__gesf2+0x92>
 80032c0:	2a00      	cmp	r2, #0
 80032c2:	d1f4      	bne.n	80032ae <__gesf2+0x32>
 80032c4:	4271      	negs	r1, r6
 80032c6:	4171      	adcs	r1, r6
 80032c8:	2900      	cmp	r1, #0
 80032ca:	d0f0      	beq.n	80032ae <__gesf2+0x32>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d1f4      	bne.n	80032ba <__gesf2+0x3e>
 80032d0:	2001      	movs	r0, #1
 80032d2:	4240      	negs	r0, r0
 80032d4:	e7f1      	b.n	80032ba <__gesf2+0x3e>
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	d119      	bne.n	800330e <__gesf2+0x92>
 80032da:	2cff      	cmp	r4, #255	; 0xff
 80032dc:	d0ee      	beq.n	80032bc <__gesf2+0x40>
 80032de:	2c00      	cmp	r4, #0
 80032e0:	d1e5      	bne.n	80032ae <__gesf2+0x32>
 80032e2:	2d00      	cmp	r5, #0
 80032e4:	d1e3      	bne.n	80032ae <__gesf2+0x32>
 80032e6:	e7e4      	b.n	80032b2 <__gesf2+0x36>
 80032e8:	2000      	movs	r0, #0
 80032ea:	2e00      	cmp	r6, #0
 80032ec:	d0e5      	beq.n	80032ba <__gesf2+0x3e>
 80032ee:	e7e0      	b.n	80032b2 <__gesf2+0x36>
 80032f0:	42a2      	cmp	r2, r4
 80032f2:	dc05      	bgt.n	8003300 <__gesf2+0x84>
 80032f4:	dbea      	blt.n	80032cc <__gesf2+0x50>
 80032f6:	42ae      	cmp	r6, r5
 80032f8:	d802      	bhi.n	8003300 <__gesf2+0x84>
 80032fa:	d3e7      	bcc.n	80032cc <__gesf2+0x50>
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7dc      	b.n	80032ba <__gesf2+0x3e>
 8003300:	4241      	negs	r1, r0
 8003302:	4141      	adcs	r1, r0
 8003304:	4248      	negs	r0, r1
 8003306:	2102      	movs	r1, #2
 8003308:	4008      	ands	r0, r1
 800330a:	3801      	subs	r0, #1
 800330c:	e7d5      	b.n	80032ba <__gesf2+0x3e>
 800330e:	2002      	movs	r0, #2
 8003310:	4240      	negs	r0, r0
 8003312:	e7d2      	b.n	80032ba <__gesf2+0x3e>

08003314 <__lesf2>:
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	0042      	lsls	r2, r0, #1
 8003318:	0246      	lsls	r6, r0, #9
 800331a:	024d      	lsls	r5, r1, #9
 800331c:	004c      	lsls	r4, r1, #1
 800331e:	0fc3      	lsrs	r3, r0, #31
 8003320:	0a76      	lsrs	r6, r6, #9
 8003322:	0e12      	lsrs	r2, r2, #24
 8003324:	0a6d      	lsrs	r5, r5, #9
 8003326:	0e24      	lsrs	r4, r4, #24
 8003328:	0fc8      	lsrs	r0, r1, #31
 800332a:	2aff      	cmp	r2, #255	; 0xff
 800332c:	d00d      	beq.n	800334a <__lesf2+0x36>
 800332e:	2cff      	cmp	r4, #255	; 0xff
 8003330:	d00f      	beq.n	8003352 <__lesf2+0x3e>
 8003332:	2a00      	cmp	r2, #0
 8003334:	d123      	bne.n	800337e <__lesf2+0x6a>
 8003336:	4271      	negs	r1, r6
 8003338:	4171      	adcs	r1, r6
 800333a:	2c00      	cmp	r4, #0
 800333c:	d10f      	bne.n	800335e <__lesf2+0x4a>
 800333e:	2d00      	cmp	r5, #0
 8003340:	d10d      	bne.n	800335e <__lesf2+0x4a>
 8003342:	2000      	movs	r0, #0
 8003344:	2e00      	cmp	r6, #0
 8003346:	d014      	beq.n	8003372 <__lesf2+0x5e>
 8003348:	e00d      	b.n	8003366 <__lesf2+0x52>
 800334a:	2e00      	cmp	r6, #0
 800334c:	d110      	bne.n	8003370 <__lesf2+0x5c>
 800334e:	2cff      	cmp	r4, #255	; 0xff
 8003350:	d115      	bne.n	800337e <__lesf2+0x6a>
 8003352:	2d00      	cmp	r5, #0
 8003354:	d10c      	bne.n	8003370 <__lesf2+0x5c>
 8003356:	2a00      	cmp	r2, #0
 8003358:	d103      	bne.n	8003362 <__lesf2+0x4e>
 800335a:	4271      	negs	r1, r6
 800335c:	4171      	adcs	r1, r6
 800335e:	2900      	cmp	r1, #0
 8003360:	d108      	bne.n	8003374 <__lesf2+0x60>
 8003362:	4283      	cmp	r3, r0
 8003364:	d010      	beq.n	8003388 <__lesf2+0x74>
 8003366:	2102      	movs	r1, #2
 8003368:	1e58      	subs	r0, r3, #1
 800336a:	4008      	ands	r0, r1
 800336c:	3801      	subs	r0, #1
 800336e:	e000      	b.n	8003372 <__lesf2+0x5e>
 8003370:	2002      	movs	r0, #2
 8003372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003374:	2800      	cmp	r0, #0
 8003376:	d1fc      	bne.n	8003372 <__lesf2+0x5e>
 8003378:	2001      	movs	r0, #1
 800337a:	4240      	negs	r0, r0
 800337c:	e7f9      	b.n	8003372 <__lesf2+0x5e>
 800337e:	2c00      	cmp	r4, #0
 8003380:	d1ef      	bne.n	8003362 <__lesf2+0x4e>
 8003382:	2d00      	cmp	r5, #0
 8003384:	d1ed      	bne.n	8003362 <__lesf2+0x4e>
 8003386:	e7ee      	b.n	8003366 <__lesf2+0x52>
 8003388:	42a2      	cmp	r2, r4
 800338a:	dc05      	bgt.n	8003398 <__lesf2+0x84>
 800338c:	dbf2      	blt.n	8003374 <__lesf2+0x60>
 800338e:	42ae      	cmp	r6, r5
 8003390:	d802      	bhi.n	8003398 <__lesf2+0x84>
 8003392:	d3ef      	bcc.n	8003374 <__lesf2+0x60>
 8003394:	2000      	movs	r0, #0
 8003396:	e7ec      	b.n	8003372 <__lesf2+0x5e>
 8003398:	4241      	negs	r1, r0
 800339a:	4141      	adcs	r1, r0
 800339c:	4248      	negs	r0, r1
 800339e:	2102      	movs	r1, #2
 80033a0:	4008      	ands	r0, r1
 80033a2:	3801      	subs	r0, #1
 80033a4:	e7e5      	b.n	8003372 <__lesf2+0x5e>
 80033a6:	46c0      	nop			; (mov r8, r8)

080033a8 <GetSize_LUT>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t GetSize_LUT(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	0018      	movs	r0, r3
 80033b2:	2314      	movs	r3, #20
 80033b4:	001a      	movs	r2, r3
 80033b6:	2100      	movs	r1, #0
 80033b8:	f004 fa20 	bl	80077fc <memset>
	HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	2100      	movs	r1, #0
 80033c0:	0018      	movs	r0, r3
 80033c2:	f003 f8a7 	bl	8006514 <HAL_RCC_GetClockConfig>
	uint32_t f_hclk = HAL_RCC_GetSysClockFreq() / (RCC_ClkInitStruct.AHBCLKDivider + 1);
 80033c6:	f002 ffa7 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 80033ca:	0002      	movs	r2, r0
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	3301      	adds	r3, #1
 80033d2:	0019      	movs	r1, r3
 80033d4:	0010      	movs	r0, r2
 80033d6:	f7fc feb3 	bl	8000140 <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t f_clk = f_hclk / (RCC_ClkInitStruct.APB2CLKDivider + 1);
 80033de:	1d3b      	adds	r3, r7, #4
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	3301      	adds	r3, #1
 80033e4:	0019      	movs	r1, r3
 80033e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033e8:	f7fc feaa 	bl	8000140 <__udivsi3>
 80033ec:	0003      	movs	r3, r0
 80033ee:	623b      	str	r3, [r7, #32]
	uint32_t f_trig = f_clk / (((TIM2->PSC) + 1) * ((TIM2->ARR) + 1));
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	05db      	lsls	r3, r3, #23
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	05db      	lsls	r3, r3, #23
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	3301      	adds	r3, #1
 8003400:	4353      	muls	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	6a38      	ldr	r0, [r7, #32]
 8003406:	f7fc fe9b 	bl	8000140 <__udivsi3>
 800340a:	0003      	movs	r3, r0
 800340c:	61fb      	str	r3, [r7, #28]
	uint32_t n_tot = PERIOD_MS * f_trig / 1000U;
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	0013      	movs	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	001a      	movs	r2, r3
 800341a:	23fa      	movs	r3, #250	; 0xfa
 800341c:	0099      	lsls	r1, r3, #2
 800341e:	0010      	movs	r0, r2
 8003420:	f7fc fe8e 	bl	8000140 <__udivsi3>
 8003424:	0003      	movs	r3, r0
 8003426:	61bb      	str	r3, [r7, #24]
	return n_tot;
 8003428:	69bb      	ldr	r3, [r7, #24]
}
 800342a:	0018      	movs	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	b00a      	add	sp, #40	; 0x28
 8003430:	bd80      	pop	{r7, pc}

08003432 <GetTriggerPeriod_ADC>:

float GetTriggerPeriod_ADC(void)
{
 8003432:	b590      	push	{r4, r7, lr}
 8003434:	b089      	sub	sp, #36	; 0x24
 8003436:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003438:	003b      	movs	r3, r7
 800343a:	0018      	movs	r0, r3
 800343c:	2314      	movs	r3, #20
 800343e:	001a      	movs	r2, r3
 8003440:	2100      	movs	r1, #0
 8003442:	f004 f9db 	bl	80077fc <memset>
	HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8003446:	003b      	movs	r3, r7
 8003448:	2100      	movs	r1, #0
 800344a:	0018      	movs	r0, r3
 800344c:	f003 f862 	bl	8006514 <HAL_RCC_GetClockConfig>
	uint32_t f_hclk = HAL_RCC_GetSysClockFreq() / (RCC_ClkInitStruct.AHBCLKDivider + 1);
 8003450:	f002 ff62 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 8003454:	0002      	movs	r2, r0
 8003456:	003b      	movs	r3, r7
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	3301      	adds	r3, #1
 800345c:	0019      	movs	r1, r3
 800345e:	0010      	movs	r0, r2
 8003460:	f7fc fe6e 	bl	8000140 <__udivsi3>
 8003464:	0003      	movs	r3, r0
 8003466:	61fb      	str	r3, [r7, #28]
	uint32_t f_clk = f_hclk / (RCC_ClkInitStruct.APB2CLKDivider + 1);
 8003468:	003b      	movs	r3, r7
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	3301      	adds	r3, #1
 800346e:	0019      	movs	r1, r3
 8003470:	69f8      	ldr	r0, [r7, #28]
 8003472:	f7fc fe65 	bl	8000140 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	61bb      	str	r3, [r7, #24]
	float trig_period = (float) (((TIM2->PSC) + 1) * ((TIM2->ARR) + 1)) / f_clk;
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	05db      	lsls	r3, r3, #23
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	3301      	adds	r3, #1
 800348a:	4353      	muls	r3, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f7fd ff45 	bl	800131c <__aeabi_ui2f>
 8003492:	1c04      	adds	r4, r0, #0
 8003494:	69b8      	ldr	r0, [r7, #24]
 8003496:	f7fd ff41 	bl	800131c <__aeabi_ui2f>
 800349a:	1c03      	adds	r3, r0, #0
 800349c:	1c19      	adds	r1, r3, #0
 800349e:	1c20      	adds	r0, r4, #0
 80034a0:	f7fd fae8 	bl	8000a74 <__aeabi_fdiv>
 80034a4:	1c03      	adds	r3, r0, #0
 80034a6:	617b      	str	r3, [r7, #20]
	return trig_period;
 80034a8:	697b      	ldr	r3, [r7, #20]
}
 80034aa:	1c18      	adds	r0, r3, #0
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b009      	add	sp, #36	; 0x24
 80034b0:	bd90      	pop	{r4, r7, pc}
	...

080034b4 <CreateTxStr_UART>:

void CreateTxStr_UART(char * msg, uint32_t n_tot)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b0ab      	sub	sp, #172	; 0xac
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	65f8      	str	r0, [r7, #92]	; 0x5c
 80034bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034be:	466b      	mov	r3, sp
 80034c0:	001e      	movs	r6, r3
	int i = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	2290      	movs	r2, #144	; 0x90
 80034c6:	18ba      	adds	r2, r7, r2
 80034c8:	6013      	str	r3, [r2, #0]
	float trig_period = GetTriggerPeriod_ADC();
 80034ca:	f7ff ffb2 	bl	8003432 <GetTriggerPeriod_ADC>
 80034ce:	1c03      	adds	r3, r0, #0
 80034d0:	2294      	movs	r2, #148	; 0x94
 80034d2:	18ba      	adds	r2, r7, r2
 80034d4:	6013      	str	r3, [r2, #0]
	trig_period_g = trig_period;
 80034d6:	4ac2      	ldr	r2, [pc, #776]	; (80037e0 <CreateTxStr_UART+0x32c>)
 80034d8:	2394      	movs	r3, #148	; 0x94
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6013      	str	r3, [r2, #0]
	uint32_t time_stamp = i * trig_period;
 80034e0:	2390      	movs	r3, #144	; 0x90
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f7fd fed3 	bl	8001290 <__aeabi_i2f>
 80034ea:	1c03      	adds	r3, r0, #0
 80034ec:	2294      	movs	r2, #148	; 0x94
 80034ee:	18ba      	adds	r2, r7, r2
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	1c18      	adds	r0, r3, #0
 80034f4:	f7fd fbca 	bl	8000c8c <__aeabi_fmul>
 80034f8:	1c03      	adds	r3, r0, #0
 80034fa:	1c18      	adds	r0, r3, #0
 80034fc:	f7fd f81c 	bl	8000538 <__aeabi_f2uiz>
 8003500:	0003      	movs	r3, r0
 8003502:	2288      	movs	r2, #136	; 0x88
 8003504:	18ba      	adds	r2, r7, r2
 8003506:	6013      	str	r3, [r2, #0]
	uint16_t num_samples = n_tot/2;
 8003508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	212e      	movs	r1, #46	; 0x2e
 800350e:	2258      	movs	r2, #88	; 0x58
 8003510:	18ba      	adds	r2, r7, r2
 8003512:	1852      	adds	r2, r2, r1
 8003514:	8013      	strh	r3, [r2, #0]
	uint16_t z = 0;
 8003516:	2334      	movs	r3, #52	; 0x34
 8003518:	2258      	movs	r2, #88	; 0x58
 800351a:	18ba      	adds	r2, r7, r2
 800351c:	18d2      	adds	r2, r2, r3
 800351e:	2300      	movs	r3, #0
 8003520:	8013      	strh	r3, [r2, #0]
	uint16_t j = 0;
 8003522:	2336      	movs	r3, #54	; 0x36
 8003524:	2258      	movs	r2, #88	; 0x58
 8003526:	18ba      	adds	r2, r7, r2
 8003528:	18d2      	adds	r2, r2, r3
 800352a:	2300      	movs	r3, #0
 800352c:	8013      	strh	r3, [r2, #0]
	float v_pos_arr[num_samples];
 800352e:	2358      	movs	r3, #88	; 0x58
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	185b      	adds	r3, r3, r1
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	0013      	movs	r3, r2
 8003538:	3b01      	subs	r3, #1
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	1879      	adds	r1, r7, r1
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	62ba      	str	r2, [r7, #40]	; 0x28
 8003542:	2300      	movs	r3, #0
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800354a:	0003      	movs	r3, r0
 800354c:	0edb      	lsrs	r3, r3, #27
 800354e:	469c      	mov	ip, r3
 8003550:	000b      	movs	r3, r1
 8003552:	015d      	lsls	r5, r3, #5
 8003554:	4663      	mov	r3, ip
 8003556:	431d      	orrs	r5, r3
 8003558:	0003      	movs	r3, r0
 800355a:	015c      	lsls	r4, r3, #5
 800355c:	623a      	str	r2, [r7, #32]
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	6a38      	ldr	r0, [r7, #32]
 8003564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003566:	0003      	movs	r3, r0
 8003568:	0edb      	lsrs	r3, r3, #27
 800356a:	000d      	movs	r5, r1
 800356c:	016d      	lsls	r5, r5, #5
 800356e:	657d      	str	r5, [r7, #84]	; 0x54
 8003570:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8003572:	431d      	orrs	r5, r3
 8003574:	657d      	str	r5, [r7, #84]	; 0x54
 8003576:	0003      	movs	r3, r0
 8003578:	015b      	lsls	r3, r3, #5
 800357a:	653b      	str	r3, [r7, #80]	; 0x50
 800357c:	0013      	movs	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3307      	adds	r3, #7
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	466a      	mov	r2, sp
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	469d      	mov	sp, r3
 800358c:	ab04      	add	r3, sp, #16
 800358e:	3303      	adds	r3, #3
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	67fb      	str	r3, [r7, #124]	; 0x7c
	float v_neg_arr[num_samples];
 8003596:	242e      	movs	r4, #46	; 0x2e
 8003598:	2358      	movs	r3, #88	; 0x58
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	191b      	adds	r3, r3, r4
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	0013      	movs	r3, r2
 80035a2:	3b01      	subs	r3, #1
 80035a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035a6:	61ba      	str	r2, [r7, #24]
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	69b8      	ldr	r0, [r7, #24]
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	0003      	movs	r3, r0
 80035b2:	0edb      	lsrs	r3, r3, #27
 80035b4:	000d      	movs	r5, r1
 80035b6:	016d      	lsls	r5, r5, #5
 80035b8:	64fd      	str	r5, [r7, #76]	; 0x4c
 80035ba:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 80035bc:	431d      	orrs	r5, r3
 80035be:	64fd      	str	r5, [r7, #76]	; 0x4c
 80035c0:	0003      	movs	r3, r0
 80035c2:	015b      	lsls	r3, r3, #5
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c6:	613a      	str	r2, [r7, #16]
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	6938      	ldr	r0, [r7, #16]
 80035ce:	6979      	ldr	r1, [r7, #20]
 80035d0:	0003      	movs	r3, r0
 80035d2:	0edb      	lsrs	r3, r3, #27
 80035d4:	000d      	movs	r5, r1
 80035d6:	016d      	lsls	r5, r5, #5
 80035d8:	647d      	str	r5, [r7, #68]	; 0x44
 80035da:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 80035dc:	431d      	orrs	r5, r3
 80035de:	647d      	str	r5, [r7, #68]	; 0x44
 80035e0:	0003      	movs	r3, r0
 80035e2:	015b      	lsls	r3, r3, #5
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
 80035e6:	0013      	movs	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	3307      	adds	r3, #7
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	466a      	mov	r2, sp
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	469d      	mov	sp, r3
 80035f6:	ab04      	add	r3, sp, #16
 80035f8:	3303      	adds	r3, #3
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	677b      	str	r3, [r7, #116]	; 0x74
	float well_current_A[num_samples];
 8003600:	2358      	movs	r3, #88	; 0x58
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	191b      	adds	r3, r3, r4
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	001a      	movs	r2, r3
 800360a:	3a01      	subs	r2, #1
 800360c:	673a      	str	r2, [r7, #112]	; 0x70
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	60fa      	str	r2, [r7, #12]
 8003614:	68b8      	ldr	r0, [r7, #8]
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	0002      	movs	r2, r0
 800361a:	0ed2      	lsrs	r2, r2, #27
 800361c:	000c      	movs	r4, r1
 800361e:	0164      	lsls	r4, r4, #5
 8003620:	63fc      	str	r4, [r7, #60]	; 0x3c
 8003622:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003624:	4314      	orrs	r4, r2
 8003626:	63fc      	str	r4, [r7, #60]	; 0x3c
 8003628:	0002      	movs	r2, r0
 800362a:	0152      	lsls	r2, r2, #5
 800362c:	63ba      	str	r2, [r7, #56]	; 0x38
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	6838      	ldr	r0, [r7, #0]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	0002      	movs	r2, r0
 800363a:	0ed2      	lsrs	r2, r2, #27
 800363c:	000c      	movs	r4, r1
 800363e:	0164      	lsls	r4, r4, #5
 8003640:	637c      	str	r4, [r7, #52]	; 0x34
 8003642:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003644:	4314      	orrs	r4, r2
 8003646:	637c      	str	r4, [r7, #52]	; 0x34
 8003648:	0002      	movs	r2, r0
 800364a:	0152      	lsls	r2, r2, #5
 800364c:	633a      	str	r2, [r7, #48]	; 0x30
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	3307      	adds	r3, #7
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	466a      	mov	r2, sp
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	469d      	mov	sp, r3
 800365c:	ab04      	add	r3, sp, #16
 800365e:	3303      	adds	r3, #3
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i = 0; i < n_tot; i++){
 8003666:	2300      	movs	r3, #0
 8003668:	2290      	movs	r2, #144	; 0x90
 800366a:	18ba      	adds	r2, r7, r2
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e0ab      	b.n	80037c8 <CreateTxStr_UART+0x314>
		if (i%2 == 0)
 8003670:	2390      	movs	r3, #144	; 0x90
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2201      	movs	r2, #1
 8003678:	4013      	ands	r3, r2
 800367a:	d146      	bne.n	800370a <CreateTxStr_UART+0x256>
		{
			float adc3_V = ((float) ADC_Buf[i] / 4096) * 3.3;
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <CreateTxStr_UART+0x330>)
 800367e:	2290      	movs	r2, #144	; 0x90
 8003680:	18ba      	adds	r2, r7, r2
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	0052      	lsls	r2, r2, #1
 8003686:	5ad3      	ldrh	r3, [r2, r3]
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd fe47 	bl	800131c <__aeabi_ui2f>
 800368e:	1c03      	adds	r3, r0, #0
 8003690:	218b      	movs	r1, #139	; 0x8b
 8003692:	05c9      	lsls	r1, r1, #23
 8003694:	1c18      	adds	r0, r3, #0
 8003696:	f7fd f9ed 	bl	8000a74 <__aeabi_fdiv>
 800369a:	1c03      	adds	r3, r0, #0
 800369c:	1c18      	adds	r0, r3, #0
 800369e:	f7ff fc91 	bl	8002fc4 <__aeabi_f2d>
 80036a2:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <CreateTxStr_UART+0x334>)
 80036a4:	4b51      	ldr	r3, [pc, #324]	; (80037ec <CreateTxStr_UART+0x338>)
 80036a6:	f7fe fde5 	bl	8002274 <__aeabi_dmul>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff fccf 	bl	8003054 <__aeabi_d2f>
 80036b6:	1c03      	adds	r3, r0, #0
 80036b8:	667b      	str	r3, [r7, #100]	; 0x64
			v_pos_arr[j] = 5.7 * (adc3_V - 1.65053);
 80036ba:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80036bc:	f7ff fc82 	bl	8002fc4 <__aeabi_f2d>
 80036c0:	4a4b      	ldr	r2, [pc, #300]	; (80037f0 <CreateTxStr_UART+0x33c>)
 80036c2:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <CreateTxStr_UART+0x340>)
 80036c4:	f7ff f842 	bl	800274c <__aeabi_dsub>
 80036c8:	0002      	movs	r2, r0
 80036ca:	000b      	movs	r3, r1
 80036cc:	0010      	movs	r0, r2
 80036ce:	0019      	movs	r1, r3
 80036d0:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <CreateTxStr_UART+0x344>)
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <CreateTxStr_UART+0x348>)
 80036d4:	f7fe fdce 	bl	8002274 <__aeabi_dmul>
 80036d8:	0002      	movs	r2, r0
 80036da:	000b      	movs	r3, r1
 80036dc:	2536      	movs	r5, #54	; 0x36
 80036de:	2158      	movs	r1, #88	; 0x58
 80036e0:	1879      	adds	r1, r7, r1
 80036e2:	1949      	adds	r1, r1, r5
 80036e4:	880c      	ldrh	r4, [r1, #0]
 80036e6:	0010      	movs	r0, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	f7ff fcb3 	bl	8003054 <__aeabi_d2f>
 80036ee:	1c01      	adds	r1, r0, #0
 80036f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036f2:	00a2      	lsls	r2, r4, #2
 80036f4:	50d1      	str	r1, [r2, r3]
			j++;
 80036f6:	2358      	movs	r3, #88	; 0x58
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	195b      	adds	r3, r3, r5
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	2358      	movs	r3, #88	; 0x58
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	195b      	adds	r3, r3, r5
 8003704:	3201      	adds	r2, #1
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	e057      	b.n	80037ba <CreateTxStr_UART+0x306>
		} else {
			float adc4_V = ((float) ADC_Buf[i] / 4096) * 3.3;
 800370a:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <CreateTxStr_UART+0x330>)
 800370c:	2290      	movs	r2, #144	; 0x90
 800370e:	18ba      	adds	r2, r7, r2
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	0052      	lsls	r2, r2, #1
 8003714:	5ad3      	ldrh	r3, [r2, r3]
 8003716:	0018      	movs	r0, r3
 8003718:	f7fd fe00 	bl	800131c <__aeabi_ui2f>
 800371c:	1c03      	adds	r3, r0, #0
 800371e:	218b      	movs	r1, #139	; 0x8b
 8003720:	05c9      	lsls	r1, r1, #23
 8003722:	1c18      	adds	r0, r3, #0
 8003724:	f7fd f9a6 	bl	8000a74 <__aeabi_fdiv>
 8003728:	1c03      	adds	r3, r0, #0
 800372a:	1c18      	adds	r0, r3, #0
 800372c:	f7ff fc4a 	bl	8002fc4 <__aeabi_f2d>
 8003730:	4a2d      	ldr	r2, [pc, #180]	; (80037e8 <CreateTxStr_UART+0x334>)
 8003732:	4b2e      	ldr	r3, [pc, #184]	; (80037ec <CreateTxStr_UART+0x338>)
 8003734:	f7fe fd9e 	bl	8002274 <__aeabi_dmul>
 8003738:	0002      	movs	r2, r0
 800373a:	000b      	movs	r3, r1
 800373c:	0010      	movs	r0, r2
 800373e:	0019      	movs	r1, r3
 8003740:	f7ff fc88 	bl	8003054 <__aeabi_d2f>
 8003744:	1c03      	adds	r3, r0, #0
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
			v_neg_arr[z] = ((adc4_V*2) - V_REF);  // Shunt Voltage
 8003748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374a:	1c19      	adds	r1, r3, #0
 800374c:	1c18      	adds	r0, r3, #0
 800374e:	f7fc fff5 	bl	800073c <__aeabi_fadd>
 8003752:	1c03      	adds	r3, r0, #0
 8003754:	1c18      	adds	r0, r3, #0
 8003756:	f7ff fc35 	bl	8002fc4 <__aeabi_f2d>
 800375a:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <CreateTxStr_UART+0x334>)
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <CreateTxStr_UART+0x338>)
 800375e:	f7fe fff5 	bl	800274c <__aeabi_dsub>
 8003762:	0002      	movs	r2, r0
 8003764:	000b      	movs	r3, r1
 8003766:	2534      	movs	r5, #52	; 0x34
 8003768:	2158      	movs	r1, #88	; 0x58
 800376a:	1879      	adds	r1, r7, r1
 800376c:	1949      	adds	r1, r1, r5
 800376e:	880c      	ldrh	r4, [r1, #0]
 8003770:	0010      	movs	r0, r2
 8003772:	0019      	movs	r1, r3
 8003774:	f7ff fc6e 	bl	8003054 <__aeabi_d2f>
 8003778:	1c01      	adds	r1, r0, #0
 800377a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377c:	00a2      	lsls	r2, r4, #2
 800377e:	50d1      	str	r1, [r2, r3]
			well_current_A[z] = v_neg_arr[z] / R_SHUNT_OHMS;
 8003780:	2358      	movs	r3, #88	; 0x58
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	195b      	adds	r3, r3, r5
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378a:	0092      	lsls	r2, r2, #2
 800378c:	58d2      	ldr	r2, [r2, r3]
 800378e:	2358      	movs	r3, #88	; 0x58
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	195b      	adds	r3, r3, r5
 8003794:	881c      	ldrh	r4, [r3, #0]
 8003796:	491a      	ldr	r1, [pc, #104]	; (8003800 <CreateTxStr_UART+0x34c>)
 8003798:	1c10      	adds	r0, r2, #0
 800379a:	f7fd f96b 	bl	8000a74 <__aeabi_fdiv>
 800379e:	1c03      	adds	r3, r0, #0
 80037a0:	1c19      	adds	r1, r3, #0
 80037a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a4:	00a2      	lsls	r2, r4, #2
 80037a6:	50d1      	str	r1, [r2, r3]
			z++;
 80037a8:	2358      	movs	r3, #88	; 0x58
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	195b      	adds	r3, r3, r5
 80037ae:	881a      	ldrh	r2, [r3, #0]
 80037b0:	2358      	movs	r3, #88	; 0x58
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	195b      	adds	r3, r3, r5
 80037b6:	3201      	adds	r2, #1
 80037b8:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_tot; i++){
 80037ba:	2390      	movs	r3, #144	; 0x90
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	2290      	movs	r2, #144	; 0x90
 80037c4:	18ba      	adds	r2, r7, r2
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	2390      	movs	r3, #144	; 0x90
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d900      	bls.n	80037d6 <CreateTxStr_UART+0x322>
 80037d4:	e74c      	b.n	8003670 <CreateTxStr_UART+0x1bc>
		}
	}
	for (i = 0; i < num_samples; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	2290      	movs	r2, #144	; 0x90
 80037da:	18ba      	adds	r2, r7, r2
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e049      	b.n	8003874 <CreateTxStr_UART+0x3c0>
 80037e0:	20000284 	.word	0x20000284
 80037e4:	20000394 	.word	0x20000394
 80037e8:	66666666 	.word	0x66666666
 80037ec:	400a6666 	.word	0x400a6666
 80037f0:	253111f1 	.word	0x253111f1
 80037f4:	3ffa6892 	.word	0x3ffa6892
 80037f8:	cccccccd 	.word	0xcccccccd
 80037fc:	4016cccc 	.word	0x4016cccc
 8003800:	42040000 	.word	0x42040000
	{
		//float well_impedance_OHMS = well_voltage_V / well_current_A;
		sprintf(msg, "%f,%f,%f\r\n", v_pos_arr[i], v_neg_arr[i], well_current_A[i]);
 8003804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003806:	2290      	movs	r2, #144	; 0x90
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	0092      	lsls	r2, r2, #2
 800380e:	58d3      	ldr	r3, [r2, r3]
 8003810:	1c18      	adds	r0, r3, #0
 8003812:	f7ff fbd7 	bl	8002fc4 <__aeabi_f2d>
 8003816:	6538      	str	r0, [r7, #80]	; 0x50
 8003818:	6579      	str	r1, [r7, #84]	; 0x54
 800381a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381c:	2290      	movs	r2, #144	; 0x90
 800381e:	18ba      	adds	r2, r7, r2
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	58d3      	ldr	r3, [r2, r3]
 8003826:	1c18      	adds	r0, r3, #0
 8003828:	f7ff fbcc 	bl	8002fc4 <__aeabi_f2d>
 800382c:	0004      	movs	r4, r0
 800382e:	000d      	movs	r5, r1
 8003830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003832:	2290      	movs	r2, #144	; 0x90
 8003834:	18ba      	adds	r2, r7, r2
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	0092      	lsls	r2, r2, #2
 800383a:	58d3      	ldr	r3, [r2, r3]
 800383c:	1c18      	adds	r0, r3, #0
 800383e:	f7ff fbc1 	bl	8002fc4 <__aeabi_f2d>
 8003842:	0002      	movs	r2, r0
 8003844:	000b      	movs	r3, r1
 8003846:	4913      	ldr	r1, [pc, #76]	; (8003894 <CreateTxStr_UART+0x3e0>)
 8003848:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800384a:	9202      	str	r2, [sp, #8]
 800384c:	9303      	str	r3, [sp, #12]
 800384e:	9400      	str	r4, [sp, #0]
 8003850:	9501      	str	r5, [sp, #4]
 8003852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003856:	f004 fd0d 	bl	8008274 <siprintf>
		HAL_UART_Transmit(&huart2, (unsigned char *) msg, UART_BUF_SIZE, 100);
 800385a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800385c:	480e      	ldr	r0, [pc, #56]	; (8003898 <CreateTxStr_UART+0x3e4>)
 800385e:	2364      	movs	r3, #100	; 0x64
 8003860:	221e      	movs	r2, #30
 8003862:	f003 fad5 	bl	8006e10 <HAL_UART_Transmit>
	for (i = 0; i < num_samples; i++)
 8003866:	2390      	movs	r3, #144	; 0x90
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	2290      	movs	r2, #144	; 0x90
 8003870:	18ba      	adds	r2, r7, r2
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	232e      	movs	r3, #46	; 0x2e
 8003876:	2258      	movs	r2, #88	; 0x58
 8003878:	4694      	mov	ip, r2
 800387a:	44bc      	add	ip, r7
 800387c:	4463      	add	r3, ip
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	2290      	movs	r2, #144	; 0x90
 8003882:	18ba      	adds	r2, r7, r2
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	dbbc      	blt.n	8003804 <CreateTxStr_UART+0x350>
 800388a:	46b5      	mov	sp, r6
	}


}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b027      	add	sp, #156	; 0x9c
 8003892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003894:	0800a6a8 	.word	0x0800a6a8
 8003898:	200002c8 	.word	0x200002c8

0800389c <GenerateConstCurrent_LUT>:
		*(LUT + i) = 2048;
	}
}

void GenerateConstCurrent_LUT(uint32_t *LUT, float Amplitude_mA, uint32_t n_tot)
{
 800389c:	b590      	push	{r4, r7, lr}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
	float V_Shunt = Amplitude_mA * R_SHUNT_OHMS / 1000;
 80038ac:	492c      	ldr	r1, [pc, #176]	; (8003960 <GenerateConstCurrent_LUT+0xc4>)
 80038ae:	68b8      	ldr	r0, [r7, #8]
 80038b0:	f7fd f9ec 	bl	8000c8c <__aeabi_fmul>
 80038b4:	1c03      	adds	r3, r0, #0
 80038b6:	492b      	ldr	r1, [pc, #172]	; (8003964 <GenerateConstCurrent_LUT+0xc8>)
 80038b8:	1c18      	adds	r0, r3, #0
 80038ba:	f7fd f8db 	bl	8000a74 <__aeabi_fdiv>
 80038be:	1c03      	adds	r3, r0, #0
 80038c0:	61bb      	str	r3, [r7, #24]
	float V_Dac = (V_Shunt / 2) + 1.65 ;
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	05c9      	lsls	r1, r1, #23
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f7fd f8d4 	bl	8000a74 <__aeabi_fdiv>
 80038cc:	1c03      	adds	r3, r0, #0
 80038ce:	1c18      	adds	r0, r3, #0
 80038d0:	f7ff fb78 	bl	8002fc4 <__aeabi_f2d>
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <GenerateConstCurrent_LUT+0xcc>)
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <GenerateConstCurrent_LUT+0xd0>)
 80038d8:	f7fd fd5c 	bl	8001394 <__aeabi_dadd>
 80038dc:	0002      	movs	r2, r0
 80038de:	000b      	movs	r3, r1
 80038e0:	0010      	movs	r0, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	f7ff fbb6 	bl	8003054 <__aeabi_d2f>
 80038e8:	1c03      	adds	r3, r0, #0
 80038ea:	617b      	str	r3, [r7, #20]
	uint16_t Amplitude = ((V_Dac * 4096) / V_REF) - 2048; // Subtract 2048 since 0mA corresponds to middle of DAC range
 80038ec:	218b      	movs	r1, #139	; 0x8b
 80038ee:	05c9      	lsls	r1, r1, #23
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	f7fd f9cb 	bl	8000c8c <__aeabi_fmul>
 80038f6:	1c03      	adds	r3, r0, #0
 80038f8:	1c18      	adds	r0, r3, #0
 80038fa:	f7ff fb63 	bl	8002fc4 <__aeabi_f2d>
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <GenerateConstCurrent_LUT+0xcc>)
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <GenerateConstCurrent_LUT+0xd4>)
 8003902:	f7fe f8b1 	bl	8001a68 <__aeabi_ddiv>
 8003906:	0002      	movs	r2, r0
 8003908:	000b      	movs	r3, r1
 800390a:	0010      	movs	r0, r2
 800390c:	0019      	movs	r1, r3
 800390e:	2200      	movs	r2, #0
 8003910:	4b18      	ldr	r3, [pc, #96]	; (8003974 <GenerateConstCurrent_LUT+0xd8>)
 8003912:	f7fe ff1b 	bl	800274c <__aeabi_dsub>
 8003916:	0002      	movs	r2, r0
 8003918:	000b      	movs	r3, r1
 800391a:	2112      	movs	r1, #18
 800391c:	187c      	adds	r4, r7, r1
 800391e:	0010      	movs	r0, r2
 8003920:	0019      	movs	r1, r3
 8003922:	f7fc fe21 	bl	8000568 <__aeabi_d2uiz>
 8003926:	0003      	movs	r3, r0
 8003928:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < n_tot; i++)
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e00e      	b.n	800394e <GenerateConstCurrent_LUT+0xb2>
	{
		*(LUT + i) = 2048 + Amplitude;
 8003930:	2312      	movs	r3, #18
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	0112      	lsls	r2, r2, #4
 800393a:	1899      	adds	r1, r3, r2
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	18d3      	adds	r3, r2, r3
 8003944:	000a      	movs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
	for (i = 0; i < n_tot; i++)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3301      	adds	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3ec      	bcc.n	8003930 <GenerateConstCurrent_LUT+0x94>
	}
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b009      	add	sp, #36	; 0x24
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	42040000 	.word	0x42040000
 8003964:	447a0000 	.word	0x447a0000
 8003968:	66666666 	.word	0x66666666
 800396c:	3ffa6666 	.word	0x3ffa6666
 8003970:	400a6666 	.word	0x400a6666
 8003974:	40a00000 	.word	0x40a00000

08003978 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003980:	23a0      	movs	r3, #160	; 0xa0
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	2120      	movs	r1, #32
 8003986:	0018      	movs	r0, r3
 8003988:	f001 ff9f 	bl	80058ca <HAL_GPIO_TogglePin>

}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA1_CH1_XferCpltCallback>:

void HAL_DMA1_CH1_XferCpltCallback(DMA_HandleTypeDef* hdma_adc)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	DMA_ADC_transfers++;
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_DMA1_CH1_XferCpltCallback+0x1c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_DMA1_CH1_XferCpltCallback+0x1c>)
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	20000218 	.word	0x20000218

080039b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039ba:	f000 fcfb 	bl	80043b4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039be:	f000 f853 	bl	8003a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039c2:	f000 fa15 	bl	8003df0 <MX_GPIO_Init>
  MX_DMA_Init();
 80039c6:	f000 f9ed 	bl	8003da4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80039ca:	f000 f9bb 	bl	8003d44 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80039ce:	f000 f931 	bl	8003c34 <MX_DAC_Init>
  MX_TIM2_Init();
 80039d2:	f000 f963 	bl	8003c9c <MX_TIM2_Init>
  MX_ADC_Init();
 80039d6:	f000 f8b9 	bl	8003b4c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t n_tot = GetSize_LUT();
 80039da:	f7ff fce5 	bl	80033a8 <GetSize_LUT>
 80039de:	0003      	movs	r3, r0
 80039e0:	607b      	str	r3, [r7, #4]
  LUT = (uint32_t *) malloc(n_tot * sizeof(*LUT));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	0018      	movs	r0, r3
 80039e8:	f003 fefe 	bl	80077e8 <malloc>
 80039ec:	0003      	movs	r3, r0
 80039ee:	001a      	movs	r2, r3
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <main+0x90>)
 80039f2:	601a      	str	r2, [r3, #0]
  //if (LUT != NULL) GenerateBiphasicPulse_LUT(LUT, AMPLITUDE_MA, PULSE_PERIOD_MS, INTERPULSE_PERIOD_MS, PERIOD_MS, n_tot);
  //GenerateTimerPulse(LUT, n_tot);

  GenerateConstCurrent_LUT(LUT, 100, n_tot);
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <main+0x90>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4913      	ldr	r1, [pc, #76]	; (8003a48 <main+0x94>)
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff ff4d 	bl	800389c <GenerateConstCurrent_LUT>

  HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_Buf, 128);
 8003a02:	4912      	ldr	r1, [pc, #72]	; (8003a4c <main+0x98>)
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <main+0x9c>)
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 feb7 	bl	800477c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)LUT, n_tot, DAC_ALIGN_12B_R);
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <main+0x90>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	480f      	ldr	r0, [pc, #60]	; (8003a54 <main+0xa0>)
 8003a16:	2100      	movs	r1, #0
 8003a18:	9100      	str	r1, [sp, #0]
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f001 fb0e 	bl	800503c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8003a20:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <main+0xa4>)
 8003a22:	0018      	movs	r0, r3
 8003a24:	f002 ff4c 	bl	80068c0 <HAL_TIM_Base_Start>
  HAL_DMA_RegisterCallback(&hdma_adc, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA1_CH1_XferCpltCallback);
 8003a28:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <main+0xa8>)
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <main+0xac>)
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f001 fd3a 	bl	80054a8 <HAL_DMA_RegisterCallback>
  /* USER CODE BEGIN WHILE */

      while (1)
      {

         CreateTxStr_UART(msg, n_tot);
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <main+0xb0>)
 8003a38:	0011      	movs	r1, r2
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7ff fd3a 	bl	80034b4 <CreateTxStr_UART>
 8003a40:	e7f8      	b.n	8003a34 <main+0x80>
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000228 	.word	0x20000228
 8003a48:	42c80000 	.word	0x42c80000
 8003a4c:	20000394 	.word	0x20000394
 8003a50:	20000494 	.word	0x20000494
 8003a54:	20000274 	.word	0x20000274
 8003a58:	20000288 	.word	0x20000288
 8003a5c:	08003995 	.word	0x08003995
 8003a60:	2000034c 	.word	0x2000034c
 8003a64:	200001f8 	.word	0x200001f8

08003a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b09d      	sub	sp, #116	; 0x74
 8003a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a6e:	2438      	movs	r4, #56	; 0x38
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	0018      	movs	r0, r3
 8003a74:	2338      	movs	r3, #56	; 0x38
 8003a76:	001a      	movs	r2, r3
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f003 febf 	bl	80077fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a7e:	2324      	movs	r3, #36	; 0x24
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	0018      	movs	r0, r3
 8003a84:	2314      	movs	r3, #20
 8003a86:	001a      	movs	r2, r3
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f003 feb7 	bl	80077fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a8e:	003b      	movs	r3, r7
 8003a90:	0018      	movs	r0, r3
 8003a92:	2324      	movs	r3, #36	; 0x24
 8003a94:	001a      	movs	r2, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	f003 feb0 	bl	80077fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a9c:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <SystemClock_Config+0xdc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <SystemClock_Config+0xe0>)
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <SystemClock_Config+0xdc>)
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	0109      	lsls	r1, r1, #4
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003aae:	0021      	movs	r1, r4
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	2201      	movs	r2, #1
 8003aba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2210      	movs	r2, #16
 8003ac0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	2200      	movs	r2, #0
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2280      	movs	r2, #128	; 0x80
 8003ad2:	02d2      	lsls	r2, r2, #11
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	03d2      	lsls	r2, r2, #15
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ade:	187b      	adds	r3, r7, r1
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f001 ff0d 	bl	8005900 <HAL_RCC_OscConfig>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d001      	beq.n	8003aee <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003aea:	f000 f9e5 	bl	8003eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aee:	2124      	movs	r1, #36	; 0x24
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	220f      	movs	r2, #15
 8003af4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2203      	movs	r2, #3
 8003afa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2101      	movs	r1, #1
 8003b12:	0018      	movs	r0, r3
 8003b14:	f002 fab8 	bl	8006088 <HAL_RCC_ClockConfig>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003b1c:	f000 f9cc 	bl	8003eb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b20:	003b      	movs	r3, r7
 8003b22:	2202      	movs	r2, #2
 8003b24:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b26:	003b      	movs	r3, r7
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b2c:	003b      	movs	r3, r7
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f002 fd22 	bl	8006578 <HAL_RCCEx_PeriphCLKConfig>
 8003b34:	1e03      	subs	r3, r0, #0
 8003b36:	d001      	beq.n	8003b3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003b38:	f000 f9be 	bl	8003eb8 <Error_Handler>
  }
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b01d      	add	sp, #116	; 0x74
 8003b42:	bd90      	pop	{r4, r7, pc}
 8003b44:	40007000 	.word	0x40007000
 8003b48:	ffffe7ff 	.word	0xffffe7ff

08003b4c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b52:	003b      	movs	r3, r7
 8003b54:	0018      	movs	r0, r3
 8003b56:	2308      	movs	r3, #8
 8003b58:	001a      	movs	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f003 fe4e 	bl	80077fc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003b60:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b62:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <MX_ADC_Init+0xe0>)
 8003b64:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003b66:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b6c:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	05d2      	lsls	r2, r2, #23
 8003b72:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003b74:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003b80:	4b29      	ldr	r3, [pc, #164]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b86:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b8e:	2220      	movs	r2, #32
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003b94:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b96:	2221      	movs	r2, #33	; 0x21
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	00d2      	lsls	r2, r2, #3
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bac:	222c      	movs	r2, #44	; 0x2c
 8003bae:	2101      	movs	r1, #1
 8003bb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	0152      	lsls	r2, r2, #5
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003bc6:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003bcc:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 fc5d 	bl	8004494 <HAL_ADC_Init>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 8003bde:	f000 f96b 	bl	8003eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003be2:	003b      	movs	r3, r7
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003be8:	003b      	movs	r3, r7
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	0152      	lsls	r2, r2, #5
 8003bee:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bf0:	003a      	movs	r2, r7
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 ff16 	bl	8004a28 <HAL_ADC_ConfigChannel>
 8003bfc:	1e03      	subs	r3, r0, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8003c00:	f000 f95a 	bl	8003eb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c04:	003b      	movs	r3, r7
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <MX_ADC_Init+0xe4>)
 8003c08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c0a:	003a      	movs	r2, r7
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <MX_ADC_Init+0xdc>)
 8003c0e:	0011      	movs	r1, r2
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 ff09 	bl	8004a28 <HAL_ADC_ConfigChannel>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d001      	beq.n	8003c1e <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 8003c1a:	f000 f94d 	bl	8003eb8 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b002      	add	sp, #8
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000494 	.word	0x20000494
 8003c2c:	40012400 	.word	0x40012400
 8003c30:	04000002 	.word	0x04000002

08003c34 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003c3a:	003b      	movs	r3, r7
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	2308      	movs	r3, #8
 8003c40:	001a      	movs	r2, r3
 8003c42:	2100      	movs	r1, #0
 8003c44:	f003 fdda 	bl	80077fc <memset>

  /* USER CODE BEGIN DAC_Init 1 */
  hdac.Instance = DAC;
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <MX_DAC_Init+0x60>)
 8003c4a:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <MX_DAC_Init+0x64>)
 8003c4c:	601a      	str	r2, [r3, #0]
  DAC->CR = DAC_CR_EN1 | DAC_CR_TEN1 | DAC_CR_BOFF1;
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MX_DAC_Init+0x64>)
 8003c50:	2207      	movs	r2, #7
 8003c52:	601a      	str	r2, [r3, #0]

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <MX_DAC_Init+0x60>)
 8003c56:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <MX_DAC_Init+0x64>)
 8003c58:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <MX_DAC_Init+0x60>)
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f001 f965 	bl	8004f2c <HAL_DAC_Init>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d001      	beq.n	8003c6a <MX_DAC_Init+0x36>
  {
    Error_Handler();
 8003c66:	f000 f927 	bl	8003eb8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003c6a:	003b      	movs	r3, r7
 8003c6c:	2224      	movs	r2, #36	; 0x24
 8003c6e:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c70:	003b      	movs	r3, r7
 8003c72:	2200      	movs	r2, #0
 8003c74:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c76:	0039      	movs	r1, r7
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <MX_DAC_Init+0x60>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f001 f991 	bl	8004fa4 <HAL_DAC_ConfigChannel>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <MX_DAC_Init+0x56>
  {
    Error_Handler();
 8003c86:	f000 f917 	bl	8003eb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000274 	.word	0x20000274
 8003c98:	40007400 	.word	0x40007400

08003c9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	2310      	movs	r3, #16
 8003caa:	001a      	movs	r2, r3
 8003cac:	2100      	movs	r1, #0
 8003cae:	f003 fda5 	bl	80077fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb2:	003b      	movs	r3, r7
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	001a      	movs	r2, r3
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f003 fd9e 	bl	80077fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	05d2      	lsls	r2, r2, #23
 8003cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9599;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003cd6:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <MX_TIM2_Init+0xa4>)
 8003cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f002 fda9 	bl	8006840 <HAL_TIM_Base_Init>
 8003cee:	1e03      	subs	r3, r0, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003cf2:	f000 f8e1 	bl	8003eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf6:	2108      	movs	r1, #8
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2280      	movs	r2, #128	; 0x80
 8003cfc:	0152      	lsls	r2, r2, #5
 8003cfe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d00:	187a      	adds	r2, r7, r1
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f002 fe1e 	bl	8006948 <HAL_TIM_ConfigClockSource>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003d10:	f000 f8d2 	bl	8003eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d14:	003b      	movs	r3, r7
 8003d16:	2220      	movs	r2, #32
 8003d18:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d1a:	003b      	movs	r3, r7
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d20:	003a      	movs	r2, r7
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <MX_TIM2_Init+0xa0>)
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f002 ffc6 	bl	8006cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003d30:	f000 f8c2 	bl	8003eb8 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */
  //TIM2 -> DIER |= TIM_DIER_UIE;
  //TIM2 -> SR &= ~TIM_SR_UIF;
  /* USER CODE END TIM2_Init 2 */

}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b006      	add	sp, #24
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000288 	.word	0x20000288
 8003d40:	0000257f 	.word	0x0000257f

08003d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <MX_USART2_UART_Init+0x5c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d50:	2296      	movs	r2, #150	; 0x96
 8003d52:	0192      	lsls	r2, r2, #6
 8003d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d62:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <MX_USART2_UART_Init+0x58>)
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f002 ffed 	bl	8006d68 <HAL_UART_Init>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003d92:	f000 f891 	bl	8003eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	200002c8 	.word	0x200002c8
 8003da0:	40004400 	.word	0x40004400

08003da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003daa:	4b10      	ldr	r3, [pc, #64]	; (8003dec <MX_DMA_Init+0x48>)
 8003dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dae:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <MX_DMA_Init+0x48>)
 8003db0:	2101      	movs	r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <MX_DMA_Init+0x48>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	2009      	movs	r0, #9
 8003dc8:	f001 f87e 	bl	8004ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003dcc:	2009      	movs	r0, #9
 8003dce:	f001 f890 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	200a      	movs	r0, #10
 8003dd8:	f001 f876 	bl	8004ec8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003ddc:	200a      	movs	r0, #10
 8003dde:	f001 f888 	bl	8004ef2 <HAL_NVIC_EnableIRQ>

}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	40021000 	.word	0x40021000

08003df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b089      	sub	sp, #36	; 0x24
 8003df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df6:	240c      	movs	r4, #12
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	2314      	movs	r3, #20
 8003dfe:	001a      	movs	r2, r3
 8003e00:	2100      	movs	r1, #0
 8003e02:	f003 fcfb 	bl	80077fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e0c:	2104      	movs	r1, #4
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	2204      	movs	r2, #4
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4b22      	ldr	r3, [pc, #136]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	430a      	orrs	r2, r1
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	4013      	ands	r3, r2
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <MX_GPIO_Init+0xbc>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	2201      	movs	r2, #1
 8003e48:	4013      	ands	r3, r2
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003e4e:	23a0      	movs	r3, #160	; 0xa0
 8003e50:	05db      	lsls	r3, r3, #23
 8003e52:	2200      	movs	r2, #0
 8003e54:	2120      	movs	r1, #32
 8003e56:	0018      	movs	r0, r3
 8003e58:	f001 fd1a 	bl	8005890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	0192      	lsls	r2, r2, #6
 8003e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <MX_GPIO_Init+0xc0>)
 8003e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e70:	193b      	adds	r3, r7, r4
 8003e72:	4a10      	ldr	r2, [pc, #64]	; (8003eb4 <MX_GPIO_Init+0xc4>)
 8003e74:	0019      	movs	r1, r3
 8003e76:	0010      	movs	r0, r2
 8003e78:	f001 fb94 	bl	80055a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e7c:	0021      	movs	r1, r4
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2220      	movs	r2, #32
 8003e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	2201      	movs	r2, #1
 8003e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e96:	187a      	adds	r2, r7, r1
 8003e98:	23a0      	movs	r3, #160	; 0xa0
 8003e9a:	05db      	lsls	r3, r3, #23
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f001 fb80 	bl	80055a4 <HAL_GPIO_Init>

}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b009      	add	sp, #36	; 0x24
 8003eaa:	bd90      	pop	{r4, r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	10210000 	.word	0x10210000
 8003eb4:	50000800 	.word	0x50000800

08003eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ebc:	b672      	cpsid	i
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <Error_Handler+0x8>
	...

08003ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec8:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <HAL_MspInit+0x24>)
 8003eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_MspInit+0x24>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_MspInit+0x24>)
 8003ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <HAL_MspInit+0x24>)
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	0549      	lsls	r1, r1, #21
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	240c      	movs	r4, #12
 8003ef6:	193b      	adds	r3, r7, r4
 8003ef8:	0018      	movs	r0, r3
 8003efa:	2314      	movs	r3, #20
 8003efc:	001a      	movs	r2, r3
 8003efe:	2100      	movs	r1, #0
 8003f00:	f003 fc7c 	bl	80077fc <memset>
  if(hadc->Instance==ADC1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2e      	ldr	r2, [pc, #184]	; (8003fc4 <HAL_ADC_MspInit+0xd8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d156      	bne.n	8003fbc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <HAL_ADC_MspInit+0xdc>)
 8003f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f12:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <HAL_ADC_MspInit+0xdc>)
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	0089      	lsls	r1, r1, #2
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_ADC_MspInit+0xdc>)
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_ADC_MspInit+0xdc>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	430a      	orrs	r2, r1
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <HAL_ADC_MspInit+0xdc>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	2203      	movs	r2, #3
 8003f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f3a:	193b      	adds	r3, r7, r4
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	193b      	adds	r3, r7, r4
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f46:	193a      	adds	r2, r7, r4
 8003f48:	23a0      	movs	r3, #160	; 0xa0
 8003f4a:	05db      	lsls	r3, r3, #23
 8003f4c:	0011      	movs	r1, r2
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f001 fb28 	bl	80055a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f56:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <HAL_ADC_MspInit+0xe4>)
 8003f58:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f60:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f66:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003f6c:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f72:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	00d2      	lsls	r2, r2, #3
 8003f80:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f84:	2220      	movs	r2, #32
 8003f86:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	0192      	lsls	r2, r2, #6
 8003f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003f92:	0018      	movs	r0, r3
 8003f94:	f001 f8fc 	bl	8005190 <HAL_DMA_Init>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8003f9c:	f7ff ff8c 	bl	8003eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_ADC_MspInit+0xe0>)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	200c      	movs	r0, #12
 8003fb2:	f000 ff89 	bl	8004ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003fb6:	200c      	movs	r0, #12
 8003fb8:	f000 ff9b 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b009      	add	sp, #36	; 0x24
 8003fc2:	bd90      	pop	{r4, r7, pc}
 8003fc4:	40012400 	.word	0x40012400
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	2000034c 	.word	0x2000034c
 8003fd0:	40020008 	.word	0x40020008

08003fd4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fdc:	240c      	movs	r4, #12
 8003fde:	193b      	adds	r3, r7, r4
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	2314      	movs	r3, #20
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f003 fc08 	bl	80077fc <memset>
  if(hdac->Instance==DAC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	; (800409c <HAL_DAC_MspInit+0xc8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d14e      	bne.n	8004094 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_DAC_MspInit+0xcc>)
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <HAL_DAC_MspInit+0xcc>)
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	0589      	lsls	r1, r1, #22
 8004000:	430a      	orrs	r2, r1
 8004002:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004004:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_DAC_MspInit+0xcc>)
 8004006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <HAL_DAC_MspInit+0xcc>)
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <HAL_DAC_MspInit+0xcc>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2201      	movs	r2, #1
 8004016:	4013      	ands	r3, r2
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800401c:	193b      	adds	r3, r7, r4
 800401e:	2210      	movs	r2, #16
 8004020:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004022:	193b      	adds	r3, r7, r4
 8004024:	2203      	movs	r2, #3
 8004026:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	193b      	adds	r3, r7, r4
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402e:	193a      	adds	r2, r7, r4
 8004030:	23a0      	movs	r3, #160	; 0xa0
 8004032:	05db      	lsls	r3, r3, #23
 8004034:	0011      	movs	r1, r2
 8004036:	0018      	movs	r0, r3
 8004038:	f001 fab4 	bl	80055a4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 800403e:	4a1a      	ldr	r2, [pc, #104]	; (80040a8 <HAL_DAC_MspInit+0xd4>)
 8004040:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_9;
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8004044:	2209      	movs	r2, #9
 8004046:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 800404a:	2210      	movs	r2, #16
 800404c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8004050:	2200      	movs	r2, #0
 8004052:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 800406c:	2220      	movs	r2, #32
 800406e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004070:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	0192      	lsls	r2, r2, #6
 8004076:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 800407a:	0018      	movs	r0, r3
 800407c:	f001 f888 	bl	8005190 <HAL_DMA_Init>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8004084:	f7ff ff18 	bl	8003eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_DAC_MspInit+0xd0>)
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b009      	add	sp, #36	; 0x24
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	40007400 	.word	0x40007400
 80040a0:	40021000 	.word	0x40021000
 80040a4:	2000022c 	.word	0x2000022c
 80040a8:	4002001c 	.word	0x4002001c

080040ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	05db      	lsls	r3, r3, #23
 80040bc:	429a      	cmp	r2, r3
 80040be:	d105      	bne.n	80040cc <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <HAL_TIM_Base_MspInit+0x28>)
 80040c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_TIM_Base_MspInit+0x28>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	430a      	orrs	r2, r1
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000

080040d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	240c      	movs	r4, #12
 80040e2:	193b      	adds	r3, r7, r4
 80040e4:	0018      	movs	r0, r3
 80040e6:	2314      	movs	r3, #20
 80040e8:	001a      	movs	r2, r3
 80040ea:	2100      	movs	r1, #0
 80040ec:	f003 fb86 	bl	80077fc <memset>
  if(huart->Instance==USART2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_UART_MspInit+0x80>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d129      	bne.n	800414e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_UART_MspInit+0x84>)
 80040fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <HAL_UART_MspInit+0x84>)
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	0289      	lsls	r1, r1, #10
 8004104:	430a      	orrs	r2, r1
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004108:	4b14      	ldr	r3, [pc, #80]	; (800415c <HAL_UART_MspInit+0x84>)
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4b13      	ldr	r3, [pc, #76]	; (800415c <HAL_UART_MspInit+0x84>)
 800410e:	2101      	movs	r1, #1
 8004110:	430a      	orrs	r2, r1
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_UART_MspInit+0x84>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	2201      	movs	r2, #1
 800411a:	4013      	ands	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004120:	0021      	movs	r1, r4
 8004122:	187b      	adds	r3, r7, r1
 8004124:	220c      	movs	r2, #12
 8004126:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004128:	187b      	adds	r3, r7, r1
 800412a:	2202      	movs	r2, #2
 800412c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	187b      	adds	r3, r7, r1
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004134:	187b      	adds	r3, r7, r1
 8004136:	2203      	movs	r2, #3
 8004138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800413a:	187b      	adds	r3, r7, r1
 800413c:	2204      	movs	r2, #4
 800413e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004140:	187a      	adds	r2, r7, r1
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	05db      	lsls	r3, r3, #23
 8004146:	0011      	movs	r1, r2
 8004148:	0018      	movs	r0, r3
 800414a:	f001 fa2b 	bl	80055a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b009      	add	sp, #36	; 0x24
 8004154:	bd90      	pop	{r4, r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40004400 	.word	0x40004400
 800415c:	40021000 	.word	0x40021000

08004160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <NMI_Handler+0x4>

08004166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <HardFault_Handler+0x4>

0800416c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004184:	f000 f96a 	bl	800445c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <DMA1_Channel1_IRQHandler+0x14>)
 8004196:	0018      	movs	r0, r3
 8004198:	f001 f8d8 	bl	800534c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	2000034c 	.word	0x2000034c

080041a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <DMA1_Channel2_3_IRQHandler+0x14>)
 80041ae:	0018      	movs	r0, r3
 80041b0:	f001 f8cc 	bl	800534c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	2000022c 	.word	0x2000022c

080041c0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <ADC1_COMP_IRQHandler+0x14>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 fb5a 	bl	8004880 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	20000494 	.word	0x20000494

080041d8 <_getpid>:
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
 80041dc:	2301      	movs	r3, #1
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_kill>:
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	f003 fad1 	bl	8007794 <__errno>
 80041f2:	0003      	movs	r3, r0
 80041f4:	2216      	movs	r2, #22
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	2301      	movs	r3, #1
 80041fa:	425b      	negs	r3, r3
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}

08004204 <_exit>:
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	2301      	movs	r3, #1
 800420e:	425a      	negs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff ffe5 	bl	80041e4 <_kill>
 800421a:	e7fe      	b.n	800421a <_exit+0x16>

0800421c <_read>:
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e00a      	b.n	8004244 <_read+0x28>
 800422e:	e000      	b.n	8004232 <_read+0x16>
 8004230:	bf00      	nop
 8004232:	0001      	movs	r1, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	60ba      	str	r2, [r7, #8]
 800423a:	b2ca      	uxtb	r2, r1
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3301      	adds	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	429a      	cmp	r2, r3
 800424a:	dbf0      	blt.n	800422e <_read+0x12>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b006      	add	sp, #24
 8004254:	bd80      	pop	{r7, pc}

08004256 <_write>:
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e009      	b.n	800427c <_write+0x26>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	60ba      	str	r2, [r7, #8]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	0018      	movs	r0, r3
 8004272:	e000      	b.n	8004276 <_write+0x20>
 8004274:	bf00      	nop
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3301      	adds	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbf1      	blt.n	8004268 <_write+0x12>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b006      	add	sp, #24
 800428c:	bd80      	pop	{r7, pc}

0800428e <_close>:
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	2301      	movs	r3, #1
 8004298:	425b      	negs	r3, r3
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_fstat>:
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	0192      	lsls	r2, r2, #6
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	2300      	movs	r3, #0
 80042b6:	0018      	movs	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	b002      	add	sp, #8
 80042bc:	bd80      	pop	{r7, pc}

080042be <_isatty>:
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	2301      	movs	r3, #1
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <_lseek>:
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	2300      	movs	r3, #0
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b004      	add	sp, #16
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <_sbrk>:
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	4a14      	ldr	r2, [pc, #80]	; (8004344 <_sbrk+0x5c>)
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <_sbrk+0x60>)
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <_sbrk+0x64>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <_sbrk+0x22>
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <_sbrk+0x64>)
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <_sbrk+0x68>)
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <_sbrk+0x64>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	18d3      	adds	r3, r2, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	429a      	cmp	r2, r3
 8004316:	d207      	bcs.n	8004328 <_sbrk+0x40>
 8004318:	f003 fa3c 	bl	8007794 <__errno>
 800431c:	0003      	movs	r3, r0
 800431e:	220c      	movs	r2, #12
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	2301      	movs	r3, #1
 8004324:	425b      	negs	r3, r3
 8004326:	e009      	b.n	800433c <_sbrk+0x54>
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <_sbrk+0x64>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <_sbrk+0x64>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	18d2      	adds	r2, r2, r3
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <_sbrk+0x64>)
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	b006      	add	sp, #24
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20002000 	.word	0x20002000
 8004348:	00000400 	.word	0x00000400
 800434c:	2000021c 	.word	0x2000021c
 8004350:	20000508 	.word	0x20000508

08004354 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   r0, =_estack
 8004360:	480d      	ldr	r0, [pc, #52]	; (8004398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004362:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004364:	480d      	ldr	r0, [pc, #52]	; (800439c <LoopForever+0x6>)
  ldr r1, =_edata
 8004366:	490e      	ldr	r1, [pc, #56]	; (80043a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <LoopForever+0xe>)
  movs r3, #0
 800436a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800436c:	e002      	b.n	8004374 <LoopCopyDataInit>

0800436e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004372:	3304      	adds	r3, #4

08004374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004378:	d3f9      	bcc.n	800436e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800437c:	4c0b      	ldr	r4, [pc, #44]	; (80043ac <LoopForever+0x16>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004380:	e001      	b.n	8004386 <LoopFillZerobss>

08004382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004384:	3204      	adds	r2, #4

08004386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004388:	d3fb      	bcc.n	8004382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800438a:	f7ff ffe3 	bl	8004354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800438e:	f003 fa07 	bl	80077a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004392:	f7ff fb0f 	bl	80039b4 <main>

08004396 <LoopForever>:

LoopForever:
    b LoopForever
 8004396:	e7fe      	b.n	8004396 <LoopForever>
Reset_Handler:   ldr   r0, =_estack
 8004398:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800439c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80043a4:	0800ac54 	.word	0x0800ac54
  ldr r2, =_sbss
 80043a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80043ac:	20000504 	.word	0x20000504

080043b0 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043b0:	e7fe      	b.n	80043b0 <DMA1_Channel4_5_6_7_IRQHandler>
	...

080043b4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043ba:	1dfb      	adds	r3, r7, #7
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_Init+0x3c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_Init+0x3c>)
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043cc:	2000      	movs	r0, #0
 80043ce:	f000 f811 	bl	80043f4 <HAL_InitTick>
 80043d2:	1e03      	subs	r3, r0, #0
 80043d4:	d003      	beq.n	80043de <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e001      	b.n	80043e2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043de:	f7ff fd71 	bl	8003ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043e2:	1dfb      	adds	r3, r7, #7
 80043e4:	781b      	ldrb	r3, [r3, #0]
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	40022000 	.word	0x40022000

080043f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_InitTick+0x5c>)
 80043fe:	681c      	ldr	r4, [r3, #0]
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_InitTick+0x60>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	0019      	movs	r1, r3
 8004406:	23fa      	movs	r3, #250	; 0xfa
 8004408:	0098      	lsls	r0, r3, #2
 800440a:	f7fb fe99 	bl	8000140 <__udivsi3>
 800440e:	0003      	movs	r3, r0
 8004410:	0019      	movs	r1, r3
 8004412:	0020      	movs	r0, r4
 8004414:	f7fb fe94 	bl	8000140 <__udivsi3>
 8004418:	0003      	movs	r3, r0
 800441a:	0018      	movs	r0, r3
 800441c:	f000 fd79 	bl	8004f12 <HAL_SYSTICK_Config>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d001      	beq.n	8004428 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e00f      	b.n	8004448 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b03      	cmp	r3, #3
 800442c:	d80b      	bhi.n	8004446 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	2301      	movs	r3, #1
 8004432:	425b      	negs	r3, r3
 8004434:	2200      	movs	r2, #0
 8004436:	0018      	movs	r0, r3
 8004438:	f000 fd46 	bl	8004ec8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_InitTick+0x64>)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b003      	add	sp, #12
 800444e:	bd90      	pop	{r4, r7, pc}
 8004450:	20000000 	.word	0x20000000
 8004454:	20000008 	.word	0x20000008
 8004458:	20000004 	.word	0x20000004

0800445c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_IncTick+0x1c>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	001a      	movs	r2, r3
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_IncTick+0x20>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	18d2      	adds	r2, r2, r3
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_IncTick+0x20>)
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000008 	.word	0x20000008
 800447c:	200004f0 	.word	0x200004f0

08004480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  return uwTick;
 8004484:	4b02      	ldr	r3, [pc, #8]	; (8004490 <HAL_GetTick+0x10>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	200004f0 	.word	0x200004f0

08004494 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e159      	b.n	800475a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2250      	movs	r2, #80	; 0x50
 80044b8:	2100      	movs	r1, #0
 80044ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0018      	movs	r0, r3
 80044c0:	f7ff fd14 	bl	8003eec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	2210      	movs	r2, #16
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d005      	beq.n	80044dc <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2204      	movs	r2, #4
 80044d8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80044da:	d00b      	beq.n	80044f4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2210      	movs	r2, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2250      	movs	r2, #80	; 0x50
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e132      	b.n	800475a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	4a9a      	ldr	r2, [pc, #616]	; (8004764 <HAL_ADC_Init+0x2d0>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	2202      	movs	r2, #2
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2203      	movs	r2, #3
 800450c:	4013      	ands	r3, r2
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_ADC_Init+0x90>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_ADC_Init+0x90>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_ADC_Init+0x92>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d149      	bne.n	80045be <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	23c0      	movs	r3, #192	; 0xc0
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	429a      	cmp	r2, r3
 8004534:	d00b      	beq.n	800454e <HAL_ADC_Init+0xba>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	05db      	lsls	r3, r3, #23
 800453e:	429a      	cmp	r2, r3
 8004540:	d005      	beq.n	800454e <HAL_ADC_Init+0xba>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	429a      	cmp	r2, r3
 800454c:	d111      	bne.n	8004572 <HAL_ADC_Init+0xde>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	0092      	lsls	r2, r2, #2
 800455a:	0892      	lsrs	r2, r2, #2
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6919      	ldr	r1, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	611a      	str	r2, [r3, #16]
 8004570:	e014      	b.n	800459c <HAL_ADC_Init+0x108>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	0092      	lsls	r2, r2, #2
 800457e:	0892      	lsrs	r2, r2, #2
 8004580:	611a      	str	r2, [r3, #16]
 8004582:	4b79      	ldr	r3, [pc, #484]	; (8004768 <HAL_ADC_Init+0x2d4>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b78      	ldr	r3, [pc, #480]	; (8004768 <HAL_ADC_Init+0x2d4>)
 8004588:	4978      	ldr	r1, [pc, #480]	; (800476c <HAL_ADC_Init+0x2d8>)
 800458a:	400a      	ands	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_ADC_Init+0x2d4>)
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	4b74      	ldr	r3, [pc, #464]	; (8004768 <HAL_ADC_Init+0x2d4>)
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2118      	movs	r1, #24
 80045a8:	438a      	bics	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68d9      	ldr	r1, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80045be:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <HAL_ADC_Init+0x2d4>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_ADC_Init+0x2d4>)
 80045c4:	496a      	ldr	r1, [pc, #424]	; (8004770 <HAL_ADC_Init+0x2dc>)
 80045c6:	400a      	ands	r2, r1
 80045c8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80045ca:	4b67      	ldr	r3, [pc, #412]	; (8004768 <HAL_ADC_Init+0x2d4>)
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	065a      	lsls	r2, r3, #25
 80045d4:	4b64      	ldr	r3, [pc, #400]	; (8004768 <HAL_ADC_Init+0x2d4>)
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	055b      	lsls	r3, r3, #21
 80045e4:	4013      	ands	r3, r2
 80045e6:	d108      	bne.n	80045fa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	0549      	lsls	r1, r1, #21
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	495b      	ldr	r1, [pc, #364]	; (8004774 <HAL_ADC_Init+0x2e0>)
 8004606:	400a      	ands	r2, r1
 8004608:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68d9      	ldr	r1, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d101      	bne.n	8004620 <HAL_ADC_Init+0x18c>
 800461c:	2304      	movs	r3, #4
 800461e:	e000      	b.n	8004622 <HAL_ADC_Init+0x18e>
 8004620:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004622:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2020      	movs	r0, #32
 8004628:	5c1b      	ldrb	r3, [r3, r0]
 800462a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800462c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	202c      	movs	r0, #44	; 0x2c
 8004632:	5c1b      	ldrb	r3, [r3, r0]
 8004634:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004636:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800463c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004644:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800464c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800465a:	23c2      	movs	r3, #194	; 0xc2
 800465c:	33ff      	adds	r3, #255	; 0xff
 800465e:	429a      	cmp	r2, r3
 8004660:	d00b      	beq.n	800467a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68d9      	ldr	r1, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2221      	movs	r2, #33	; 0x21
 800467e:	5c9b      	ldrb	r3, [r3, r2]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d11a      	bne.n	80046ba <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	5c9b      	ldrb	r3, [r3, r2]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	0249      	lsls	r1, r1, #9
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	e00b      	b.n	80046ba <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	2220      	movs	r2, #32
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	2201      	movs	r2, #1
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d11f      	bne.n	8004702 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	492a      	ldr	r1, [pc, #168]	; (8004778 <HAL_ADC_Init+0x2e4>)
 80046ce:	400a      	ands	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6919      	ldr	r1, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046e0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80046e6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	430a      	orrs	r2, r1
 80046fe:	611a      	str	r2, [r3, #16]
 8004700:	e00e      	b.n	8004720 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2201      	movs	r2, #1
 800470a:	4013      	ands	r3, r2
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2101      	movs	r1, #1
 800471c:	438a      	bics	r2, r1
 800471e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2107      	movs	r1, #7
 800472c:	438a      	bics	r2, r1
 800472e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6959      	ldr	r1, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	2203      	movs	r2, #3
 800474e:	4393      	bics	r3, r2
 8004750:	2201      	movs	r2, #1
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	fffffefd 	.word	0xfffffefd
 8004768:	40012708 	.word	0x40012708
 800476c:	ffc3ffff 	.word	0xffc3ffff
 8004770:	fdffffff 	.word	0xfdffffff
 8004774:	fffe0219 	.word	0xfffe0219
 8004778:	fffffc03 	.word	0xfffffc03

0800477c <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004788:	2317      	movs	r3, #23
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2204      	movs	r2, #4
 8004798:	4013      	ands	r3, r2
 800479a:	d15e      	bne.n	800485a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2250      	movs	r2, #80	; 0x50
 80047a0:	5c9b      	ldrb	r3, [r3, r2]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_Start_DMA+0x2e>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e05e      	b.n	8004868 <HAL_ADC_Start_DMA+0xec>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2250      	movs	r2, #80	; 0x50
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	430a      	orrs	r2, r1
 80047c0:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d007      	beq.n	80047da <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80047ca:	2317      	movs	r3, #23
 80047cc:	18fc      	adds	r4, r7, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f9c9 	bl	8004b68 <ADC_Enable>
 80047d6:	0003      	movs	r3, r0
 80047d8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80047da:	2317      	movs	r3, #23
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d13e      	bne.n	8004862 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_ADC_Start_DMA+0xf4>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	0052      	lsls	r2, r2, #1
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2250      	movs	r2, #80	; 0x50
 8004800:	2100      	movs	r1, #0
 8004802:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_ADC_Start_DMA+0xf8>)
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_ADC_Start_DMA+0xfc>)
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_ADC_Start_DMA+0x100>)
 800481a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	221c      	movs	r2, #28
 8004822:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2110      	movs	r1, #16
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3340      	adds	r3, #64	; 0x40
 800483e:	0019      	movs	r1, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f000 fd1c 	bl	8005280 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2104      	movs	r1, #4
 8004854:	430a      	orrs	r2, r1
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	e003      	b.n	8004862 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800485a:	2317      	movs	r3, #23
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	2202      	movs	r2, #2
 8004860:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004862:	2317      	movs	r3, #23
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	781b      	ldrb	r3, [r3, #0]
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b007      	add	sp, #28
 800486e:	bd90      	pop	{r4, r7, pc}
 8004870:	fffff0fe 	.word	0xfffff0fe
 8004874:	08004c29 	.word	0x08004c29
 8004878:	08004cdd 	.word	0x08004cdd
 800487c:	08004cfb 	.word	0x08004cfb

08004880 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2204      	movs	r2, #4
 8004890:	4013      	ands	r3, r2
 8004892:	2b04      	cmp	r3, #4
 8004894:	d106      	bne.n	80048a4 <HAL_ADC_IRQHandler+0x24>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2204      	movs	r2, #4
 800489e:	4013      	ands	r3, r2
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d00d      	beq.n	80048c0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2208      	movs	r2, #8
 80048ac:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d154      	bne.n	800495c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2208      	movs	r2, #8
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d14d      	bne.n	800495c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	2210      	movs	r2, #16
 80048c6:	4013      	ands	r3, r2
 80048c8:	d106      	bne.n	80048d8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	2280      	movs	r2, #128	; 0x80
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	23c0      	movs	r3, #192	; 0xc0
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	4013      	ands	r3, r2
 80048e4:	d12e      	bne.n	8004944 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d129      	bne.n	8004944 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2208      	movs	r2, #8
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d122      	bne.n	8004944 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2204      	movs	r2, #4
 8004906:	4013      	ands	r3, r2
 8004908:	d110      	bne.n	800492c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	210c      	movs	r1, #12
 8004916:	438a      	bics	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	4a35      	ldr	r2, [pc, #212]	; (80049f4 <HAL_ADC_IRQHandler+0x174>)
 8004920:	4013      	ands	r3, r2
 8004922:	2201      	movs	r2, #1
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
 800492a:	e00b      	b.n	8004944 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	2220      	movs	r2, #32
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	2201      	movs	r2, #1
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff f816 	bl	8003978 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d003      	beq.n	800495c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	220c      	movs	r2, #12
 800495a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	4013      	ands	r3, r2
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d115      	bne.n	8004996 <HAL_ADC_IRQHandler+0x116>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	4013      	ands	r3, r2
 8004974:	2b80      	cmp	r3, #128	; 0x80
 8004976:	d10e      	bne.n	8004996 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	2280      	movs	r2, #128	; 0x80
 800497e:	0252      	lsls	r2, r2, #9
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f83d 	bl	8004a08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2280      	movs	r2, #128	; 0x80
 8004994:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2210      	movs	r2, #16
 800499e:	4013      	ands	r3, r2
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d123      	bne.n	80049ec <HAL_ADC_IRQHandler+0x16c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2210      	movs	r2, #16
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d11c      	bne.n	80049ec <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d006      	beq.n	80049c8 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d10d      	bne.n	80049e4 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	2202      	movs	r2, #2
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2210      	movs	r2, #16
 80049da:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 f81a 	bl	8004a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2210      	movs	r2, #16
 80049ea:	601a      	str	r2, [r3, #0]
  }
  
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	fffffefe 	.word	0xfffffefe

080049f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2250      	movs	r2, #80	; 0x50
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e085      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x124>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2250      	movs	r2, #80	; 0x50
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	2220      	movs	r2, #32
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2250      	movs	r2, #80	; 0x50
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e06f      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a38      	ldr	r2, [pc, #224]	; (8004b54 <HAL_ADC_ConfigChannel+0x12c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d035      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	035b      	lsls	r3, r3, #13
 8004a82:	0b5a      	lsrs	r2, r3, #13
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	02db      	lsls	r3, r3, #11
 8004a94:	4013      	ands	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0409      	lsls	r1, r1, #16
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004aa6:	200a      	movs	r0, #10
 8004aa8:	f000 f942 	bl	8004d30 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	029b      	lsls	r3, r3, #10
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d006      	beq.n	8004ac6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	03c9      	lsls	r1, r1, #15
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	025b      	lsls	r3, r3, #9
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d037      	beq.n	8004b42 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8004ad2:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	0449      	lsls	r1, r1, #17
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e02f      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	035b      	lsls	r3, r3, #13
 8004aee:	0b5b      	lsrs	r3, r3, #13
 8004af0:	43d9      	mvns	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	400a      	ands	r2, r1
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	02db      	lsls	r3, r3, #11
 8004b02:	4013      	ands	r3, r2
 8004b04:	d005      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b0c:	4913      	ldr	r1, [pc, #76]	; (8004b5c <HAL_ADC_ConfigChannel+0x134>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d005      	beq.n	8004b2a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b24:	490e      	ldr	r1, [pc, #56]	; (8004b60 <HAL_ADC_ConfigChannel+0x138>)
 8004b26:	400a      	ands	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	025b      	lsls	r3, r3, #9
 8004b32:	4013      	ands	r3, r2
 8004b34:	d005      	beq.n	8004b42 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b3c:	4909      	ldr	r1, [pc, #36]	; (8004b64 <HAL_ADC_ConfigChannel+0x13c>)
 8004b3e:	400a      	ands	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2250      	movs	r2, #80	; 0x50
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	00001001 	.word	0x00001001
 8004b58:	40012708 	.word	0x40012708
 8004b5c:	ff7fffff 	.word	0xff7fffff
 8004b60:	ffbfffff 	.word	0xffbfffff
 8004b64:	feffffff 	.word	0xfeffffff

08004b68 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d108      	bne.n	8004b94 <ADC_Enable+0x2c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <ADC_Enable+0x2c>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <ADC_Enable+0x2e>
 8004b94:	2300      	movs	r3, #0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d13f      	bne.n	8004c1a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	; (8004c24 <ADC_Enable+0xbc>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d00d      	beq.n	8004bc2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	2210      	movs	r2, #16
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e02c      	b.n	8004c1c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f000 f8ac 	bl	8004d30 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bd8:	f7ff fc52 	bl	8004480 <HAL_GetTick>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004be0:	e014      	b.n	8004c0c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004be2:	f7ff fc4d 	bl	8004480 <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b0a      	cmp	r3, #10
 8004bee:	d90d      	bls.n	8004c0c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	2201      	movs	r2, #1
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e007      	b.n	8004c1c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d1e3      	bne.n	8004be2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b004      	add	sp, #16
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	80000017 	.word	0x80000017

08004c28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	2250      	movs	r2, #80	; 0x50
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d141      	bne.n	8004cc4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	0092      	lsls	r2, r2, #2
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	23c0      	movs	r3, #192	; 0xc0
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d12e      	bne.n	8004cba <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d129      	bne.n	8004cba <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d122      	bne.n	8004cba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d110      	bne.n	8004ca2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	210c      	movs	r1, #12
 8004c8c:	438a      	bics	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <ADC_DMAConvCplt+0xb0>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	2201      	movs	r2, #1
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
 8004ca0:	e00b      	b.n	8004cba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fe fe5b 	bl	8003978 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004cc2:	e005      	b.n	8004cd0 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	0010      	movs	r0, r2
 8004cce:	4798      	blx	r3
}
 8004cd0:	46c0      	nop			; (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	fffffefe 	.word	0xfffffefe

08004cdc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7ff fe83 	bl	80049f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	2240      	movs	r2, #64	; 0x40
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	2204      	movs	r2, #4
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff fe78 	bl	8004a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <ADC_DelayMicroSecond+0x38>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	490b      	ldr	r1, [pc, #44]	; (8004d6c <ADC_DelayMicroSecond+0x3c>)
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f7fb f9fe 	bl	8000140 <__udivsi3>
 8004d44:	0003      	movs	r3, r0
 8004d46:	001a      	movs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4353      	muls	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004d4e:	e002      	b.n	8004d56 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f9      	bne.n	8004d50 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004d5c:	46c0      	nop			; (mov r8, r8)
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	000f4240 	.word	0x000f4240

08004d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	0002      	movs	r2, r0
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b7f      	cmp	r3, #127	; 0x7f
 8004d82:	d809      	bhi.n	8004d98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	001a      	movs	r2, r3
 8004d8a:	231f      	movs	r3, #31
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__NVIC_EnableIRQ+0x30>)
 8004d90:	2101      	movs	r1, #1
 8004d92:	4091      	lsls	r1, r2
 8004d94:	000a      	movs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]
  }
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	e000e100 	.word	0xe000e100

08004da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	0002      	movs	r2, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	1dfb      	adds	r3, r7, #7
 8004db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004db2:	1dfb      	adds	r3, r7, #7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b7f      	cmp	r3, #127	; 0x7f
 8004db8:	d828      	bhi.n	8004e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dba:	4a2f      	ldr	r2, [pc, #188]	; (8004e78 <__NVIC_SetPriority+0xd4>)
 8004dbc:	1dfb      	adds	r3, r7, #7
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	33c0      	adds	r3, #192	; 0xc0
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	589b      	ldr	r3, [r3, r2]
 8004dca:	1dfa      	adds	r2, r7, #7
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	0011      	movs	r1, r2
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	400a      	ands	r2, r1
 8004dd4:	00d2      	lsls	r2, r2, #3
 8004dd6:	21ff      	movs	r1, #255	; 0xff
 8004dd8:	4091      	lsls	r1, r2
 8004dda:	000a      	movs	r2, r1
 8004ddc:	43d2      	mvns	r2, r2
 8004dde:	401a      	ands	r2, r3
 8004de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	22ff      	movs	r2, #255	; 0xff
 8004de8:	401a      	ands	r2, r3
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	0018      	movs	r0, r3
 8004df0:	2303      	movs	r3, #3
 8004df2:	4003      	ands	r3, r0
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004df8:	481f      	ldr	r0, [pc, #124]	; (8004e78 <__NVIC_SetPriority+0xd4>)
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	430a      	orrs	r2, r1
 8004e04:	33c0      	adds	r3, #192	; 0xc0
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004e0a:	e031      	b.n	8004e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <__NVIC_SetPriority+0xd8>)
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	0019      	movs	r1, r3
 8004e14:	230f      	movs	r3, #15
 8004e16:	400b      	ands	r3, r1
 8004e18:	3b08      	subs	r3, #8
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	3306      	adds	r3, #6
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	18d3      	adds	r3, r2, r3
 8004e22:	3304      	adds	r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1dfa      	adds	r2, r7, #7
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	400a      	ands	r2, r1
 8004e30:	00d2      	lsls	r2, r2, #3
 8004e32:	21ff      	movs	r1, #255	; 0xff
 8004e34:	4091      	lsls	r1, r2
 8004e36:	000a      	movs	r2, r1
 8004e38:	43d2      	mvns	r2, r2
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	401a      	ands	r2, r3
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	4003      	ands	r3, r0
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e54:	4809      	ldr	r0, [pc, #36]	; (8004e7c <__NVIC_SetPriority+0xd8>)
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	001c      	movs	r4, r3
 8004e5c:	230f      	movs	r3, #15
 8004e5e:	4023      	ands	r3, r4
 8004e60:	3b08      	subs	r3, #8
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	430a      	orrs	r2, r1
 8004e66:	3306      	adds	r3, #6
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	18c3      	adds	r3, r0, r3
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b003      	add	sp, #12
 8004e76:	bd90      	pop	{r4, r7, pc}
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1e5a      	subs	r2, r3, #1
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	045b      	lsls	r3, r3, #17
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d301      	bcc.n	8004e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e94:	2301      	movs	r3, #1
 8004e96:	e010      	b.n	8004eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <SysTick_Config+0x44>)
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	425b      	negs	r3, r3
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff ff7c 	bl	8004da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Config+0x44>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <SysTick_Config+0x44>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	210f      	movs	r1, #15
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	1c02      	adds	r2, r0, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	0011      	movs	r1, r2
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7ff ff5d 	bl	8004da4 <__NVIC_SetPriority>
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	0002      	movs	r2, r0
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	0018      	movs	r0, r3
 8004f06:	f7ff ff33 	bl	8004d70 <__NVIC_EnableIRQ>
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff ffaf 	bl	8004e80 <SysTick_Config>
 8004f22:	0003      	movs	r3, r0
}
 8004f24:	0018      	movs	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e015      	b.n	8004f6a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	791b      	ldrb	r3, [r3, #4]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff f83f 	bl	8003fd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b002      	add	sp, #8
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b002      	add	sp, #8
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b002      	add	sp, #8
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b002      	add	sp, #8
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	795b      	ldrb	r3, [r3, #5]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_DAC_ConfigChannel+0x20>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e035      	b.n	8005030 <HAL_DAC_ConfigChannel+0x8c>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004fd8:	4a17      	ldr	r2, [pc, #92]	; (8005038 <HAL_DAC_ConfigChannel+0x94>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	0013      	movs	r3, r2
 8004fe0:	43da      	mvns	r2, r3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	0013      	movs	r3, r2
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	21c0      	movs	r1, #192	; 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4099      	lsls	r1, r3
 8005016:	000b      	movs	r3, r1
 8005018:	43d9      	mvns	r1, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	400a      	ands	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b006      	add	sp, #24
 8005036:	bd80      	pop	{r7, pc}
 8005038:	00000ffe 	.word	0x00000ffe

0800503c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	795b      	ldrb	r3, [r3, #5]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_DAC_Start_DMA+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e055      	b.n	8005106 <HAL_DAC_Start_DMA+0xca>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2202      	movs	r2, #2
 8005064:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <HAL_DAC_Start_DMA+0xd4>)
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4a28      	ldr	r2, [pc, #160]	; (8005114 <HAL_DAC_Start_DMA+0xd8>)
 8005074:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4a27      	ldr	r2, [pc, #156]	; (8005118 <HAL_DAC_Start_DMA+0xdc>)
 800507c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2180      	movs	r1, #128	; 0x80
 800508a:	0149      	lsls	r1, r1, #5
 800508c:	430a      	orrs	r2, r1
 800508e:	601a      	str	r2, [r3, #0]
     
  /* Case of use of channel 1 */
  switch(Alignment)
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d013      	beq.n	80050be <HAL_DAC_Start_DMA+0x82>
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d815      	bhi.n	80050c8 <HAL_DAC_Start_DMA+0x8c>
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_DAC_Start_DMA+0x6e>
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d005      	beq.n	80050b4 <HAL_DAC_Start_DMA+0x78>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 80050a8:	e00e      	b.n	80050c8 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	617b      	str	r3, [r7, #20]
      break;
 80050b2:	e00a      	b.n	80050ca <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	617b      	str	r3, [r7, #20]
      break;
 80050bc:	e005      	b.n	80050ca <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3310      	adds	r3, #16
 80050c4:	617b      	str	r3, [r7, #20]
      break;
 80050c6:	e000      	b.n	80050ca <HAL_DAC_Start_DMA+0x8e>
      break;
 80050c8:	46c0      	nop			; (mov r8, r8)
  }
  UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
  
  /* Enable the DMA Stream */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	0189      	lsls	r1, r1, #6
 80050d8:	430a      	orrs	r2, r1
 80050da:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6898      	ldr	r0, [r3, #8]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	f000 f8cb 	bl	8005280 <HAL_DMA_Start_IT>
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	409a      	lsls	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b006      	add	sp, #24
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	0800511d 	.word	0x0800511d
 8005114:	08005141 	.word	0x08005141
 8005118:	0800515f 	.word	0x0800515f

0800511c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	0018      	movs	r0, r3
 800512e:	f7ff ff20 	bl	8004f72 <HAL_DAC_ConvCpltCallbackCh1>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	711a      	strb	r2, [r3, #4]
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}

08005140 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	60fb      	str	r3, [r7, #12]

  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff ff16 	bl	8004f82 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}

0800515e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2204      	movs	r2, #4
 8005172:	431a      	orrs	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]

  HAL_DAC_ErrorCallbackCh1(hdac);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	0018      	movs	r0, r3
 800517c:	f7ff ff09 	bl	8004f92 <HAL_DAC_ErrorCallbackCh1>

  hdac->State= HAL_DAC_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2201      	movs	r2, #1
 8005184:	711a      	strb	r2, [r3, #4]
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b004      	add	sp, #16
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e061      	b.n	8005266 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a32      	ldr	r2, [pc, #200]	; (8005270 <HAL_DMA_Init+0xe0>)
 80051a8:	4694      	mov	ip, r2
 80051aa:	4463      	add	r3, ip
 80051ac:	2114      	movs	r1, #20
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7fa ffc6 	bl	8000140 <__udivsi3>
 80051b4:	0003      	movs	r3, r0
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <HAL_DMA_Init+0xe4>)
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2225      	movs	r2, #37	; 0x25
 80051c6:	2102      	movs	r1, #2
 80051c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a28      	ldr	r2, [pc, #160]	; (8005278 <HAL_DMA_Init+0xe8>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	2380      	movs	r3, #128	; 0x80
 8005216:	01db      	lsls	r3, r3, #7
 8005218:	429a      	cmp	r2, r3
 800521a:	d018      	beq.n	800524e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800521c:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_DMA_Init+0xec>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	211c      	movs	r1, #28
 8005226:	400b      	ands	r3, r1
 8005228:	210f      	movs	r1, #15
 800522a:	4099      	lsls	r1, r3
 800522c:	000b      	movs	r3, r1
 800522e:	43d9      	mvns	r1, r3
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <HAL_DMA_Init+0xec>)
 8005232:	400a      	ands	r2, r1
 8005234:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005236:	4b11      	ldr	r3, [pc, #68]	; (800527c <HAL_DMA_Init+0xec>)
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	201c      	movs	r0, #28
 8005244:	4003      	ands	r3, r0
 8005246:	409a      	lsls	r2, r3
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <HAL_DMA_Init+0xec>)
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2225      	movs	r2, #37	; 0x25
 8005258:	2101      	movs	r1, #1
 800525a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2224      	movs	r2, #36	; 0x24
 8005260:	2100      	movs	r1, #0
 8005262:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b004      	add	sp, #16
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	bffdfff8 	.word	0xbffdfff8
 8005274:	40020000 	.word	0x40020000
 8005278:	ffff800f 	.word	0xffff800f
 800527c:	400200a8 	.word	0x400200a8

08005280 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2317      	movs	r3, #23
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2224      	movs	r2, #36	; 0x24
 800529a:	5c9b      	ldrb	r3, [r3, r2]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_DMA_Start_IT+0x24>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e04f      	b.n	8005344 <HAL_DMA_Start_IT+0xc4>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2224      	movs	r2, #36	; 0x24
 80052a8:	2101      	movs	r1, #1
 80052aa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2225      	movs	r2, #37	; 0x25
 80052b0:	5c9b      	ldrb	r3, [r3, r2]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d13a      	bne.n	800532e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2225      	movs	r2, #37	; 0x25
 80052bc:	2102      	movs	r1, #2
 80052be:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	438a      	bics	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f933 	bl	8005548 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	210e      	movs	r1, #14
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e00f      	b.n	800531c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2104      	movs	r1, #4
 8005308:	438a      	bics	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	210a      	movs	r1, #10
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2101      	movs	r1, #1
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e007      	b.n	800533e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2224      	movs	r2, #36	; 0x24
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005336:	2317      	movs	r3, #23
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	2202      	movs	r2, #2
 800533c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800533e:	2317      	movs	r3, #23
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b006      	add	sp, #24
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	221c      	movs	r2, #28
 800536a:	4013      	ands	r3, r2
 800536c:	2204      	movs	r2, #4
 800536e:	409a      	lsls	r2, r3
 8005370:	0013      	movs	r3, r2
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4013      	ands	r3, r2
 8005376:	d026      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x7a>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2204      	movs	r2, #4
 800537c:	4013      	ands	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2220      	movs	r2, #32
 8005388:	4013      	ands	r3, r2
 800538a:	d107      	bne.n	800539c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2104      	movs	r1, #4
 8005398:	438a      	bics	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	221c      	movs	r2, #28
 80053a2:	401a      	ands	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2104      	movs	r1, #4
 80053aa:	4091      	lsls	r1, r2
 80053ac:	000a      	movs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d100      	bne.n	80053ba <HAL_DMA_IRQHandler+0x6e>
 80053b8:	e071      	b.n	800549e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	0010      	movs	r0, r2
 80053c2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80053c4:	e06b      	b.n	800549e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	221c      	movs	r2, #28
 80053cc:	4013      	ands	r3, r2
 80053ce:	2202      	movs	r2, #2
 80053d0:	409a      	lsls	r2, r3
 80053d2:	0013      	movs	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	d02d      	beq.n	8005436 <HAL_DMA_IRQHandler+0xea>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2202      	movs	r2, #2
 80053de:	4013      	ands	r3, r2
 80053e0:	d029      	beq.n	8005436 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2220      	movs	r2, #32
 80053ea:	4013      	ands	r3, r2
 80053ec:	d10b      	bne.n	8005406 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	210a      	movs	r1, #10
 80053fa:	438a      	bics	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2225      	movs	r2, #37	; 0x25
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	221c      	movs	r2, #28
 800540c:	401a      	ands	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	2102      	movs	r1, #2
 8005414:	4091      	lsls	r1, r2
 8005416:	000a      	movs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2224      	movs	r2, #36	; 0x24
 800541e:	2100      	movs	r1, #0
 8005420:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d039      	beq.n	800549e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	0010      	movs	r0, r2
 8005432:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005434:	e033      	b.n	800549e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	221c      	movs	r2, #28
 800543c:	4013      	ands	r3, r2
 800543e:	2208      	movs	r2, #8
 8005440:	409a      	lsls	r2, r3
 8005442:	0013      	movs	r3, r2
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4013      	ands	r3, r2
 8005448:	d02a      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x154>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2208      	movs	r2, #8
 800544e:	4013      	ands	r3, r2
 8005450:	d026      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	210e      	movs	r1, #14
 800545e:	438a      	bics	r2, r1
 8005460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	221c      	movs	r2, #28
 8005468:	401a      	ands	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2101      	movs	r1, #1
 8005470:	4091      	lsls	r1, r2
 8005472:	000a      	movs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2225      	movs	r2, #37	; 0x25
 8005480:	2101      	movs	r1, #1
 8005482:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2224      	movs	r2, #36	; 0x24
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	0010      	movs	r0, r2
 800549c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	46c0      	nop			; (mov r8, r8)
}
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	230b      	movs	r3, #11
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	1c0a      	adds	r2, r1, #0
 80054b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ba:	2317      	movs	r3, #23
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]

  /* Process locked */
  __HAL_LOCK(hdma);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_DMA_RegisterCallback+0x28>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e037      	b.n	8005540 <HAL_DMA_RegisterCallback+0x98>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2224      	movs	r2, #36	; 0x24
 80054d4:	2101      	movs	r1, #1
 80054d6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2225      	movs	r2, #37	; 0x25
 80054dc:	5c9b      	ldrb	r3, [r3, r2]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d122      	bne.n	800552a <HAL_DMA_RegisterCallback+0x82>
  {
    switch (CallbackID)
 80054e4:	230b      	movs	r3, #11
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d014      	beq.n	8005518 <HAL_DMA_RegisterCallback+0x70>
 80054ee:	dc17      	bgt.n	8005520 <HAL_DMA_RegisterCallback+0x78>
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d00d      	beq.n	8005510 <HAL_DMA_RegisterCallback+0x68>
 80054f4:	dc14      	bgt.n	8005520 <HAL_DMA_RegisterCallback+0x78>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_DMA_RegisterCallback+0x58>
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_RegisterCallback+0x60>
 80054fe:	e00f      	b.n	8005520 <HAL_DMA_RegisterCallback+0x78>
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005506:	e014      	b.n	8005532 <HAL_DMA_RegisterCallback+0x8a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 800550e:	e010      	b.n	8005532 <HAL_DMA_RegisterCallback+0x8a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005516:	e00c      	b.n	8005532 <HAL_DMA_RegisterCallback+0x8a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 800551e:	e008      	b.n	8005532 <HAL_DMA_RegisterCallback+0x8a>

     default:
           status = HAL_ERROR;
 8005520:	2317      	movs	r3, #23
 8005522:	18fb      	adds	r3, r7, r3
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
           break;
 8005528:	e003      	b.n	8005532 <HAL_DMA_RegisterCallback+0x8a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800552a:	2317      	movs	r3, #23
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2224      	movs	r2, #36	; 0x24
 8005536:	2100      	movs	r1, #0
 8005538:	5499      	strb	r1, [r3, r2]

  return status;
 800553a:	2317      	movs	r3, #23
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	781b      	ldrb	r3, [r3, #0]
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b006      	add	sp, #24
 8005546:	bd80      	pop	{r7, pc}

08005548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	221c      	movs	r2, #28
 800555c:	401a      	ands	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2101      	movs	r1, #1
 8005564:	4091      	lsls	r1, r2
 8005566:	000a      	movs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b10      	cmp	r3, #16
 8005578:	d108      	bne.n	800558c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800558a:	e007      	b.n	800559c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	60da      	str	r2, [r3, #12]
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b004      	add	sp, #16
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80055ba:	e14f      	b.n	800585c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2101      	movs	r1, #1
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4091      	lsls	r1, r2
 80055c6:	000a      	movs	r2, r1
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d100      	bne.n	80055d4 <HAL_GPIO_Init+0x30>
 80055d2:	e140      	b.n	8005856 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d00b      	beq.n	80055f4 <HAL_GPIO_Init+0x50>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d007      	beq.n	80055f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055e8:	2b11      	cmp	r3, #17
 80055ea:	d003      	beq.n	80055f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b12      	cmp	r3, #18
 80055f2:	d130      	bne.n	8005656 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	2203      	movs	r2, #3
 8005600:	409a      	lsls	r2, r3
 8005602:	0013      	movs	r3, r2
 8005604:	43da      	mvns	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4013      	ands	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	409a      	lsls	r2, r3
 8005616:	0013      	movs	r3, r2
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800562a:	2201      	movs	r2, #1
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	409a      	lsls	r2, r3
 8005630:	0013      	movs	r3, r2
 8005632:	43da      	mvns	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	2201      	movs	r2, #1
 8005642:	401a      	ands	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	409a      	lsls	r2, r3
 8005648:	0013      	movs	r3, r2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	2203      	movs	r2, #3
 8005662:	409a      	lsls	r2, r3
 8005664:	0013      	movs	r3, r2
 8005666:	43da      	mvns	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	409a      	lsls	r2, r3
 8005678:	0013      	movs	r3, r2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0xf2>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b12      	cmp	r3, #18
 8005694:	d123      	bne.n	80056de <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	08da      	lsrs	r2, r3, #3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3208      	adds	r2, #8
 800569e:	0092      	lsls	r2, r2, #2
 80056a0:	58d3      	ldr	r3, [r2, r3]
 80056a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2207      	movs	r2, #7
 80056a8:	4013      	ands	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	220f      	movs	r2, #15
 80056ae:	409a      	lsls	r2, r3
 80056b0:	0013      	movs	r3, r2
 80056b2:	43da      	mvns	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2107      	movs	r1, #7
 80056c2:	400b      	ands	r3, r1
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	409a      	lsls	r2, r3
 80056c8:	0013      	movs	r3, r2
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3208      	adds	r2, #8
 80056d8:	0092      	lsls	r2, r2, #2
 80056da:	6939      	ldr	r1, [r7, #16]
 80056dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	2203      	movs	r2, #3
 80056ea:	409a      	lsls	r2, r3
 80056ec:	0013      	movs	r3, r2
 80056ee:	43da      	mvns	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4013      	ands	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2203      	movs	r2, #3
 80056fc:	401a      	ands	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	409a      	lsls	r2, r3
 8005704:	0013      	movs	r3, r2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	055b      	lsls	r3, r3, #21
 800571a:	4013      	ands	r3, r2
 800571c:	d100      	bne.n	8005720 <HAL_GPIO_Init+0x17c>
 800571e:	e09a      	b.n	8005856 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005720:	4b54      	ldr	r3, [pc, #336]	; (8005874 <HAL_GPIO_Init+0x2d0>)
 8005722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005724:	4b53      	ldr	r3, [pc, #332]	; (8005874 <HAL_GPIO_Init+0x2d0>)
 8005726:	2101      	movs	r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800572c:	4a52      	ldr	r2, [pc, #328]	; (8005878 <HAL_GPIO_Init+0x2d4>)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	089b      	lsrs	r3, r3, #2
 8005732:	3302      	adds	r3, #2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	589b      	ldr	r3, [r3, r2]
 8005738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2203      	movs	r2, #3
 800573e:	4013      	ands	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	220f      	movs	r2, #15
 8005744:	409a      	lsls	r2, r3
 8005746:	0013      	movs	r3, r2
 8005748:	43da      	mvns	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	23a0      	movs	r3, #160	; 0xa0
 8005754:	05db      	lsls	r3, r3, #23
 8005756:	429a      	cmp	r2, r3
 8005758:	d019      	beq.n	800578e <HAL_GPIO_Init+0x1ea>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a47      	ldr	r2, [pc, #284]	; (800587c <HAL_GPIO_Init+0x2d8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_GPIO_Init+0x1e6>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a46      	ldr	r2, [pc, #280]	; (8005880 <HAL_GPIO_Init+0x2dc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_GPIO_Init+0x1e2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a45      	ldr	r2, [pc, #276]	; (8005884 <HAL_GPIO_Init+0x2e0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <HAL_GPIO_Init+0x1de>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a44      	ldr	r2, [pc, #272]	; (8005888 <HAL_GPIO_Init+0x2e4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_GPIO_Init+0x1da>
 800577a:	2305      	movs	r3, #5
 800577c:	e008      	b.n	8005790 <HAL_GPIO_Init+0x1ec>
 800577e:	2306      	movs	r3, #6
 8005780:	e006      	b.n	8005790 <HAL_GPIO_Init+0x1ec>
 8005782:	2303      	movs	r3, #3
 8005784:	e004      	b.n	8005790 <HAL_GPIO_Init+0x1ec>
 8005786:	2302      	movs	r3, #2
 8005788:	e002      	b.n	8005790 <HAL_GPIO_Init+0x1ec>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_GPIO_Init+0x1ec>
 800578e:	2300      	movs	r3, #0
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	2103      	movs	r1, #3
 8005794:	400a      	ands	r2, r1
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	4093      	lsls	r3, r2
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a0:	4935      	ldr	r1, [pc, #212]	; (8005878 <HAL_GPIO_Init+0x2d4>)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	3302      	adds	r3, #2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <HAL_GPIO_Init+0x2e8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	43da      	mvns	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4013      	ands	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	025b      	lsls	r3, r3, #9
 80057c6:	4013      	ands	r3, r2
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80057d2:	4b2e      	ldr	r3, [pc, #184]	; (800588c <HAL_GPIO_Init+0x2e8>)
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80057d8:	4b2c      	ldr	r3, [pc, #176]	; (800588c <HAL_GPIO_Init+0x2e8>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	43da      	mvns	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4013      	ands	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	4013      	ands	r3, r2
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80057fc:	4b23      	ldr	r3, [pc, #140]	; (800588c <HAL_GPIO_Init+0x2e8>)
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <HAL_GPIO_Init+0x2e8>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	43da      	mvns	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	035b      	lsls	r3, r3, #13
 800581a:	4013      	ands	r3, r2
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005826:	4b19      	ldr	r3, [pc, #100]	; (800588c <HAL_GPIO_Init+0x2e8>)
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <HAL_GPIO_Init+0x2e8>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	43da      	mvns	r2, r3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4013      	ands	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	039b      	lsls	r3, r3, #14
 8005844:	4013      	ands	r3, r2
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005850:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_GPIO_Init+0x2e8>)
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	3301      	adds	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	40da      	lsrs	r2, r3
 8005864:	1e13      	subs	r3, r2, #0
 8005866:	d000      	beq.n	800586a <HAL_GPIO_Init+0x2c6>
 8005868:	e6a8      	b.n	80055bc <HAL_GPIO_Init+0x18>
  }
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b006      	add	sp, #24
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000
 8005878:	40010000 	.word	0x40010000
 800587c:	50000400 	.word	0x50000400
 8005880:	50000800 	.word	0x50000800
 8005884:	50000c00 	.word	0x50000c00
 8005888:	50001c00 	.word	0x50001c00
 800588c:	40010400 	.word	0x40010400

08005890 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	0008      	movs	r0, r1
 800589a:	0011      	movs	r1, r2
 800589c:	1cbb      	adds	r3, r7, #2
 800589e:	1c02      	adds	r2, r0, #0
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	1c7b      	adds	r3, r7, #1
 80058a4:	1c0a      	adds	r2, r1, #0
 80058a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a8:	1c7b      	adds	r3, r7, #1
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058b0:	1cbb      	adds	r3, r7, #2
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80058b8:	e003      	b.n	80058c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80058ba:	1cbb      	adds	r3, r7, #2
 80058bc:	881a      	ldrh	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b002      	add	sp, #8
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	000a      	movs	r2, r1
 80058d4:	1cbb      	adds	r3, r7, #2
 80058d6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058de:	1cbb      	adds	r3, r7, #2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4013      	ands	r3, r2
 80058e6:	041a      	lsls	r2, r3, #16
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	1cb9      	adds	r1, r7, #2
 80058ee:	8809      	ldrh	r1, [r1, #0]
 80058f0:	400b      	ands	r3, r1
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	619a      	str	r2, [r3, #24]
}
 80058f8:	46c0      	nop			; (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f000 fbaf 	bl	8006072 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005914:	4bcf      	ldr	r3, [pc, #828]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	220c      	movs	r2, #12
 800591a:	4013      	ands	r3, r2
 800591c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800591e:	4bcd      	ldr	r3, [pc, #820]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	2380      	movs	r3, #128	; 0x80
 8005924:	025b      	lsls	r3, r3, #9
 8005926:	4013      	ands	r3, r2
 8005928:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	4013      	ands	r3, r2
 8005932:	d100      	bne.n	8005936 <HAL_RCC_OscConfig+0x36>
 8005934:	e07e      	b.n	8005a34 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d007      	beq.n	800594c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	2b0c      	cmp	r3, #12
 8005940:	d112      	bne.n	8005968 <HAL_RCC_OscConfig+0x68>
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	025b      	lsls	r3, r3, #9
 8005948:	429a      	cmp	r2, r3
 800594a:	d10d      	bne.n	8005968 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4bc1      	ldr	r3, [pc, #772]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	4013      	ands	r3, r2
 8005956:	d100      	bne.n	800595a <HAL_RCC_OscConfig+0x5a>
 8005958:	e06b      	b.n	8005a32 <HAL_RCC_OscConfig+0x132>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d167      	bne.n	8005a32 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f000 fb85 	bl	8006072 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	025b      	lsls	r3, r3, #9
 8005970:	429a      	cmp	r2, r3
 8005972:	d107      	bne.n	8005984 <HAL_RCC_OscConfig+0x84>
 8005974:	4bb7      	ldr	r3, [pc, #732]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4bb6      	ldr	r3, [pc, #728]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 800597a:	2180      	movs	r1, #128	; 0x80
 800597c:	0249      	lsls	r1, r1, #9
 800597e:	430a      	orrs	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e027      	b.n	80059d4 <HAL_RCC_OscConfig+0xd4>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	23a0      	movs	r3, #160	; 0xa0
 800598a:	02db      	lsls	r3, r3, #11
 800598c:	429a      	cmp	r2, r3
 800598e:	d10e      	bne.n	80059ae <HAL_RCC_OscConfig+0xae>
 8005990:	4bb0      	ldr	r3, [pc, #704]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4baf      	ldr	r3, [pc, #700]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	02c9      	lsls	r1, r1, #11
 800599a:	430a      	orrs	r2, r1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	4bad      	ldr	r3, [pc, #692]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4bac      	ldr	r3, [pc, #688]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	0249      	lsls	r1, r1, #9
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e012      	b.n	80059d4 <HAL_RCC_OscConfig+0xd4>
 80059ae:	4ba9      	ldr	r3, [pc, #676]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4ba8      	ldr	r3, [pc, #672]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059b4:	49a8      	ldr	r1, [pc, #672]	; (8005c58 <HAL_RCC_OscConfig+0x358>)
 80059b6:	400a      	ands	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	4ba6      	ldr	r3, [pc, #664]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	025b      	lsls	r3, r3, #9
 80059c2:	4013      	ands	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4ba2      	ldr	r3, [pc, #648]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	4ba1      	ldr	r3, [pc, #644]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059ce:	49a3      	ldr	r1, [pc, #652]	; (8005c5c <HAL_RCC_OscConfig+0x35c>)
 80059d0:	400a      	ands	r2, r1
 80059d2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fe fd50 	bl	8004480 <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059e4:	e009      	b.n	80059fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e6:	f7fe fd4b 	bl	8004480 <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b64      	cmp	r3, #100	; 0x64
 80059f2:	d902      	bls.n	80059fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	f000 fb3c 	bl	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059fa:	4b96      	ldr	r3, [pc, #600]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	029b      	lsls	r3, r3, #10
 8005a02:	4013      	ands	r3, r2
 8005a04:	d0ef      	beq.n	80059e6 <HAL_RCC_OscConfig+0xe6>
 8005a06:	e015      	b.n	8005a34 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fe fd3a 	bl	8004480 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a12:	f7fe fd35 	bl	8004480 <HAL_GetTick>
 8005a16:	0002      	movs	r2, r0
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b64      	cmp	r3, #100	; 0x64
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e326      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a24:	4b8b      	ldr	r3, [pc, #556]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d1f0      	bne.n	8005a12 <HAL_RCC_OscConfig+0x112>
 8005a30:	e000      	b.n	8005a34 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d100      	bne.n	8005a40 <HAL_RCC_OscConfig+0x140>
 8005a3e:	e08b      	b.n	8005b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	2b0c      	cmp	r3, #12
 8005a50:	d13e      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x1d0>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d13b      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005a58:	4b7e      	ldr	r3, [pc, #504]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_RCC_OscConfig+0x16c>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e302      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6c:	4b79      	ldr	r3, [pc, #484]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a7b      	ldr	r2, [pc, #492]	; (8005c60 <HAL_RCC_OscConfig+0x360>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	0019      	movs	r1, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	021a      	lsls	r2, r3, #8
 8005a7c:	4b75      	ldr	r3, [pc, #468]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005a82:	4b74      	ldr	r3, [pc, #464]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2209      	movs	r2, #9
 8005a88:	4393      	bics	r3, r2
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	4b71      	ldr	r3, [pc, #452]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a94:	f000 fc40 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 8005a98:	0001      	movs	r1, r0
 8005a9a:	4b6e      	ldr	r3, [pc, #440]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	091b      	lsrs	r3, r3, #4
 8005aa0:	220f      	movs	r2, #15
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	4a6f      	ldr	r2, [pc, #444]	; (8005c64 <HAL_RCC_OscConfig+0x364>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	000a      	movs	r2, r1
 8005aaa:	40da      	lsrs	r2, r3
 8005aac:	4b6e      	ldr	r3, [pc, #440]	; (8005c68 <HAL_RCC_OscConfig+0x368>)
 8005aae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005ab0:	4b6e      	ldr	r3, [pc, #440]	; (8005c6c <HAL_RCC_OscConfig+0x36c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2513      	movs	r5, #19
 8005ab6:	197c      	adds	r4, r7, r5
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fe fc9b 	bl	80043f4 <HAL_InitTick>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005ac2:	197b      	adds	r3, r7, r5
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d046      	beq.n	8005b58 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005aca:	197b      	adds	r3, r7, r5
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	e2d0      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d027      	beq.n	8005b26 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005ad6:	4b5f      	ldr	r3, [pc, #380]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2209      	movs	r2, #9
 8005adc:	4393      	bics	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	4b5c      	ldr	r3, [pc, #368]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae8:	f7fe fcca 	bl	8004480 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af2:	f7fe fcc5 	bl	8004480 <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e2b6      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b04:	4b53      	ldr	r3, [pc, #332]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d0f1      	beq.n	8005af2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b0e:	4b51      	ldr	r3, [pc, #324]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a53      	ldr	r2, [pc, #332]	; (8005c60 <HAL_RCC_OscConfig+0x360>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	021a      	lsls	r2, r3, #8
 8005b1e:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	e018      	b.n	8005b58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b26:	4b4b      	ldr	r3, [pc, #300]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	438a      	bics	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fe fca5 	bl	8004480 <HAL_GetTick>
 8005b36:	0003      	movs	r3, r0
 8005b38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b3c:	f7fe fca0 	bl	8004480 <HAL_GetTick>
 8005b40:	0002      	movs	r2, r0
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e291      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b4e:	4b41      	ldr	r3, [pc, #260]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2204      	movs	r2, #4
 8005b54:	4013      	ands	r3, r2
 8005b56:	d1f1      	bne.n	8005b3c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d100      	bne.n	8005b64 <HAL_RCC_OscConfig+0x264>
 8005b62:	e0a1      	b.n	8005ca8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d140      	bne.n	8005bec <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b6a:	4b3a      	ldr	r3, [pc, #232]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4013      	ands	r3, r2
 8005b74:	d005      	beq.n	8005b82 <HAL_RCC_OscConfig+0x282>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e277      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b82:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4a3a      	ldr	r2, [pc, #232]	; (8005c70 <HAL_RCC_OscConfig+0x370>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b90:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b96:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	0a19      	lsrs	r1, r3, #8
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	061a      	lsls	r2, r3, #24
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	0b5b      	lsrs	r3, r3, #13
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	0212      	lsls	r2, r2, #8
 8005bb6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005bb8:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	210f      	movs	r1, #15
 8005bc0:	400b      	ands	r3, r1
 8005bc2:	4928      	ldr	r1, [pc, #160]	; (8005c64 <HAL_RCC_OscConfig+0x364>)
 8005bc4:	5ccb      	ldrb	r3, [r1, r3]
 8005bc6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005bc8:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <HAL_RCC_OscConfig+0x368>)
 8005bca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005bcc:	4b27      	ldr	r3, [pc, #156]	; (8005c6c <HAL_RCC_OscConfig+0x36c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2513      	movs	r5, #19
 8005bd2:	197c      	adds	r4, r7, r5
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fe fc0d 	bl	80043f4 <HAL_InitTick>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005bde:	197b      	adds	r3, r7, r5
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d060      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005be6:	197b      	adds	r3, r7, r5
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	e242      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d03f      	beq.n	8005c74 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bf4:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005bfa:	2180      	movs	r1, #128	; 0x80
 8005bfc:	0049      	lsls	r1, r1, #1
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fe fc3d 	bl	8004480 <HAL_GetTick>
 8005c06:	0003      	movs	r3, r0
 8005c08:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c0c:	f7fe fc38 	bl	8004480 <HAL_GetTick>
 8005c10:	0002      	movs	r2, r0
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e229      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	2380      	movs	r3, #128	; 0x80
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4013      	ands	r3, r2
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <HAL_RCC_OscConfig+0x370>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	0a19      	lsrs	r1, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	061a      	lsls	r2, r3, #24
 8005c4c:	4b01      	ldr	r3, [pc, #4]	; (8005c54 <HAL_RCC_OscConfig+0x354>)
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	e029      	b.n	8005ca8 <HAL_RCC_OscConfig+0x3a8>
 8005c54:	40021000 	.word	0x40021000
 8005c58:	fffeffff 	.word	0xfffeffff
 8005c5c:	fffbffff 	.word	0xfffbffff
 8005c60:	ffffe0ff 	.word	0xffffe0ff
 8005c64:	0800a7f4 	.word	0x0800a7f4
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	20000004 	.word	0x20000004
 8005c70:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c74:	4bbd      	ldr	r3, [pc, #756]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4bbc      	ldr	r3, [pc, #752]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005c7a:	49bd      	ldr	r1, [pc, #756]	; (8005f70 <HAL_RCC_OscConfig+0x670>)
 8005c7c:	400a      	ands	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fe fbfe 	bl	8004480 <HAL_GetTick>
 8005c84:	0003      	movs	r3, r0
 8005c86:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c8a:	f7fe fbf9 	bl	8004480 <HAL_GetTick>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e1ea      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005c9c:	4bb3      	ldr	r3, [pc, #716]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d1f0      	bne.n	8005c8a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2208      	movs	r2, #8
 8005cae:	4013      	ands	r3, r2
 8005cb0:	d036      	beq.n	8005d20 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d019      	beq.n	8005cee <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cba:	4bac      	ldr	r3, [pc, #688]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cbe:	4bab      	ldr	r3, [pc, #684]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc6:	f7fe fbdb 	bl	8004480 <HAL_GetTick>
 8005cca:	0003      	movs	r3, r0
 8005ccc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd0:	f7fe fbd6 	bl	8004480 <HAL_GetTick>
 8005cd4:	0002      	movs	r2, r0
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e1c7      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ce2:	4ba2      	ldr	r3, [pc, #648]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d0f1      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x3d0>
 8005cec:	e018      	b.n	8005d20 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cee:	4b9f      	ldr	r3, [pc, #636]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cf2:	4b9e      	ldr	r3, [pc, #632]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	438a      	bics	r2, r1
 8005cf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfa:	f7fe fbc1 	bl	8004480 <HAL_GetTick>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d04:	f7fe fbbc 	bl	8004480 <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e1ad      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d16:	4b95      	ldr	r3, [pc, #596]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d1f1      	bne.n	8005d04 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2204      	movs	r2, #4
 8005d26:	4013      	ands	r3, r2
 8005d28:	d100      	bne.n	8005d2c <HAL_RCC_OscConfig+0x42c>
 8005d2a:	e0ae      	b.n	8005e8a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d2c:	2027      	movs	r0, #39	; 0x27
 8005d2e:	183b      	adds	r3, r7, r0
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d34:	4b8d      	ldr	r3, [pc, #564]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	055b      	lsls	r3, r3, #21
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d40:	4b8a      	ldr	r3, [pc, #552]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d44:	4b89      	ldr	r3, [pc, #548]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005d46:	2180      	movs	r1, #128	; 0x80
 8005d48:	0549      	lsls	r1, r1, #21
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d4e:	183b      	adds	r3, r7, r0
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d54:	4b87      	ldr	r3, [pc, #540]	; (8005f74 <HAL_RCC_OscConfig+0x674>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d11a      	bne.n	8005d96 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x674>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b83      	ldr	r3, [pc, #524]	; (8005f74 <HAL_RCC_OscConfig+0x674>)
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	0049      	lsls	r1, r1, #1
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6e:	f7fe fb87 	bl	8004480 <HAL_GetTick>
 8005d72:	0003      	movs	r3, r0
 8005d74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fe fb82 	bl	8004480 <HAL_GetTick>
 8005d7c:	0002      	movs	r2, r0
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e173      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8a:	4b7a      	ldr	r3, [pc, #488]	; (8005f74 <HAL_RCC_OscConfig+0x674>)
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4013      	ands	r3, r2
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d107      	bne.n	8005db2 <HAL_RCC_OscConfig+0x4b2>
 8005da2:	4b72      	ldr	r3, [pc, #456]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005da6:	4b71      	ldr	r3, [pc, #452]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	0049      	lsls	r1, r1, #1
 8005dac:	430a      	orrs	r2, r1
 8005dae:	651a      	str	r2, [r3, #80]	; 0x50
 8005db0:	e031      	b.n	8005e16 <HAL_RCC_OscConfig+0x516>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10c      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4d4>
 8005dba:	4b6c      	ldr	r3, [pc, #432]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dbe:	4b6b      	ldr	r3, [pc, #428]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005dc0:	496b      	ldr	r1, [pc, #428]	; (8005f70 <HAL_RCC_OscConfig+0x670>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8005dc6:	4b69      	ldr	r3, [pc, #420]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dca:	4b68      	ldr	r3, [pc, #416]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005dcc:	496a      	ldr	r1, [pc, #424]	; (8005f78 <HAL_RCC_OscConfig+0x678>)
 8005dce:	400a      	ands	r2, r1
 8005dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8005dd2:	e020      	b.n	8005e16 <HAL_RCC_OscConfig+0x516>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	23a0      	movs	r3, #160	; 0xa0
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d10e      	bne.n	8005dfe <HAL_RCC_OscConfig+0x4fe>
 8005de0:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005de4:	4b61      	ldr	r3, [pc, #388]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	00c9      	lsls	r1, r1, #3
 8005dea:	430a      	orrs	r2, r1
 8005dec:	651a      	str	r2, [r3, #80]	; 0x50
 8005dee:	4b5f      	ldr	r3, [pc, #380]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005df2:	4b5e      	ldr	r3, [pc, #376]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005df4:	2180      	movs	r1, #128	; 0x80
 8005df6:	0049      	lsls	r1, r1, #1
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8005dfc:	e00b      	b.n	8005e16 <HAL_RCC_OscConfig+0x516>
 8005dfe:	4b5b      	ldr	r3, [pc, #364]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e02:	4b5a      	ldr	r3, [pc, #360]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e04:	495a      	ldr	r1, [pc, #360]	; (8005f70 <HAL_RCC_OscConfig+0x670>)
 8005e06:	400a      	ands	r2, r1
 8005e08:	651a      	str	r2, [r3, #80]	; 0x50
 8005e0a:	4b58      	ldr	r3, [pc, #352]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e0e:	4b57      	ldr	r3, [pc, #348]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e10:	4959      	ldr	r1, [pc, #356]	; (8005f78 <HAL_RCC_OscConfig+0x678>)
 8005e12:	400a      	ands	r2, r1
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d015      	beq.n	8005e4a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1e:	f7fe fb2f 	bl	8004480 <HAL_GetTick>
 8005e22:	0003      	movs	r3, r0
 8005e24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e26:	e009      	b.n	8005e3c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e28:	f7fe fb2a 	bl	8004480 <HAL_GetTick>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	4a52      	ldr	r2, [pc, #328]	; (8005f7c <HAL_RCC_OscConfig+0x67c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e11a      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e3c:	4b4b      	ldr	r3, [pc, #300]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4013      	ands	r3, r2
 8005e46:	d0ef      	beq.n	8005e28 <HAL_RCC_OscConfig+0x528>
 8005e48:	e014      	b.n	8005e74 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e4a:	f7fe fb19 	bl	8004480 <HAL_GetTick>
 8005e4e:	0003      	movs	r3, r0
 8005e50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e52:	e009      	b.n	8005e68 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e54:	f7fe fb14 	bl	8004480 <HAL_GetTick>
 8005e58:	0002      	movs	r2, r0
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	4a47      	ldr	r2, [pc, #284]	; (8005f7c <HAL_RCC_OscConfig+0x67c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e104      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e68:	4b40      	ldr	r3, [pc, #256]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e6c:	2380      	movs	r3, #128	; 0x80
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4013      	ands	r3, r2
 8005e72:	d1ef      	bne.n	8005e54 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e74:	2327      	movs	r3, #39	; 0x27
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d105      	bne.n	8005e8a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e7e:	4b3b      	ldr	r3, [pc, #236]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e82:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e84:	493e      	ldr	r1, [pc, #248]	; (8005f80 <HAL_RCC_OscConfig+0x680>)
 8005e86:	400a      	ands	r2, r1
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	4013      	ands	r3, r2
 8005e92:	d049      	beq.n	8005f28 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d026      	beq.n	8005eea <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005e9c:	4b33      	ldr	r3, [pc, #204]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b32      	ldr	r3, [pc, #200]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eac:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005eae:	2101      	movs	r1, #1
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8005eb4:	4b33      	ldr	r3, [pc, #204]	; (8005f84 <HAL_RCC_OscConfig+0x684>)
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <HAL_RCC_OscConfig+0x684>)
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	0189      	lsls	r1, r1, #6
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fe fadd 	bl	8004480 <HAL_GetTick>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ecc:	f7fe fad8 	bl	8004480 <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e0c9      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d0f1      	beq.n	8005ecc <HAL_RCC_OscConfig+0x5cc>
 8005ee8:	e01e      	b.n	8005f28 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	438a      	bics	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]
 8005ef6:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <HAL_RCC_OscConfig+0x684>)
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	4b22      	ldr	r3, [pc, #136]	; (8005f84 <HAL_RCC_OscConfig+0x684>)
 8005efc:	4922      	ldr	r1, [pc, #136]	; (8005f88 <HAL_RCC_OscConfig+0x688>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f02:	f7fe fabd 	bl	8004480 <HAL_GetTick>
 8005f06:	0003      	movs	r3, r0
 8005f08:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f0c:	f7fe fab8 	bl	8004480 <HAL_GetTick>
 8005f10:	0002      	movs	r2, r0
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e0a9      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2202      	movs	r2, #2
 8005f24:	4013      	ands	r3, r2
 8005f26:	d1f1      	bne.n	8005f0c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d100      	bne.n	8005f32 <HAL_RCC_OscConfig+0x632>
 8005f30:	e09e      	b.n	8006070 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d100      	bne.n	8005f3a <HAL_RCC_OscConfig+0x63a>
 8005f38:	e077      	b.n	800602a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d158      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_RCC_OscConfig+0x66c>)
 8005f48:	4910      	ldr	r1, [pc, #64]	; (8005f8c <HAL_RCC_OscConfig+0x68c>)
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4e:	f7fe fa97 	bl	8004480 <HAL_GetTick>
 8005f52:	0003      	movs	r3, r0
 8005f54:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f56:	e01b      	b.n	8005f90 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fe fa92 	bl	8004480 <HAL_GetTick>
 8005f5c:	0002      	movs	r2, r0
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d914      	bls.n	8005f90 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e083      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	fffffeff 	.word	0xfffffeff
 8005f74:	40007000 	.word	0x40007000
 8005f78:	fffffbff 	.word	0xfffffbff
 8005f7c:	00001388 	.word	0x00001388
 8005f80:	efffffff 	.word	0xefffffff
 8005f84:	40010000 	.word	0x40010000
 8005f88:	ffffdfff 	.word	0xffffdfff
 8005f8c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f90:	4b3a      	ldr	r3, [pc, #232]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	049b      	lsls	r3, r3, #18
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d1dd      	bne.n	8005f58 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f9c:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a37      	ldr	r2, [pc, #220]	; (8006080 <HAL_RCC_OscConfig+0x780>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	4b31      	ldr	r3, [pc, #196]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fbc:	4b2f      	ldr	r3, [pc, #188]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b2e      	ldr	r3, [pc, #184]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005fc2:	2180      	movs	r1, #128	; 0x80
 8005fc4:	0449      	lsls	r1, r1, #17
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fca:	f7fe fa59 	bl	8004480 <HAL_GetTick>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd4:	f7fe fa54 	bl	8004480 <HAL_GetTick>
 8005fd8:	0002      	movs	r2, r0
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e045      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	049b      	lsls	r3, r3, #18
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x6d4>
 8005ff2:	e03d      	b.n	8006070 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b20      	ldr	r3, [pc, #128]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8005ffa:	4922      	ldr	r1, [pc, #136]	; (8006084 <HAL_RCC_OscConfig+0x784>)
 8005ffc:	400a      	ands	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006000:	f7fe fa3e 	bl	8004480 <HAL_GetTick>
 8006004:	0003      	movs	r3, r0
 8006006:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600a:	f7fe fa39 	bl	8004480 <HAL_GetTick>
 800600e:	0002      	movs	r2, r0
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e02a      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800601c:	4b17      	ldr	r3, [pc, #92]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	2380      	movs	r3, #128	; 0x80
 8006022:	049b      	lsls	r3, r3, #18
 8006024:	4013      	ands	r3, r2
 8006026:	d1f0      	bne.n	800600a <HAL_RCC_OscConfig+0x70a>
 8006028:	e022      	b.n	8006070 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e01d      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006036:	4b11      	ldr	r3, [pc, #68]	; (800607c <HAL_RCC_OscConfig+0x77c>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	025b      	lsls	r3, r3, #9
 8006042:	401a      	ands	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	429a      	cmp	r2, r3
 800604a:	d10f      	bne.n	800606c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	23f0      	movs	r3, #240	; 0xf0
 8006050:	039b      	lsls	r3, r3, #14
 8006052:	401a      	ands	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006058:	429a      	cmp	r2, r3
 800605a:	d107      	bne.n	800606c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	23c0      	movs	r3, #192	; 0xc0
 8006060:	041b      	lsls	r3, r3, #16
 8006062:	401a      	ands	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b00a      	add	sp, #40	; 0x28
 8006078:	bdb0      	pop	{r4, r5, r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	40021000 	.word	0x40021000
 8006080:	ff02ffff 	.word	0xff02ffff
 8006084:	feffffff 	.word	0xfeffffff

08006088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e128      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b96      	ldr	r3, [pc, #600]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2201      	movs	r2, #1
 80060a2:	4013      	ands	r3, r2
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d91e      	bls.n	80060e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b93      	ldr	r3, [pc, #588]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2201      	movs	r2, #1
 80060b0:	4393      	bics	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	4b90      	ldr	r3, [pc, #576]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060bc:	f7fe f9e0 	bl	8004480 <HAL_GetTick>
 80060c0:	0003      	movs	r3, r0
 80060c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c4:	e009      	b.n	80060da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c6:	f7fe f9db 	bl	8004480 <HAL_GetTick>
 80060ca:	0002      	movs	r2, r0
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	4a8a      	ldr	r2, [pc, #552]	; (80062fc <HAL_RCC_ClockConfig+0x274>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e109      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	4b87      	ldr	r3, [pc, #540]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	4013      	ands	r3, r2
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1ee      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2202      	movs	r2, #2
 80060ee:	4013      	ands	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f2:	4b83      	ldr	r3, [pc, #524]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	22f0      	movs	r2, #240	; 0xf0
 80060f8:	4393      	bics	r3, r2
 80060fa:	0019      	movs	r1, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	4b7f      	ldr	r3, [pc, #508]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 8006102:	430a      	orrs	r2, r1
 8006104:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2201      	movs	r2, #1
 800610c:	4013      	ands	r3, r2
 800610e:	d100      	bne.n	8006112 <HAL_RCC_ClockConfig+0x8a>
 8006110:	e089      	b.n	8006226 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d107      	bne.n	800612a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800611a:	4b79      	ldr	r3, [pc, #484]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	4013      	ands	r3, r2
 8006124:	d120      	bne.n	8006168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e0e1      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d107      	bne.n	8006142 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006132:	4b73      	ldr	r3, [pc, #460]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	2380      	movs	r3, #128	; 0x80
 8006138:	049b      	lsls	r3, r3, #18
 800613a:	4013      	ands	r3, r2
 800613c:	d114      	bne.n	8006168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e0d5      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d106      	bne.n	8006158 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800614a:	4b6d      	ldr	r3, [pc, #436]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2204      	movs	r2, #4
 8006150:	4013      	ands	r3, r2
 8006152:	d109      	bne.n	8006168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0ca      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006158:	4b69      	ldr	r3, [pc, #420]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	2380      	movs	r3, #128	; 0x80
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4013      	ands	r3, r2
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0c2      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006168:	4b65      	ldr	r3, [pc, #404]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2203      	movs	r2, #3
 800616e:	4393      	bics	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4b62      	ldr	r3, [pc, #392]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 8006178:	430a      	orrs	r2, r1
 800617a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800617c:	f7fe f980 	bl	8004480 <HAL_GetTick>
 8006180:	0003      	movs	r3, r0
 8006182:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d111      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800618c:	e009      	b.n	80061a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800618e:	f7fe f977 	bl	8004480 <HAL_GetTick>
 8006192:	0002      	movs	r2, r0
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	4a58      	ldr	r2, [pc, #352]	; (80062fc <HAL_RCC_ClockConfig+0x274>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0a5      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a2:	4b57      	ldr	r3, [pc, #348]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	220c      	movs	r2, #12
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d1ef      	bne.n	800618e <HAL_RCC_ClockConfig+0x106>
 80061ae:	e03a      	b.n	8006226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d111      	bne.n	80061dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061b8:	e009      	b.n	80061ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ba:	f7fe f961 	bl	8004480 <HAL_GetTick>
 80061be:	0002      	movs	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	4a4d      	ldr	r2, [pc, #308]	; (80062fc <HAL_RCC_ClockConfig+0x274>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e08f      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ce:	4b4c      	ldr	r3, [pc, #304]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	220c      	movs	r2, #12
 80061d4:	4013      	ands	r3, r2
 80061d6:	2b0c      	cmp	r3, #12
 80061d8:	d1ef      	bne.n	80061ba <HAL_RCC_ClockConfig+0x132>
 80061da:	e024      	b.n	8006226 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d11b      	bne.n	800621c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80061e4:	e009      	b.n	80061fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e6:	f7fe f94b 	bl	8004480 <HAL_GetTick>
 80061ea:	0002      	movs	r2, r0
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	4a42      	ldr	r2, [pc, #264]	; (80062fc <HAL_RCC_ClockConfig+0x274>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e079      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80061fa:	4b41      	ldr	r3, [pc, #260]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	220c      	movs	r2, #12
 8006200:	4013      	ands	r3, r2
 8006202:	2b04      	cmp	r3, #4
 8006204:	d1ef      	bne.n	80061e6 <HAL_RCC_ClockConfig+0x15e>
 8006206:	e00e      	b.n	8006226 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006208:	f7fe f93a 	bl	8004480 <HAL_GetTick>
 800620c:	0002      	movs	r2, r0
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <HAL_RCC_ClockConfig+0x274>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e068      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800621c:	4b38      	ldr	r3, [pc, #224]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	220c      	movs	r2, #12
 8006222:	4013      	ands	r3, r2
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006226:	4b34      	ldr	r3, [pc, #208]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2201      	movs	r2, #1
 800622c:	4013      	ands	r3, r2
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d21e      	bcs.n	8006272 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006234:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	4393      	bics	r3, r2
 800623c:	0019      	movs	r1, r3
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006246:	f7fe f91b 	bl	8004480 <HAL_GetTick>
 800624a:	0003      	movs	r3, r0
 800624c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	e009      	b.n	8006264 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006250:	f7fe f916 	bl	8004480 <HAL_GetTick>
 8006254:	0002      	movs	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	4a28      	ldr	r2, [pc, #160]	; (80062fc <HAL_RCC_ClockConfig+0x274>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e044      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006264:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <HAL_RCC_ClockConfig+0x270>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	4013      	ands	r3, r2
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d1ee      	bne.n	8006250 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2204      	movs	r2, #4
 8006278:	4013      	ands	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800627c:	4b20      	ldr	r3, [pc, #128]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	4a20      	ldr	r2, [pc, #128]	; (8006304 <HAL_RCC_ClockConfig+0x27c>)
 8006282:	4013      	ands	r3, r2
 8006284:	0019      	movs	r1, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800628c:	430a      	orrs	r2, r1
 800628e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2208      	movs	r2, #8
 8006296:	4013      	ands	r3, r2
 8006298:	d00a      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800629a:	4b19      	ldr	r3, [pc, #100]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_RCC_ClockConfig+0x280>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	0019      	movs	r1, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	00da      	lsls	r2, r3, #3
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 80062ac:	430a      	orrs	r2, r1
 80062ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062b0:	f000 f832 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 80062b4:	0001      	movs	r1, r0
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_RCC_ClockConfig+0x278>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	220f      	movs	r2, #15
 80062be:	4013      	ands	r3, r2
 80062c0:	4a12      	ldr	r2, [pc, #72]	; (800630c <HAL_RCC_ClockConfig+0x284>)
 80062c2:	5cd3      	ldrb	r3, [r2, r3]
 80062c4:	000a      	movs	r2, r1
 80062c6:	40da      	lsrs	r2, r3
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <HAL_RCC_ClockConfig+0x288>)
 80062ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_RCC_ClockConfig+0x28c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	250b      	movs	r5, #11
 80062d2:	197c      	adds	r4, r7, r5
 80062d4:	0018      	movs	r0, r3
 80062d6:	f7fe f88d 	bl	80043f4 <HAL_InitTick>
 80062da:	0003      	movs	r3, r0
 80062dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80062de:	197b      	adds	r3, r7, r5
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80062e6:	197b      	adds	r3, r7, r5
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	e000      	b.n	80062ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	0018      	movs	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b004      	add	sp, #16
 80062f4:	bdb0      	pop	{r4, r5, r7, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	40022000 	.word	0x40022000
 80062fc:	00001388 	.word	0x00001388
 8006300:	40021000 	.word	0x40021000
 8006304:	fffff8ff 	.word	0xfffff8ff
 8006308:	ffffc7ff 	.word	0xffffc7ff
 800630c:	0800a7f4 	.word	0x0800a7f4
 8006310:	20000000 	.word	0x20000000
 8006314:	20000004 	.word	0x20000004

08006318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631a:	b097      	sub	sp, #92	; 0x5c
 800631c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800631e:	4b5d      	ldr	r3, [pc, #372]	; (8006494 <HAL_RCC_GetSysClockFreq+0x17c>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006326:	230c      	movs	r3, #12
 8006328:	4013      	ands	r3, r2
 800632a:	2b0c      	cmp	r3, #12
 800632c:	d014      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x40>
 800632e:	d900      	bls.n	8006332 <HAL_RCC_GetSysClockFreq+0x1a>
 8006330:	e09d      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x156>
 8006332:	2b04      	cmp	r3, #4
 8006334:	d002      	beq.n	800633c <HAL_RCC_GetSysClockFreq+0x24>
 8006336:	2b08      	cmp	r3, #8
 8006338:	d00b      	beq.n	8006352 <HAL_RCC_GetSysClockFreq+0x3a>
 800633a:	e098      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x156>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800633c:	4b55      	ldr	r3, [pc, #340]	; (8006494 <HAL_RCC_GetSysClockFreq+0x17c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2210      	movs	r2, #16
 8006342:	4013      	ands	r3, r2
 8006344:	d002      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 8006348:	653b      	str	r3, [r7, #80]	; 0x50
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800634a:	e09e      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
        sysclockfreq =  HSI_VALUE;
 800634c:	4b53      	ldr	r3, [pc, #332]	; (800649c <HAL_RCC_GetSysClockFreq+0x184>)
 800634e:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8006350:	e09b      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006352:	4b53      	ldr	r3, [pc, #332]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006354:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8006356:	e098      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635a:	0c9a      	lsrs	r2, r3, #18
 800635c:	230f      	movs	r3, #15
 800635e:	401a      	ands	r2, r3
 8006360:	4b50      	ldr	r3, [pc, #320]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8006362:	5c9b      	ldrb	r3, [r3, r2]
 8006364:	64bb      	str	r3, [r7, #72]	; 0x48
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006368:	0d9a      	lsrs	r2, r3, #22
 800636a:	2303      	movs	r3, #3
 800636c:	4013      	ands	r3, r2
 800636e:	3301      	adds	r3, #1
 8006370:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006372:	4b48      	ldr	r3, [pc, #288]	; (8006494 <HAL_RCC_GetSysClockFreq+0x17c>)
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	2380      	movs	r3, #128	; 0x80
 8006378:	025b      	lsls	r3, r3, #9
 800637a:	4013      	ands	r3, r2
 800637c:	d03a      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800637e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
 8006382:	2300      	movs	r3, #0
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	0ed4      	lsrs	r4, r2, #27
 800638c:	015e      	lsls	r6, r3, #5
 800638e:	4326      	orrs	r6, r4
 8006390:	0155      	lsls	r5, r2, #5
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8006396:	1aed      	subs	r5, r5, r3
 8006398:	41a6      	sbcs	r6, r4
 800639a:	002a      	movs	r2, r5
 800639c:	0033      	movs	r3, r6
 800639e:	0e94      	lsrs	r4, r2, #26
 80063a0:	0199      	lsls	r1, r3, #6
 80063a2:	4321      	orrs	r1, r4
 80063a4:	0190      	lsls	r0, r2, #6
 80063a6:	1a80      	subs	r0, r0, r2
 80063a8:	4199      	sbcs	r1, r3
 80063aa:	0f43      	lsrs	r3, r0, #29
 80063ac:	00ca      	lsls	r2, r1, #3
 80063ae:	637a      	str	r2, [r7, #52]	; 0x34
 80063b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b2:	431a      	orrs	r2, r3
 80063b4:	637a      	str	r2, [r7, #52]	; 0x34
 80063b6:	00c3      	lsls	r3, r0, #3
 80063b8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063be:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 80063c0:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80063c2:	1940      	adds	r0, r0, r5
 80063c4:	4171      	adcs	r1, r6
 80063c6:	0d43      	lsrs	r3, r0, #21
 80063c8:	02ca      	lsls	r2, r1, #11
 80063ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ce:	431a      	orrs	r2, r3
 80063d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063d2:	02c3      	lsls	r3, r0, #11
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063dc:	623b      	str	r3, [r7, #32]
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	f7fa f85f 	bl	80004a8 <__aeabi_uldivmod>
 80063ea:	0002      	movs	r2, r0
 80063ec:	000b      	movs	r3, r1
 80063ee:	0013      	movs	r3, r2
 80063f0:	657b      	str	r3, [r7, #84]	; 0x54
 80063f2:	e039      	b.n	8006468 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80063f4:	4b27      	ldr	r3, [pc, #156]	; (8006494 <HAL_RCC_GetSysClockFreq+0x17c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2210      	movs	r2, #16
 80063fa:	4013      	ands	r3, r2
 80063fc:	d01a      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80063fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	4a24      	ldr	r2, [pc, #144]	; (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 8006408:	2300      	movs	r3, #0
 800640a:	69b8      	ldr	r0, [r7, #24]
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	f7fa f86b 	bl	80004e8 <__aeabi_lmul>
 8006412:	0002      	movs	r2, r0
 8006414:	000b      	movs	r3, r1
 8006416:	0010      	movs	r0, r2
 8006418:	0019      	movs	r1, r3
 800641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f7fa f83f 	bl	80004a8 <__aeabi_uldivmod>
 800642a:	0002      	movs	r2, r0
 800642c:	000b      	movs	r3, r1
 800642e:	0013      	movs	r3, r2
 8006430:	657b      	str	r3, [r7, #84]	; 0x54
 8006432:	e019      	b.n	8006468 <HAL_RCC_GetSysClockFreq+0x150>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	4a17      	ldr	r2, [pc, #92]	; (800649c <HAL_RCC_GetSysClockFreq+0x184>)
 800643e:	2300      	movs	r3, #0
 8006440:	68b8      	ldr	r0, [r7, #8]
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	f7fa f850 	bl	80004e8 <__aeabi_lmul>
 8006448:	0002      	movs	r2, r0
 800644a:	000b      	movs	r3, r1
 800644c:	0010      	movs	r0, r2
 800644e:	0019      	movs	r1, r3
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f7fa f824 	bl	80004a8 <__aeabi_uldivmod>
 8006460:	0002      	movs	r2, r0
 8006462:	000b      	movs	r3, r1
 8006464:	0013      	movs	r3, r2
 8006466:	657b      	str	r3, [r7, #84]	; 0x54
        }
      }
      sysclockfreq = pllvco;
 8006468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646a:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 800646c:	e00d      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800646e:	4b09      	ldr	r3, [pc, #36]	; (8006494 <HAL_RCC_GetSysClockFreq+0x17c>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	0b5b      	lsrs	r3, r3, #13
 8006474:	2207      	movs	r2, #7
 8006476:	4013      	ands	r3, r2
 8006478:	643b      	str	r3, [r7, #64]	; 0x40
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800647a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647c:	3301      	adds	r3, #1
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	0212      	lsls	r2, r2, #8
 8006482:	409a      	lsls	r2, r3
 8006484:	0013      	movs	r3, r2
 8006486:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8006488:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800648a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800648c:	0018      	movs	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	b017      	add	sp, #92	; 0x5c
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006494:	40021000 	.word	0x40021000
 8006498:	003d0900 	.word	0x003d0900
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	01e84800 	.word	0x01e84800
 80064a4:	0800a80c 	.word	0x0800a80c

080064a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80064ae:	681b      	ldr	r3, [r3, #0]
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	20000000 	.word	0x20000000

080064bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064c0:	f7ff fff2 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
 80064c4:	0001      	movs	r1, r0
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	2207      	movs	r2, #7
 80064ce:	4013      	ands	r3, r2
 80064d0:	4a04      	ldr	r2, [pc, #16]	; (80064e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	40d9      	lsrs	r1, r3
 80064d6:	000b      	movs	r3, r1
}
 80064d8:	0018      	movs	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	40021000 	.word	0x40021000
 80064e4:	0800a804 	.word	0x0800a804

080064e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064ec:	f7ff ffdc 	bl	80064a8 <HAL_RCC_GetHCLKFreq>
 80064f0:	0001      	movs	r1, r0
 80064f2:	4b06      	ldr	r3, [pc, #24]	; (800650c <HAL_RCC_GetPCLK2Freq+0x24>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	0adb      	lsrs	r3, r3, #11
 80064f8:	2207      	movs	r2, #7
 80064fa:	4013      	ands	r3, r2
 80064fc:	4a04      	ldr	r2, [pc, #16]	; (8006510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064fe:	5cd3      	ldrb	r3, [r2, r3]
 8006500:	40d9      	lsrs	r1, r3
 8006502:	000b      	movs	r3, r1
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	40021000 	.word	0x40021000
 8006510:	0800a804 	.word	0x0800a804

08006514 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	220f      	movs	r2, #15
 8006522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_RCC_GetClockConfig+0x5c>)
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2203      	movs	r2, #3
 800652a:	401a      	ands	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <HAL_RCC_GetClockConfig+0x5c>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	22f0      	movs	r2, #240	; 0xf0
 8006536:	401a      	ands	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800653c:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <HAL_RCC_GetClockConfig+0x5c>)
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	23e0      	movs	r3, #224	; 0xe0
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	401a      	ands	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <HAL_RCC_GetClockConfig+0x5c>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	08da      	lsrs	r2, r3, #3
 8006550:	23e0      	movs	r3, #224	; 0xe0
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	401a      	ands	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_GetClockConfig+0x60>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2201      	movs	r2, #1
 8006560:	401a      	ands	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	40021000 	.word	0x40021000
 8006574:	40022000 	.word	0x40022000

08006578 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006580:	2317      	movs	r3, #23
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2220      	movs	r2, #32
 800658e:	4013      	ands	r3, r2
 8006590:	d106      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	4013      	ands	r3, r2
 800659c:	d100      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800659e:	e0d9      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a0:	4b9c      	ldr	r3, [pc, #624]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80065a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	055b      	lsls	r3, r3, #21
 80065a8:	4013      	ands	r3, r2
 80065aa:	d10a      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ac:	4b99      	ldr	r3, [pc, #612]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80065ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b0:	4b98      	ldr	r3, [pc, #608]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80065b2:	2180      	movs	r1, #128	; 0x80
 80065b4:	0549      	lsls	r1, r1, #21
 80065b6:	430a      	orrs	r2, r1
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80065ba:	2317      	movs	r3, #23
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	2201      	movs	r2, #1
 80065c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c2:	4b95      	ldr	r3, [pc, #596]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4013      	ands	r3, r2
 80065cc:	d11a      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ce:	4b92      	ldr	r3, [pc, #584]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b91      	ldr	r3, [pc, #580]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80065d4:	2180      	movs	r1, #128	; 0x80
 80065d6:	0049      	lsls	r1, r1, #1
 80065d8:	430a      	orrs	r2, r1
 80065da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065dc:	f7fd ff50 	bl	8004480 <HAL_GetTick>
 80065e0:	0003      	movs	r3, r0
 80065e2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e4:	e008      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e6:	f7fd ff4b 	bl	8004480 <HAL_GetTick>
 80065ea:	0002      	movs	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b64      	cmp	r3, #100	; 0x64
 80065f2:	d901      	bls.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e108      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f8:	4b87      	ldr	r3, [pc, #540]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	4013      	ands	r3, r2
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006604:	4b83      	ldr	r3, [pc, #524]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	23c0      	movs	r3, #192	; 0xc0
 800660a:	039b      	lsls	r3, r3, #14
 800660c:	4013      	ands	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	23c0      	movs	r3, #192	; 0xc0
 8006616:	039b      	lsls	r3, r3, #14
 8006618:	4013      	ands	r3, r2
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	23c0      	movs	r3, #192	; 0xc0
 8006626:	039b      	lsls	r3, r3, #14
 8006628:	4013      	ands	r3, r2
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	429a      	cmp	r2, r3
 800662e:	d013      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	23c0      	movs	r3, #192	; 0xc0
 8006636:	029b      	lsls	r3, r3, #10
 8006638:	401a      	ands	r2, r3
 800663a:	23c0      	movs	r3, #192	; 0xc0
 800663c:	029b      	lsls	r3, r3, #10
 800663e:	429a      	cmp	r2, r3
 8006640:	d10a      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006642:	4b74      	ldr	r3, [pc, #464]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	401a      	ands	r2, r3
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	429a      	cmp	r2, r3
 8006652:	d101      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0d8      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006658:	4b6e      	ldr	r3, [pc, #440]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800665a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800665c:	23c0      	movs	r3, #192	; 0xc0
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d049      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	23c0      	movs	r3, #192	; 0xc0
 8006670:	029b      	lsls	r3, r3, #10
 8006672:	4013      	ands	r3, r2
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	429a      	cmp	r2, r3
 8006678:	d004      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2220      	movs	r2, #32
 8006680:	4013      	ands	r3, r2
 8006682:	d10d      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	23c0      	movs	r3, #192	; 0xc0
 800668a:	029b      	lsls	r3, r3, #10
 800668c:	4013      	ands	r3, r2
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	429a      	cmp	r2, r3
 8006692:	d034      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	4013      	ands	r3, r2
 800669e:	d02e      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80066a0:	4b5c      	ldr	r3, [pc, #368]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	4a5d      	ldr	r2, [pc, #372]	; (800681c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066aa:	4b5a      	ldr	r3, [pc, #360]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ae:	4b59      	ldr	r3, [pc, #356]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066b0:	2180      	movs	r1, #128	; 0x80
 80066b2:	0309      	lsls	r1, r1, #12
 80066b4:	430a      	orrs	r2, r1
 80066b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066b8:	4b56      	ldr	r3, [pc, #344]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066bc:	4b55      	ldr	r3, [pc, #340]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066be:	4958      	ldr	r1, [pc, #352]	; (8006820 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80066c0:	400a      	ands	r2, r1
 80066c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80066c4:	4b53      	ldr	r3, [pc, #332]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	2380      	movs	r3, #128	; 0x80
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4013      	ands	r3, r2
 80066d2:	d014      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d4:	f7fd fed4 	bl	8004480 <HAL_GetTick>
 80066d8:	0003      	movs	r3, r0
 80066da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066dc:	e009      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066de:	f7fd fecf 	bl	8004480 <HAL_GetTick>
 80066e2:	0002      	movs	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	4a4e      	ldr	r2, [pc, #312]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e08b      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f2:	4b48      	ldr	r3, [pc, #288]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80066f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f6:	2380      	movs	r3, #128	; 0x80
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4013      	ands	r3, r2
 80066fc:	d0ef      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	23c0      	movs	r3, #192	; 0xc0
 8006704:	029b      	lsls	r3, r3, #10
 8006706:	401a      	ands	r2, r3
 8006708:	23c0      	movs	r3, #192	; 0xc0
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	429a      	cmp	r2, r3
 800670e:	d10c      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006710:	4b40      	ldr	r3, [pc, #256]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a44      	ldr	r2, [pc, #272]	; (8006828 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006716:	4013      	ands	r3, r2
 8006718:	0019      	movs	r1, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	23c0      	movs	r3, #192	; 0xc0
 8006720:	039b      	lsls	r3, r3, #14
 8006722:	401a      	ands	r2, r3
 8006724:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006726:	430a      	orrs	r2, r1
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	4b3a      	ldr	r3, [pc, #232]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800672c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	23c0      	movs	r3, #192	; 0xc0
 8006734:	029b      	lsls	r3, r3, #10
 8006736:	401a      	ands	r2, r3
 8006738:	4b36      	ldr	r3, [pc, #216]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800673a:	430a      	orrs	r2, r1
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800673e:	2317      	movs	r3, #23
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d105      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006748:	4b32      	ldr	r3, [pc, #200]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800674a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674c:	4b31      	ldr	r3, [pc, #196]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800674e:	4937      	ldr	r1, [pc, #220]	; (800682c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006750:	400a      	ands	r2, r1
 8006752:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2201      	movs	r2, #1
 800675a:	4013      	ands	r3, r2
 800675c:	d009      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800675e:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	2203      	movs	r2, #3
 8006764:	4393      	bics	r3, r2
 8006766:	0019      	movs	r1, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	4b29      	ldr	r3, [pc, #164]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800676e:	430a      	orrs	r2, r1
 8006770:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2202      	movs	r2, #2
 8006778:	4013      	ands	r3, r2
 800677a:	d009      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800677e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006780:	220c      	movs	r2, #12
 8006782:	4393      	bics	r3, r2
 8006784:	0019      	movs	r1, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	4b22      	ldr	r3, [pc, #136]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800678c:	430a      	orrs	r2, r1
 800678e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2204      	movs	r2, #4
 8006796:	4013      	ands	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800679a:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679e:	4a24      	ldr	r2, [pc, #144]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	0019      	movs	r1, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695a      	ldr	r2, [r3, #20]
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067aa:	430a      	orrs	r2, r1
 80067ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2208      	movs	r2, #8
 80067b4:	4013      	ands	r3, r2
 80067b6:	d009      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067bc:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80067be:	4013      	ands	r3, r2
 80067c0:	0019      	movs	r1, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	4b13      	ldr	r3, [pc, #76]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067c8:	430a      	orrs	r2, r1
 80067ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2240      	movs	r2, #64	; 0x40
 80067d2:	4013      	ands	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80067dc:	4013      	ands	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067e6:	430a      	orrs	r2, r1
 80067e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2280      	movs	r2, #128	; 0x80
 80067f0:	4013      	ands	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f8:	4a10      	ldr	r2, [pc, #64]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	0019      	movs	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69da      	ldr	r2, [r3, #28]
 8006802:	4b04      	ldr	r3, [pc, #16]	; (8006814 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006804:	430a      	orrs	r2, r1
 8006806:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b006      	add	sp, #24
 8006810:	bd80      	pop	{r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	40021000 	.word	0x40021000
 8006818:	40007000 	.word	0x40007000
 800681c:	fffcffff 	.word	0xfffcffff
 8006820:	fff7ffff 	.word	0xfff7ffff
 8006824:	00001388 	.word	0x00001388
 8006828:	ffcfffff 	.word	0xffcfffff
 800682c:	efffffff 	.word	0xefffffff
 8006830:	fffff3ff 	.word	0xfffff3ff
 8006834:	ffffcfff 	.word	0xffffcfff
 8006838:	fbffffff 	.word	0xfbffffff
 800683c:	fff3ffff 	.word	0xfff3ffff

08006840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e032      	b.n	80068b8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2239      	movs	r2, #57	; 0x39
 8006856:	5c9b      	ldrb	r3, [r3, r2]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d107      	bne.n	800686e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2238      	movs	r2, #56	; 0x38
 8006862:	2100      	movs	r1, #0
 8006864:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	0018      	movs	r0, r3
 800686a:	f7fd fc1f 	bl	80040ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2239      	movs	r2, #57	; 0x39
 8006872:	2102      	movs	r1, #2
 8006874:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	0019      	movs	r1, r3
 8006880:	0010      	movs	r0, r2
 8006882:	f000 f92b 	bl	8006adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	223e      	movs	r2, #62	; 0x3e
 800688a:	2101      	movs	r1, #1
 800688c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	223a      	movs	r2, #58	; 0x3a
 8006892:	2101      	movs	r1, #1
 8006894:	5499      	strb	r1, [r3, r2]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	223b      	movs	r2, #59	; 0x3b
 800689a:	2101      	movs	r1, #1
 800689c:	5499      	strb	r1, [r3, r2]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	223c      	movs	r2, #60	; 0x3c
 80068a2:	2101      	movs	r1, #1
 80068a4:	5499      	strb	r1, [r3, r2]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	223d      	movs	r2, #61	; 0x3d
 80068aa:	2101      	movs	r1, #1
 80068ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2239      	movs	r2, #57	; 0x39
 80068b2:	2101      	movs	r1, #1
 80068b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2239      	movs	r2, #57	; 0x39
 80068cc:	5c9b      	ldrb	r3, [r3, r2]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e02e      	b.n	8006936 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2239      	movs	r2, #57	; 0x39
 80068dc:	2102      	movs	r1, #2
 80068de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	05db      	lsls	r3, r3, #23
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d009      	beq.n	8006900 <HAL_TIM_Base_Start+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a13      	ldr	r2, [pc, #76]	; (8006940 <HAL_TIM_Base_Start+0x80>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIM_Base_Start+0x40>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <HAL_TIM_Base_Start+0x84>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d111      	bne.n	8006924 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2207      	movs	r2, #7
 8006908:	4013      	ands	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b06      	cmp	r3, #6
 8006910:	d010      	beq.n	8006934 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2101      	movs	r1, #1
 800691e:	430a      	orrs	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	e007      	b.n	8006934 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2101      	movs	r1, #1
 8006930:	430a      	orrs	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	0018      	movs	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	b004      	add	sp, #16
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	40010800 	.word	0x40010800
 8006944:	40011400 	.word	0x40011400

08006948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2238      	movs	r2, #56	; 0x38
 8006956:	5c9b      	ldrb	r3, [r3, r2]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIM_ConfigClockSource+0x18>
 800695c:	2302      	movs	r3, #2
 800695e:	e0b7      	b.n	8006ad0 <HAL_TIM_ConfigClockSource+0x188>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2238      	movs	r2, #56	; 0x38
 8006964:	2101      	movs	r1, #1
 8006966:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2239      	movs	r2, #57	; 0x39
 800696c:	2102      	movs	r1, #2
 800696e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2277      	movs	r2, #119	; 0x77
 800697c:	4393      	bics	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a55      	ldr	r2, [pc, #340]	; (8006ad8 <HAL_TIM_ConfigClockSource+0x190>)
 8006984:	4013      	ands	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	0192      	lsls	r2, r2, #6
 8006998:	4293      	cmp	r3, r2
 800699a:	d040      	beq.n	8006a1e <HAL_TIM_ConfigClockSource+0xd6>
 800699c:	2280      	movs	r2, #128	; 0x80
 800699e:	0192      	lsls	r2, r2, #6
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d900      	bls.n	80069a6 <HAL_TIM_ConfigClockSource+0x5e>
 80069a4:	e088      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	0152      	lsls	r2, r2, #5
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d100      	bne.n	80069b0 <HAL_TIM_ConfigClockSource+0x68>
 80069ae:	e085      	b.n	8006abc <HAL_TIM_ConfigClockSource+0x174>
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	0152      	lsls	r2, r2, #5
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d900      	bls.n	80069ba <HAL_TIM_ConfigClockSource+0x72>
 80069b8:	e07e      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069ba:	2b70      	cmp	r3, #112	; 0x70
 80069bc:	d018      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0xa8>
 80069be:	d900      	bls.n	80069c2 <HAL_TIM_ConfigClockSource+0x7a>
 80069c0:	e07a      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069c2:	2b60      	cmp	r3, #96	; 0x60
 80069c4:	d04f      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x11e>
 80069c6:	d900      	bls.n	80069ca <HAL_TIM_ConfigClockSource+0x82>
 80069c8:	e076      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069ca:	2b50      	cmp	r3, #80	; 0x50
 80069cc:	d03b      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0xfe>
 80069ce:	d900      	bls.n	80069d2 <HAL_TIM_ConfigClockSource+0x8a>
 80069d0:	e072      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	d057      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x13e>
 80069d6:	d900      	bls.n	80069da <HAL_TIM_ConfigClockSource+0x92>
 80069d8:	e06e      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069da:	2b30      	cmp	r3, #48	; 0x30
 80069dc:	d063      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80069de:	d86b      	bhi.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d060      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80069e4:	d868      	bhi.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d05d      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x15e>
 80069ea:	2b10      	cmp	r3, #16
 80069ec:	d05b      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069ee:	e063      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f000 f93a 	bl	8006c78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2277      	movs	r2, #119	; 0x77
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	609a      	str	r2, [r3, #8]
      break;
 8006a1c:	e04f      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	6899      	ldr	r1, [r3, #8]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f000 f923 	bl	8006c78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	01c9      	lsls	r1, r1, #7
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]
      break;
 8006a44:	e03b      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6859      	ldr	r1, [r3, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	001a      	movs	r2, r3
 8006a54:	f000 f896 	bl	8006b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2150      	movs	r1, #80	; 0x50
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 f8f0 	bl	8006c44 <TIM_ITRx_SetConfig>
      break;
 8006a64:	e02b      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	001a      	movs	r2, r3
 8006a74:	f000 f8b4 	bl	8006be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2160      	movs	r1, #96	; 0x60
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f000 f8e0 	bl	8006c44 <TIM_ITRx_SetConfig>
      break;
 8006a84:	e01b      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	001a      	movs	r2, r3
 8006a94:	f000 f876 	bl	8006b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2140      	movs	r1, #64	; 0x40
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 f8d0 	bl	8006c44 <TIM_ITRx_SetConfig>
      break;
 8006aa4:	e00b      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	0019      	movs	r1, r3
 8006ab0:	0010      	movs	r0, r2
 8006ab2:	f000 f8c7 	bl	8006c44 <TIM_ITRx_SetConfig>
        break;
 8006ab6:	e002      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006ab8:	46c0      	nop			; (mov r8, r8)
 8006aba:	e000      	b.n	8006abe <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006abc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2239      	movs	r2, #57	; 0x39
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2238      	movs	r2, #56	; 0x38
 8006aca:	2100      	movs	r1, #0
 8006acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	b004      	add	sp, #16
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	ffff00ff 	.word	0xffff00ff

08006adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	2380      	movs	r3, #128	; 0x80
 8006af0:	05db      	lsls	r3, r3, #23
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0x2a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <TIM_Base_SetConfig+0x9c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0x2a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a1e      	ldr	r2, [pc, #120]	; (8006b7c <TIM_Base_SetConfig+0xa0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2270      	movs	r2, #112	; 0x70
 8006b0a:	4393      	bics	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	2380      	movs	r3, #128	; 0x80
 8006b1c:	05db      	lsls	r3, r3, #23
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d007      	beq.n	8006b32 <TIM_Base_SetConfig+0x56>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <TIM_Base_SetConfig+0x9c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_Base_SetConfig+0x56>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <TIM_Base_SetConfig+0xa0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <TIM_Base_SetConfig+0xa4>)
 8006b36:	4013      	ands	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	4393      	bics	r3, r2
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	615a      	str	r2, [r3, #20]
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40010800 	.word	0x40010800
 8006b7c:	40011400 	.word	0x40011400
 8006b80:	fffffcff 	.word	0xfffffcff

08006b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4393      	bics	r3, r2
 8006b9e:	001a      	movs	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	22f0      	movs	r2, #240	; 0xf0
 8006bae:	4393      	bics	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	220a      	movs	r2, #10
 8006bc0:	4393      	bics	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b006      	add	sp, #24
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	4393      	bics	r3, r2
 8006bf4:	001a      	movs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	4a0d      	ldr	r2, [pc, #52]	; (8006c40 <TIM_TI2_ConfigInputStage+0x60>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	22a0      	movs	r2, #160	; 0xa0
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b006      	add	sp, #24
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	ffff0fff 	.word	0xffff0fff

08006c44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2270      	movs	r2, #112	; 0x70
 8006c58:	4393      	bics	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	2207      	movs	r2, #7
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	609a      	str	r2, [r3, #8]
}
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b004      	add	sp, #16
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <TIM_ETR_SetConfig+0x3c>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	021a      	lsls	r2, r3, #8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b006      	add	sp, #24
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	ffff00ff 	.word	0xffff00ff

08006cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2238      	movs	r2, #56	; 0x38
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e042      	b.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2238      	movs	r2, #56	; 0x38
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2239      	movs	r2, #57	; 0x39
 8006cdc:	2102      	movs	r1, #2
 8006cde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2270      	movs	r2, #112	; 0x70
 8006cf4:	4393      	bics	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	05db      	lsls	r3, r3, #23
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d009      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a11      	ldr	r2, [pc, #68]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a0f      	ldr	r2, [pc, #60]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d10c      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2280      	movs	r2, #128	; 0x80
 8006d2e:	4393      	bics	r3, r2
 8006d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2239      	movs	r2, #57	; 0x39
 8006d48:	2101      	movs	r1, #1
 8006d4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2238      	movs	r2, #56	; 0x38
 8006d50:	2100      	movs	r1, #0
 8006d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	0018      	movs	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b004      	add	sp, #16
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	40010800 	.word	0x40010800
 8006d64:	40011400 	.word	0x40011400

08006d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e044      	b.n	8006e04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d107      	bne.n	8006d92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2274      	movs	r2, #116	; 0x74
 8006d86:	2100      	movs	r1, #0
 8006d88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7fd f9a3 	bl	80040d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2224      	movs	r2, #36	; 0x24
 8006d96:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2101      	movs	r1, #1
 8006da4:	438a      	bics	r2, r1
 8006da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	0018      	movs	r0, r3
 8006dac:	f000 f8d8 	bl	8006f60 <UART_SetConfig>
 8006db0:	0003      	movs	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e024      	b.n	8006e04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f000 fb6b 	bl	80074a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	490d      	ldr	r1, [pc, #52]	; (8006e0c <HAL_UART_Init+0xa4>)
 8006dd6:	400a      	ands	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	212a      	movs	r1, #42	; 0x2a
 8006de6:	438a      	bics	r2, r1
 8006de8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2101      	movs	r1, #1
 8006df6:	430a      	orrs	r2, r1
 8006df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f000 fc03 	bl	8007608 <UART_CheckIdleState>
 8006e02:	0003      	movs	r3, r0
}
 8006e04:	0018      	movs	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b002      	add	sp, #8
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	ffffb7ff 	.word	0xffffb7ff

08006e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	1dbb      	adds	r3, r7, #6
 8006e1e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d000      	beq.n	8006e2a <HAL_UART_Transmit+0x1a>
 8006e28:	e095      	b.n	8006f56 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_UART_Transmit+0x28>
 8006e30:	1dbb      	adds	r3, r7, #6
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e08d      	b.n	8006f58 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	015b      	lsls	r3, r3, #5
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d109      	bne.n	8006e5c <HAL_UART_Transmit+0x4c>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2201      	movs	r2, #1
 8006e54:	4013      	ands	r3, r2
 8006e56:	d001      	beq.n	8006e5c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e07d      	b.n	8006f58 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2274      	movs	r2, #116	; 0x74
 8006e60:	5c9b      	ldrb	r3, [r3, r2]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_UART_Transmit+0x5a>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e076      	b.n	8006f58 <HAL_UART_Transmit+0x148>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2274      	movs	r2, #116	; 0x74
 8006e6e:	2101      	movs	r1, #1
 8006e70:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2280      	movs	r2, #128	; 0x80
 8006e76:	2100      	movs	r1, #0
 8006e78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2221      	movs	r2, #33	; 0x21
 8006e7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e80:	f7fd fafe 	bl	8004480 <HAL_GetTick>
 8006e84:	0003      	movs	r3, r0
 8006e86:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1dba      	adds	r2, r7, #6
 8006e8c:	2150      	movs	r1, #80	; 0x50
 8006e8e:	8812      	ldrh	r2, [r2, #0]
 8006e90:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1dba      	adds	r2, r7, #6
 8006e96:	2152      	movs	r1, #82	; 0x52
 8006e98:	8812      	ldrh	r2, [r2, #0]
 8006e9a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	015b      	lsls	r3, r3, #5
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d108      	bne.n	8006eba <HAL_UART_Transmit+0xaa>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	e003      	b.n	8006ec2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2274      	movs	r2, #116	; 0x74
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006eca:	e02c      	b.n	8006f26 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	0013      	movs	r3, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2180      	movs	r1, #128	; 0x80
 8006eda:	f000 fbdd 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 8006ede:	1e03      	subs	r3, r0, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e038      	b.n	8006f58 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	001a      	movs	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	05d2      	lsls	r2, r2, #23
 8006ef8:	0dd2      	lsrs	r2, r2, #23
 8006efa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	3302      	adds	r3, #2
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e007      	b.n	8006f14 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3301      	adds	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2252      	movs	r2, #82	; 0x52
 8006f18:	5a9b      	ldrh	r3, [r3, r2]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b299      	uxth	r1, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2252      	movs	r2, #82	; 0x52
 8006f24:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2252      	movs	r2, #82	; 0x52
 8006f2a:	5a9b      	ldrh	r3, [r3, r2]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1cc      	bne.n	8006ecc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	0013      	movs	r3, r2
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2140      	movs	r1, #64	; 0x40
 8006f40:	f000 fbaa 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 8006f44:	1e03      	subs	r3, r0, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e005      	b.n	8006f58 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e000      	b.n	8006f58 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006f56:	2302      	movs	r3, #2
  }
}
 8006f58:	0018      	movs	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b008      	add	sp, #32
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f60:	b5b0      	push	{r4, r5, r7, lr}
 8006f62:	b08e      	sub	sp, #56	; 0x38
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f68:	231a      	movs	r3, #26
 8006f6a:	2218      	movs	r2, #24
 8006f6c:	4694      	mov	ip, r2
 8006f6e:	44bc      	add	ip, r7
 8006f70:	4463      	add	r3, ip
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4ac1      	ldr	r2, [pc, #772]	; (800729c <UART_SetConfig+0x33c>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	0019      	movs	r1, r3
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4abd      	ldr	r2, [pc, #756]	; (80072a0 <UART_SetConfig+0x340>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	0019      	movs	r1, r3
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4ab7      	ldr	r2, [pc, #732]	; (80072a4 <UART_SetConfig+0x344>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	4ab2      	ldr	r2, [pc, #712]	; (80072a8 <UART_SetConfig+0x348>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4aae      	ldr	r2, [pc, #696]	; (80072ac <UART_SetConfig+0x34c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d136      	bne.n	8007064 <UART_SetConfig+0x104>
 8006ff6:	4bae      	ldr	r3, [pc, #696]	; (80072b0 <UART_SetConfig+0x350>)
 8006ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d020      	beq.n	8007044 <UART_SetConfig+0xe4>
 8007002:	d827      	bhi.n	8007054 <UART_SetConfig+0xf4>
 8007004:	2b02      	cmp	r3, #2
 8007006:	d00d      	beq.n	8007024 <UART_SetConfig+0xc4>
 8007008:	d824      	bhi.n	8007054 <UART_SetConfig+0xf4>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <UART_SetConfig+0xb4>
 800700e:	2b01      	cmp	r3, #1
 8007010:	d010      	beq.n	8007034 <UART_SetConfig+0xd4>
 8007012:	e01f      	b.n	8007054 <UART_SetConfig+0xf4>
 8007014:	231b      	movs	r3, #27
 8007016:	2218      	movs	r2, #24
 8007018:	4694      	mov	ip, r2
 800701a:	44bc      	add	ip, r7
 800701c:	4463      	add	r3, ip
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e0ab      	b.n	800717c <UART_SetConfig+0x21c>
 8007024:	231b      	movs	r3, #27
 8007026:	2218      	movs	r2, #24
 8007028:	4694      	mov	ip, r2
 800702a:	44bc      	add	ip, r7
 800702c:	4463      	add	r3, ip
 800702e:	2202      	movs	r2, #2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	e0a3      	b.n	800717c <UART_SetConfig+0x21c>
 8007034:	231b      	movs	r3, #27
 8007036:	2218      	movs	r2, #24
 8007038:	4694      	mov	ip, r2
 800703a:	44bc      	add	ip, r7
 800703c:	4463      	add	r3, ip
 800703e:	2204      	movs	r2, #4
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e09b      	b.n	800717c <UART_SetConfig+0x21c>
 8007044:	231b      	movs	r3, #27
 8007046:	2218      	movs	r2, #24
 8007048:	4694      	mov	ip, r2
 800704a:	44bc      	add	ip, r7
 800704c:	4463      	add	r3, ip
 800704e:	2208      	movs	r2, #8
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e093      	b.n	800717c <UART_SetConfig+0x21c>
 8007054:	231b      	movs	r3, #27
 8007056:	2218      	movs	r2, #24
 8007058:	4694      	mov	ip, r2
 800705a:	44bc      	add	ip, r7
 800705c:	4463      	add	r3, ip
 800705e:	2210      	movs	r2, #16
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e08b      	b.n	800717c <UART_SetConfig+0x21c>
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a92      	ldr	r2, [pc, #584]	; (80072b4 <UART_SetConfig+0x354>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d136      	bne.n	80070dc <UART_SetConfig+0x17c>
 800706e:	4b90      	ldr	r3, [pc, #576]	; (80072b0 <UART_SetConfig+0x350>)
 8007070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007072:	220c      	movs	r2, #12
 8007074:	4013      	ands	r3, r2
 8007076:	2b0c      	cmp	r3, #12
 8007078:	d020      	beq.n	80070bc <UART_SetConfig+0x15c>
 800707a:	d827      	bhi.n	80070cc <UART_SetConfig+0x16c>
 800707c:	2b08      	cmp	r3, #8
 800707e:	d00d      	beq.n	800709c <UART_SetConfig+0x13c>
 8007080:	d824      	bhi.n	80070cc <UART_SetConfig+0x16c>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <UART_SetConfig+0x12c>
 8007086:	2b04      	cmp	r3, #4
 8007088:	d010      	beq.n	80070ac <UART_SetConfig+0x14c>
 800708a:	e01f      	b.n	80070cc <UART_SetConfig+0x16c>
 800708c:	231b      	movs	r3, #27
 800708e:	2218      	movs	r2, #24
 8007090:	4694      	mov	ip, r2
 8007092:	44bc      	add	ip, r7
 8007094:	4463      	add	r3, ip
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e06f      	b.n	800717c <UART_SetConfig+0x21c>
 800709c:	231b      	movs	r3, #27
 800709e:	2218      	movs	r2, #24
 80070a0:	4694      	mov	ip, r2
 80070a2:	44bc      	add	ip, r7
 80070a4:	4463      	add	r3, ip
 80070a6:	2202      	movs	r2, #2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e067      	b.n	800717c <UART_SetConfig+0x21c>
 80070ac:	231b      	movs	r3, #27
 80070ae:	2218      	movs	r2, #24
 80070b0:	4694      	mov	ip, r2
 80070b2:	44bc      	add	ip, r7
 80070b4:	4463      	add	r3, ip
 80070b6:	2204      	movs	r2, #4
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e05f      	b.n	800717c <UART_SetConfig+0x21c>
 80070bc:	231b      	movs	r3, #27
 80070be:	2218      	movs	r2, #24
 80070c0:	4694      	mov	ip, r2
 80070c2:	44bc      	add	ip, r7
 80070c4:	4463      	add	r3, ip
 80070c6:	2208      	movs	r2, #8
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e057      	b.n	800717c <UART_SetConfig+0x21c>
 80070cc:	231b      	movs	r3, #27
 80070ce:	2218      	movs	r2, #24
 80070d0:	4694      	mov	ip, r2
 80070d2:	44bc      	add	ip, r7
 80070d4:	4463      	add	r3, ip
 80070d6:	2210      	movs	r2, #16
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	e04f      	b.n	800717c <UART_SetConfig+0x21c>
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a70      	ldr	r2, [pc, #448]	; (80072a4 <UART_SetConfig+0x344>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d143      	bne.n	800716e <UART_SetConfig+0x20e>
 80070e6:	4b72      	ldr	r3, [pc, #456]	; (80072b0 <UART_SetConfig+0x350>)
 80070e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070ea:	23c0      	movs	r3, #192	; 0xc0
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	4013      	ands	r3, r2
 80070f0:	22c0      	movs	r2, #192	; 0xc0
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02a      	beq.n	800714e <UART_SetConfig+0x1ee>
 80070f8:	22c0      	movs	r2, #192	; 0xc0
 80070fa:	0112      	lsls	r2, r2, #4
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d82e      	bhi.n	800715e <UART_SetConfig+0x1fe>
 8007100:	2280      	movs	r2, #128	; 0x80
 8007102:	0112      	lsls	r2, r2, #4
 8007104:	4293      	cmp	r3, r2
 8007106:	d012      	beq.n	800712e <UART_SetConfig+0x1ce>
 8007108:	2280      	movs	r2, #128	; 0x80
 800710a:	0112      	lsls	r2, r2, #4
 800710c:	4293      	cmp	r3, r2
 800710e:	d826      	bhi.n	800715e <UART_SetConfig+0x1fe>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <UART_SetConfig+0x1be>
 8007114:	2280      	movs	r2, #128	; 0x80
 8007116:	00d2      	lsls	r2, r2, #3
 8007118:	4293      	cmp	r3, r2
 800711a:	d010      	beq.n	800713e <UART_SetConfig+0x1de>
 800711c:	e01f      	b.n	800715e <UART_SetConfig+0x1fe>
 800711e:	231b      	movs	r3, #27
 8007120:	2218      	movs	r2, #24
 8007122:	4694      	mov	ip, r2
 8007124:	44bc      	add	ip, r7
 8007126:	4463      	add	r3, ip
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e026      	b.n	800717c <UART_SetConfig+0x21c>
 800712e:	231b      	movs	r3, #27
 8007130:	2218      	movs	r2, #24
 8007132:	4694      	mov	ip, r2
 8007134:	44bc      	add	ip, r7
 8007136:	4463      	add	r3, ip
 8007138:	2202      	movs	r2, #2
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	e01e      	b.n	800717c <UART_SetConfig+0x21c>
 800713e:	231b      	movs	r3, #27
 8007140:	2218      	movs	r2, #24
 8007142:	4694      	mov	ip, r2
 8007144:	44bc      	add	ip, r7
 8007146:	4463      	add	r3, ip
 8007148:	2204      	movs	r2, #4
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	e016      	b.n	800717c <UART_SetConfig+0x21c>
 800714e:	231b      	movs	r3, #27
 8007150:	2218      	movs	r2, #24
 8007152:	4694      	mov	ip, r2
 8007154:	44bc      	add	ip, r7
 8007156:	4463      	add	r3, ip
 8007158:	2208      	movs	r2, #8
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	e00e      	b.n	800717c <UART_SetConfig+0x21c>
 800715e:	231b      	movs	r3, #27
 8007160:	2218      	movs	r2, #24
 8007162:	4694      	mov	ip, r2
 8007164:	44bc      	add	ip, r7
 8007166:	4463      	add	r3, ip
 8007168:	2210      	movs	r2, #16
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	e006      	b.n	800717c <UART_SetConfig+0x21c>
 800716e:	231b      	movs	r3, #27
 8007170:	2218      	movs	r2, #24
 8007172:	4694      	mov	ip, r2
 8007174:	44bc      	add	ip, r7
 8007176:	4463      	add	r3, ip
 8007178:	2210      	movs	r2, #16
 800717a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a48      	ldr	r2, [pc, #288]	; (80072a4 <UART_SetConfig+0x344>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d000      	beq.n	8007188 <UART_SetConfig+0x228>
 8007186:	e09b      	b.n	80072c0 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007188:	231b      	movs	r3, #27
 800718a:	2218      	movs	r2, #24
 800718c:	4694      	mov	ip, r2
 800718e:	44bc      	add	ip, r7
 8007190:	4463      	add	r3, ip
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d01d      	beq.n	80071d4 <UART_SetConfig+0x274>
 8007198:	dc20      	bgt.n	80071dc <UART_SetConfig+0x27c>
 800719a:	2b04      	cmp	r3, #4
 800719c:	d015      	beq.n	80071ca <UART_SetConfig+0x26a>
 800719e:	dc1d      	bgt.n	80071dc <UART_SetConfig+0x27c>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <UART_SetConfig+0x24a>
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d005      	beq.n	80071b4 <UART_SetConfig+0x254>
 80071a8:	e018      	b.n	80071dc <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071aa:	f7ff f987 	bl	80064bc <HAL_RCC_GetPCLK1Freq>
 80071ae:	0003      	movs	r3, r0
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071b2:	e01d      	b.n	80071f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071b4:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <UART_SetConfig+0x350>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2210      	movs	r2, #16
 80071ba:	4013      	ands	r3, r2
 80071bc:	d002      	beq.n	80071c4 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80071be:	4b3e      	ldr	r3, [pc, #248]	; (80072b8 <UART_SetConfig+0x358>)
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071c2:	e015      	b.n	80071f0 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 80071c4:	4b3d      	ldr	r3, [pc, #244]	; (80072bc <UART_SetConfig+0x35c>)
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071c8:	e012      	b.n	80071f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ca:	f7ff f8a5 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 80071ce:	0003      	movs	r3, r0
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071d2:	e00d      	b.n	80071f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071da:	e009      	b.n	80071f0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80071e0:	231a      	movs	r3, #26
 80071e2:	2218      	movs	r2, #24
 80071e4:	4694      	mov	ip, r2
 80071e6:	44bc      	add	ip, r7
 80071e8:	4463      	add	r3, ip
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
        break;
 80071ee:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d100      	bne.n	80071f8 <UART_SetConfig+0x298>
 80071f6:	e139      	b.n	800746c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	0013      	movs	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	189b      	adds	r3, r3, r2
 8007202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007204:	429a      	cmp	r2, r3
 8007206:	d305      	bcc.n	8007214 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800720e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007210:	429a      	cmp	r2, r3
 8007212:	d907      	bls.n	8007224 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007214:	231a      	movs	r3, #26
 8007216:	2218      	movs	r2, #24
 8007218:	4694      	mov	ip, r2
 800721a:	44bc      	add	ip, r7
 800721c:	4463      	add	r3, ip
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e123      	b.n	800746c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	6939      	ldr	r1, [r7, #16]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	000b      	movs	r3, r1
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	0010      	movs	r0, r2
 8007236:	0205      	lsls	r5, r0, #8
 8007238:	431d      	orrs	r5, r3
 800723a:	000b      	movs	r3, r1
 800723c:	021c      	lsls	r4, r3, #8
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68b8      	ldr	r0, [r7, #8]
 800724c:	68f9      	ldr	r1, [r7, #12]
 800724e:	1900      	adds	r0, r0, r4
 8007250:	4169      	adcs	r1, r5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	2300      	movs	r3, #0
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f7f9 f922 	bl	80004a8 <__aeabi_uldivmod>
 8007264:	0002      	movs	r2, r0
 8007266:	000b      	movs	r3, r1
 8007268:	0013      	movs	r3, r2
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800726c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800726e:	23c0      	movs	r3, #192	; 0xc0
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	429a      	cmp	r2, r3
 8007274:	d309      	bcc.n	800728a <UART_SetConfig+0x32a>
 8007276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007278:	2380      	movs	r3, #128	; 0x80
 800727a:	035b      	lsls	r3, r3, #13
 800727c:	429a      	cmp	r2, r3
 800727e:	d204      	bcs.n	800728a <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	e0f0      	b.n	800746c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800728a:	231a      	movs	r3, #26
 800728c:	2218      	movs	r2, #24
 800728e:	4694      	mov	ip, r2
 8007290:	44bc      	add	ip, r7
 8007292:	4463      	add	r3, ip
 8007294:	2201      	movs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e0e8      	b.n	800746c <UART_SetConfig+0x50c>
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	efff69f3 	.word	0xefff69f3
 80072a0:	ffffcfff 	.word	0xffffcfff
 80072a4:	40004800 	.word	0x40004800
 80072a8:	fffff4ff 	.word	0xfffff4ff
 80072ac:	40013800 	.word	0x40013800
 80072b0:	40021000 	.word	0x40021000
 80072b4:	40004400 	.word	0x40004400
 80072b8:	003d0900 	.word	0x003d0900
 80072bc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d000      	beq.n	80072ce <UART_SetConfig+0x36e>
 80072cc:	e074      	b.n	80073b8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80072ce:	231b      	movs	r3, #27
 80072d0:	2218      	movs	r2, #24
 80072d2:	4694      	mov	ip, r2
 80072d4:	44bc      	add	ip, r7
 80072d6:	4463      	add	r3, ip
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d822      	bhi.n	8007324 <UART_SetConfig+0x3c4>
 80072de:	009a      	lsls	r2, r3, #2
 80072e0:	4b6a      	ldr	r3, [pc, #424]	; (800748c <UART_SetConfig+0x52c>)
 80072e2:	18d3      	adds	r3, r2, r3
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e8:	f7ff f8e8 	bl	80064bc <HAL_RCC_GetPCLK1Freq>
 80072ec:	0003      	movs	r3, r0
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072f0:	e022      	b.n	8007338 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f2:	f7ff f8f9 	bl	80064e8 <HAL_RCC_GetPCLK2Freq>
 80072f6:	0003      	movs	r3, r0
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072fa:	e01d      	b.n	8007338 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072fc:	4b64      	ldr	r3, [pc, #400]	; (8007490 <UART_SetConfig+0x530>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2210      	movs	r2, #16
 8007302:	4013      	ands	r3, r2
 8007304:	d002      	beq.n	800730c <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007306:	4b63      	ldr	r3, [pc, #396]	; (8007494 <UART_SetConfig+0x534>)
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800730a:	e015      	b.n	8007338 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 800730c:	4b62      	ldr	r3, [pc, #392]	; (8007498 <UART_SetConfig+0x538>)
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007310:	e012      	b.n	8007338 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7ff f801 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 8007316:	0003      	movs	r3, r0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800731a:	e00d      	b.n	8007338 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731c:	2380      	movs	r3, #128	; 0x80
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007322:	e009      	b.n	8007338 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007328:	231a      	movs	r3, #26
 800732a:	2218      	movs	r2, #24
 800732c:	4694      	mov	ip, r2
 800732e:	44bc      	add	ip, r7
 8007330:	4463      	add	r3, ip
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
        break;
 8007336:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d100      	bne.n	8007340 <UART_SetConfig+0x3e0>
 800733e:	e095      	b.n	800746c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	005a      	lsls	r2, r3, #1
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	18d2      	adds	r2, r2, r3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	0019      	movs	r1, r3
 8007352:	0010      	movs	r0, r2
 8007354:	f7f8 fef4 	bl	8000140 <__udivsi3>
 8007358:	0003      	movs	r3, r0
 800735a:	b29b      	uxth	r3, r3
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d921      	bls.n	80073a8 <UART_SetConfig+0x448>
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	2380      	movs	r3, #128	; 0x80
 8007368:	025b      	lsls	r3, r3, #9
 800736a:	429a      	cmp	r2, r3
 800736c:	d21c      	bcs.n	80073a8 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	b29a      	uxth	r2, r3
 8007372:	200e      	movs	r0, #14
 8007374:	2418      	movs	r4, #24
 8007376:	193b      	adds	r3, r7, r4
 8007378:	181b      	adds	r3, r3, r0
 800737a:	210f      	movs	r1, #15
 800737c:	438a      	bics	r2, r1
 800737e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	085b      	lsrs	r3, r3, #1
 8007384:	b29b      	uxth	r3, r3
 8007386:	2207      	movs	r2, #7
 8007388:	4013      	ands	r3, r2
 800738a:	b299      	uxth	r1, r3
 800738c:	193b      	adds	r3, r7, r4
 800738e:	181b      	adds	r3, r3, r0
 8007390:	193a      	adds	r2, r7, r4
 8007392:	1812      	adds	r2, r2, r0
 8007394:	8812      	ldrh	r2, [r2, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	193a      	adds	r2, r7, r4
 80073a0:	1812      	adds	r2, r2, r0
 80073a2:	8812      	ldrh	r2, [r2, #0]
 80073a4:	60da      	str	r2, [r3, #12]
 80073a6:	e061      	b.n	800746c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80073a8:	231a      	movs	r3, #26
 80073aa:	2218      	movs	r2, #24
 80073ac:	4694      	mov	ip, r2
 80073ae:	44bc      	add	ip, r7
 80073b0:	4463      	add	r3, ip
 80073b2:	2201      	movs	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e059      	b.n	800746c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073b8:	231b      	movs	r3, #27
 80073ba:	2218      	movs	r2, #24
 80073bc:	4694      	mov	ip, r2
 80073be:	44bc      	add	ip, r7
 80073c0:	4463      	add	r3, ip
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d822      	bhi.n	800740e <UART_SetConfig+0x4ae>
 80073c8:	009a      	lsls	r2, r3, #2
 80073ca:	4b34      	ldr	r3, [pc, #208]	; (800749c <UART_SetConfig+0x53c>)
 80073cc:	18d3      	adds	r3, r2, r3
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d2:	f7ff f873 	bl	80064bc <HAL_RCC_GetPCLK1Freq>
 80073d6:	0003      	movs	r3, r0
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073da:	e022      	b.n	8007422 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073dc:	f7ff f884 	bl	80064e8 <HAL_RCC_GetPCLK2Freq>
 80073e0:	0003      	movs	r3, r0
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073e4:	e01d      	b.n	8007422 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073e6:	4b2a      	ldr	r3, [pc, #168]	; (8007490 <UART_SetConfig+0x530>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2210      	movs	r2, #16
 80073ec:	4013      	ands	r3, r2
 80073ee:	d002      	beq.n	80073f6 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80073f0:	4b28      	ldr	r3, [pc, #160]	; (8007494 <UART_SetConfig+0x534>)
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073f4:	e015      	b.n	8007422 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80073f6:	4b28      	ldr	r3, [pc, #160]	; (8007498 <UART_SetConfig+0x538>)
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073fa:	e012      	b.n	8007422 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fc:	f7fe ff8c 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 8007400:	0003      	movs	r3, r0
 8007402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007404:	e00d      	b.n	8007422 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800740c:	e009      	b.n	8007422 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007412:	231a      	movs	r3, #26
 8007414:	2218      	movs	r2, #24
 8007416:	4694      	mov	ip, r2
 8007418:	44bc      	add	ip, r7
 800741a:	4463      	add	r3, ip
 800741c:	2201      	movs	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]
        break;
 8007420:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d021      	beq.n	800746c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	085a      	lsrs	r2, r3, #1
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	18d2      	adds	r2, r2, r3
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	0019      	movs	r1, r3
 8007438:	0010      	movs	r0, r2
 800743a:	f7f8 fe81 	bl	8000140 <__udivsi3>
 800743e:	0003      	movs	r3, r0
 8007440:	b29b      	uxth	r3, r3
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	2b0f      	cmp	r3, #15
 8007448:	d909      	bls.n	800745e <UART_SetConfig+0x4fe>
 800744a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	025b      	lsls	r3, r3, #9
 8007450:	429a      	cmp	r2, r3
 8007452:	d204      	bcs.n	800745e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800745a:	60da      	str	r2, [r3, #12]
 800745c:	e006      	b.n	800746c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800745e:	231a      	movs	r3, #26
 8007460:	2218      	movs	r2, #24
 8007462:	4694      	mov	ip, r2
 8007464:	44bc      	add	ip, r7
 8007466:	4463      	add	r3, ip
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2200      	movs	r2, #0
 8007470:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2200      	movs	r2, #0
 8007476:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007478:	231a      	movs	r3, #26
 800747a:	2218      	movs	r2, #24
 800747c:	4694      	mov	ip, r2
 800747e:	44bc      	add	ip, r7
 8007480:	4463      	add	r3, ip
 8007482:	781b      	ldrb	r3, [r3, #0]
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b00e      	add	sp, #56	; 0x38
 800748a:	bdb0      	pop	{r4, r5, r7, pc}
 800748c:	0800a818 	.word	0x0800a818
 8007490:	40021000 	.word	0x40021000
 8007494:	003d0900 	.word	0x003d0900
 8007498:	00f42400 	.word	0x00f42400
 800749c:	0800a83c 	.word	0x0800a83c

080074a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2201      	movs	r2, #1
 80074ae:	4013      	ands	r3, r2
 80074b0:	d00b      	beq.n	80074ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a4a      	ldr	r2, [pc, #296]	; (80075e4 <UART_AdvFeatureConfig+0x144>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	0019      	movs	r1, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2202      	movs	r2, #2
 80074d0:	4013      	ands	r3, r2
 80074d2:	d00b      	beq.n	80074ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4a43      	ldr	r2, [pc, #268]	; (80075e8 <UART_AdvFeatureConfig+0x148>)
 80074dc:	4013      	ands	r3, r2
 80074de:	0019      	movs	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2204      	movs	r2, #4
 80074f2:	4013      	ands	r3, r2
 80074f4:	d00b      	beq.n	800750e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4a3b      	ldr	r2, [pc, #236]	; (80075ec <UART_AdvFeatureConfig+0x14c>)
 80074fe:	4013      	ands	r3, r2
 8007500:	0019      	movs	r1, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2208      	movs	r2, #8
 8007514:	4013      	ands	r3, r2
 8007516:	d00b      	beq.n	8007530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	4a34      	ldr	r2, [pc, #208]	; (80075f0 <UART_AdvFeatureConfig+0x150>)
 8007520:	4013      	ands	r3, r2
 8007522:	0019      	movs	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	2210      	movs	r2, #16
 8007536:	4013      	ands	r3, r2
 8007538:	d00b      	beq.n	8007552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4a2c      	ldr	r2, [pc, #176]	; (80075f4 <UART_AdvFeatureConfig+0x154>)
 8007542:	4013      	ands	r3, r2
 8007544:	0019      	movs	r1, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2220      	movs	r2, #32
 8007558:	4013      	ands	r3, r2
 800755a:	d00b      	beq.n	8007574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	4a25      	ldr	r2, [pc, #148]	; (80075f8 <UART_AdvFeatureConfig+0x158>)
 8007564:	4013      	ands	r3, r2
 8007566:	0019      	movs	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2240      	movs	r2, #64	; 0x40
 800757a:	4013      	ands	r3, r2
 800757c:	d01d      	beq.n	80075ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4a1d      	ldr	r2, [pc, #116]	; (80075fc <UART_AdvFeatureConfig+0x15c>)
 8007586:	4013      	ands	r3, r2
 8007588:	0019      	movs	r1, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	035b      	lsls	r3, r3, #13
 800759e:	429a      	cmp	r2, r3
 80075a0:	d10b      	bne.n	80075ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <UART_AdvFeatureConfig+0x160>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	0019      	movs	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2280      	movs	r2, #128	; 0x80
 80075c0:	4013      	ands	r3, r2
 80075c2:	d00b      	beq.n	80075dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	4a0e      	ldr	r2, [pc, #56]	; (8007604 <UART_AdvFeatureConfig+0x164>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	0019      	movs	r1, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]
  }
}
 80075dc:	46c0      	nop			; (mov r8, r8)
 80075de:	46bd      	mov	sp, r7
 80075e0:	b002      	add	sp, #8
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	fffdffff 	.word	0xfffdffff
 80075e8:	fffeffff 	.word	0xfffeffff
 80075ec:	fffbffff 	.word	0xfffbffff
 80075f0:	ffff7fff 	.word	0xffff7fff
 80075f4:	ffffefff 	.word	0xffffefff
 80075f8:	ffffdfff 	.word	0xffffdfff
 80075fc:	ffefffff 	.word	0xffefffff
 8007600:	ff9fffff 	.word	0xff9fffff
 8007604:	fff7ffff 	.word	0xfff7ffff

08007608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2280      	movs	r2, #128	; 0x80
 8007614:	2100      	movs	r1, #0
 8007616:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007618:	f7fc ff32 	bl	8004480 <HAL_GetTick>
 800761c:	0003      	movs	r3, r0
 800761e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2208      	movs	r2, #8
 8007628:	4013      	ands	r3, r2
 800762a:	2b08      	cmp	r3, #8
 800762c:	d10c      	bne.n	8007648 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2280      	movs	r2, #128	; 0x80
 8007632:	0391      	lsls	r1, r2, #14
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4a17      	ldr	r2, [pc, #92]	; (8007694 <UART_CheckIdleState+0x8c>)
 8007638:	9200      	str	r2, [sp, #0]
 800763a:	2200      	movs	r2, #0
 800763c:	f000 f82c 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 8007640:	1e03      	subs	r3, r0, #0
 8007642:	d001      	beq.n	8007648 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e021      	b.n	800768c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2204      	movs	r2, #4
 8007650:	4013      	ands	r3, r2
 8007652:	2b04      	cmp	r3, #4
 8007654:	d10c      	bne.n	8007670 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	03d1      	lsls	r1, r2, #15
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4a0d      	ldr	r2, [pc, #52]	; (8007694 <UART_CheckIdleState+0x8c>)
 8007660:	9200      	str	r2, [sp, #0]
 8007662:	2200      	movs	r2, #0
 8007664:	f000 f818 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 8007668:	1e03      	subs	r3, r0, #0
 800766a:	d001      	beq.n	8007670 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e00d      	b.n	800768c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2274      	movs	r2, #116	; 0x74
 8007686:	2100      	movs	r1, #0
 8007688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	0018      	movs	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	b004      	add	sp, #16
 8007692:	bd80      	pop	{r7, pc}
 8007694:	01ffffff 	.word	0x01ffffff

08007698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	1dfb      	adds	r3, r7, #7
 80076a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a8:	e05e      	b.n	8007768 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	3301      	adds	r3, #1
 80076ae:	d05b      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b0:	f7fc fee6 	bl	8004480 <HAL_GetTick>
 80076b4:	0002      	movs	r2, r0
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d11b      	bne.n	80076fe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	492f      	ldr	r1, [pc, #188]	; (8007790 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80076d2:	400a      	ands	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2101      	movs	r1, #1
 80076e2:	438a      	bics	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2274      	movs	r2, #116	; 0x74
 80076f6:	2100      	movs	r1, #0
 80076f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e044      	b.n	8007788 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2204      	movs	r2, #4
 8007706:	4013      	ands	r3, r2
 8007708:	d02e      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	401a      	ands	r2, r3
 8007716:	2380      	movs	r3, #128	; 0x80
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	429a      	cmp	r2, r3
 800771c:	d124      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	0112      	lsls	r2, r2, #4
 8007726:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4917      	ldr	r1, [pc, #92]	; (8007790 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007734:	400a      	ands	r2, r1
 8007736:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2101      	movs	r1, #1
 8007744:	438a      	bics	r2, r1
 8007746:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2220      	movs	r2, #32
 8007752:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2280      	movs	r2, #128	; 0x80
 8007758:	2120      	movs	r1, #32
 800775a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2274      	movs	r2, #116	; 0x74
 8007760:	2100      	movs	r1, #0
 8007762:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e00f      	b.n	8007788 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4013      	ands	r3, r2
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	425a      	negs	r2, r3
 8007778:	4153      	adcs	r3, r2
 800777a:	b2db      	uxtb	r3, r3
 800777c:	001a      	movs	r2, r3
 800777e:	1dfb      	adds	r3, r7, #7
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d091      	beq.n	80076aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b004      	add	sp, #16
 800778e:	bd80      	pop	{r7, pc}
 8007790:	fffffe5f 	.word	0xfffffe5f

08007794 <__errno>:
 8007794:	4b01      	ldr	r3, [pc, #4]	; (800779c <__errno+0x8>)
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	4770      	bx	lr
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	2000000c 	.word	0x2000000c

080077a0 <__libc_init_array>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	2600      	movs	r6, #0
 80077a4:	4d0c      	ldr	r5, [pc, #48]	; (80077d8 <__libc_init_array+0x38>)
 80077a6:	4c0d      	ldr	r4, [pc, #52]	; (80077dc <__libc_init_array+0x3c>)
 80077a8:	1b64      	subs	r4, r4, r5
 80077aa:	10a4      	asrs	r4, r4, #2
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	d109      	bne.n	80077c4 <__libc_init_array+0x24>
 80077b0:	2600      	movs	r6, #0
 80077b2:	f002 ff6b 	bl	800a68c <_init>
 80077b6:	4d0a      	ldr	r5, [pc, #40]	; (80077e0 <__libc_init_array+0x40>)
 80077b8:	4c0a      	ldr	r4, [pc, #40]	; (80077e4 <__libc_init_array+0x44>)
 80077ba:	1b64      	subs	r4, r4, r5
 80077bc:	10a4      	asrs	r4, r4, #2
 80077be:	42a6      	cmp	r6, r4
 80077c0:	d105      	bne.n	80077ce <__libc_init_array+0x2e>
 80077c2:	bd70      	pop	{r4, r5, r6, pc}
 80077c4:	00b3      	lsls	r3, r6, #2
 80077c6:	58eb      	ldr	r3, [r5, r3]
 80077c8:	4798      	blx	r3
 80077ca:	3601      	adds	r6, #1
 80077cc:	e7ee      	b.n	80077ac <__libc_init_array+0xc>
 80077ce:	00b3      	lsls	r3, r6, #2
 80077d0:	58eb      	ldr	r3, [r5, r3]
 80077d2:	4798      	blx	r3
 80077d4:	3601      	adds	r6, #1
 80077d6:	e7f2      	b.n	80077be <__libc_init_array+0x1e>
 80077d8:	0800ac4c 	.word	0x0800ac4c
 80077dc:	0800ac4c 	.word	0x0800ac4c
 80077e0:	0800ac4c 	.word	0x0800ac4c
 80077e4:	0800ac50 	.word	0x0800ac50

080077e8 <malloc>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	4b03      	ldr	r3, [pc, #12]	; (80077f8 <malloc+0x10>)
 80077ec:	0001      	movs	r1, r0
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	f000 f856 	bl	80078a0 <_malloc_r>
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	2000000c 	.word	0x2000000c

080077fc <memset>:
 80077fc:	0003      	movs	r3, r0
 80077fe:	1882      	adds	r2, r0, r2
 8007800:	4293      	cmp	r3, r2
 8007802:	d100      	bne.n	8007806 <memset+0xa>
 8007804:	4770      	bx	lr
 8007806:	7019      	strb	r1, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	e7f9      	b.n	8007800 <memset+0x4>

0800780c <_free_r>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	0005      	movs	r5, r0
 8007810:	2900      	cmp	r1, #0
 8007812:	d010      	beq.n	8007836 <_free_r+0x2a>
 8007814:	1f0c      	subs	r4, r1, #4
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	da00      	bge.n	800781e <_free_r+0x12>
 800781c:	18e4      	adds	r4, r4, r3
 800781e:	0028      	movs	r0, r5
 8007820:	f001 fc0a 	bl	8009038 <__malloc_lock>
 8007824:	4a1d      	ldr	r2, [pc, #116]	; (800789c <_free_r+0x90>)
 8007826:	6813      	ldr	r3, [r2, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d105      	bne.n	8007838 <_free_r+0x2c>
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	6014      	str	r4, [r2, #0]
 8007830:	0028      	movs	r0, r5
 8007832:	f001 fc09 	bl	8009048 <__malloc_unlock>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	42a3      	cmp	r3, r4
 800783a:	d908      	bls.n	800784e <_free_r+0x42>
 800783c:	6821      	ldr	r1, [r4, #0]
 800783e:	1860      	adds	r0, r4, r1
 8007840:	4283      	cmp	r3, r0
 8007842:	d1f3      	bne.n	800782c <_free_r+0x20>
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	1841      	adds	r1, r0, r1
 800784a:	6021      	str	r1, [r4, #0]
 800784c:	e7ee      	b.n	800782c <_free_r+0x20>
 800784e:	001a      	movs	r2, r3
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <_free_r+0x4e>
 8007856:	42a3      	cmp	r3, r4
 8007858:	d9f9      	bls.n	800784e <_free_r+0x42>
 800785a:	6811      	ldr	r1, [r2, #0]
 800785c:	1850      	adds	r0, r2, r1
 800785e:	42a0      	cmp	r0, r4
 8007860:	d10b      	bne.n	800787a <_free_r+0x6e>
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1809      	adds	r1, r1, r0
 8007866:	1850      	adds	r0, r2, r1
 8007868:	6011      	str	r1, [r2, #0]
 800786a:	4283      	cmp	r3, r0
 800786c:	d1e0      	bne.n	8007830 <_free_r+0x24>
 800786e:	6818      	ldr	r0, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	1841      	adds	r1, r0, r1
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	6053      	str	r3, [r2, #4]
 8007878:	e7da      	b.n	8007830 <_free_r+0x24>
 800787a:	42a0      	cmp	r0, r4
 800787c:	d902      	bls.n	8007884 <_free_r+0x78>
 800787e:	230c      	movs	r3, #12
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	e7d5      	b.n	8007830 <_free_r+0x24>
 8007884:	6821      	ldr	r1, [r4, #0]
 8007886:	1860      	adds	r0, r4, r1
 8007888:	4283      	cmp	r3, r0
 800788a:	d103      	bne.n	8007894 <_free_r+0x88>
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	1841      	adds	r1, r0, r1
 8007892:	6021      	str	r1, [r4, #0]
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	6054      	str	r4, [r2, #4]
 8007898:	e7ca      	b.n	8007830 <_free_r+0x24>
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	20000220 	.word	0x20000220

080078a0 <_malloc_r>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	2303      	movs	r3, #3
 80078a4:	1ccd      	adds	r5, r1, #3
 80078a6:	439d      	bics	r5, r3
 80078a8:	3508      	adds	r5, #8
 80078aa:	0006      	movs	r6, r0
 80078ac:	2d0c      	cmp	r5, #12
 80078ae:	d21f      	bcs.n	80078f0 <_malloc_r+0x50>
 80078b0:	250c      	movs	r5, #12
 80078b2:	42a9      	cmp	r1, r5
 80078b4:	d81e      	bhi.n	80078f4 <_malloc_r+0x54>
 80078b6:	0030      	movs	r0, r6
 80078b8:	f001 fbbe 	bl	8009038 <__malloc_lock>
 80078bc:	4925      	ldr	r1, [pc, #148]	; (8007954 <_malloc_r+0xb4>)
 80078be:	680a      	ldr	r2, [r1, #0]
 80078c0:	0014      	movs	r4, r2
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d11a      	bne.n	80078fc <_malloc_r+0x5c>
 80078c6:	4f24      	ldr	r7, [pc, #144]	; (8007958 <_malloc_r+0xb8>)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <_malloc_r+0x38>
 80078ce:	0021      	movs	r1, r4
 80078d0:	0030      	movs	r0, r6
 80078d2:	f000 fcbd 	bl	8008250 <_sbrk_r>
 80078d6:	6038      	str	r0, [r7, #0]
 80078d8:	0029      	movs	r1, r5
 80078da:	0030      	movs	r0, r6
 80078dc:	f000 fcb8 	bl	8008250 <_sbrk_r>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d12b      	bne.n	800793c <_malloc_r+0x9c>
 80078e4:	230c      	movs	r3, #12
 80078e6:	0030      	movs	r0, r6
 80078e8:	6033      	str	r3, [r6, #0]
 80078ea:	f001 fbad 	bl	8009048 <__malloc_unlock>
 80078ee:	e003      	b.n	80078f8 <_malloc_r+0x58>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	dade      	bge.n	80078b2 <_malloc_r+0x12>
 80078f4:	230c      	movs	r3, #12
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	2000      	movs	r0, #0
 80078fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	1b5b      	subs	r3, r3, r5
 8007900:	d419      	bmi.n	8007936 <_malloc_r+0x96>
 8007902:	2b0b      	cmp	r3, #11
 8007904:	d903      	bls.n	800790e <_malloc_r+0x6e>
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	18e4      	adds	r4, r4, r3
 800790a:	6025      	str	r5, [r4, #0]
 800790c:	e003      	b.n	8007916 <_malloc_r+0x76>
 800790e:	6863      	ldr	r3, [r4, #4]
 8007910:	42a2      	cmp	r2, r4
 8007912:	d10e      	bne.n	8007932 <_malloc_r+0x92>
 8007914:	600b      	str	r3, [r1, #0]
 8007916:	0030      	movs	r0, r6
 8007918:	f001 fb96 	bl	8009048 <__malloc_unlock>
 800791c:	0020      	movs	r0, r4
 800791e:	2207      	movs	r2, #7
 8007920:	300b      	adds	r0, #11
 8007922:	1d23      	adds	r3, r4, #4
 8007924:	4390      	bics	r0, r2
 8007926:	1ac2      	subs	r2, r0, r3
 8007928:	4298      	cmp	r0, r3
 800792a:	d0e6      	beq.n	80078fa <_malloc_r+0x5a>
 800792c:	1a1b      	subs	r3, r3, r0
 800792e:	50a3      	str	r3, [r4, r2]
 8007930:	e7e3      	b.n	80078fa <_malloc_r+0x5a>
 8007932:	6053      	str	r3, [r2, #4]
 8007934:	e7ef      	b.n	8007916 <_malloc_r+0x76>
 8007936:	0022      	movs	r2, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7c2      	b.n	80078c2 <_malloc_r+0x22>
 800793c:	2303      	movs	r3, #3
 800793e:	1cc4      	adds	r4, r0, #3
 8007940:	439c      	bics	r4, r3
 8007942:	42a0      	cmp	r0, r4
 8007944:	d0e1      	beq.n	800790a <_malloc_r+0x6a>
 8007946:	1a21      	subs	r1, r4, r0
 8007948:	0030      	movs	r0, r6
 800794a:	f000 fc81 	bl	8008250 <_sbrk_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d1db      	bne.n	800790a <_malloc_r+0x6a>
 8007952:	e7c7      	b.n	80078e4 <_malloc_r+0x44>
 8007954:	20000220 	.word	0x20000220
 8007958:	20000224 	.word	0x20000224

0800795c <__cvt>:
 800795c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795e:	001e      	movs	r6, r3
 8007960:	2300      	movs	r3, #0
 8007962:	0014      	movs	r4, r2
 8007964:	b08b      	sub	sp, #44	; 0x2c
 8007966:	429e      	cmp	r6, r3
 8007968:	da04      	bge.n	8007974 <__cvt+0x18>
 800796a:	2180      	movs	r1, #128	; 0x80
 800796c:	0609      	lsls	r1, r1, #24
 800796e:	1873      	adds	r3, r6, r1
 8007970:	001e      	movs	r6, r3
 8007972:	232d      	movs	r3, #45	; 0x2d
 8007974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007976:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007978:	7013      	strb	r3, [r2, #0]
 800797a:	2320      	movs	r3, #32
 800797c:	2203      	movs	r2, #3
 800797e:	439f      	bics	r7, r3
 8007980:	2f46      	cmp	r7, #70	; 0x46
 8007982:	d007      	beq.n	8007994 <__cvt+0x38>
 8007984:	003b      	movs	r3, r7
 8007986:	3b45      	subs	r3, #69	; 0x45
 8007988:	4259      	negs	r1, r3
 800798a:	414b      	adcs	r3, r1
 800798c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800798e:	3a01      	subs	r2, #1
 8007990:	18cb      	adds	r3, r1, r3
 8007992:	9310      	str	r3, [sp, #64]	; 0x40
 8007994:	ab09      	add	r3, sp, #36	; 0x24
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	ab08      	add	r3, sp, #32
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800799e:	9200      	str	r2, [sp, #0]
 80079a0:	9302      	str	r3, [sp, #8]
 80079a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079a4:	0022      	movs	r2, r4
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	0033      	movs	r3, r6
 80079aa:	f000 fd0f 	bl	80083cc <_dtoa_r>
 80079ae:	0005      	movs	r5, r0
 80079b0:	2f47      	cmp	r7, #71	; 0x47
 80079b2:	d102      	bne.n	80079ba <__cvt+0x5e>
 80079b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079b6:	07db      	lsls	r3, r3, #31
 80079b8:	d528      	bpl.n	8007a0c <__cvt+0xb0>
 80079ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079bc:	18eb      	adds	r3, r5, r3
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	2f46      	cmp	r7, #70	; 0x46
 80079c2:	d114      	bne.n	80079ee <__cvt+0x92>
 80079c4:	782b      	ldrb	r3, [r5, #0]
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	d10c      	bne.n	80079e4 <__cvt+0x88>
 80079ca:	2200      	movs	r2, #0
 80079cc:	2300      	movs	r3, #0
 80079ce:	0020      	movs	r0, r4
 80079d0:	0031      	movs	r1, r6
 80079d2:	f7f8 fd3b 	bl	800044c <__aeabi_dcmpeq>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d104      	bne.n	80079e4 <__cvt+0x88>
 80079da:	2301      	movs	r3, #1
 80079dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079e6:	9a07      	ldr	r2, [sp, #28]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	18d3      	adds	r3, r2, r3
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	2200      	movs	r2, #0
 80079f0:	2300      	movs	r3, #0
 80079f2:	0020      	movs	r0, r4
 80079f4:	0031      	movs	r1, r6
 80079f6:	f7f8 fd29 	bl	800044c <__aeabi_dcmpeq>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d001      	beq.n	8007a02 <__cvt+0xa6>
 80079fe:	9b07      	ldr	r3, [sp, #28]
 8007a00:	9309      	str	r3, [sp, #36]	; 0x24
 8007a02:	2230      	movs	r2, #48	; 0x30
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	9907      	ldr	r1, [sp, #28]
 8007a08:	428b      	cmp	r3, r1
 8007a0a:	d306      	bcc.n	8007a1a <__cvt+0xbe>
 8007a0c:	0028      	movs	r0, r5
 8007a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a12:	1b5b      	subs	r3, r3, r5
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	b00b      	add	sp, #44	; 0x2c
 8007a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a1a:	1c59      	adds	r1, r3, #1
 8007a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	e7f0      	b.n	8007a04 <__cvt+0xa8>

08007a22 <__exponent>:
 8007a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a24:	1c83      	adds	r3, r0, #2
 8007a26:	b087      	sub	sp, #28
 8007a28:	9303      	str	r3, [sp, #12]
 8007a2a:	0005      	movs	r5, r0
 8007a2c:	000c      	movs	r4, r1
 8007a2e:	232b      	movs	r3, #43	; 0x2b
 8007a30:	7002      	strb	r2, [r0, #0]
 8007a32:	2900      	cmp	r1, #0
 8007a34:	da01      	bge.n	8007a3a <__exponent+0x18>
 8007a36:	424c      	negs	r4, r1
 8007a38:	3302      	adds	r3, #2
 8007a3a:	706b      	strb	r3, [r5, #1]
 8007a3c:	2c09      	cmp	r4, #9
 8007a3e:	dd31      	ble.n	8007aa4 <__exponent+0x82>
 8007a40:	270a      	movs	r7, #10
 8007a42:	ab04      	add	r3, sp, #16
 8007a44:	1dde      	adds	r6, r3, #7
 8007a46:	0020      	movs	r0, r4
 8007a48:	0039      	movs	r1, r7
 8007a4a:	9601      	str	r6, [sp, #4]
 8007a4c:	f7f8 fce8 	bl	8000420 <__aeabi_idivmod>
 8007a50:	3e01      	subs	r6, #1
 8007a52:	3130      	adds	r1, #48	; 0x30
 8007a54:	0020      	movs	r0, r4
 8007a56:	7031      	strb	r1, [r6, #0]
 8007a58:	0039      	movs	r1, r7
 8007a5a:	9402      	str	r4, [sp, #8]
 8007a5c:	f7f8 fbfa 	bl	8000254 <__divsi3>
 8007a60:	9b02      	ldr	r3, [sp, #8]
 8007a62:	0004      	movs	r4, r0
 8007a64:	2b63      	cmp	r3, #99	; 0x63
 8007a66:	dcee      	bgt.n	8007a46 <__exponent+0x24>
 8007a68:	9b01      	ldr	r3, [sp, #4]
 8007a6a:	3430      	adds	r4, #48	; 0x30
 8007a6c:	1e9a      	subs	r2, r3, #2
 8007a6e:	0013      	movs	r3, r2
 8007a70:	9903      	ldr	r1, [sp, #12]
 8007a72:	7014      	strb	r4, [r2, #0]
 8007a74:	a804      	add	r0, sp, #16
 8007a76:	3007      	adds	r0, #7
 8007a78:	4298      	cmp	r0, r3
 8007a7a:	d80e      	bhi.n	8007a9a <__exponent+0x78>
 8007a7c:	ab04      	add	r3, sp, #16
 8007a7e:	3307      	adds	r3, #7
 8007a80:	2000      	movs	r0, #0
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d804      	bhi.n	8007a90 <__exponent+0x6e>
 8007a86:	ab04      	add	r3, sp, #16
 8007a88:	3009      	adds	r0, #9
 8007a8a:	18c0      	adds	r0, r0, r3
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	1ac0      	subs	r0, r0, r3
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	1818      	adds	r0, r3, r0
 8007a94:	1b40      	subs	r0, r0, r5
 8007a96:	b007      	add	sp, #28
 8007a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9a:	7818      	ldrb	r0, [r3, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	7008      	strb	r0, [r1, #0]
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	e7e7      	b.n	8007a74 <__exponent+0x52>
 8007aa4:	2330      	movs	r3, #48	; 0x30
 8007aa6:	18e4      	adds	r4, r4, r3
 8007aa8:	70ab      	strb	r3, [r5, #2]
 8007aaa:	1d28      	adds	r0, r5, #4
 8007aac:	70ec      	strb	r4, [r5, #3]
 8007aae:	e7f1      	b.n	8007a94 <__exponent+0x72>

08007ab0 <_printf_float>:
 8007ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab2:	b095      	sub	sp, #84	; 0x54
 8007ab4:	000c      	movs	r4, r1
 8007ab6:	9208      	str	r2, [sp, #32]
 8007ab8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007aba:	9309      	str	r3, [sp, #36]	; 0x24
 8007abc:	0007      	movs	r7, r0
 8007abe:	f001 faa3 	bl	8009008 <_localeconv_r>
 8007ac2:	6803      	ldr	r3, [r0, #0]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ac8:	f7f8 fb1e 	bl	8000108 <strlen>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9312      	str	r3, [sp, #72]	; 0x48
 8007ad0:	7e23      	ldrb	r3, [r4, #24]
 8007ad2:	2207      	movs	r2, #7
 8007ad4:	001e      	movs	r6, r3
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	900d      	str	r0, [sp, #52]	; 0x34
 8007ada:	930c      	str	r3, [sp, #48]	; 0x30
 8007adc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ade:	682b      	ldr	r3, [r5, #0]
 8007ae0:	05c9      	lsls	r1, r1, #23
 8007ae2:	d547      	bpl.n	8007b74 <_printf_float+0xc4>
 8007ae4:	189b      	adds	r3, r3, r2
 8007ae6:	4393      	bics	r3, r2
 8007ae8:	001a      	movs	r2, r3
 8007aea:	3208      	adds	r2, #8
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	64a2      	str	r2, [r4, #72]	; 0x48
 8007af4:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007af6:	2201      	movs	r2, #1
 8007af8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007afa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007afc:	930a      	str	r3, [sp, #40]	; 0x28
 8007afe:	006b      	lsls	r3, r5, #1
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	930e      	str	r3, [sp, #56]	; 0x38
 8007b04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b06:	4ba8      	ldr	r3, [pc, #672]	; (8007da8 <_printf_float+0x2f8>)
 8007b08:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b0a:	4252      	negs	r2, r2
 8007b0c:	f7fb f9b0 	bl	8002e70 <__aeabi_dcmpun>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d131      	bne.n	8007b78 <_printf_float+0xc8>
 8007b14:	2201      	movs	r2, #1
 8007b16:	4ba4      	ldr	r3, [pc, #656]	; (8007da8 <_printf_float+0x2f8>)
 8007b18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007b1c:	4252      	negs	r2, r2
 8007b1e:	f7f8 fca5 	bl	800046c <__aeabi_dcmple>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d128      	bne.n	8007b78 <_printf_float+0xc8>
 8007b26:	2200      	movs	r2, #0
 8007b28:	2300      	movs	r3, #0
 8007b2a:	0029      	movs	r1, r5
 8007b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b2e:	f7f8 fc93 	bl	8000458 <__aeabi_dcmplt>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d003      	beq.n	8007b3e <_printf_float+0x8e>
 8007b36:	0023      	movs	r3, r4
 8007b38:	222d      	movs	r2, #45	; 0x2d
 8007b3a:	3343      	adds	r3, #67	; 0x43
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	4d9b      	ldr	r5, [pc, #620]	; (8007dac <_printf_float+0x2fc>)
 8007b40:	2e47      	cmp	r6, #71	; 0x47
 8007b42:	d900      	bls.n	8007b46 <_printf_float+0x96>
 8007b44:	4d9a      	ldr	r5, [pc, #616]	; (8007db0 <_printf_float+0x300>)
 8007b46:	2303      	movs	r3, #3
 8007b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	439a      	bics	r2, r3
 8007b50:	2300      	movs	r3, #0
 8007b52:	6022      	str	r2, [r4, #0]
 8007b54:	930a      	str	r3, [sp, #40]	; 0x28
 8007b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b58:	0021      	movs	r1, r4
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	0038      	movs	r0, r7
 8007b5e:	9b08      	ldr	r3, [sp, #32]
 8007b60:	aa13      	add	r2, sp, #76	; 0x4c
 8007b62:	f000 f9f3 	bl	8007f4c <_printf_common>
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	d000      	beq.n	8007b6c <_printf_float+0xbc>
 8007b6a:	e09e      	b.n	8007caa <_printf_float+0x1fa>
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	4240      	negs	r0, r0
 8007b70:	b015      	add	sp, #84	; 0x54
 8007b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b74:	3307      	adds	r3, #7
 8007b76:	e7b6      	b.n	8007ae6 <_printf_float+0x36>
 8007b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b7a:	002b      	movs	r3, r5
 8007b7c:	0010      	movs	r0, r2
 8007b7e:	0029      	movs	r1, r5
 8007b80:	f7fb f976 	bl	8002e70 <__aeabi_dcmpun>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d00a      	beq.n	8007b9e <_printf_float+0xee>
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	da03      	bge.n	8007b94 <_printf_float+0xe4>
 8007b8c:	0023      	movs	r3, r4
 8007b8e:	222d      	movs	r2, #45	; 0x2d
 8007b90:	3343      	adds	r3, #67	; 0x43
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	4d87      	ldr	r5, [pc, #540]	; (8007db4 <_printf_float+0x304>)
 8007b96:	2e47      	cmp	r6, #71	; 0x47
 8007b98:	d9d5      	bls.n	8007b46 <_printf_float+0x96>
 8007b9a:	4d87      	ldr	r5, [pc, #540]	; (8007db8 <_printf_float+0x308>)
 8007b9c:	e7d3      	b.n	8007b46 <_printf_float+0x96>
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	0031      	movs	r1, r6
 8007ba2:	6863      	ldr	r3, [r4, #4]
 8007ba4:	4391      	bics	r1, r2
 8007ba6:	910e      	str	r1, [sp, #56]	; 0x38
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	d147      	bne.n	8007c3c <_printf_float+0x18c>
 8007bac:	3307      	adds	r3, #7
 8007bae:	6063      	str	r3, [r4, #4]
 8007bb0:	2380      	movs	r3, #128	; 0x80
 8007bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb4:	00db      	lsls	r3, r3, #3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	2200      	movs	r2, #0
 8007bba:	9206      	str	r2, [sp, #24]
 8007bbc:	aa12      	add	r2, sp, #72	; 0x48
 8007bbe:	9205      	str	r2, [sp, #20]
 8007bc0:	aa11      	add	r2, sp, #68	; 0x44
 8007bc2:	9203      	str	r2, [sp, #12]
 8007bc4:	2223      	movs	r2, #35	; 0x23
 8007bc6:	a908      	add	r1, sp, #32
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	1852      	adds	r2, r2, r1
 8007bd0:	9202      	str	r2, [sp, #8]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	0038      	movs	r0, r7
 8007bd6:	002b      	movs	r3, r5
 8007bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bda:	9604      	str	r6, [sp, #16]
 8007bdc:	f7ff febe 	bl	800795c <__cvt>
 8007be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007be2:	0005      	movs	r5, r0
 8007be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007be6:	2b47      	cmp	r3, #71	; 0x47
 8007be8:	d108      	bne.n	8007bfc <_printf_float+0x14c>
 8007bea:	1ccb      	adds	r3, r1, #3
 8007bec:	db02      	blt.n	8007bf4 <_printf_float+0x144>
 8007bee:	6863      	ldr	r3, [r4, #4]
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	dd46      	ble.n	8007c82 <_printf_float+0x1d2>
 8007bf4:	0033      	movs	r3, r6
 8007bf6:	3b02      	subs	r3, #2
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	001e      	movs	r6, r3
 8007bfc:	2e65      	cmp	r6, #101	; 0x65
 8007bfe:	d824      	bhi.n	8007c4a <_printf_float+0x19a>
 8007c00:	0020      	movs	r0, r4
 8007c02:	0032      	movs	r2, r6
 8007c04:	3901      	subs	r1, #1
 8007c06:	3050      	adds	r0, #80	; 0x50
 8007c08:	9111      	str	r1, [sp, #68]	; 0x44
 8007c0a:	f7ff ff0a 	bl	8007a22 <__exponent>
 8007c0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c10:	900a      	str	r0, [sp, #40]	; 0x28
 8007c12:	1813      	adds	r3, r2, r0
 8007c14:	6123      	str	r3, [r4, #16]
 8007c16:	2a01      	cmp	r2, #1
 8007c18:	dc02      	bgt.n	8007c20 <_printf_float+0x170>
 8007c1a:	6822      	ldr	r2, [r4, #0]
 8007c1c:	07d2      	lsls	r2, r2, #31
 8007c1e:	d501      	bpl.n	8007c24 <_printf_float+0x174>
 8007c20:	3301      	adds	r3, #1
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	2323      	movs	r3, #35	; 0x23
 8007c26:	aa08      	add	r2, sp, #32
 8007c28:	189b      	adds	r3, r3, r2
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d100      	bne.n	8007c32 <_printf_float+0x182>
 8007c30:	e791      	b.n	8007b56 <_printf_float+0xa6>
 8007c32:	0023      	movs	r3, r4
 8007c34:	222d      	movs	r2, #45	; 0x2d
 8007c36:	3343      	adds	r3, #67	; 0x43
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e78c      	b.n	8007b56 <_printf_float+0xa6>
 8007c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c3e:	2a47      	cmp	r2, #71	; 0x47
 8007c40:	d1b6      	bne.n	8007bb0 <_printf_float+0x100>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1b4      	bne.n	8007bb0 <_printf_float+0x100>
 8007c46:	3301      	adds	r3, #1
 8007c48:	e7b1      	b.n	8007bae <_printf_float+0xfe>
 8007c4a:	2e66      	cmp	r6, #102	; 0x66
 8007c4c:	d11b      	bne.n	8007c86 <_printf_float+0x1d6>
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	2900      	cmp	r1, #0
 8007c52:	dd0d      	ble.n	8007c70 <_printf_float+0x1c0>
 8007c54:	6121      	str	r1, [r4, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <_printf_float+0x1b0>
 8007c5a:	6822      	ldr	r2, [r4, #0]
 8007c5c:	07d2      	lsls	r2, r2, #31
 8007c5e:	d502      	bpl.n	8007c66 <_printf_float+0x1b6>
 8007c60:	3301      	adds	r3, #1
 8007c62:	1859      	adds	r1, r3, r1
 8007c64:	6121      	str	r1, [r4, #16]
 8007c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c68:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c6e:	e7d9      	b.n	8007c24 <_printf_float+0x174>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <_printf_float+0x1cc>
 8007c74:	2201      	movs	r2, #1
 8007c76:	6821      	ldr	r1, [r4, #0]
 8007c78:	4211      	tst	r1, r2
 8007c7a:	d000      	beq.n	8007c7e <_printf_float+0x1ce>
 8007c7c:	1c9a      	adds	r2, r3, #2
 8007c7e:	6122      	str	r2, [r4, #16]
 8007c80:	e7f1      	b.n	8007c66 <_printf_float+0x1b6>
 8007c82:	2367      	movs	r3, #103	; 0x67
 8007c84:	001e      	movs	r6, r3
 8007c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	db06      	blt.n	8007c9c <_printf_float+0x1ec>
 8007c8e:	6822      	ldr	r2, [r4, #0]
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	07d2      	lsls	r2, r2, #31
 8007c94:	d5e7      	bpl.n	8007c66 <_printf_float+0x1b6>
 8007c96:	3301      	adds	r3, #1
 8007c98:	6123      	str	r3, [r4, #16]
 8007c9a:	e7e4      	b.n	8007c66 <_printf_float+0x1b6>
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dc01      	bgt.n	8007ca6 <_printf_float+0x1f6>
 8007ca2:	1849      	adds	r1, r1, r1
 8007ca4:	1ac9      	subs	r1, r1, r3
 8007ca6:	1852      	adds	r2, r2, r1
 8007ca8:	e7e9      	b.n	8007c7e <_printf_float+0x1ce>
 8007caa:	6822      	ldr	r2, [r4, #0]
 8007cac:	0553      	lsls	r3, r2, #21
 8007cae:	d408      	bmi.n	8007cc2 <_printf_float+0x212>
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	002a      	movs	r2, r5
 8007cb4:	0038      	movs	r0, r7
 8007cb6:	9908      	ldr	r1, [sp, #32]
 8007cb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cba:	47a8      	blx	r5
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d129      	bne.n	8007d14 <_printf_float+0x264>
 8007cc0:	e754      	b.n	8007b6c <_printf_float+0xbc>
 8007cc2:	2e65      	cmp	r6, #101	; 0x65
 8007cc4:	d800      	bhi.n	8007cc8 <_printf_float+0x218>
 8007cc6:	e0ec      	b.n	8007ea2 <_printf_float+0x3f2>
 8007cc8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007cca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f7f8 fbbc 	bl	800044c <__aeabi_dcmpeq>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d034      	beq.n	8007d42 <_printf_float+0x292>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	0038      	movs	r0, r7
 8007cdc:	4a37      	ldr	r2, [pc, #220]	; (8007dbc <_printf_float+0x30c>)
 8007cde:	9908      	ldr	r1, [sp, #32]
 8007ce0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ce2:	47a8      	blx	r5
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d100      	bne.n	8007cea <_printf_float+0x23a>
 8007ce8:	e740      	b.n	8007b6c <_printf_float+0xbc>
 8007cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	db02      	blt.n	8007cf8 <_printf_float+0x248>
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	07db      	lsls	r3, r3, #31
 8007cf6:	d50d      	bpl.n	8007d14 <_printf_float+0x264>
 8007cf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cfa:	0038      	movs	r0, r7
 8007cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d00:	9908      	ldr	r1, [sp, #32]
 8007d02:	47a8      	blx	r5
 8007d04:	2500      	movs	r5, #0
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d100      	bne.n	8007d0c <_printf_float+0x25c>
 8007d0a:	e72f      	b.n	8007b6c <_printf_float+0xbc>
 8007d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc0a      	bgt.n	8007d2a <_printf_float+0x27a>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	079b      	lsls	r3, r3, #30
 8007d18:	d500      	bpl.n	8007d1c <_printf_float+0x26c>
 8007d1a:	e114      	b.n	8007f46 <_printf_float+0x496>
 8007d1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d1e:	68e0      	ldr	r0, [r4, #12]
 8007d20:	4298      	cmp	r0, r3
 8007d22:	db00      	blt.n	8007d26 <_printf_float+0x276>
 8007d24:	e724      	b.n	8007b70 <_printf_float+0xc0>
 8007d26:	0018      	movs	r0, r3
 8007d28:	e722      	b.n	8007b70 <_printf_float+0xc0>
 8007d2a:	0022      	movs	r2, r4
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	0038      	movs	r0, r7
 8007d30:	9908      	ldr	r1, [sp, #32]
 8007d32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d34:	321a      	adds	r2, #26
 8007d36:	47b0      	blx	r6
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d100      	bne.n	8007d3e <_printf_float+0x28e>
 8007d3c:	e716      	b.n	8007b6c <_printf_float+0xbc>
 8007d3e:	3501      	adds	r5, #1
 8007d40:	e7e4      	b.n	8007d0c <_printf_float+0x25c>
 8007d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc3b      	bgt.n	8007dc0 <_printf_float+0x310>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	0038      	movs	r0, r7
 8007d4c:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <_printf_float+0x30c>)
 8007d4e:	9908      	ldr	r1, [sp, #32]
 8007d50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d52:	47b0      	blx	r6
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d100      	bne.n	8007d5a <_printf_float+0x2aa>
 8007d58:	e708      	b.n	8007b6c <_printf_float+0xbc>
 8007d5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	d102      	bne.n	8007d68 <_printf_float+0x2b8>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	07db      	lsls	r3, r3, #31
 8007d66:	d5d5      	bpl.n	8007d14 <_printf_float+0x264>
 8007d68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d6a:	0038      	movs	r0, r7
 8007d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d6e:	9908      	ldr	r1, [sp, #32]
 8007d70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d72:	47b0      	blx	r6
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d100      	bne.n	8007d7a <_printf_float+0x2ca>
 8007d78:	e6f8      	b.n	8007b6c <_printf_float+0xbc>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d82:	425b      	negs	r3, r3
 8007d84:	4293      	cmp	r3, r2
 8007d86:	dc01      	bgt.n	8007d8c <_printf_float+0x2dc>
 8007d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d8a:	e792      	b.n	8007cb2 <_printf_float+0x202>
 8007d8c:	0022      	movs	r2, r4
 8007d8e:	2301      	movs	r3, #1
 8007d90:	0038      	movs	r0, r7
 8007d92:	9908      	ldr	r1, [sp, #32]
 8007d94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d96:	321a      	adds	r2, #26
 8007d98:	47b0      	blx	r6
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d100      	bne.n	8007da0 <_printf_float+0x2f0>
 8007d9e:	e6e5      	b.n	8007b6c <_printf_float+0xbc>
 8007da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da2:	3301      	adds	r3, #1
 8007da4:	e7ea      	b.n	8007d7c <_printf_float+0x2cc>
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	7fefffff 	.word	0x7fefffff
 8007dac:	0800a864 	.word	0x0800a864
 8007db0:	0800a868 	.word	0x0800a868
 8007db4:	0800a86c 	.word	0x0800a86c
 8007db8:	0800a870 	.word	0x0800a870
 8007dbc:	0800a874 	.word	0x0800a874
 8007dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007dc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dc4:	920a      	str	r2, [sp, #40]	; 0x28
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	dd00      	ble.n	8007dcc <_printf_float+0x31c>
 8007dca:	930a      	str	r3, [sp, #40]	; 0x28
 8007dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dc3d      	bgt.n	8007e4e <_printf_float+0x39e>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	17db      	asrs	r3, r3, #31
 8007ddc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007de2:	930c      	str	r3, [sp, #48]	; 0x30
 8007de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de6:	4013      	ands	r3, r2
 8007de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dee:	4293      	cmp	r3, r2
 8007df0:	dc36      	bgt.n	8007e60 <_printf_float+0x3b0>
 8007df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007df6:	4293      	cmp	r3, r2
 8007df8:	db40      	blt.n	8007e7c <_printf_float+0x3cc>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	07db      	lsls	r3, r3, #31
 8007dfe:	d43d      	bmi.n	8007e7c <_printf_float+0x3cc>
 8007e00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	1a52      	subs	r2, r2, r1
 8007e0a:	920a      	str	r2, [sp, #40]	; 0x28
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	dd00      	ble.n	8007e12 <_printf_float+0x362>
 8007e10:	930a      	str	r3, [sp, #40]	; 0x28
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dc3a      	bgt.n	8007e8e <_printf_float+0x3de>
 8007e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1a:	2500      	movs	r5, #0
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	17db      	asrs	r3, r3, #31
 8007e20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e2c:	400a      	ands	r2, r1
 8007e2e:	1a9b      	subs	r3, r3, r2
 8007e30:	42ab      	cmp	r3, r5
 8007e32:	dc00      	bgt.n	8007e36 <_printf_float+0x386>
 8007e34:	e76e      	b.n	8007d14 <_printf_float+0x264>
 8007e36:	0022      	movs	r2, r4
 8007e38:	2301      	movs	r3, #1
 8007e3a:	0038      	movs	r0, r7
 8007e3c:	9908      	ldr	r1, [sp, #32]
 8007e3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e40:	321a      	adds	r2, #26
 8007e42:	47b0      	blx	r6
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d100      	bne.n	8007e4a <_printf_float+0x39a>
 8007e48:	e690      	b.n	8007b6c <_printf_float+0xbc>
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	e7e9      	b.n	8007e22 <_printf_float+0x372>
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e50:	002a      	movs	r2, r5
 8007e52:	0038      	movs	r0, r7
 8007e54:	9908      	ldr	r1, [sp, #32]
 8007e56:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e58:	47b0      	blx	r6
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d1b9      	bne.n	8007dd2 <_printf_float+0x322>
 8007e5e:	e685      	b.n	8007b6c <_printf_float+0xbc>
 8007e60:	0022      	movs	r2, r4
 8007e62:	2301      	movs	r3, #1
 8007e64:	0038      	movs	r0, r7
 8007e66:	9908      	ldr	r1, [sp, #32]
 8007e68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e6a:	321a      	adds	r2, #26
 8007e6c:	47b0      	blx	r6
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d100      	bne.n	8007e74 <_printf_float+0x3c4>
 8007e72:	e67b      	b.n	8007b6c <_printf_float+0xbc>
 8007e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e76:	3301      	adds	r3, #1
 8007e78:	930e      	str	r3, [sp, #56]	; 0x38
 8007e7a:	e7b0      	b.n	8007dde <_printf_float+0x32e>
 8007e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e7e:	0038      	movs	r0, r7
 8007e80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e82:	9908      	ldr	r1, [sp, #32]
 8007e84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e86:	47b0      	blx	r6
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d1b9      	bne.n	8007e00 <_printf_float+0x350>
 8007e8c:	e66e      	b.n	8007b6c <_printf_float+0xbc>
 8007e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e90:	0038      	movs	r0, r7
 8007e92:	18ea      	adds	r2, r5, r3
 8007e94:	9908      	ldr	r1, [sp, #32]
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e9a:	47a8      	blx	r5
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d1bb      	bne.n	8007e18 <_printf_float+0x368>
 8007ea0:	e664      	b.n	8007b6c <_printf_float+0xbc>
 8007ea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	dc02      	bgt.n	8007eae <_printf_float+0x3fe>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	421a      	tst	r2, r3
 8007eac:	d038      	beq.n	8007f20 <_printf_float+0x470>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	002a      	movs	r2, r5
 8007eb2:	0038      	movs	r0, r7
 8007eb4:	9908      	ldr	r1, [sp, #32]
 8007eb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007eb8:	47b0      	blx	r6
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	d100      	bne.n	8007ec0 <_printf_float+0x410>
 8007ebe:	e655      	b.n	8007b6c <_printf_float+0xbc>
 8007ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec2:	0038      	movs	r0, r7
 8007ec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ec6:	9908      	ldr	r1, [sp, #32]
 8007ec8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007eca:	47b0      	blx	r6
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d100      	bne.n	8007ed2 <_printf_float+0x422>
 8007ed0:	e64c      	b.n	8007b6c <_printf_float+0xbc>
 8007ed2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007ed4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f7f8 fab7 	bl	800044c <__aeabi_dcmpeq>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d11c      	bne.n	8007f1c <_printf_float+0x46c>
 8007ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ee4:	1c6a      	adds	r2, r5, #1
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	0038      	movs	r0, r7
 8007eea:	9908      	ldr	r1, [sp, #32]
 8007eec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007eee:	47a8      	blx	r5
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d10f      	bne.n	8007f14 <_printf_float+0x464>
 8007ef4:	e63a      	b.n	8007b6c <_printf_float+0xbc>
 8007ef6:	0022      	movs	r2, r4
 8007ef8:	2301      	movs	r3, #1
 8007efa:	0038      	movs	r0, r7
 8007efc:	9908      	ldr	r1, [sp, #32]
 8007efe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f00:	321a      	adds	r2, #26
 8007f02:	47b0      	blx	r6
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d100      	bne.n	8007f0a <_printf_float+0x45a>
 8007f08:	e630      	b.n	8007b6c <_printf_float+0xbc>
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	dcf0      	bgt.n	8007ef6 <_printf_float+0x446>
 8007f14:	0022      	movs	r2, r4
 8007f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f18:	3250      	adds	r2, #80	; 0x50
 8007f1a:	e6cb      	b.n	8007cb4 <_printf_float+0x204>
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	e7f5      	b.n	8007f0c <_printf_float+0x45c>
 8007f20:	002a      	movs	r2, r5
 8007f22:	e7e1      	b.n	8007ee8 <_printf_float+0x438>
 8007f24:	0022      	movs	r2, r4
 8007f26:	2301      	movs	r3, #1
 8007f28:	0038      	movs	r0, r7
 8007f2a:	9908      	ldr	r1, [sp, #32]
 8007f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007f2e:	3219      	adds	r2, #25
 8007f30:	47b0      	blx	r6
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	d100      	bne.n	8007f38 <_printf_float+0x488>
 8007f36:	e619      	b.n	8007b6c <_printf_float+0xbc>
 8007f38:	3501      	adds	r5, #1
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	dcef      	bgt.n	8007f24 <_printf_float+0x474>
 8007f44:	e6ea      	b.n	8007d1c <_printf_float+0x26c>
 8007f46:	2500      	movs	r5, #0
 8007f48:	e7f7      	b.n	8007f3a <_printf_float+0x48a>
 8007f4a:	46c0      	nop			; (mov r8, r8)

08007f4c <_printf_common>:
 8007f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f4e:	0015      	movs	r5, r2
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	688a      	ldr	r2, [r1, #8]
 8007f54:	690b      	ldr	r3, [r1, #16]
 8007f56:	000c      	movs	r4, r1
 8007f58:	9000      	str	r0, [sp, #0]
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	da00      	bge.n	8007f60 <_printf_common+0x14>
 8007f5e:	0013      	movs	r3, r2
 8007f60:	0022      	movs	r2, r4
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	3243      	adds	r2, #67	; 0x43
 8007f66:	7812      	ldrb	r2, [r2, #0]
 8007f68:	2a00      	cmp	r2, #0
 8007f6a:	d001      	beq.n	8007f70 <_printf_common+0x24>
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	069b      	lsls	r3, r3, #26
 8007f74:	d502      	bpl.n	8007f7c <_printf_common+0x30>
 8007f76:	682b      	ldr	r3, [r5, #0]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	602b      	str	r3, [r5, #0]
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	2306      	movs	r3, #6
 8007f80:	0017      	movs	r7, r2
 8007f82:	401f      	ands	r7, r3
 8007f84:	421a      	tst	r2, r3
 8007f86:	d027      	beq.n	8007fd8 <_printf_common+0x8c>
 8007f88:	0023      	movs	r3, r4
 8007f8a:	3343      	adds	r3, #67	; 0x43
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	1e5a      	subs	r2, r3, #1
 8007f90:	4193      	sbcs	r3, r2
 8007f92:	6822      	ldr	r2, [r4, #0]
 8007f94:	0692      	lsls	r2, r2, #26
 8007f96:	d430      	bmi.n	8007ffa <_printf_common+0xae>
 8007f98:	0022      	movs	r2, r4
 8007f9a:	9901      	ldr	r1, [sp, #4]
 8007f9c:	9800      	ldr	r0, [sp, #0]
 8007f9e:	9e08      	ldr	r6, [sp, #32]
 8007fa0:	3243      	adds	r2, #67	; 0x43
 8007fa2:	47b0      	blx	r6
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d025      	beq.n	8007ff4 <_printf_common+0xa8>
 8007fa8:	2306      	movs	r3, #6
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	682a      	ldr	r2, [r5, #0]
 8007fae:	68e1      	ldr	r1, [r4, #12]
 8007fb0:	2500      	movs	r5, #0
 8007fb2:	4003      	ands	r3, r0
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d103      	bne.n	8007fc0 <_printf_common+0x74>
 8007fb8:	1a8d      	subs	r5, r1, r2
 8007fba:	43eb      	mvns	r3, r5
 8007fbc:	17db      	asrs	r3, r3, #31
 8007fbe:	401d      	ands	r5, r3
 8007fc0:	68a3      	ldr	r3, [r4, #8]
 8007fc2:	6922      	ldr	r2, [r4, #16]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	dd01      	ble.n	8007fcc <_printf_common+0x80>
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	18ed      	adds	r5, r5, r3
 8007fcc:	2700      	movs	r7, #0
 8007fce:	42bd      	cmp	r5, r7
 8007fd0:	d120      	bne.n	8008014 <_printf_common+0xc8>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e010      	b.n	8007ff8 <_printf_common+0xac>
 8007fd6:	3701      	adds	r7, #1
 8007fd8:	68e3      	ldr	r3, [r4, #12]
 8007fda:	682a      	ldr	r2, [r5, #0]
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	42bb      	cmp	r3, r7
 8007fe0:	ddd2      	ble.n	8007f88 <_printf_common+0x3c>
 8007fe2:	0022      	movs	r2, r4
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	9901      	ldr	r1, [sp, #4]
 8007fe8:	9800      	ldr	r0, [sp, #0]
 8007fea:	9e08      	ldr	r6, [sp, #32]
 8007fec:	3219      	adds	r2, #25
 8007fee:	47b0      	blx	r6
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d1f0      	bne.n	8007fd6 <_printf_common+0x8a>
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	4240      	negs	r0, r0
 8007ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ffa:	2030      	movs	r0, #48	; 0x30
 8007ffc:	18e1      	adds	r1, r4, r3
 8007ffe:	3143      	adds	r1, #67	; 0x43
 8008000:	7008      	strb	r0, [r1, #0]
 8008002:	0021      	movs	r1, r4
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	3145      	adds	r1, #69	; 0x45
 8008008:	7809      	ldrb	r1, [r1, #0]
 800800a:	18a2      	adds	r2, r4, r2
 800800c:	3243      	adds	r2, #67	; 0x43
 800800e:	3302      	adds	r3, #2
 8008010:	7011      	strb	r1, [r2, #0]
 8008012:	e7c1      	b.n	8007f98 <_printf_common+0x4c>
 8008014:	0022      	movs	r2, r4
 8008016:	2301      	movs	r3, #1
 8008018:	9901      	ldr	r1, [sp, #4]
 800801a:	9800      	ldr	r0, [sp, #0]
 800801c:	9e08      	ldr	r6, [sp, #32]
 800801e:	321a      	adds	r2, #26
 8008020:	47b0      	blx	r6
 8008022:	1c43      	adds	r3, r0, #1
 8008024:	d0e6      	beq.n	8007ff4 <_printf_common+0xa8>
 8008026:	3701      	adds	r7, #1
 8008028:	e7d1      	b.n	8007fce <_printf_common+0x82>
	...

0800802c <_printf_i>:
 800802c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800802e:	b08b      	sub	sp, #44	; 0x2c
 8008030:	9206      	str	r2, [sp, #24]
 8008032:	000a      	movs	r2, r1
 8008034:	3243      	adds	r2, #67	; 0x43
 8008036:	9307      	str	r3, [sp, #28]
 8008038:	9005      	str	r0, [sp, #20]
 800803a:	9204      	str	r2, [sp, #16]
 800803c:	7e0a      	ldrb	r2, [r1, #24]
 800803e:	000c      	movs	r4, r1
 8008040:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008042:	2a78      	cmp	r2, #120	; 0x78
 8008044:	d806      	bhi.n	8008054 <_printf_i+0x28>
 8008046:	2a62      	cmp	r2, #98	; 0x62
 8008048:	d808      	bhi.n	800805c <_printf_i+0x30>
 800804a:	2a00      	cmp	r2, #0
 800804c:	d100      	bne.n	8008050 <_printf_i+0x24>
 800804e:	e0c0      	b.n	80081d2 <_printf_i+0x1a6>
 8008050:	2a58      	cmp	r2, #88	; 0x58
 8008052:	d052      	beq.n	80080fa <_printf_i+0xce>
 8008054:	0026      	movs	r6, r4
 8008056:	3642      	adds	r6, #66	; 0x42
 8008058:	7032      	strb	r2, [r6, #0]
 800805a:	e022      	b.n	80080a2 <_printf_i+0x76>
 800805c:	0010      	movs	r0, r2
 800805e:	3863      	subs	r0, #99	; 0x63
 8008060:	2815      	cmp	r0, #21
 8008062:	d8f7      	bhi.n	8008054 <_printf_i+0x28>
 8008064:	f7f8 f862 	bl	800012c <__gnu_thumb1_case_shi>
 8008068:	001f0016 	.word	0x001f0016
 800806c:	fff6fff6 	.word	0xfff6fff6
 8008070:	fff6fff6 	.word	0xfff6fff6
 8008074:	fff6001f 	.word	0xfff6001f
 8008078:	fff6fff6 	.word	0xfff6fff6
 800807c:	00a8fff6 	.word	0x00a8fff6
 8008080:	009a0036 	.word	0x009a0036
 8008084:	fff6fff6 	.word	0xfff6fff6
 8008088:	fff600b9 	.word	0xfff600b9
 800808c:	fff60036 	.word	0xfff60036
 8008090:	009efff6 	.word	0x009efff6
 8008094:	0026      	movs	r6, r4
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	3642      	adds	r6, #66	; 0x42
 800809a:	1d11      	adds	r1, r2, #4
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	6813      	ldr	r3, [r2, #0]
 80080a0:	7033      	strb	r3, [r6, #0]
 80080a2:	2301      	movs	r3, #1
 80080a4:	e0a7      	b.n	80081f6 <_printf_i+0x1ca>
 80080a6:	6808      	ldr	r0, [r1, #0]
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	1d0a      	adds	r2, r1, #4
 80080ac:	0605      	lsls	r5, r0, #24
 80080ae:	d50b      	bpl.n	80080c8 <_printf_i+0x9c>
 80080b0:	680d      	ldr	r5, [r1, #0]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	2d00      	cmp	r5, #0
 80080b6:	da03      	bge.n	80080c0 <_printf_i+0x94>
 80080b8:	232d      	movs	r3, #45	; 0x2d
 80080ba:	9a04      	ldr	r2, [sp, #16]
 80080bc:	426d      	negs	r5, r5
 80080be:	7013      	strb	r3, [r2, #0]
 80080c0:	4b61      	ldr	r3, [pc, #388]	; (8008248 <_printf_i+0x21c>)
 80080c2:	270a      	movs	r7, #10
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	e032      	b.n	800812e <_printf_i+0x102>
 80080c8:	680d      	ldr	r5, [r1, #0]
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	0641      	lsls	r1, r0, #25
 80080ce:	d5f1      	bpl.n	80080b4 <_printf_i+0x88>
 80080d0:	b22d      	sxth	r5, r5
 80080d2:	e7ef      	b.n	80080b4 <_printf_i+0x88>
 80080d4:	680d      	ldr	r5, [r1, #0]
 80080d6:	6819      	ldr	r1, [r3, #0]
 80080d8:	1d08      	adds	r0, r1, #4
 80080da:	6018      	str	r0, [r3, #0]
 80080dc:	062e      	lsls	r6, r5, #24
 80080de:	d501      	bpl.n	80080e4 <_printf_i+0xb8>
 80080e0:	680d      	ldr	r5, [r1, #0]
 80080e2:	e003      	b.n	80080ec <_printf_i+0xc0>
 80080e4:	066d      	lsls	r5, r5, #25
 80080e6:	d5fb      	bpl.n	80080e0 <_printf_i+0xb4>
 80080e8:	680d      	ldr	r5, [r1, #0]
 80080ea:	b2ad      	uxth	r5, r5
 80080ec:	4b56      	ldr	r3, [pc, #344]	; (8008248 <_printf_i+0x21c>)
 80080ee:	270a      	movs	r7, #10
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	2a6f      	cmp	r2, #111	; 0x6f
 80080f4:	d117      	bne.n	8008126 <_printf_i+0xfa>
 80080f6:	2708      	movs	r7, #8
 80080f8:	e015      	b.n	8008126 <_printf_i+0xfa>
 80080fa:	3145      	adds	r1, #69	; 0x45
 80080fc:	700a      	strb	r2, [r1, #0]
 80080fe:	4a52      	ldr	r2, [pc, #328]	; (8008248 <_printf_i+0x21c>)
 8008100:	9203      	str	r2, [sp, #12]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	6821      	ldr	r1, [r4, #0]
 8008106:	ca20      	ldmia	r2!, {r5}
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	0608      	lsls	r0, r1, #24
 800810c:	d550      	bpl.n	80081b0 <_printf_i+0x184>
 800810e:	07cb      	lsls	r3, r1, #31
 8008110:	d502      	bpl.n	8008118 <_printf_i+0xec>
 8008112:	2320      	movs	r3, #32
 8008114:	4319      	orrs	r1, r3
 8008116:	6021      	str	r1, [r4, #0]
 8008118:	2710      	movs	r7, #16
 800811a:	2d00      	cmp	r5, #0
 800811c:	d103      	bne.n	8008126 <_printf_i+0xfa>
 800811e:	2320      	movs	r3, #32
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	439a      	bics	r2, r3
 8008124:	6022      	str	r2, [r4, #0]
 8008126:	0023      	movs	r3, r4
 8008128:	2200      	movs	r2, #0
 800812a:	3343      	adds	r3, #67	; 0x43
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	60a3      	str	r3, [r4, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	db03      	blt.n	800813e <_printf_i+0x112>
 8008136:	2204      	movs	r2, #4
 8008138:	6821      	ldr	r1, [r4, #0]
 800813a:	4391      	bics	r1, r2
 800813c:	6021      	str	r1, [r4, #0]
 800813e:	2d00      	cmp	r5, #0
 8008140:	d102      	bne.n	8008148 <_printf_i+0x11c>
 8008142:	9e04      	ldr	r6, [sp, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00c      	beq.n	8008162 <_printf_i+0x136>
 8008148:	9e04      	ldr	r6, [sp, #16]
 800814a:	0028      	movs	r0, r5
 800814c:	0039      	movs	r1, r7
 800814e:	f7f8 f87d 	bl	800024c <__aeabi_uidivmod>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3e01      	subs	r6, #1
 8008156:	5c5b      	ldrb	r3, [r3, r1]
 8008158:	7033      	strb	r3, [r6, #0]
 800815a:	002b      	movs	r3, r5
 800815c:	0005      	movs	r5, r0
 800815e:	429f      	cmp	r7, r3
 8008160:	d9f3      	bls.n	800814a <_printf_i+0x11e>
 8008162:	2f08      	cmp	r7, #8
 8008164:	d109      	bne.n	800817a <_printf_i+0x14e>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	07db      	lsls	r3, r3, #31
 800816a:	d506      	bpl.n	800817a <_printf_i+0x14e>
 800816c:	6863      	ldr	r3, [r4, #4]
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	4293      	cmp	r3, r2
 8008172:	dc02      	bgt.n	800817a <_printf_i+0x14e>
 8008174:	2330      	movs	r3, #48	; 0x30
 8008176:	3e01      	subs	r6, #1
 8008178:	7033      	strb	r3, [r6, #0]
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	1b9b      	subs	r3, r3, r6
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	0021      	movs	r1, r4
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	9805      	ldr	r0, [sp, #20]
 8008188:	9b06      	ldr	r3, [sp, #24]
 800818a:	aa09      	add	r2, sp, #36	; 0x24
 800818c:	f7ff fede 	bl	8007f4c <_printf_common>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d135      	bne.n	8008200 <_printf_i+0x1d4>
 8008194:	2001      	movs	r0, #1
 8008196:	4240      	negs	r0, r0
 8008198:	b00b      	add	sp, #44	; 0x2c
 800819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819c:	2220      	movs	r2, #32
 800819e:	6809      	ldr	r1, [r1, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	0022      	movs	r2, r4
 80081a6:	2178      	movs	r1, #120	; 0x78
 80081a8:	3245      	adds	r2, #69	; 0x45
 80081aa:	7011      	strb	r1, [r2, #0]
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <_printf_i+0x220>)
 80081ae:	e7a7      	b.n	8008100 <_printf_i+0xd4>
 80081b0:	0648      	lsls	r0, r1, #25
 80081b2:	d5ac      	bpl.n	800810e <_printf_i+0xe2>
 80081b4:	b2ad      	uxth	r5, r5
 80081b6:	e7aa      	b.n	800810e <_printf_i+0xe2>
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	680d      	ldr	r5, [r1, #0]
 80081bc:	1d10      	adds	r0, r2, #4
 80081be:	6949      	ldr	r1, [r1, #20]
 80081c0:	6018      	str	r0, [r3, #0]
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	062e      	lsls	r6, r5, #24
 80081c6:	d501      	bpl.n	80081cc <_printf_i+0x1a0>
 80081c8:	6019      	str	r1, [r3, #0]
 80081ca:	e002      	b.n	80081d2 <_printf_i+0x1a6>
 80081cc:	066d      	lsls	r5, r5, #25
 80081ce:	d5fb      	bpl.n	80081c8 <_printf_i+0x19c>
 80081d0:	8019      	strh	r1, [r3, #0]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9e04      	ldr	r6, [sp, #16]
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	e7d2      	b.n	8008180 <_printf_i+0x154>
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	1d11      	adds	r1, r2, #4
 80081de:	6019      	str	r1, [r3, #0]
 80081e0:	6816      	ldr	r6, [r2, #0]
 80081e2:	2100      	movs	r1, #0
 80081e4:	0030      	movs	r0, r6
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	f000 ff12 	bl	8009010 <memchr>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d001      	beq.n	80081f4 <_printf_i+0x1c8>
 80081f0:	1b80      	subs	r0, r0, r6
 80081f2:	6060      	str	r0, [r4, #4]
 80081f4:	6863      	ldr	r3, [r4, #4]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	7013      	strb	r3, [r2, #0]
 80081fe:	e7bf      	b.n	8008180 <_printf_i+0x154>
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	0032      	movs	r2, r6
 8008204:	9906      	ldr	r1, [sp, #24]
 8008206:	9805      	ldr	r0, [sp, #20]
 8008208:	9d07      	ldr	r5, [sp, #28]
 800820a:	47a8      	blx	r5
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d0c1      	beq.n	8008194 <_printf_i+0x168>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	079b      	lsls	r3, r3, #30
 8008214:	d415      	bmi.n	8008242 <_printf_i+0x216>
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	68e0      	ldr	r0, [r4, #12]
 800821a:	4298      	cmp	r0, r3
 800821c:	dabc      	bge.n	8008198 <_printf_i+0x16c>
 800821e:	0018      	movs	r0, r3
 8008220:	e7ba      	b.n	8008198 <_printf_i+0x16c>
 8008222:	0022      	movs	r2, r4
 8008224:	2301      	movs	r3, #1
 8008226:	9906      	ldr	r1, [sp, #24]
 8008228:	9805      	ldr	r0, [sp, #20]
 800822a:	9e07      	ldr	r6, [sp, #28]
 800822c:	3219      	adds	r2, #25
 800822e:	47b0      	blx	r6
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d0af      	beq.n	8008194 <_printf_i+0x168>
 8008234:	3501      	adds	r5, #1
 8008236:	68e3      	ldr	r3, [r4, #12]
 8008238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	42ab      	cmp	r3, r5
 800823e:	dcf0      	bgt.n	8008222 <_printf_i+0x1f6>
 8008240:	e7e9      	b.n	8008216 <_printf_i+0x1ea>
 8008242:	2500      	movs	r5, #0
 8008244:	e7f7      	b.n	8008236 <_printf_i+0x20a>
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	0800a876 	.word	0x0800a876
 800824c:	0800a887 	.word	0x0800a887

08008250 <_sbrk_r>:
 8008250:	2300      	movs	r3, #0
 8008252:	b570      	push	{r4, r5, r6, lr}
 8008254:	4d06      	ldr	r5, [pc, #24]	; (8008270 <_sbrk_r+0x20>)
 8008256:	0004      	movs	r4, r0
 8008258:	0008      	movs	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7fc f844 	bl	80042e8 <_sbrk>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d103      	bne.n	800826c <_sbrk_r+0x1c>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d000      	beq.n	800826c <_sbrk_r+0x1c>
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	bd70      	pop	{r4, r5, r6, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	200004f4 	.word	0x200004f4

08008274 <siprintf>:
 8008274:	b40e      	push	{r1, r2, r3}
 8008276:	b500      	push	{lr}
 8008278:	490b      	ldr	r1, [pc, #44]	; (80082a8 <siprintf+0x34>)
 800827a:	b09c      	sub	sp, #112	; 0x70
 800827c:	ab1d      	add	r3, sp, #116	; 0x74
 800827e:	9002      	str	r0, [sp, #8]
 8008280:	9006      	str	r0, [sp, #24]
 8008282:	9107      	str	r1, [sp, #28]
 8008284:	9104      	str	r1, [sp, #16]
 8008286:	4809      	ldr	r0, [pc, #36]	; (80082ac <siprintf+0x38>)
 8008288:	4909      	ldr	r1, [pc, #36]	; (80082b0 <siprintf+0x3c>)
 800828a:	cb04      	ldmia	r3!, {r2}
 800828c:	9105      	str	r1, [sp, #20]
 800828e:	6800      	ldr	r0, [r0, #0]
 8008290:	a902      	add	r1, sp, #8
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	f001 faee 	bl	8009874 <_svfiprintf_r>
 8008298:	2300      	movs	r3, #0
 800829a:	9a02      	ldr	r2, [sp, #8]
 800829c:	7013      	strb	r3, [r2, #0]
 800829e:	b01c      	add	sp, #112	; 0x70
 80082a0:	bc08      	pop	{r3}
 80082a2:	b003      	add	sp, #12
 80082a4:	4718      	bx	r3
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	7fffffff 	.word	0x7fffffff
 80082ac:	2000000c 	.word	0x2000000c
 80082b0:	ffff0208 	.word	0xffff0208

080082b4 <quorem>:
 80082b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b6:	0006      	movs	r6, r0
 80082b8:	690d      	ldr	r5, [r1, #16]
 80082ba:	6933      	ldr	r3, [r6, #16]
 80082bc:	b087      	sub	sp, #28
 80082be:	2000      	movs	r0, #0
 80082c0:	9102      	str	r1, [sp, #8]
 80082c2:	42ab      	cmp	r3, r5
 80082c4:	db6b      	blt.n	800839e <quorem+0xea>
 80082c6:	000b      	movs	r3, r1
 80082c8:	3d01      	subs	r5, #1
 80082ca:	00ac      	lsls	r4, r5, #2
 80082cc:	3314      	adds	r3, #20
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	191b      	adds	r3, r3, r4
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	0033      	movs	r3, r6
 80082d6:	3314      	adds	r3, #20
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	191c      	adds	r4, r3, r4
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	6827      	ldr	r7, [r4, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	0038      	movs	r0, r7
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	3301      	adds	r3, #1
 80082e8:	0019      	movs	r1, r3
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	f7f7 ff28 	bl	8000140 <__udivsi3>
 80082f0:	9b04      	ldr	r3, [sp, #16]
 80082f2:	9000      	str	r0, [sp, #0]
 80082f4:	429f      	cmp	r7, r3
 80082f6:	d329      	bcc.n	800834c <quorem+0x98>
 80082f8:	2300      	movs	r3, #0
 80082fa:	469c      	mov	ip, r3
 80082fc:	9801      	ldr	r0, [sp, #4]
 80082fe:	9f05      	ldr	r7, [sp, #20]
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	cf08      	ldmia	r7!, {r3}
 8008304:	9a00      	ldr	r2, [sp, #0]
 8008306:	b299      	uxth	r1, r3
 8008308:	4351      	muls	r1, r2
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	4353      	muls	r3, r2
 800830e:	4461      	add	r1, ip
 8008310:	0c0a      	lsrs	r2, r1, #16
 8008312:	189b      	adds	r3, r3, r2
 8008314:	0c1a      	lsrs	r2, r3, #16
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	6803      	ldr	r3, [r0, #0]
 800831a:	4694      	mov	ip, r2
 800831c:	b29a      	uxth	r2, r3
 800831e:	9b04      	ldr	r3, [sp, #16]
 8008320:	b289      	uxth	r1, r1
 8008322:	18d2      	adds	r2, r2, r3
 8008324:	6803      	ldr	r3, [r0, #0]
 8008326:	1a52      	subs	r2, r2, r1
 8008328:	0c19      	lsrs	r1, r3, #16
 800832a:	466b      	mov	r3, sp
 800832c:	8a9b      	ldrh	r3, [r3, #20]
 800832e:	1acb      	subs	r3, r1, r3
 8008330:	1411      	asrs	r1, r2, #16
 8008332:	185b      	adds	r3, r3, r1
 8008334:	1419      	asrs	r1, r3, #16
 8008336:	b292      	uxth	r2, r2
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	431a      	orrs	r2, r3
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	9104      	str	r1, [sp, #16]
 8008340:	c004      	stmia	r0!, {r2}
 8008342:	42bb      	cmp	r3, r7
 8008344:	d2dd      	bcs.n	8008302 <quorem+0x4e>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02e      	beq.n	80083aa <quorem+0xf6>
 800834c:	0030      	movs	r0, r6
 800834e:	9902      	ldr	r1, [sp, #8]
 8008350:	f001 f908 	bl	8009564 <__mcmp>
 8008354:	2800      	cmp	r0, #0
 8008356:	db21      	blt.n	800839c <quorem+0xe8>
 8008358:	0030      	movs	r0, r6
 800835a:	2400      	movs	r4, #0
 800835c:	9b00      	ldr	r3, [sp, #0]
 800835e:	9902      	ldr	r1, [sp, #8]
 8008360:	3301      	adds	r3, #1
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	3014      	adds	r0, #20
 8008366:	3114      	adds	r1, #20
 8008368:	6802      	ldr	r2, [r0, #0]
 800836a:	c908      	ldmia	r1!, {r3}
 800836c:	b292      	uxth	r2, r2
 800836e:	1914      	adds	r4, r2, r4
 8008370:	b29a      	uxth	r2, r3
 8008372:	1aa2      	subs	r2, r4, r2
 8008374:	6804      	ldr	r4, [r0, #0]
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	0c24      	lsrs	r4, r4, #16
 800837a:	1ae3      	subs	r3, r4, r3
 800837c:	1414      	asrs	r4, r2, #16
 800837e:	191b      	adds	r3, r3, r4
 8008380:	141c      	asrs	r4, r3, #16
 8008382:	b292      	uxth	r2, r2
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	4313      	orrs	r3, r2
 8008388:	c008      	stmia	r0!, {r3}
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	428b      	cmp	r3, r1
 800838e:	d2eb      	bcs.n	8008368 <quorem+0xb4>
 8008390:	9a01      	ldr	r2, [sp, #4]
 8008392:	00ab      	lsls	r3, r5, #2
 8008394:	18d3      	adds	r3, r2, r3
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	2a00      	cmp	r2, #0
 800839a:	d010      	beq.n	80083be <quorem+0x10a>
 800839c:	9800      	ldr	r0, [sp, #0]
 800839e:	b007      	add	sp, #28
 80083a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <quorem+0xfe>
 80083a8:	3d01      	subs	r5, #1
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	3c04      	subs	r4, #4
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	d3f7      	bcc.n	80083a2 <quorem+0xee>
 80083b2:	6135      	str	r5, [r6, #16]
 80083b4:	e7ca      	b.n	800834c <quorem+0x98>
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	d104      	bne.n	80083c6 <quorem+0x112>
 80083bc:	3d01      	subs	r5, #1
 80083be:	9a01      	ldr	r2, [sp, #4]
 80083c0:	3b04      	subs	r3, #4
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d3f7      	bcc.n	80083b6 <quorem+0x102>
 80083c6:	6135      	str	r5, [r6, #16]
 80083c8:	e7e8      	b.n	800839c <quorem+0xe8>
	...

080083cc <_dtoa_r>:
 80083cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ce:	b09d      	sub	sp, #116	; 0x74
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	9c03      	ldr	r4, [sp, #12]
 80083d8:	930a      	str	r3, [sp, #40]	; 0x28
 80083da:	940b      	str	r4, [sp, #44]	; 0x2c
 80083dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083de:	0007      	movs	r7, r0
 80083e0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80083e2:	2c00      	cmp	r4, #0
 80083e4:	d10e      	bne.n	8008404 <_dtoa_r+0x38>
 80083e6:	2010      	movs	r0, #16
 80083e8:	f7ff f9fe 	bl	80077e8 <malloc>
 80083ec:	1e02      	subs	r2, r0, #0
 80083ee:	6278      	str	r0, [r7, #36]	; 0x24
 80083f0:	d104      	bne.n	80083fc <_dtoa_r+0x30>
 80083f2:	21ea      	movs	r1, #234	; 0xea
 80083f4:	4bc0      	ldr	r3, [pc, #768]	; (80086f8 <_dtoa_r+0x32c>)
 80083f6:	48c1      	ldr	r0, [pc, #772]	; (80086fc <_dtoa_r+0x330>)
 80083f8:	f001 fb3c 	bl	8009a74 <__assert_func>
 80083fc:	6044      	str	r4, [r0, #4]
 80083fe:	6084      	str	r4, [r0, #8]
 8008400:	6004      	str	r4, [r0, #0]
 8008402:	60c4      	str	r4, [r0, #12]
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	6819      	ldr	r1, [r3, #0]
 8008408:	2900      	cmp	r1, #0
 800840a:	d00a      	beq.n	8008422 <_dtoa_r+0x56>
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	2301      	movs	r3, #1
 8008410:	4093      	lsls	r3, r2
 8008412:	604a      	str	r2, [r1, #4]
 8008414:	608b      	str	r3, [r1, #8]
 8008416:	0038      	movs	r0, r7
 8008418:	f000 fe62 	bl	80090e0 <_Bfree>
 800841c:	2200      	movs	r2, #0
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	da21      	bge.n	800846c <_dtoa_r+0xa0>
 8008428:	2301      	movs	r3, #1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	930b      	str	r3, [sp, #44]	; 0x2c
 8008434:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008436:	4bb2      	ldr	r3, [pc, #712]	; (8008700 <_dtoa_r+0x334>)
 8008438:	002a      	movs	r2, r5
 800843a:	9318      	str	r3, [sp, #96]	; 0x60
 800843c:	401a      	ands	r2, r3
 800843e:	429a      	cmp	r2, r3
 8008440:	d117      	bne.n	8008472 <_dtoa_r+0xa6>
 8008442:	4bb0      	ldr	r3, [pc, #704]	; (8008704 <_dtoa_r+0x338>)
 8008444:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008446:	0328      	lsls	r0, r5, #12
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	0b00      	lsrs	r0, r0, #12
 800844e:	4318      	orrs	r0, r3
 8008450:	d101      	bne.n	8008456 <_dtoa_r+0x8a>
 8008452:	f000 fdc3 	bl	8008fdc <_dtoa_r+0xc10>
 8008456:	48ac      	ldr	r0, [pc, #688]	; (8008708 <_dtoa_r+0x33c>)
 8008458:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800845a:	9005      	str	r0, [sp, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <_dtoa_r+0x9a>
 8008460:	4baa      	ldr	r3, [pc, #680]	; (800870c <_dtoa_r+0x340>)
 8008462:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	9805      	ldr	r0, [sp, #20]
 8008468:	b01d      	add	sp, #116	; 0x74
 800846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846c:	2300      	movs	r3, #0
 800846e:	602b      	str	r3, [r5, #0]
 8008470:	e7e0      	b.n	8008434 <_dtoa_r+0x68>
 8008472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008474:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008476:	9312      	str	r3, [sp, #72]	; 0x48
 8008478:	9413      	str	r4, [sp, #76]	; 0x4c
 800847a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800847c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	f7f7 ffe3 	bl	800044c <__aeabi_dcmpeq>
 8008486:	1e04      	subs	r4, r0, #0
 8008488:	d00b      	beq.n	80084a2 <_dtoa_r+0xd6>
 800848a:	2301      	movs	r3, #1
 800848c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	4b9f      	ldr	r3, [pc, #636]	; (8008710 <_dtoa_r+0x344>)
 8008492:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008494:	9305      	str	r3, [sp, #20]
 8008496:	2a00      	cmp	r2, #0
 8008498:	d0e5      	beq.n	8008466 <_dtoa_r+0x9a>
 800849a:	4a9e      	ldr	r2, [pc, #632]	; (8008714 <_dtoa_r+0x348>)
 800849c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800849e:	600a      	str	r2, [r1, #0]
 80084a0:	e7e1      	b.n	8008466 <_dtoa_r+0x9a>
 80084a2:	ab1a      	add	r3, sp, #104	; 0x68
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	0038      	movs	r0, r7
 80084ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084b0:	f001 f90c 	bl	80096cc <__d2b>
 80084b4:	006e      	lsls	r6, r5, #1
 80084b6:	9004      	str	r0, [sp, #16]
 80084b8:	0d76      	lsrs	r6, r6, #21
 80084ba:	d100      	bne.n	80084be <_dtoa_r+0xf2>
 80084bc:	e07c      	b.n	80085b8 <_dtoa_r+0x1ec>
 80084be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084c4:	4a94      	ldr	r2, [pc, #592]	; (8008718 <_dtoa_r+0x34c>)
 80084c6:	031b      	lsls	r3, r3, #12
 80084c8:	0b1b      	lsrs	r3, r3, #12
 80084ca:	431a      	orrs	r2, r3
 80084cc:	0011      	movs	r1, r2
 80084ce:	4b93      	ldr	r3, [pc, #588]	; (800871c <_dtoa_r+0x350>)
 80084d0:	9416      	str	r4, [sp, #88]	; 0x58
 80084d2:	18f6      	adds	r6, r6, r3
 80084d4:	2200      	movs	r2, #0
 80084d6:	4b92      	ldr	r3, [pc, #584]	; (8008720 <_dtoa_r+0x354>)
 80084d8:	f7fa f938 	bl	800274c <__aeabi_dsub>
 80084dc:	4a91      	ldr	r2, [pc, #580]	; (8008724 <_dtoa_r+0x358>)
 80084de:	4b92      	ldr	r3, [pc, #584]	; (8008728 <_dtoa_r+0x35c>)
 80084e0:	f7f9 fec8 	bl	8002274 <__aeabi_dmul>
 80084e4:	4a91      	ldr	r2, [pc, #580]	; (800872c <_dtoa_r+0x360>)
 80084e6:	4b92      	ldr	r3, [pc, #584]	; (8008730 <_dtoa_r+0x364>)
 80084e8:	f7f8 ff54 	bl	8001394 <__aeabi_dadd>
 80084ec:	0004      	movs	r4, r0
 80084ee:	0030      	movs	r0, r6
 80084f0:	000d      	movs	r5, r1
 80084f2:	f7fa fd11 	bl	8002f18 <__aeabi_i2d>
 80084f6:	4a8f      	ldr	r2, [pc, #572]	; (8008734 <_dtoa_r+0x368>)
 80084f8:	4b8f      	ldr	r3, [pc, #572]	; (8008738 <_dtoa_r+0x36c>)
 80084fa:	f7f9 febb 	bl	8002274 <__aeabi_dmul>
 80084fe:	0002      	movs	r2, r0
 8008500:	000b      	movs	r3, r1
 8008502:	0020      	movs	r0, r4
 8008504:	0029      	movs	r1, r5
 8008506:	f7f8 ff45 	bl	8001394 <__aeabi_dadd>
 800850a:	0004      	movs	r4, r0
 800850c:	000d      	movs	r5, r1
 800850e:	f7fa fccd 	bl	8002eac <__aeabi_d2iz>
 8008512:	2200      	movs	r2, #0
 8008514:	9002      	str	r0, [sp, #8]
 8008516:	2300      	movs	r3, #0
 8008518:	0020      	movs	r0, r4
 800851a:	0029      	movs	r1, r5
 800851c:	f7f7 ff9c 	bl	8000458 <__aeabi_dcmplt>
 8008520:	2800      	cmp	r0, #0
 8008522:	d00b      	beq.n	800853c <_dtoa_r+0x170>
 8008524:	9802      	ldr	r0, [sp, #8]
 8008526:	f7fa fcf7 	bl	8002f18 <__aeabi_i2d>
 800852a:	002b      	movs	r3, r5
 800852c:	0022      	movs	r2, r4
 800852e:	f7f7 ff8d 	bl	800044c <__aeabi_dcmpeq>
 8008532:	4243      	negs	r3, r0
 8008534:	4158      	adcs	r0, r3
 8008536:	9b02      	ldr	r3, [sp, #8]
 8008538:	1a1b      	subs	r3, r3, r0
 800853a:	9302      	str	r3, [sp, #8]
 800853c:	2301      	movs	r3, #1
 800853e:	9315      	str	r3, [sp, #84]	; 0x54
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	2b16      	cmp	r3, #22
 8008544:	d80f      	bhi.n	8008566 <_dtoa_r+0x19a>
 8008546:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008548:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800854a:	00da      	lsls	r2, r3, #3
 800854c:	4b7b      	ldr	r3, [pc, #492]	; (800873c <_dtoa_r+0x370>)
 800854e:	189b      	adds	r3, r3, r2
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	f7f7 ff80 	bl	8000458 <__aeabi_dcmplt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d049      	beq.n	80085f0 <_dtoa_r+0x224>
 800855c:	9b02      	ldr	r3, [sp, #8]
 800855e:	3b01      	subs	r3, #1
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	2300      	movs	r3, #0
 8008564:	9315      	str	r3, [sp, #84]	; 0x54
 8008566:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008568:	1b9e      	subs	r6, r3, r6
 800856a:	2300      	movs	r3, #0
 800856c:	9308      	str	r3, [sp, #32]
 800856e:	0033      	movs	r3, r6
 8008570:	3b01      	subs	r3, #1
 8008572:	930d      	str	r3, [sp, #52]	; 0x34
 8008574:	d504      	bpl.n	8008580 <_dtoa_r+0x1b4>
 8008576:	2301      	movs	r3, #1
 8008578:	1b9b      	subs	r3, r3, r6
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	2300      	movs	r3, #0
 800857e:	930d      	str	r3, [sp, #52]	; 0x34
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	db36      	blt.n	80085f4 <_dtoa_r+0x228>
 8008586:	9a02      	ldr	r2, [sp, #8]
 8008588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800858a:	4694      	mov	ip, r2
 800858c:	4463      	add	r3, ip
 800858e:	930d      	str	r3, [sp, #52]	; 0x34
 8008590:	2300      	movs	r3, #0
 8008592:	9214      	str	r2, [sp, #80]	; 0x50
 8008594:	930e      	str	r3, [sp, #56]	; 0x38
 8008596:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008598:	2401      	movs	r4, #1
 800859a:	2b09      	cmp	r3, #9
 800859c:	d862      	bhi.n	8008664 <_dtoa_r+0x298>
 800859e:	2b05      	cmp	r3, #5
 80085a0:	dd02      	ble.n	80085a8 <_dtoa_r+0x1dc>
 80085a2:	2400      	movs	r4, #0
 80085a4:	3b04      	subs	r3, #4
 80085a6:	9322      	str	r3, [sp, #136]	; 0x88
 80085a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085aa:	1e98      	subs	r0, r3, #2
 80085ac:	2803      	cmp	r0, #3
 80085ae:	d862      	bhi.n	8008676 <_dtoa_r+0x2aa>
 80085b0:	f7f7 fdb2 	bl	8000118 <__gnu_thumb1_case_uqi>
 80085b4:	56343629 	.word	0x56343629
 80085b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80085ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80085bc:	189e      	adds	r6, r3, r2
 80085be:	4b60      	ldr	r3, [pc, #384]	; (8008740 <_dtoa_r+0x374>)
 80085c0:	18f2      	adds	r2, r6, r3
 80085c2:	2a20      	cmp	r2, #32
 80085c4:	dd0f      	ble.n	80085e6 <_dtoa_r+0x21a>
 80085c6:	2340      	movs	r3, #64	; 0x40
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	409d      	lsls	r5, r3
 80085cc:	4b5d      	ldr	r3, [pc, #372]	; (8008744 <_dtoa_r+0x378>)
 80085ce:	9802      	ldr	r0, [sp, #8]
 80085d0:	18f3      	adds	r3, r6, r3
 80085d2:	40d8      	lsrs	r0, r3
 80085d4:	4328      	orrs	r0, r5
 80085d6:	f7fa fccf 	bl	8002f78 <__aeabi_ui2d>
 80085da:	2301      	movs	r3, #1
 80085dc:	4c5a      	ldr	r4, [pc, #360]	; (8008748 <_dtoa_r+0x37c>)
 80085de:	3e01      	subs	r6, #1
 80085e0:	1909      	adds	r1, r1, r4
 80085e2:	9316      	str	r3, [sp, #88]	; 0x58
 80085e4:	e776      	b.n	80084d4 <_dtoa_r+0x108>
 80085e6:	2320      	movs	r3, #32
 80085e8:	9802      	ldr	r0, [sp, #8]
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	4098      	lsls	r0, r3
 80085ee:	e7f2      	b.n	80085d6 <_dtoa_r+0x20a>
 80085f0:	9015      	str	r0, [sp, #84]	; 0x54
 80085f2:	e7b8      	b.n	8008566 <_dtoa_r+0x19a>
 80085f4:	9b08      	ldr	r3, [sp, #32]
 80085f6:	9a02      	ldr	r2, [sp, #8]
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	9308      	str	r3, [sp, #32]
 80085fc:	4253      	negs	r3, r2
 80085fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008600:	2300      	movs	r3, #0
 8008602:	9314      	str	r3, [sp, #80]	; 0x50
 8008604:	e7c7      	b.n	8008596 <_dtoa_r+0x1ca>
 8008606:	2300      	movs	r3, #0
 8008608:	930f      	str	r3, [sp, #60]	; 0x3c
 800860a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800860c:	2b00      	cmp	r3, #0
 800860e:	dc36      	bgt.n	800867e <_dtoa_r+0x2b2>
 8008610:	2301      	movs	r3, #1
 8008612:	001a      	movs	r2, r3
 8008614:	930c      	str	r3, [sp, #48]	; 0x30
 8008616:	9306      	str	r3, [sp, #24]
 8008618:	9223      	str	r2, [sp, #140]	; 0x8c
 800861a:	e00d      	b.n	8008638 <_dtoa_r+0x26c>
 800861c:	2301      	movs	r3, #1
 800861e:	e7f3      	b.n	8008608 <_dtoa_r+0x23c>
 8008620:	2300      	movs	r3, #0
 8008622:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008624:	930f      	str	r3, [sp, #60]	; 0x3c
 8008626:	4694      	mov	ip, r2
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	4463      	add	r3, ip
 800862c:	930c      	str	r3, [sp, #48]	; 0x30
 800862e:	3301      	adds	r3, #1
 8008630:	9306      	str	r3, [sp, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	dc00      	bgt.n	8008638 <_dtoa_r+0x26c>
 8008636:	2301      	movs	r3, #1
 8008638:	2200      	movs	r2, #0
 800863a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800863c:	6042      	str	r2, [r0, #4]
 800863e:	3204      	adds	r2, #4
 8008640:	0015      	movs	r5, r2
 8008642:	3514      	adds	r5, #20
 8008644:	6841      	ldr	r1, [r0, #4]
 8008646:	429d      	cmp	r5, r3
 8008648:	d91d      	bls.n	8008686 <_dtoa_r+0x2ba>
 800864a:	0038      	movs	r0, r7
 800864c:	f000 fd04 	bl	8009058 <_Balloc>
 8008650:	9005      	str	r0, [sp, #20]
 8008652:	2800      	cmp	r0, #0
 8008654:	d11b      	bne.n	800868e <_dtoa_r+0x2c2>
 8008656:	21d5      	movs	r1, #213	; 0xd5
 8008658:	0002      	movs	r2, r0
 800865a:	4b3c      	ldr	r3, [pc, #240]	; (800874c <_dtoa_r+0x380>)
 800865c:	0049      	lsls	r1, r1, #1
 800865e:	e6ca      	b.n	80083f6 <_dtoa_r+0x2a>
 8008660:	2301      	movs	r3, #1
 8008662:	e7de      	b.n	8008622 <_dtoa_r+0x256>
 8008664:	2300      	movs	r3, #0
 8008666:	940f      	str	r4, [sp, #60]	; 0x3c
 8008668:	9322      	str	r3, [sp, #136]	; 0x88
 800866a:	3b01      	subs	r3, #1
 800866c:	930c      	str	r3, [sp, #48]	; 0x30
 800866e:	9306      	str	r3, [sp, #24]
 8008670:	2200      	movs	r2, #0
 8008672:	3313      	adds	r3, #19
 8008674:	e7d0      	b.n	8008618 <_dtoa_r+0x24c>
 8008676:	2301      	movs	r3, #1
 8008678:	930f      	str	r3, [sp, #60]	; 0x3c
 800867a:	3b02      	subs	r3, #2
 800867c:	e7f6      	b.n	800866c <_dtoa_r+0x2a0>
 800867e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008680:	930c      	str	r3, [sp, #48]	; 0x30
 8008682:	9306      	str	r3, [sp, #24]
 8008684:	e7d8      	b.n	8008638 <_dtoa_r+0x26c>
 8008686:	3101      	adds	r1, #1
 8008688:	6041      	str	r1, [r0, #4]
 800868a:	0052      	lsls	r2, r2, #1
 800868c:	e7d8      	b.n	8008640 <_dtoa_r+0x274>
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	9a05      	ldr	r2, [sp, #20]
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	2b0e      	cmp	r3, #14
 8008698:	d900      	bls.n	800869c <_dtoa_r+0x2d0>
 800869a:	e0eb      	b.n	8008874 <_dtoa_r+0x4a8>
 800869c:	2c00      	cmp	r4, #0
 800869e:	d100      	bne.n	80086a2 <_dtoa_r+0x2d6>
 80086a0:	e0e8      	b.n	8008874 <_dtoa_r+0x4a8>
 80086a2:	9b02      	ldr	r3, [sp, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dd68      	ble.n	800877a <_dtoa_r+0x3ae>
 80086a8:	001a      	movs	r2, r3
 80086aa:	210f      	movs	r1, #15
 80086ac:	4b23      	ldr	r3, [pc, #140]	; (800873c <_dtoa_r+0x370>)
 80086ae:	400a      	ands	r2, r1
 80086b0:	00d2      	lsls	r2, r2, #3
 80086b2:	189b      	adds	r3, r3, r2
 80086b4:	681d      	ldr	r5, [r3, #0]
 80086b6:	685e      	ldr	r6, [r3, #4]
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	111c      	asrs	r4, r3, #4
 80086bc:	2302      	movs	r3, #2
 80086be:	9310      	str	r3, [sp, #64]	; 0x40
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	05db      	lsls	r3, r3, #23
 80086c4:	d50b      	bpl.n	80086de <_dtoa_r+0x312>
 80086c6:	4b22      	ldr	r3, [pc, #136]	; (8008750 <_dtoa_r+0x384>)
 80086c8:	400c      	ands	r4, r1
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80086d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80086d2:	f7f9 f9c9 	bl	8001a68 <__aeabi_ddiv>
 80086d6:	2303      	movs	r3, #3
 80086d8:	900a      	str	r0, [sp, #40]	; 0x28
 80086da:	910b      	str	r1, [sp, #44]	; 0x2c
 80086dc:	9310      	str	r3, [sp, #64]	; 0x40
 80086de:	4b1c      	ldr	r3, [pc, #112]	; (8008750 <_dtoa_r+0x384>)
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	2c00      	cmp	r4, #0
 80086e4:	d136      	bne.n	8008754 <_dtoa_r+0x388>
 80086e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80086e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ea:	002a      	movs	r2, r5
 80086ec:	0033      	movs	r3, r6
 80086ee:	f7f9 f9bb 	bl	8001a68 <__aeabi_ddiv>
 80086f2:	900a      	str	r0, [sp, #40]	; 0x28
 80086f4:	910b      	str	r1, [sp, #44]	; 0x2c
 80086f6:	e05c      	b.n	80087b2 <_dtoa_r+0x3e6>
 80086f8:	0800a8a5 	.word	0x0800a8a5
 80086fc:	0800a8bc 	.word	0x0800a8bc
 8008700:	7ff00000 	.word	0x7ff00000
 8008704:	0000270f 	.word	0x0000270f
 8008708:	0800a8a1 	.word	0x0800a8a1
 800870c:	0800a8a4 	.word	0x0800a8a4
 8008710:	0800a874 	.word	0x0800a874
 8008714:	0800a875 	.word	0x0800a875
 8008718:	3ff00000 	.word	0x3ff00000
 800871c:	fffffc01 	.word	0xfffffc01
 8008720:	3ff80000 	.word	0x3ff80000
 8008724:	636f4361 	.word	0x636f4361
 8008728:	3fd287a7 	.word	0x3fd287a7
 800872c:	8b60c8b3 	.word	0x8b60c8b3
 8008730:	3fc68a28 	.word	0x3fc68a28
 8008734:	509f79fb 	.word	0x509f79fb
 8008738:	3fd34413 	.word	0x3fd34413
 800873c:	0800a9b8 	.word	0x0800a9b8
 8008740:	00000432 	.word	0x00000432
 8008744:	00000412 	.word	0x00000412
 8008748:	fe100000 	.word	0xfe100000
 800874c:	0800a91b 	.word	0x0800a91b
 8008750:	0800a990 	.word	0x0800a990
 8008754:	2301      	movs	r3, #1
 8008756:	421c      	tst	r4, r3
 8008758:	d00b      	beq.n	8008772 <_dtoa_r+0x3a6>
 800875a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800875c:	0028      	movs	r0, r5
 800875e:	3301      	adds	r3, #1
 8008760:	9310      	str	r3, [sp, #64]	; 0x40
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	0031      	movs	r1, r6
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f7f9 fd83 	bl	8002274 <__aeabi_dmul>
 800876e:	0005      	movs	r5, r0
 8008770:	000e      	movs	r6, r1
 8008772:	9b07      	ldr	r3, [sp, #28]
 8008774:	1064      	asrs	r4, r4, #1
 8008776:	3308      	adds	r3, #8
 8008778:	e7b2      	b.n	80086e0 <_dtoa_r+0x314>
 800877a:	2302      	movs	r3, #2
 800877c:	9310      	str	r3, [sp, #64]	; 0x40
 800877e:	9b02      	ldr	r3, [sp, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d016      	beq.n	80087b2 <_dtoa_r+0x3e6>
 8008784:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008786:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008788:	425c      	negs	r4, r3
 800878a:	230f      	movs	r3, #15
 800878c:	4ab5      	ldr	r2, [pc, #724]	; (8008a64 <_dtoa_r+0x698>)
 800878e:	4023      	ands	r3, r4
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	18d3      	adds	r3, r2, r3
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f7f9 fd6c 	bl	8002274 <__aeabi_dmul>
 800879c:	2601      	movs	r6, #1
 800879e:	2300      	movs	r3, #0
 80087a0:	900a      	str	r0, [sp, #40]	; 0x28
 80087a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80087a4:	4db0      	ldr	r5, [pc, #704]	; (8008a68 <_dtoa_r+0x69c>)
 80087a6:	1124      	asrs	r4, r4, #4
 80087a8:	2c00      	cmp	r4, #0
 80087aa:	d000      	beq.n	80087ae <_dtoa_r+0x3e2>
 80087ac:	e094      	b.n	80088d8 <_dtoa_r+0x50c>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d19f      	bne.n	80086f2 <_dtoa_r+0x326>
 80087b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d100      	bne.n	80087ba <_dtoa_r+0x3ee>
 80087b8:	e09b      	b.n	80088f2 <_dtoa_r+0x526>
 80087ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087bc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80087be:	2200      	movs	r2, #0
 80087c0:	0020      	movs	r0, r4
 80087c2:	0029      	movs	r1, r5
 80087c4:	4ba9      	ldr	r3, [pc, #676]	; (8008a6c <_dtoa_r+0x6a0>)
 80087c6:	f7f7 fe47 	bl	8000458 <__aeabi_dcmplt>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d100      	bne.n	80087d0 <_dtoa_r+0x404>
 80087ce:	e090      	b.n	80088f2 <_dtoa_r+0x526>
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d100      	bne.n	80087d8 <_dtoa_r+0x40c>
 80087d6:	e08c      	b.n	80088f2 <_dtoa_r+0x526>
 80087d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dd46      	ble.n	800886c <_dtoa_r+0x4a0>
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	2200      	movs	r2, #0
 80087e2:	0020      	movs	r0, r4
 80087e4:	0029      	movs	r1, r5
 80087e6:	1e5e      	subs	r6, r3, #1
 80087e8:	4ba1      	ldr	r3, [pc, #644]	; (8008a70 <_dtoa_r+0x6a4>)
 80087ea:	f7f9 fd43 	bl	8002274 <__aeabi_dmul>
 80087ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087f0:	900a      	str	r0, [sp, #40]	; 0x28
 80087f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80087f4:	3301      	adds	r3, #1
 80087f6:	9310      	str	r3, [sp, #64]	; 0x40
 80087f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80087fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008800:	9307      	str	r3, [sp, #28]
 8008802:	f7fa fb89 	bl	8002f18 <__aeabi_i2d>
 8008806:	0022      	movs	r2, r4
 8008808:	002b      	movs	r3, r5
 800880a:	f7f9 fd33 	bl	8002274 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	4b98      	ldr	r3, [pc, #608]	; (8008a74 <_dtoa_r+0x6a8>)
 8008812:	f7f8 fdbf 	bl	8001394 <__aeabi_dadd>
 8008816:	9010      	str	r0, [sp, #64]	; 0x40
 8008818:	9111      	str	r1, [sp, #68]	; 0x44
 800881a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800881c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800881e:	920a      	str	r2, [sp, #40]	; 0x28
 8008820:	930b      	str	r3, [sp, #44]	; 0x2c
 8008822:	4a95      	ldr	r2, [pc, #596]	; (8008a78 <_dtoa_r+0x6ac>)
 8008824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008826:	4694      	mov	ip, r2
 8008828:	4463      	add	r3, ip
 800882a:	9317      	str	r3, [sp, #92]	; 0x5c
 800882c:	930b      	str	r3, [sp, #44]	; 0x2c
 800882e:	9b07      	ldr	r3, [sp, #28]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d161      	bne.n	80088f8 <_dtoa_r+0x52c>
 8008834:	2200      	movs	r2, #0
 8008836:	0020      	movs	r0, r4
 8008838:	0029      	movs	r1, r5
 800883a:	4b90      	ldr	r3, [pc, #576]	; (8008a7c <_dtoa_r+0x6b0>)
 800883c:	f7f9 ff86 	bl	800274c <__aeabi_dsub>
 8008840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008842:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008844:	0004      	movs	r4, r0
 8008846:	000d      	movs	r5, r1
 8008848:	f7f7 fe1a 	bl	8000480 <__aeabi_dcmpgt>
 800884c:	2800      	cmp	r0, #0
 800884e:	d000      	beq.n	8008852 <_dtoa_r+0x486>
 8008850:	e2b5      	b.n	8008dbe <_dtoa_r+0x9f2>
 8008852:	488b      	ldr	r0, [pc, #556]	; (8008a80 <_dtoa_r+0x6b4>)
 8008854:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008856:	4684      	mov	ip, r0
 8008858:	4461      	add	r1, ip
 800885a:	000b      	movs	r3, r1
 800885c:	0020      	movs	r0, r4
 800885e:	0029      	movs	r1, r5
 8008860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008862:	f7f7 fdf9 	bl	8000458 <__aeabi_dcmplt>
 8008866:	2800      	cmp	r0, #0
 8008868:	d000      	beq.n	800886c <_dtoa_r+0x4a0>
 800886a:	e2a5      	b.n	8008db8 <_dtoa_r+0x9ec>
 800886c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800886e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008870:	930a      	str	r3, [sp, #40]	; 0x28
 8008872:	940b      	str	r4, [sp, #44]	; 0x2c
 8008874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008876:	2b00      	cmp	r3, #0
 8008878:	da00      	bge.n	800887c <_dtoa_r+0x4b0>
 800887a:	e171      	b.n	8008b60 <_dtoa_r+0x794>
 800887c:	9a02      	ldr	r2, [sp, #8]
 800887e:	2a0e      	cmp	r2, #14
 8008880:	dd00      	ble.n	8008884 <_dtoa_r+0x4b8>
 8008882:	e16d      	b.n	8008b60 <_dtoa_r+0x794>
 8008884:	4b77      	ldr	r3, [pc, #476]	; (8008a64 <_dtoa_r+0x698>)
 8008886:	00d2      	lsls	r2, r2, #3
 8008888:	189b      	adds	r3, r3, r2
 800888a:	685c      	ldr	r4, [r3, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	9308      	str	r3, [sp, #32]
 8008890:	9409      	str	r4, [sp, #36]	; 0x24
 8008892:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008894:	2b00      	cmp	r3, #0
 8008896:	db00      	blt.n	800889a <_dtoa_r+0x4ce>
 8008898:	e0f6      	b.n	8008a88 <_dtoa_r+0x6bc>
 800889a:	9b06      	ldr	r3, [sp, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dd00      	ble.n	80088a2 <_dtoa_r+0x4d6>
 80088a0:	e0f2      	b.n	8008a88 <_dtoa_r+0x6bc>
 80088a2:	d000      	beq.n	80088a6 <_dtoa_r+0x4da>
 80088a4:	e288      	b.n	8008db8 <_dtoa_r+0x9ec>
 80088a6:	9808      	ldr	r0, [sp, #32]
 80088a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088aa:	2200      	movs	r2, #0
 80088ac:	4b73      	ldr	r3, [pc, #460]	; (8008a7c <_dtoa_r+0x6b0>)
 80088ae:	f7f9 fce1 	bl	8002274 <__aeabi_dmul>
 80088b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b6:	f7f7 fded 	bl	8000494 <__aeabi_dcmpge>
 80088ba:	9e06      	ldr	r6, [sp, #24]
 80088bc:	0035      	movs	r5, r6
 80088be:	2800      	cmp	r0, #0
 80088c0:	d000      	beq.n	80088c4 <_dtoa_r+0x4f8>
 80088c2:	e25f      	b.n	8008d84 <_dtoa_r+0x9b8>
 80088c4:	9b05      	ldr	r3, [sp, #20]
 80088c6:	9a05      	ldr	r2, [sp, #20]
 80088c8:	3301      	adds	r3, #1
 80088ca:	9307      	str	r3, [sp, #28]
 80088cc:	2331      	movs	r3, #49	; 0x31
 80088ce:	7013      	strb	r3, [r2, #0]
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	3301      	adds	r3, #1
 80088d4:	9302      	str	r3, [sp, #8]
 80088d6:	e25a      	b.n	8008d8e <_dtoa_r+0x9c2>
 80088d8:	4234      	tst	r4, r6
 80088da:	d007      	beq.n	80088ec <_dtoa_r+0x520>
 80088dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088de:	3301      	adds	r3, #1
 80088e0:	9310      	str	r3, [sp, #64]	; 0x40
 80088e2:	682a      	ldr	r2, [r5, #0]
 80088e4:	686b      	ldr	r3, [r5, #4]
 80088e6:	f7f9 fcc5 	bl	8002274 <__aeabi_dmul>
 80088ea:	0033      	movs	r3, r6
 80088ec:	1064      	asrs	r4, r4, #1
 80088ee:	3508      	adds	r5, #8
 80088f0:	e75a      	b.n	80087a8 <_dtoa_r+0x3dc>
 80088f2:	9e02      	ldr	r6, [sp, #8]
 80088f4:	9b06      	ldr	r3, [sp, #24]
 80088f6:	e780      	b.n	80087fa <_dtoa_r+0x42e>
 80088f8:	9b07      	ldr	r3, [sp, #28]
 80088fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80088fc:	1e5a      	subs	r2, r3, #1
 80088fe:	4b59      	ldr	r3, [pc, #356]	; (8008a64 <_dtoa_r+0x698>)
 8008900:	00d2      	lsls	r2, r2, #3
 8008902:	189b      	adds	r3, r3, r2
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2900      	cmp	r1, #0
 800890a:	d051      	beq.n	80089b0 <_dtoa_r+0x5e4>
 800890c:	2000      	movs	r0, #0
 800890e:	495d      	ldr	r1, [pc, #372]	; (8008a84 <_dtoa_r+0x6b8>)
 8008910:	f7f9 f8aa 	bl	8001a68 <__aeabi_ddiv>
 8008914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008918:	f7f9 ff18 	bl	800274c <__aeabi_dsub>
 800891c:	9a05      	ldr	r2, [sp, #20]
 800891e:	9b05      	ldr	r3, [sp, #20]
 8008920:	4694      	mov	ip, r2
 8008922:	9310      	str	r3, [sp, #64]	; 0x40
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	900a      	str	r0, [sp, #40]	; 0x28
 8008928:	910b      	str	r1, [sp, #44]	; 0x2c
 800892a:	4463      	add	r3, ip
 800892c:	9319      	str	r3, [sp, #100]	; 0x64
 800892e:	0029      	movs	r1, r5
 8008930:	0020      	movs	r0, r4
 8008932:	f7fa fabb 	bl	8002eac <__aeabi_d2iz>
 8008936:	9017      	str	r0, [sp, #92]	; 0x5c
 8008938:	f7fa faee 	bl	8002f18 <__aeabi_i2d>
 800893c:	0002      	movs	r2, r0
 800893e:	000b      	movs	r3, r1
 8008940:	0020      	movs	r0, r4
 8008942:	0029      	movs	r1, r5
 8008944:	f7f9 ff02 	bl	800274c <__aeabi_dsub>
 8008948:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800894a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800894c:	3301      	adds	r3, #1
 800894e:	9307      	str	r3, [sp, #28]
 8008950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008952:	0004      	movs	r4, r0
 8008954:	3330      	adds	r3, #48	; 0x30
 8008956:	7013      	strb	r3, [r2, #0]
 8008958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800895a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895c:	000d      	movs	r5, r1
 800895e:	f7f7 fd7b 	bl	8000458 <__aeabi_dcmplt>
 8008962:	2800      	cmp	r0, #0
 8008964:	d175      	bne.n	8008a52 <_dtoa_r+0x686>
 8008966:	0022      	movs	r2, r4
 8008968:	002b      	movs	r3, r5
 800896a:	2000      	movs	r0, #0
 800896c:	493f      	ldr	r1, [pc, #252]	; (8008a6c <_dtoa_r+0x6a0>)
 800896e:	f7f9 feed 	bl	800274c <__aeabi_dsub>
 8008972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008976:	f7f7 fd6f 	bl	8000458 <__aeabi_dcmplt>
 800897a:	2800      	cmp	r0, #0
 800897c:	d000      	beq.n	8008980 <_dtoa_r+0x5b4>
 800897e:	e0d1      	b.n	8008b24 <_dtoa_r+0x758>
 8008980:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008982:	9a07      	ldr	r2, [sp, #28]
 8008984:	4293      	cmp	r3, r2
 8008986:	d100      	bne.n	800898a <_dtoa_r+0x5be>
 8008988:	e770      	b.n	800886c <_dtoa_r+0x4a0>
 800898a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800898c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800898e:	2200      	movs	r2, #0
 8008990:	4b37      	ldr	r3, [pc, #220]	; (8008a70 <_dtoa_r+0x6a4>)
 8008992:	f7f9 fc6f 	bl	8002274 <__aeabi_dmul>
 8008996:	4b36      	ldr	r3, [pc, #216]	; (8008a70 <_dtoa_r+0x6a4>)
 8008998:	900a      	str	r0, [sp, #40]	; 0x28
 800899a:	910b      	str	r1, [sp, #44]	; 0x2c
 800899c:	2200      	movs	r2, #0
 800899e:	0020      	movs	r0, r4
 80089a0:	0029      	movs	r1, r5
 80089a2:	f7f9 fc67 	bl	8002274 <__aeabi_dmul>
 80089a6:	9b07      	ldr	r3, [sp, #28]
 80089a8:	0004      	movs	r4, r0
 80089aa:	000d      	movs	r5, r1
 80089ac:	9310      	str	r3, [sp, #64]	; 0x40
 80089ae:	e7be      	b.n	800892e <_dtoa_r+0x562>
 80089b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089b4:	f7f9 fc5e 	bl	8002274 <__aeabi_dmul>
 80089b8:	9a05      	ldr	r2, [sp, #20]
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	4694      	mov	ip, r2
 80089be:	930a      	str	r3, [sp, #40]	; 0x28
 80089c0:	9b07      	ldr	r3, [sp, #28]
 80089c2:	9010      	str	r0, [sp, #64]	; 0x40
 80089c4:	9111      	str	r1, [sp, #68]	; 0x44
 80089c6:	4463      	add	r3, ip
 80089c8:	9319      	str	r3, [sp, #100]	; 0x64
 80089ca:	0029      	movs	r1, r5
 80089cc:	0020      	movs	r0, r4
 80089ce:	f7fa fa6d 	bl	8002eac <__aeabi_d2iz>
 80089d2:	9017      	str	r0, [sp, #92]	; 0x5c
 80089d4:	f7fa faa0 	bl	8002f18 <__aeabi_i2d>
 80089d8:	0002      	movs	r2, r0
 80089da:	000b      	movs	r3, r1
 80089dc:	0020      	movs	r0, r4
 80089de:	0029      	movs	r1, r5
 80089e0:	f7f9 feb4 	bl	800274c <__aeabi_dsub>
 80089e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	7013      	strb	r3, [r2, #0]
 80089ec:	0013      	movs	r3, r2
 80089ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80089f0:	3301      	adds	r3, #1
 80089f2:	0004      	movs	r4, r0
 80089f4:	000d      	movs	r5, r1
 80089f6:	930a      	str	r3, [sp, #40]	; 0x28
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d12c      	bne.n	8008a56 <_dtoa_r+0x68a>
 80089fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80089fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008a00:	9a05      	ldr	r2, [sp, #20]
 8008a02:	9b07      	ldr	r3, [sp, #28]
 8008a04:	4694      	mov	ip, r2
 8008a06:	4463      	add	r3, ip
 8008a08:	2200      	movs	r2, #0
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <_dtoa_r+0x6b8>)
 8008a0e:	f7f8 fcc1 	bl	8001394 <__aeabi_dadd>
 8008a12:	0002      	movs	r2, r0
 8008a14:	000b      	movs	r3, r1
 8008a16:	0020      	movs	r0, r4
 8008a18:	0029      	movs	r1, r5
 8008a1a:	f7f7 fd31 	bl	8000480 <__aeabi_dcmpgt>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d000      	beq.n	8008a24 <_dtoa_r+0x658>
 8008a22:	e07f      	b.n	8008b24 <_dtoa_r+0x758>
 8008a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a28:	2000      	movs	r0, #0
 8008a2a:	4916      	ldr	r1, [pc, #88]	; (8008a84 <_dtoa_r+0x6b8>)
 8008a2c:	f7f9 fe8e 	bl	800274c <__aeabi_dsub>
 8008a30:	0002      	movs	r2, r0
 8008a32:	000b      	movs	r3, r1
 8008a34:	0020      	movs	r0, r4
 8008a36:	0029      	movs	r1, r5
 8008a38:	f7f7 fd0e 	bl	8000458 <__aeabi_dcmplt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d100      	bne.n	8008a42 <_dtoa_r+0x676>
 8008a40:	e714      	b.n	800886c <_dtoa_r+0x4a0>
 8008a42:	9b07      	ldr	r3, [sp, #28]
 8008a44:	001a      	movs	r2, r3
 8008a46:	3a01      	subs	r2, #1
 8008a48:	9207      	str	r2, [sp, #28]
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	2a30      	cmp	r2, #48	; 0x30
 8008a4e:	d0f8      	beq.n	8008a42 <_dtoa_r+0x676>
 8008a50:	9307      	str	r3, [sp, #28]
 8008a52:	9602      	str	r6, [sp, #8]
 8008a54:	e054      	b.n	8008b00 <_dtoa_r+0x734>
 8008a56:	2200      	movs	r2, #0
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <_dtoa_r+0x6a4>)
 8008a5a:	f7f9 fc0b 	bl	8002274 <__aeabi_dmul>
 8008a5e:	0004      	movs	r4, r0
 8008a60:	000d      	movs	r5, r1
 8008a62:	e7b2      	b.n	80089ca <_dtoa_r+0x5fe>
 8008a64:	0800a9b8 	.word	0x0800a9b8
 8008a68:	0800a990 	.word	0x0800a990
 8008a6c:	3ff00000 	.word	0x3ff00000
 8008a70:	40240000 	.word	0x40240000
 8008a74:	401c0000 	.word	0x401c0000
 8008a78:	fcc00000 	.word	0xfcc00000
 8008a7c:	40140000 	.word	0x40140000
 8008a80:	7cc00000 	.word	0x7cc00000
 8008a84:	3fe00000 	.word	0x3fe00000
 8008a88:	9b06      	ldr	r3, [sp, #24]
 8008a8a:	9e05      	ldr	r6, [sp, #20]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	199b      	adds	r3, r3, r6
 8008a90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008a94:	930a      	str	r3, [sp, #40]	; 0x28
 8008a96:	9a08      	ldr	r2, [sp, #32]
 8008a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9a:	0020      	movs	r0, r4
 8008a9c:	0029      	movs	r1, r5
 8008a9e:	f7f8 ffe3 	bl	8001a68 <__aeabi_ddiv>
 8008aa2:	f7fa fa03 	bl	8002eac <__aeabi_d2iz>
 8008aa6:	9006      	str	r0, [sp, #24]
 8008aa8:	f7fa fa36 	bl	8002f18 <__aeabi_i2d>
 8008aac:	9a08      	ldr	r2, [sp, #32]
 8008aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab0:	f7f9 fbe0 	bl	8002274 <__aeabi_dmul>
 8008ab4:	0002      	movs	r2, r0
 8008ab6:	000b      	movs	r3, r1
 8008ab8:	0020      	movs	r0, r4
 8008aba:	0029      	movs	r1, r5
 8008abc:	f7f9 fe46 	bl	800274c <__aeabi_dsub>
 8008ac0:	0033      	movs	r3, r6
 8008ac2:	9a06      	ldr	r2, [sp, #24]
 8008ac4:	3601      	adds	r6, #1
 8008ac6:	3230      	adds	r2, #48	; 0x30
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008acc:	9607      	str	r6, [sp, #28]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d139      	bne.n	8008b46 <_dtoa_r+0x77a>
 8008ad2:	0002      	movs	r2, r0
 8008ad4:	000b      	movs	r3, r1
 8008ad6:	f7f8 fc5d 	bl	8001394 <__aeabi_dadd>
 8008ada:	9a08      	ldr	r2, [sp, #32]
 8008adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ade:	0004      	movs	r4, r0
 8008ae0:	000d      	movs	r5, r1
 8008ae2:	f7f7 fccd 	bl	8000480 <__aeabi_dcmpgt>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d11b      	bne.n	8008b22 <_dtoa_r+0x756>
 8008aea:	9a08      	ldr	r2, [sp, #32]
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	0020      	movs	r0, r4
 8008af0:	0029      	movs	r1, r5
 8008af2:	f7f7 fcab 	bl	800044c <__aeabi_dcmpeq>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d002      	beq.n	8008b00 <_dtoa_r+0x734>
 8008afa:	9b06      	ldr	r3, [sp, #24]
 8008afc:	07db      	lsls	r3, r3, #31
 8008afe:	d410      	bmi.n	8008b22 <_dtoa_r+0x756>
 8008b00:	0038      	movs	r0, r7
 8008b02:	9904      	ldr	r1, [sp, #16]
 8008b04:	f000 faec 	bl	80090e0 <_Bfree>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9a07      	ldr	r2, [sp, #28]
 8008b0c:	9802      	ldr	r0, [sp, #8]
 8008b0e:	7013      	strb	r3, [r2, #0]
 8008b10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b12:	3001      	adds	r0, #1
 8008b14:	6018      	str	r0, [r3, #0]
 8008b16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d100      	bne.n	8008b1e <_dtoa_r+0x752>
 8008b1c:	e4a3      	b.n	8008466 <_dtoa_r+0x9a>
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e4a1      	b.n	8008466 <_dtoa_r+0x9a>
 8008b22:	9e02      	ldr	r6, [sp, #8]
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	9307      	str	r3, [sp, #28]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	2a39      	cmp	r2, #57	; 0x39
 8008b2e:	d106      	bne.n	8008b3e <_dtoa_r+0x772>
 8008b30:	9a05      	ldr	r2, [sp, #20]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d1f7      	bne.n	8008b26 <_dtoa_r+0x75a>
 8008b36:	2230      	movs	r2, #48	; 0x30
 8008b38:	9905      	ldr	r1, [sp, #20]
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	700a      	strb	r2, [r1, #0]
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	3201      	adds	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e785      	b.n	8008a52 <_dtoa_r+0x686>
 8008b46:	2200      	movs	r2, #0
 8008b48:	4bad      	ldr	r3, [pc, #692]	; (8008e00 <_dtoa_r+0xa34>)
 8008b4a:	f7f9 fb93 	bl	8002274 <__aeabi_dmul>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2300      	movs	r3, #0
 8008b52:	0004      	movs	r4, r0
 8008b54:	000d      	movs	r5, r1
 8008b56:	f7f7 fc79 	bl	800044c <__aeabi_dcmpeq>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d09b      	beq.n	8008a96 <_dtoa_r+0x6ca>
 8008b5e:	e7cf      	b.n	8008b00 <_dtoa_r+0x734>
 8008b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d100      	bne.n	8008b68 <_dtoa_r+0x79c>
 8008b66:	e082      	b.n	8008c6e <_dtoa_r+0x8a2>
 8008b68:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b6a:	2a01      	cmp	r2, #1
 8008b6c:	dc66      	bgt.n	8008c3c <_dtoa_r+0x870>
 8008b6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b70:	2a00      	cmp	r2, #0
 8008b72:	d05f      	beq.n	8008c34 <_dtoa_r+0x868>
 8008b74:	4aa3      	ldr	r2, [pc, #652]	; (8008e04 <_dtoa_r+0xa38>)
 8008b76:	189b      	adds	r3, r3, r2
 8008b78:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008b7a:	9c08      	ldr	r4, [sp, #32]
 8008b7c:	9a08      	ldr	r2, [sp, #32]
 8008b7e:	2101      	movs	r1, #1
 8008b80:	18d2      	adds	r2, r2, r3
 8008b82:	9208      	str	r2, [sp, #32]
 8008b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b86:	0038      	movs	r0, r7
 8008b88:	18d3      	adds	r3, r2, r3
 8008b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b8c:	f000 fb58 	bl	8009240 <__i2b>
 8008b90:	0005      	movs	r5, r0
 8008b92:	2c00      	cmp	r4, #0
 8008b94:	dd0e      	ble.n	8008bb4 <_dtoa_r+0x7e8>
 8008b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dd0b      	ble.n	8008bb4 <_dtoa_r+0x7e8>
 8008b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b9e:	0023      	movs	r3, r4
 8008ba0:	4294      	cmp	r4, r2
 8008ba2:	dd00      	ble.n	8008ba6 <_dtoa_r+0x7da>
 8008ba4:	0013      	movs	r3, r2
 8008ba6:	9a08      	ldr	r2, [sp, #32]
 8008ba8:	1ae4      	subs	r4, r4, r3
 8008baa:	1ad2      	subs	r2, r2, r3
 8008bac:	9208      	str	r2, [sp, #32]
 8008bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8008bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d01f      	beq.n	8008bfa <_dtoa_r+0x82e>
 8008bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d05a      	beq.n	8008c76 <_dtoa_r+0x8aa>
 8008bc0:	2e00      	cmp	r6, #0
 8008bc2:	dd11      	ble.n	8008be8 <_dtoa_r+0x81c>
 8008bc4:	0029      	movs	r1, r5
 8008bc6:	0032      	movs	r2, r6
 8008bc8:	0038      	movs	r0, r7
 8008bca:	f000 fbff 	bl	80093cc <__pow5mult>
 8008bce:	9a04      	ldr	r2, [sp, #16]
 8008bd0:	0001      	movs	r1, r0
 8008bd2:	0005      	movs	r5, r0
 8008bd4:	0038      	movs	r0, r7
 8008bd6:	f000 fb49 	bl	800926c <__multiply>
 8008bda:	9904      	ldr	r1, [sp, #16]
 8008bdc:	9007      	str	r0, [sp, #28]
 8008bde:	0038      	movs	r0, r7
 8008be0:	f000 fa7e 	bl	80090e0 <_Bfree>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bea:	1b9a      	subs	r2, r3, r6
 8008bec:	42b3      	cmp	r3, r6
 8008bee:	d004      	beq.n	8008bfa <_dtoa_r+0x82e>
 8008bf0:	0038      	movs	r0, r7
 8008bf2:	9904      	ldr	r1, [sp, #16]
 8008bf4:	f000 fbea 	bl	80093cc <__pow5mult>
 8008bf8:	9004      	str	r0, [sp, #16]
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	0038      	movs	r0, r7
 8008bfe:	f000 fb1f 	bl	8009240 <__i2b>
 8008c02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c04:	0006      	movs	r6, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd37      	ble.n	8008c7a <_dtoa_r+0x8ae>
 8008c0a:	001a      	movs	r2, r3
 8008c0c:	0001      	movs	r1, r0
 8008c0e:	0038      	movs	r0, r7
 8008c10:	f000 fbdc 	bl	80093cc <__pow5mult>
 8008c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c16:	0006      	movs	r6, r0
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	dd33      	ble.n	8008c84 <_dtoa_r+0x8b8>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	6933      	ldr	r3, [r6, #16]
 8008c22:	3303      	adds	r3, #3
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	18f3      	adds	r3, r6, r3
 8008c28:	6858      	ldr	r0, [r3, #4]
 8008c2a:	f000 fac1 	bl	80091b0 <__hi0bits>
 8008c2e:	2320      	movs	r3, #32
 8008c30:	1a18      	subs	r0, r3, r0
 8008c32:	e03f      	b.n	8008cb4 <_dtoa_r+0x8e8>
 8008c34:	2336      	movs	r3, #54	; 0x36
 8008c36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	e79d      	b.n	8008b78 <_dtoa_r+0x7ac>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	1e5e      	subs	r6, r3, #1
 8008c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c42:	42b3      	cmp	r3, r6
 8008c44:	db08      	blt.n	8008c58 <_dtoa_r+0x88c>
 8008c46:	1b9e      	subs	r6, r3, r6
 8008c48:	9b06      	ldr	r3, [sp, #24]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da0c      	bge.n	8008c68 <_dtoa_r+0x89c>
 8008c4e:	9b08      	ldr	r3, [sp, #32]
 8008c50:	9a06      	ldr	r2, [sp, #24]
 8008c52:	1a9c      	subs	r4, r3, r2
 8008c54:	2300      	movs	r3, #0
 8008c56:	e791      	b.n	8008b7c <_dtoa_r+0x7b0>
 8008c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c5c:	1af3      	subs	r3, r6, r3
 8008c5e:	18d3      	adds	r3, r2, r3
 8008c60:	960e      	str	r6, [sp, #56]	; 0x38
 8008c62:	9314      	str	r3, [sp, #80]	; 0x50
 8008c64:	2600      	movs	r6, #0
 8008c66:	e7ef      	b.n	8008c48 <_dtoa_r+0x87c>
 8008c68:	9c08      	ldr	r4, [sp, #32]
 8008c6a:	9b06      	ldr	r3, [sp, #24]
 8008c6c:	e786      	b.n	8008b7c <_dtoa_r+0x7b0>
 8008c6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008c70:	9c08      	ldr	r4, [sp, #32]
 8008c72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c74:	e78d      	b.n	8008b92 <_dtoa_r+0x7c6>
 8008c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c78:	e7ba      	b.n	8008bf0 <_dtoa_r+0x824>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9307      	str	r3, [sp, #28]
 8008c7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	dc13      	bgt.n	8008cac <_dtoa_r+0x8e0>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9307      	str	r3, [sp, #28]
 8008c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10e      	bne.n	8008cac <_dtoa_r+0x8e0>
 8008c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c90:	031b      	lsls	r3, r3, #12
 8008c92:	d10b      	bne.n	8008cac <_dtoa_r+0x8e0>
 8008c94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008c96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c98:	4213      	tst	r3, r2
 8008c9a:	d007      	beq.n	8008cac <_dtoa_r+0x8e0>
 8008c9c:	9b08      	ldr	r3, [sp, #32]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	9308      	str	r3, [sp, #32]
 8008ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ca8:	2301      	movs	r3, #1
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cae:	2001      	movs	r0, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1b5      	bne.n	8008c20 <_dtoa_r+0x854>
 8008cb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cb6:	221f      	movs	r2, #31
 8008cb8:	1818      	adds	r0, r3, r0
 8008cba:	0003      	movs	r3, r0
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	4210      	tst	r0, r2
 8008cc0:	d046      	beq.n	8008d50 <_dtoa_r+0x984>
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	1ad2      	subs	r2, r2, r3
 8008cc6:	2a04      	cmp	r2, #4
 8008cc8:	dd3f      	ble.n	8008d4a <_dtoa_r+0x97e>
 8008cca:	221c      	movs	r2, #28
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	9a08      	ldr	r2, [sp, #32]
 8008cd0:	18e4      	adds	r4, r4, r3
 8008cd2:	18d2      	adds	r2, r2, r3
 8008cd4:	9208      	str	r2, [sp, #32]
 8008cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cd8:	18d3      	adds	r3, r2, r3
 8008cda:	930d      	str	r3, [sp, #52]	; 0x34
 8008cdc:	9b08      	ldr	r3, [sp, #32]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dd05      	ble.n	8008cee <_dtoa_r+0x922>
 8008ce2:	001a      	movs	r2, r3
 8008ce4:	0038      	movs	r0, r7
 8008ce6:	9904      	ldr	r1, [sp, #16]
 8008ce8:	f000 fbcc 	bl	8009484 <__lshift>
 8008cec:	9004      	str	r0, [sp, #16]
 8008cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dd05      	ble.n	8008d00 <_dtoa_r+0x934>
 8008cf4:	0031      	movs	r1, r6
 8008cf6:	001a      	movs	r2, r3
 8008cf8:	0038      	movs	r0, r7
 8008cfa:	f000 fbc3 	bl	8009484 <__lshift>
 8008cfe:	0006      	movs	r6, r0
 8008d00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d026      	beq.n	8008d54 <_dtoa_r+0x988>
 8008d06:	0031      	movs	r1, r6
 8008d08:	9804      	ldr	r0, [sp, #16]
 8008d0a:	f000 fc2b 	bl	8009564 <__mcmp>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	da20      	bge.n	8008d54 <_dtoa_r+0x988>
 8008d12:	9b02      	ldr	r3, [sp, #8]
 8008d14:	220a      	movs	r2, #10
 8008d16:	3b01      	subs	r3, #1
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	0038      	movs	r0, r7
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9904      	ldr	r1, [sp, #16]
 8008d20:	f000 fa02 	bl	8009128 <__multadd>
 8008d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d26:	9004      	str	r0, [sp, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d100      	bne.n	8008d2e <_dtoa_r+0x962>
 8008d2c:	e160      	b.n	8008ff0 <_dtoa_r+0xc24>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	0029      	movs	r1, r5
 8008d32:	220a      	movs	r2, #10
 8008d34:	0038      	movs	r0, r7
 8008d36:	f000 f9f7 	bl	8009128 <__multadd>
 8008d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3c:	0005      	movs	r5, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dc47      	bgt.n	8008dd2 <_dtoa_r+0xa06>
 8008d42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	dc0d      	bgt.n	8008d64 <_dtoa_r+0x998>
 8008d48:	e043      	b.n	8008dd2 <_dtoa_r+0xa06>
 8008d4a:	2a04      	cmp	r2, #4
 8008d4c:	d0c6      	beq.n	8008cdc <_dtoa_r+0x910>
 8008d4e:	0013      	movs	r3, r2
 8008d50:	331c      	adds	r3, #28
 8008d52:	e7bc      	b.n	8008cce <_dtoa_r+0x902>
 8008d54:	9b06      	ldr	r3, [sp, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dc35      	bgt.n	8008dc6 <_dtoa_r+0x9fa>
 8008d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	dd32      	ble.n	8008dc6 <_dtoa_r+0x9fa>
 8008d60:	9b06      	ldr	r3, [sp, #24]
 8008d62:	930c      	str	r3, [sp, #48]	; 0x30
 8008d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <_dtoa_r+0x9b8>
 8008d6a:	0031      	movs	r1, r6
 8008d6c:	2205      	movs	r2, #5
 8008d6e:	0038      	movs	r0, r7
 8008d70:	f000 f9da 	bl	8009128 <__multadd>
 8008d74:	0006      	movs	r6, r0
 8008d76:	0001      	movs	r1, r0
 8008d78:	9804      	ldr	r0, [sp, #16]
 8008d7a:	f000 fbf3 	bl	8009564 <__mcmp>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	dd00      	ble.n	8008d84 <_dtoa_r+0x9b8>
 8008d82:	e59f      	b.n	80088c4 <_dtoa_r+0x4f8>
 8008d84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d86:	43db      	mvns	r3, r3
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	9b05      	ldr	r3, [sp, #20]
 8008d8c:	9307      	str	r3, [sp, #28]
 8008d8e:	2400      	movs	r4, #0
 8008d90:	0031      	movs	r1, r6
 8008d92:	0038      	movs	r0, r7
 8008d94:	f000 f9a4 	bl	80090e0 <_Bfree>
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	d100      	bne.n	8008d9e <_dtoa_r+0x9d2>
 8008d9c:	e6b0      	b.n	8008b00 <_dtoa_r+0x734>
 8008d9e:	2c00      	cmp	r4, #0
 8008da0:	d005      	beq.n	8008dae <_dtoa_r+0x9e2>
 8008da2:	42ac      	cmp	r4, r5
 8008da4:	d003      	beq.n	8008dae <_dtoa_r+0x9e2>
 8008da6:	0021      	movs	r1, r4
 8008da8:	0038      	movs	r0, r7
 8008daa:	f000 f999 	bl	80090e0 <_Bfree>
 8008dae:	0029      	movs	r1, r5
 8008db0:	0038      	movs	r0, r7
 8008db2:	f000 f995 	bl	80090e0 <_Bfree>
 8008db6:	e6a3      	b.n	8008b00 <_dtoa_r+0x734>
 8008db8:	2600      	movs	r6, #0
 8008dba:	0035      	movs	r5, r6
 8008dbc:	e7e2      	b.n	8008d84 <_dtoa_r+0x9b8>
 8008dbe:	9602      	str	r6, [sp, #8]
 8008dc0:	9e07      	ldr	r6, [sp, #28]
 8008dc2:	0035      	movs	r5, r6
 8008dc4:	e57e      	b.n	80088c4 <_dtoa_r+0x4f8>
 8008dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d100      	bne.n	8008dce <_dtoa_r+0xa02>
 8008dcc:	e0c8      	b.n	8008f60 <_dtoa_r+0xb94>
 8008dce:	9b06      	ldr	r3, [sp, #24]
 8008dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8008dd2:	2c00      	cmp	r4, #0
 8008dd4:	dd05      	ble.n	8008de2 <_dtoa_r+0xa16>
 8008dd6:	0029      	movs	r1, r5
 8008dd8:	0022      	movs	r2, r4
 8008dda:	0038      	movs	r0, r7
 8008ddc:	f000 fb52 	bl	8009484 <__lshift>
 8008de0:	0005      	movs	r5, r0
 8008de2:	9b07      	ldr	r3, [sp, #28]
 8008de4:	0028      	movs	r0, r5
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01f      	beq.n	8008e2a <_dtoa_r+0xa5e>
 8008dea:	0038      	movs	r0, r7
 8008dec:	6869      	ldr	r1, [r5, #4]
 8008dee:	f000 f933 	bl	8009058 <_Balloc>
 8008df2:	1e04      	subs	r4, r0, #0
 8008df4:	d10c      	bne.n	8008e10 <_dtoa_r+0xa44>
 8008df6:	0002      	movs	r2, r0
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <_dtoa_r+0xa3c>)
 8008dfa:	4904      	ldr	r1, [pc, #16]	; (8008e0c <_dtoa_r+0xa40>)
 8008dfc:	f7ff fafb 	bl	80083f6 <_dtoa_r+0x2a>
 8008e00:	40240000 	.word	0x40240000
 8008e04:	00000433 	.word	0x00000433
 8008e08:	0800a91b 	.word	0x0800a91b
 8008e0c:	000002ea 	.word	0x000002ea
 8008e10:	0029      	movs	r1, r5
 8008e12:	692b      	ldr	r3, [r5, #16]
 8008e14:	310c      	adds	r1, #12
 8008e16:	1c9a      	adds	r2, r3, #2
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	300c      	adds	r0, #12
 8008e1c:	f000 f903 	bl	8009026 <memcpy>
 8008e20:	2201      	movs	r2, #1
 8008e22:	0021      	movs	r1, r4
 8008e24:	0038      	movs	r0, r7
 8008e26:	f000 fb2d 	bl	8009484 <__lshift>
 8008e2a:	002c      	movs	r4, r5
 8008e2c:	0005      	movs	r5, r0
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	0031      	movs	r1, r6
 8008e34:	9804      	ldr	r0, [sp, #16]
 8008e36:	f7ff fa3d 	bl	80082b4 <quorem>
 8008e3a:	0003      	movs	r3, r0
 8008e3c:	0021      	movs	r1, r4
 8008e3e:	3330      	adds	r3, #48	; 0x30
 8008e40:	900e      	str	r0, [sp, #56]	; 0x38
 8008e42:	9804      	ldr	r0, [sp, #16]
 8008e44:	9306      	str	r3, [sp, #24]
 8008e46:	f000 fb8d 	bl	8009564 <__mcmp>
 8008e4a:	002a      	movs	r2, r5
 8008e4c:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e4e:	0031      	movs	r1, r6
 8008e50:	0038      	movs	r0, r7
 8008e52:	f000 fba3 	bl	800959c <__mdiff>
 8008e56:	68c3      	ldr	r3, [r0, #12]
 8008e58:	9007      	str	r0, [sp, #28]
 8008e5a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	930d      	str	r3, [sp, #52]	; 0x34
 8008e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <_dtoa_r+0xaa4>
 8008e66:	0001      	movs	r1, r0
 8008e68:	9804      	ldr	r0, [sp, #16]
 8008e6a:	f000 fb7b 	bl	8009564 <__mcmp>
 8008e6e:	900d      	str	r0, [sp, #52]	; 0x34
 8008e70:	0038      	movs	r0, r7
 8008e72:	9907      	ldr	r1, [sp, #28]
 8008e74:	f000 f934 	bl	80090e0 <_Bfree>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e7e:	4018      	ands	r0, r3
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	3301      	adds	r3, #1
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	4303      	orrs	r3, r0
 8008e8c:	d10c      	bne.n	8008ea8 <_dtoa_r+0xadc>
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	2b39      	cmp	r3, #57	; 0x39
 8008e92:	d025      	beq.n	8008ee0 <_dtoa_r+0xb14>
 8008e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dd02      	ble.n	8008ea0 <_dtoa_r+0xad4>
 8008e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e9c:	3331      	adds	r3, #49	; 0x31
 8008e9e:	9306      	str	r3, [sp, #24]
 8008ea0:	9b08      	ldr	r3, [sp, #32]
 8008ea2:	9a06      	ldr	r2, [sp, #24]
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e773      	b.n	8008d90 <_dtoa_r+0x9c4>
 8008ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	db03      	blt.n	8008eb6 <_dtoa_r+0xaea>
 8008eae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	4303      	orrs	r3, r0
 8008eb4:	d11f      	bne.n	8008ef6 <_dtoa_r+0xb2a>
 8008eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	ddf1      	ble.n	8008ea0 <_dtoa_r+0xad4>
 8008ebc:	9904      	ldr	r1, [sp, #16]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	0038      	movs	r0, r7
 8008ec2:	f000 fadf 	bl	8009484 <__lshift>
 8008ec6:	0031      	movs	r1, r6
 8008ec8:	9004      	str	r0, [sp, #16]
 8008eca:	f000 fb4b 	bl	8009564 <__mcmp>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	dc03      	bgt.n	8008eda <_dtoa_r+0xb0e>
 8008ed2:	d1e5      	bne.n	8008ea0 <_dtoa_r+0xad4>
 8008ed4:	9b06      	ldr	r3, [sp, #24]
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d5e2      	bpl.n	8008ea0 <_dtoa_r+0xad4>
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	2b39      	cmp	r3, #57	; 0x39
 8008ede:	d1dc      	bne.n	8008e9a <_dtoa_r+0xace>
 8008ee0:	2339      	movs	r3, #57	; 0x39
 8008ee2:	9a08      	ldr	r2, [sp, #32]
 8008ee4:	7013      	strb	r3, [r2, #0]
 8008ee6:	9b07      	ldr	r3, [sp, #28]
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	2a39      	cmp	r2, #57	; 0x39
 8008ef0:	d06c      	beq.n	8008fcc <_dtoa_r+0xc00>
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	e7d6      	b.n	8008ea4 <_dtoa_r+0xad8>
 8008ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dd07      	ble.n	8008f0c <_dtoa_r+0xb40>
 8008efc:	9b06      	ldr	r3, [sp, #24]
 8008efe:	2b39      	cmp	r3, #57	; 0x39
 8008f00:	d0ee      	beq.n	8008ee0 <_dtoa_r+0xb14>
 8008f02:	9b06      	ldr	r3, [sp, #24]
 8008f04:	9a08      	ldr	r2, [sp, #32]
 8008f06:	3301      	adds	r3, #1
 8008f08:	7013      	strb	r3, [r2, #0]
 8008f0a:	e741      	b.n	8008d90 <_dtoa_r+0x9c4>
 8008f0c:	9b08      	ldr	r3, [sp, #32]
 8008f0e:	9a06      	ldr	r2, [sp, #24]
 8008f10:	701a      	strb	r2, [r3, #0]
 8008f12:	2301      	movs	r3, #1
 8008f14:	9a05      	ldr	r2, [sp, #20]
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	9a08      	ldr	r2, [sp, #32]
 8008f1a:	189b      	adds	r3, r3, r2
 8008f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d03e      	beq.n	8008fa0 <_dtoa_r+0xbd4>
 8008f22:	2300      	movs	r3, #0
 8008f24:	220a      	movs	r2, #10
 8008f26:	9904      	ldr	r1, [sp, #16]
 8008f28:	0038      	movs	r0, r7
 8008f2a:	f000 f8fd 	bl	8009128 <__multadd>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9004      	str	r0, [sp, #16]
 8008f32:	220a      	movs	r2, #10
 8008f34:	0021      	movs	r1, r4
 8008f36:	0038      	movs	r0, r7
 8008f38:	42ac      	cmp	r4, r5
 8008f3a:	d106      	bne.n	8008f4a <_dtoa_r+0xb7e>
 8008f3c:	f000 f8f4 	bl	8009128 <__multadd>
 8008f40:	0004      	movs	r4, r0
 8008f42:	0005      	movs	r5, r0
 8008f44:	9b07      	ldr	r3, [sp, #28]
 8008f46:	9308      	str	r3, [sp, #32]
 8008f48:	e773      	b.n	8008e32 <_dtoa_r+0xa66>
 8008f4a:	f000 f8ed 	bl	8009128 <__multadd>
 8008f4e:	0029      	movs	r1, r5
 8008f50:	0004      	movs	r4, r0
 8008f52:	2300      	movs	r3, #0
 8008f54:	220a      	movs	r2, #10
 8008f56:	0038      	movs	r0, r7
 8008f58:	f000 f8e6 	bl	8009128 <__multadd>
 8008f5c:	0005      	movs	r5, r0
 8008f5e:	e7f1      	b.n	8008f44 <_dtoa_r+0xb78>
 8008f60:	9b06      	ldr	r3, [sp, #24]
 8008f62:	930c      	str	r3, [sp, #48]	; 0x30
 8008f64:	2400      	movs	r4, #0
 8008f66:	0031      	movs	r1, r6
 8008f68:	9804      	ldr	r0, [sp, #16]
 8008f6a:	f7ff f9a3 	bl	80082b4 <quorem>
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	3030      	adds	r0, #48	; 0x30
 8008f72:	5518      	strb	r0, [r3, r4]
 8008f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f76:	3401      	adds	r4, #1
 8008f78:	9006      	str	r0, [sp, #24]
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	dd07      	ble.n	8008f8e <_dtoa_r+0xbc2>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	220a      	movs	r2, #10
 8008f82:	0038      	movs	r0, r7
 8008f84:	9904      	ldr	r1, [sp, #16]
 8008f86:	f000 f8cf 	bl	8009128 <__multadd>
 8008f8a:	9004      	str	r0, [sp, #16]
 8008f8c:	e7eb      	b.n	8008f66 <_dtoa_r+0xb9a>
 8008f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f90:	2001      	movs	r0, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dd00      	ble.n	8008f98 <_dtoa_r+0xbcc>
 8008f96:	0018      	movs	r0, r3
 8008f98:	2400      	movs	r4, #0
 8008f9a:	9b05      	ldr	r3, [sp, #20]
 8008f9c:	181b      	adds	r3, r3, r0
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	9904      	ldr	r1, [sp, #16]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	0038      	movs	r0, r7
 8008fa6:	f000 fa6d 	bl	8009484 <__lshift>
 8008faa:	0031      	movs	r1, r6
 8008fac:	9004      	str	r0, [sp, #16]
 8008fae:	f000 fad9 	bl	8009564 <__mcmp>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	dc97      	bgt.n	8008ee6 <_dtoa_r+0xb1a>
 8008fb6:	d102      	bne.n	8008fbe <_dtoa_r+0xbf2>
 8008fb8:	9b06      	ldr	r3, [sp, #24]
 8008fba:	07db      	lsls	r3, r3, #31
 8008fbc:	d493      	bmi.n	8008ee6 <_dtoa_r+0xb1a>
 8008fbe:	9b07      	ldr	r3, [sp, #28]
 8008fc0:	9307      	str	r3, [sp, #28]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	2a30      	cmp	r2, #48	; 0x30
 8008fc8:	d0fa      	beq.n	8008fc0 <_dtoa_r+0xbf4>
 8008fca:	e6e1      	b.n	8008d90 <_dtoa_r+0x9c4>
 8008fcc:	9a05      	ldr	r2, [sp, #20]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d18a      	bne.n	8008ee8 <_dtoa_r+0xb1c>
 8008fd2:	9b02      	ldr	r3, [sp, #8]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	9302      	str	r3, [sp, #8]
 8008fd8:	2331      	movs	r3, #49	; 0x31
 8008fda:	e795      	b.n	8008f08 <_dtoa_r+0xb3c>
 8008fdc:	4b08      	ldr	r3, [pc, #32]	; (8009000 <_dtoa_r+0xc34>)
 8008fde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <_dtoa_r+0xc38>)
 8008fe4:	2a00      	cmp	r2, #0
 8008fe6:	d001      	beq.n	8008fec <_dtoa_r+0xc20>
 8008fe8:	f7ff fa3b 	bl	8008462 <_dtoa_r+0x96>
 8008fec:	f7ff fa3b 	bl	8008466 <_dtoa_r+0x9a>
 8008ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dcb6      	bgt.n	8008f64 <_dtoa_r+0xb98>
 8008ff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	dd00      	ble.n	8008ffe <_dtoa_r+0xc32>
 8008ffc:	e6b2      	b.n	8008d64 <_dtoa_r+0x998>
 8008ffe:	e7b1      	b.n	8008f64 <_dtoa_r+0xb98>
 8009000:	0800a898 	.word	0x0800a898
 8009004:	0800a8a0 	.word	0x0800a8a0

08009008 <_localeconv_r>:
 8009008:	4800      	ldr	r0, [pc, #0]	; (800900c <_localeconv_r+0x4>)
 800900a:	4770      	bx	lr
 800900c:	20000160 	.word	0x20000160

08009010 <memchr>:
 8009010:	b2c9      	uxtb	r1, r1
 8009012:	1882      	adds	r2, r0, r2
 8009014:	4290      	cmp	r0, r2
 8009016:	d101      	bne.n	800901c <memchr+0xc>
 8009018:	2000      	movs	r0, #0
 800901a:	4770      	bx	lr
 800901c:	7803      	ldrb	r3, [r0, #0]
 800901e:	428b      	cmp	r3, r1
 8009020:	d0fb      	beq.n	800901a <memchr+0xa>
 8009022:	3001      	adds	r0, #1
 8009024:	e7f6      	b.n	8009014 <memchr+0x4>

08009026 <memcpy>:
 8009026:	2300      	movs	r3, #0
 8009028:	b510      	push	{r4, lr}
 800902a:	429a      	cmp	r2, r3
 800902c:	d100      	bne.n	8009030 <memcpy+0xa>
 800902e:	bd10      	pop	{r4, pc}
 8009030:	5ccc      	ldrb	r4, [r1, r3]
 8009032:	54c4      	strb	r4, [r0, r3]
 8009034:	3301      	adds	r3, #1
 8009036:	e7f8      	b.n	800902a <memcpy+0x4>

08009038 <__malloc_lock>:
 8009038:	b510      	push	{r4, lr}
 800903a:	4802      	ldr	r0, [pc, #8]	; (8009044 <__malloc_lock+0xc>)
 800903c:	f000 fd49 	bl	8009ad2 <__retarget_lock_acquire_recursive>
 8009040:	bd10      	pop	{r4, pc}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	200004fc 	.word	0x200004fc

08009048 <__malloc_unlock>:
 8009048:	b510      	push	{r4, lr}
 800904a:	4802      	ldr	r0, [pc, #8]	; (8009054 <__malloc_unlock+0xc>)
 800904c:	f000 fd42 	bl	8009ad4 <__retarget_lock_release_recursive>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	200004fc 	.word	0x200004fc

08009058 <_Balloc>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800905c:	0006      	movs	r6, r0
 800905e:	000c      	movs	r4, r1
 8009060:	2d00      	cmp	r5, #0
 8009062:	d10e      	bne.n	8009082 <_Balloc+0x2a>
 8009064:	2010      	movs	r0, #16
 8009066:	f7fe fbbf 	bl	80077e8 <malloc>
 800906a:	1e02      	subs	r2, r0, #0
 800906c:	6270      	str	r0, [r6, #36]	; 0x24
 800906e:	d104      	bne.n	800907a <_Balloc+0x22>
 8009070:	2166      	movs	r1, #102	; 0x66
 8009072:	4b19      	ldr	r3, [pc, #100]	; (80090d8 <_Balloc+0x80>)
 8009074:	4819      	ldr	r0, [pc, #100]	; (80090dc <_Balloc+0x84>)
 8009076:	f000 fcfd 	bl	8009a74 <__assert_func>
 800907a:	6045      	str	r5, [r0, #4]
 800907c:	6085      	str	r5, [r0, #8]
 800907e:	6005      	str	r5, [r0, #0]
 8009080:	60c5      	str	r5, [r0, #12]
 8009082:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009084:	68eb      	ldr	r3, [r5, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d013      	beq.n	80090b2 <_Balloc+0x5a>
 800908a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800908c:	00a2      	lsls	r2, r4, #2
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	189b      	adds	r3, r3, r2
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	2800      	cmp	r0, #0
 8009096:	d118      	bne.n	80090ca <_Balloc+0x72>
 8009098:	2101      	movs	r1, #1
 800909a:	000d      	movs	r5, r1
 800909c:	40a5      	lsls	r5, r4
 800909e:	1d6a      	adds	r2, r5, #5
 80090a0:	0030      	movs	r0, r6
 80090a2:	0092      	lsls	r2, r2, #2
 80090a4:	f000 fb76 	bl	8009794 <_calloc_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d00c      	beq.n	80090c6 <_Balloc+0x6e>
 80090ac:	6044      	str	r4, [r0, #4]
 80090ae:	6085      	str	r5, [r0, #8]
 80090b0:	e00d      	b.n	80090ce <_Balloc+0x76>
 80090b2:	2221      	movs	r2, #33	; 0x21
 80090b4:	2104      	movs	r1, #4
 80090b6:	0030      	movs	r0, r6
 80090b8:	f000 fb6c 	bl	8009794 <_calloc_r>
 80090bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090be:	60e8      	str	r0, [r5, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e1      	bne.n	800908a <_Balloc+0x32>
 80090c6:	2000      	movs	r0, #0
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	6802      	ldr	r2, [r0, #0]
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	2300      	movs	r3, #0
 80090d0:	6103      	str	r3, [r0, #16]
 80090d2:	60c3      	str	r3, [r0, #12]
 80090d4:	e7f8      	b.n	80090c8 <_Balloc+0x70>
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	0800a8a5 	.word	0x0800a8a5
 80090dc:	0800a92c 	.word	0x0800a92c

080090e0 <_Bfree>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090e4:	0005      	movs	r5, r0
 80090e6:	000c      	movs	r4, r1
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	d10e      	bne.n	800910a <_Bfree+0x2a>
 80090ec:	2010      	movs	r0, #16
 80090ee:	f7fe fb7b 	bl	80077e8 <malloc>
 80090f2:	1e02      	subs	r2, r0, #0
 80090f4:	6268      	str	r0, [r5, #36]	; 0x24
 80090f6:	d104      	bne.n	8009102 <_Bfree+0x22>
 80090f8:	218a      	movs	r1, #138	; 0x8a
 80090fa:	4b09      	ldr	r3, [pc, #36]	; (8009120 <_Bfree+0x40>)
 80090fc:	4809      	ldr	r0, [pc, #36]	; (8009124 <_Bfree+0x44>)
 80090fe:	f000 fcb9 	bl	8009a74 <__assert_func>
 8009102:	6046      	str	r6, [r0, #4]
 8009104:	6086      	str	r6, [r0, #8]
 8009106:	6006      	str	r6, [r0, #0]
 8009108:	60c6      	str	r6, [r0, #12]
 800910a:	2c00      	cmp	r4, #0
 800910c:	d007      	beq.n	800911e <_Bfree+0x3e>
 800910e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009110:	6862      	ldr	r2, [r4, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	189b      	adds	r3, r3, r2
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	6022      	str	r2, [r4, #0]
 800911c:	601c      	str	r4, [r3, #0]
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	0800a8a5 	.word	0x0800a8a5
 8009124:	0800a92c 	.word	0x0800a92c

08009128 <__multadd>:
 8009128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800912a:	000e      	movs	r6, r1
 800912c:	9001      	str	r0, [sp, #4]
 800912e:	000c      	movs	r4, r1
 8009130:	001d      	movs	r5, r3
 8009132:	2000      	movs	r0, #0
 8009134:	690f      	ldr	r7, [r1, #16]
 8009136:	3614      	adds	r6, #20
 8009138:	6833      	ldr	r3, [r6, #0]
 800913a:	3001      	adds	r0, #1
 800913c:	b299      	uxth	r1, r3
 800913e:	4351      	muls	r1, r2
 8009140:	0c1b      	lsrs	r3, r3, #16
 8009142:	4353      	muls	r3, r2
 8009144:	1949      	adds	r1, r1, r5
 8009146:	0c0d      	lsrs	r5, r1, #16
 8009148:	195b      	adds	r3, r3, r5
 800914a:	0c1d      	lsrs	r5, r3, #16
 800914c:	b289      	uxth	r1, r1
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	185b      	adds	r3, r3, r1
 8009152:	c608      	stmia	r6!, {r3}
 8009154:	4287      	cmp	r7, r0
 8009156:	dcef      	bgt.n	8009138 <__multadd+0x10>
 8009158:	2d00      	cmp	r5, #0
 800915a:	d022      	beq.n	80091a2 <__multadd+0x7a>
 800915c:	68a3      	ldr	r3, [r4, #8]
 800915e:	42bb      	cmp	r3, r7
 8009160:	dc19      	bgt.n	8009196 <__multadd+0x6e>
 8009162:	6863      	ldr	r3, [r4, #4]
 8009164:	9801      	ldr	r0, [sp, #4]
 8009166:	1c59      	adds	r1, r3, #1
 8009168:	f7ff ff76 	bl	8009058 <_Balloc>
 800916c:	1e06      	subs	r6, r0, #0
 800916e:	d105      	bne.n	800917c <__multadd+0x54>
 8009170:	0002      	movs	r2, r0
 8009172:	21b5      	movs	r1, #181	; 0xb5
 8009174:	4b0c      	ldr	r3, [pc, #48]	; (80091a8 <__multadd+0x80>)
 8009176:	480d      	ldr	r0, [pc, #52]	; (80091ac <__multadd+0x84>)
 8009178:	f000 fc7c 	bl	8009a74 <__assert_func>
 800917c:	0021      	movs	r1, r4
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	310c      	adds	r1, #12
 8009182:	1c9a      	adds	r2, r3, #2
 8009184:	0092      	lsls	r2, r2, #2
 8009186:	300c      	adds	r0, #12
 8009188:	f7ff ff4d 	bl	8009026 <memcpy>
 800918c:	0021      	movs	r1, r4
 800918e:	9801      	ldr	r0, [sp, #4]
 8009190:	f7ff ffa6 	bl	80090e0 <_Bfree>
 8009194:	0034      	movs	r4, r6
 8009196:	1d3b      	adds	r3, r7, #4
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	18e3      	adds	r3, r4, r3
 800919c:	605d      	str	r5, [r3, #4]
 800919e:	1c7b      	adds	r3, r7, #1
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	0020      	movs	r0, r4
 80091a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	0800a91b 	.word	0x0800a91b
 80091ac:	0800a92c 	.word	0x0800a92c

080091b0 <__hi0bits>:
 80091b0:	0003      	movs	r3, r0
 80091b2:	0c02      	lsrs	r2, r0, #16
 80091b4:	2000      	movs	r0, #0
 80091b6:	4282      	cmp	r2, r0
 80091b8:	d101      	bne.n	80091be <__hi0bits+0xe>
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	3010      	adds	r0, #16
 80091be:	0e1a      	lsrs	r2, r3, #24
 80091c0:	d101      	bne.n	80091c6 <__hi0bits+0x16>
 80091c2:	3008      	adds	r0, #8
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	0f1a      	lsrs	r2, r3, #28
 80091c8:	d101      	bne.n	80091ce <__hi0bits+0x1e>
 80091ca:	3004      	adds	r0, #4
 80091cc:	011b      	lsls	r3, r3, #4
 80091ce:	0f9a      	lsrs	r2, r3, #30
 80091d0:	d101      	bne.n	80091d6 <__hi0bits+0x26>
 80091d2:	3002      	adds	r0, #2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	db03      	blt.n	80091e2 <__hi0bits+0x32>
 80091da:	3001      	adds	r0, #1
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	d400      	bmi.n	80091e2 <__hi0bits+0x32>
 80091e0:	2020      	movs	r0, #32
 80091e2:	4770      	bx	lr

080091e4 <__lo0bits>:
 80091e4:	6803      	ldr	r3, [r0, #0]
 80091e6:	0002      	movs	r2, r0
 80091e8:	2107      	movs	r1, #7
 80091ea:	0018      	movs	r0, r3
 80091ec:	4008      	ands	r0, r1
 80091ee:	420b      	tst	r3, r1
 80091f0:	d00d      	beq.n	800920e <__lo0bits+0x2a>
 80091f2:	3906      	subs	r1, #6
 80091f4:	2000      	movs	r0, #0
 80091f6:	420b      	tst	r3, r1
 80091f8:	d105      	bne.n	8009206 <__lo0bits+0x22>
 80091fa:	3002      	adds	r0, #2
 80091fc:	4203      	tst	r3, r0
 80091fe:	d003      	beq.n	8009208 <__lo0bits+0x24>
 8009200:	40cb      	lsrs	r3, r1
 8009202:	0008      	movs	r0, r1
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	4770      	bx	lr
 8009208:	089b      	lsrs	r3, r3, #2
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	e7fb      	b.n	8009206 <__lo0bits+0x22>
 800920e:	b299      	uxth	r1, r3
 8009210:	2900      	cmp	r1, #0
 8009212:	d101      	bne.n	8009218 <__lo0bits+0x34>
 8009214:	2010      	movs	r0, #16
 8009216:	0c1b      	lsrs	r3, r3, #16
 8009218:	b2d9      	uxtb	r1, r3
 800921a:	2900      	cmp	r1, #0
 800921c:	d101      	bne.n	8009222 <__lo0bits+0x3e>
 800921e:	3008      	adds	r0, #8
 8009220:	0a1b      	lsrs	r3, r3, #8
 8009222:	0719      	lsls	r1, r3, #28
 8009224:	d101      	bne.n	800922a <__lo0bits+0x46>
 8009226:	3004      	adds	r0, #4
 8009228:	091b      	lsrs	r3, r3, #4
 800922a:	0799      	lsls	r1, r3, #30
 800922c:	d101      	bne.n	8009232 <__lo0bits+0x4e>
 800922e:	3002      	adds	r0, #2
 8009230:	089b      	lsrs	r3, r3, #2
 8009232:	07d9      	lsls	r1, r3, #31
 8009234:	d4e9      	bmi.n	800920a <__lo0bits+0x26>
 8009236:	3001      	adds	r0, #1
 8009238:	085b      	lsrs	r3, r3, #1
 800923a:	d1e6      	bne.n	800920a <__lo0bits+0x26>
 800923c:	2020      	movs	r0, #32
 800923e:	e7e2      	b.n	8009206 <__lo0bits+0x22>

08009240 <__i2b>:
 8009240:	b510      	push	{r4, lr}
 8009242:	000c      	movs	r4, r1
 8009244:	2101      	movs	r1, #1
 8009246:	f7ff ff07 	bl	8009058 <_Balloc>
 800924a:	2800      	cmp	r0, #0
 800924c:	d106      	bne.n	800925c <__i2b+0x1c>
 800924e:	21a0      	movs	r1, #160	; 0xa0
 8009250:	0002      	movs	r2, r0
 8009252:	4b04      	ldr	r3, [pc, #16]	; (8009264 <__i2b+0x24>)
 8009254:	4804      	ldr	r0, [pc, #16]	; (8009268 <__i2b+0x28>)
 8009256:	0049      	lsls	r1, r1, #1
 8009258:	f000 fc0c 	bl	8009a74 <__assert_func>
 800925c:	2301      	movs	r3, #1
 800925e:	6144      	str	r4, [r0, #20]
 8009260:	6103      	str	r3, [r0, #16]
 8009262:	bd10      	pop	{r4, pc}
 8009264:	0800a91b 	.word	0x0800a91b
 8009268:	0800a92c 	.word	0x0800a92c

0800926c <__multiply>:
 800926c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800926e:	690b      	ldr	r3, [r1, #16]
 8009270:	0014      	movs	r4, r2
 8009272:	6912      	ldr	r2, [r2, #16]
 8009274:	000d      	movs	r5, r1
 8009276:	b089      	sub	sp, #36	; 0x24
 8009278:	4293      	cmp	r3, r2
 800927a:	da01      	bge.n	8009280 <__multiply+0x14>
 800927c:	0025      	movs	r5, r4
 800927e:	000c      	movs	r4, r1
 8009280:	692f      	ldr	r7, [r5, #16]
 8009282:	6926      	ldr	r6, [r4, #16]
 8009284:	6869      	ldr	r1, [r5, #4]
 8009286:	19bb      	adds	r3, r7, r6
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	68ab      	ldr	r3, [r5, #8]
 800928c:	19ba      	adds	r2, r7, r6
 800928e:	4293      	cmp	r3, r2
 8009290:	da00      	bge.n	8009294 <__multiply+0x28>
 8009292:	3101      	adds	r1, #1
 8009294:	f7ff fee0 	bl	8009058 <_Balloc>
 8009298:	9001      	str	r0, [sp, #4]
 800929a:	2800      	cmp	r0, #0
 800929c:	d106      	bne.n	80092ac <__multiply+0x40>
 800929e:	215e      	movs	r1, #94	; 0x5e
 80092a0:	0002      	movs	r2, r0
 80092a2:	4b48      	ldr	r3, [pc, #288]	; (80093c4 <__multiply+0x158>)
 80092a4:	4848      	ldr	r0, [pc, #288]	; (80093c8 <__multiply+0x15c>)
 80092a6:	31ff      	adds	r1, #255	; 0xff
 80092a8:	f000 fbe4 	bl	8009a74 <__assert_func>
 80092ac:	9b01      	ldr	r3, [sp, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	3314      	adds	r3, #20
 80092b2:	469c      	mov	ip, r3
 80092b4:	19bb      	adds	r3, r7, r6
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4463      	add	r3, ip
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	4663      	mov	r3, ip
 80092be:	9903      	ldr	r1, [sp, #12]
 80092c0:	428b      	cmp	r3, r1
 80092c2:	d32c      	bcc.n	800931e <__multiply+0xb2>
 80092c4:	002b      	movs	r3, r5
 80092c6:	0022      	movs	r2, r4
 80092c8:	3314      	adds	r3, #20
 80092ca:	00bf      	lsls	r7, r7, #2
 80092cc:	3214      	adds	r2, #20
 80092ce:	9306      	str	r3, [sp, #24]
 80092d0:	00b6      	lsls	r6, r6, #2
 80092d2:	19db      	adds	r3, r3, r7
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	1993      	adds	r3, r2, r6
 80092d8:	9307      	str	r3, [sp, #28]
 80092da:	2304      	movs	r3, #4
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	002b      	movs	r3, r5
 80092e0:	9904      	ldr	r1, [sp, #16]
 80092e2:	3315      	adds	r3, #21
 80092e4:	9200      	str	r2, [sp, #0]
 80092e6:	4299      	cmp	r1, r3
 80092e8:	d305      	bcc.n	80092f6 <__multiply+0x8a>
 80092ea:	1b4b      	subs	r3, r1, r5
 80092ec:	3b15      	subs	r3, #21
 80092ee:	089b      	lsrs	r3, r3, #2
 80092f0:	3301      	adds	r3, #1
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	9a00      	ldr	r2, [sp, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d311      	bcc.n	8009322 <__multiply+0xb6>
 80092fe:	9b02      	ldr	r3, [sp, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	dd06      	ble.n	8009312 <__multiply+0xa6>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	3b04      	subs	r3, #4
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d054      	beq.n	80093bc <__multiply+0x150>
 8009312:	9b01      	ldr	r3, [sp, #4]
 8009314:	9a02      	ldr	r2, [sp, #8]
 8009316:	0018      	movs	r0, r3
 8009318:	611a      	str	r2, [r3, #16]
 800931a:	b009      	add	sp, #36	; 0x24
 800931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931e:	c304      	stmia	r3!, {r2}
 8009320:	e7cd      	b.n	80092be <__multiply+0x52>
 8009322:	9b00      	ldr	r3, [sp, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	b298      	uxth	r0, r3
 8009328:	2800      	cmp	r0, #0
 800932a:	d01c      	beq.n	8009366 <__multiply+0xfa>
 800932c:	4667      	mov	r7, ip
 800932e:	2400      	movs	r4, #0
 8009330:	9e06      	ldr	r6, [sp, #24]
 8009332:	ce02      	ldmia	r6!, {r1}
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	b28b      	uxth	r3, r1
 8009338:	4343      	muls	r3, r0
 800933a:	0c09      	lsrs	r1, r1, #16
 800933c:	4341      	muls	r1, r0
 800933e:	b292      	uxth	r2, r2
 8009340:	189b      	adds	r3, r3, r2
 8009342:	191b      	adds	r3, r3, r4
 8009344:	000c      	movs	r4, r1
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	0c11      	lsrs	r1, r2, #16
 800934a:	1861      	adds	r1, r4, r1
 800934c:	0c1c      	lsrs	r4, r3, #16
 800934e:	1909      	adds	r1, r1, r4
 8009350:	0c0c      	lsrs	r4, r1, #16
 8009352:	b29b      	uxth	r3, r3
 8009354:	0409      	lsls	r1, r1, #16
 8009356:	430b      	orrs	r3, r1
 8009358:	c708      	stmia	r7!, {r3}
 800935a:	9b04      	ldr	r3, [sp, #16]
 800935c:	42b3      	cmp	r3, r6
 800935e:	d8e8      	bhi.n	8009332 <__multiply+0xc6>
 8009360:	4663      	mov	r3, ip
 8009362:	9a05      	ldr	r2, [sp, #20]
 8009364:	509c      	str	r4, [r3, r2]
 8009366:	9b00      	ldr	r3, [sp, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	0c1e      	lsrs	r6, r3, #16
 800936c:	d020      	beq.n	80093b0 <__multiply+0x144>
 800936e:	4663      	mov	r3, ip
 8009370:	002c      	movs	r4, r5
 8009372:	4660      	mov	r0, ip
 8009374:	2700      	movs	r7, #0
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3414      	adds	r4, #20
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	b291      	uxth	r1, r2
 8009380:	4371      	muls	r1, r6
 8009382:	6802      	ldr	r2, [r0, #0]
 8009384:	0c12      	lsrs	r2, r2, #16
 8009386:	1889      	adds	r1, r1, r2
 8009388:	19cf      	adds	r7, r1, r7
 800938a:	0439      	lsls	r1, r7, #16
 800938c:	430b      	orrs	r3, r1
 800938e:	6003      	str	r3, [r0, #0]
 8009390:	cc02      	ldmia	r4!, {r1}
 8009392:	6843      	ldr	r3, [r0, #4]
 8009394:	0c09      	lsrs	r1, r1, #16
 8009396:	4371      	muls	r1, r6
 8009398:	b29b      	uxth	r3, r3
 800939a:	0c3f      	lsrs	r7, r7, #16
 800939c:	18cb      	adds	r3, r1, r3
 800939e:	9a04      	ldr	r2, [sp, #16]
 80093a0:	19db      	adds	r3, r3, r7
 80093a2:	0c1f      	lsrs	r7, r3, #16
 80093a4:	3004      	adds	r0, #4
 80093a6:	42a2      	cmp	r2, r4
 80093a8:	d8e7      	bhi.n	800937a <__multiply+0x10e>
 80093aa:	4662      	mov	r2, ip
 80093ac:	9905      	ldr	r1, [sp, #20]
 80093ae:	5053      	str	r3, [r2, r1]
 80093b0:	9b00      	ldr	r3, [sp, #0]
 80093b2:	3304      	adds	r3, #4
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	2304      	movs	r3, #4
 80093b8:	449c      	add	ip, r3
 80093ba:	e79c      	b.n	80092f6 <__multiply+0x8a>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	3b01      	subs	r3, #1
 80093c0:	9302      	str	r3, [sp, #8]
 80093c2:	e79c      	b.n	80092fe <__multiply+0x92>
 80093c4:	0800a91b 	.word	0x0800a91b
 80093c8:	0800a92c 	.word	0x0800a92c

080093cc <__pow5mult>:
 80093cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ce:	2303      	movs	r3, #3
 80093d0:	0015      	movs	r5, r2
 80093d2:	0007      	movs	r7, r0
 80093d4:	000e      	movs	r6, r1
 80093d6:	401a      	ands	r2, r3
 80093d8:	421d      	tst	r5, r3
 80093da:	d008      	beq.n	80093ee <__pow5mult+0x22>
 80093dc:	4925      	ldr	r1, [pc, #148]	; (8009474 <__pow5mult+0xa8>)
 80093de:	3a01      	subs	r2, #1
 80093e0:	0092      	lsls	r2, r2, #2
 80093e2:	5852      	ldr	r2, [r2, r1]
 80093e4:	2300      	movs	r3, #0
 80093e6:	0031      	movs	r1, r6
 80093e8:	f7ff fe9e 	bl	8009128 <__multadd>
 80093ec:	0006      	movs	r6, r0
 80093ee:	10ad      	asrs	r5, r5, #2
 80093f0:	d03d      	beq.n	800946e <__pow5mult+0xa2>
 80093f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80093f4:	2c00      	cmp	r4, #0
 80093f6:	d10f      	bne.n	8009418 <__pow5mult+0x4c>
 80093f8:	2010      	movs	r0, #16
 80093fa:	f7fe f9f5 	bl	80077e8 <malloc>
 80093fe:	1e02      	subs	r2, r0, #0
 8009400:	6278      	str	r0, [r7, #36]	; 0x24
 8009402:	d105      	bne.n	8009410 <__pow5mult+0x44>
 8009404:	21d7      	movs	r1, #215	; 0xd7
 8009406:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <__pow5mult+0xac>)
 8009408:	481c      	ldr	r0, [pc, #112]	; (800947c <__pow5mult+0xb0>)
 800940a:	0049      	lsls	r1, r1, #1
 800940c:	f000 fb32 	bl	8009a74 <__assert_func>
 8009410:	6044      	str	r4, [r0, #4]
 8009412:	6084      	str	r4, [r0, #8]
 8009414:	6004      	str	r4, [r0, #0]
 8009416:	60c4      	str	r4, [r0, #12]
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	689c      	ldr	r4, [r3, #8]
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	2c00      	cmp	r4, #0
 8009420:	d108      	bne.n	8009434 <__pow5mult+0x68>
 8009422:	0038      	movs	r0, r7
 8009424:	4916      	ldr	r1, [pc, #88]	; (8009480 <__pow5mult+0xb4>)
 8009426:	f7ff ff0b 	bl	8009240 <__i2b>
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	0004      	movs	r4, r0
 800942e:	6098      	str	r0, [r3, #8]
 8009430:	2300      	movs	r3, #0
 8009432:	6003      	str	r3, [r0, #0]
 8009434:	2301      	movs	r3, #1
 8009436:	421d      	tst	r5, r3
 8009438:	d00a      	beq.n	8009450 <__pow5mult+0x84>
 800943a:	0031      	movs	r1, r6
 800943c:	0022      	movs	r2, r4
 800943e:	0038      	movs	r0, r7
 8009440:	f7ff ff14 	bl	800926c <__multiply>
 8009444:	0031      	movs	r1, r6
 8009446:	9001      	str	r0, [sp, #4]
 8009448:	0038      	movs	r0, r7
 800944a:	f7ff fe49 	bl	80090e0 <_Bfree>
 800944e:	9e01      	ldr	r6, [sp, #4]
 8009450:	106d      	asrs	r5, r5, #1
 8009452:	d00c      	beq.n	800946e <__pow5mult+0xa2>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	2800      	cmp	r0, #0
 8009458:	d107      	bne.n	800946a <__pow5mult+0x9e>
 800945a:	0022      	movs	r2, r4
 800945c:	0021      	movs	r1, r4
 800945e:	0038      	movs	r0, r7
 8009460:	f7ff ff04 	bl	800926c <__multiply>
 8009464:	2300      	movs	r3, #0
 8009466:	6020      	str	r0, [r4, #0]
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	0004      	movs	r4, r0
 800946c:	e7e2      	b.n	8009434 <__pow5mult+0x68>
 800946e:	0030      	movs	r0, r6
 8009470:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009472:	46c0      	nop			; (mov r8, r8)
 8009474:	0800aa80 	.word	0x0800aa80
 8009478:	0800a8a5 	.word	0x0800a8a5
 800947c:	0800a92c 	.word	0x0800a92c
 8009480:	00000271 	.word	0x00000271

08009484 <__lshift>:
 8009484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009486:	000c      	movs	r4, r1
 8009488:	0017      	movs	r7, r2
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	1155      	asrs	r5, r2, #5
 800948e:	b087      	sub	sp, #28
 8009490:	18eb      	adds	r3, r5, r3
 8009492:	9302      	str	r3, [sp, #8]
 8009494:	3301      	adds	r3, #1
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	6849      	ldr	r1, [r1, #4]
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	9004      	str	r0, [sp, #16]
 800949e:	9a01      	ldr	r2, [sp, #4]
 80094a0:	4293      	cmp	r3, r2
 80094a2:	db11      	blt.n	80094c8 <__lshift+0x44>
 80094a4:	9804      	ldr	r0, [sp, #16]
 80094a6:	f7ff fdd7 	bl	8009058 <_Balloc>
 80094aa:	0002      	movs	r2, r0
 80094ac:	2300      	movs	r3, #0
 80094ae:	3214      	adds	r2, #20
 80094b0:	0006      	movs	r6, r0
 80094b2:	0011      	movs	r1, r2
 80094b4:	9203      	str	r2, [sp, #12]
 80094b6:	4298      	cmp	r0, r3
 80094b8:	d10d      	bne.n	80094d6 <__lshift+0x52>
 80094ba:	21da      	movs	r1, #218	; 0xda
 80094bc:	0002      	movs	r2, r0
 80094be:	4b27      	ldr	r3, [pc, #156]	; (800955c <__lshift+0xd8>)
 80094c0:	4827      	ldr	r0, [pc, #156]	; (8009560 <__lshift+0xdc>)
 80094c2:	31ff      	adds	r1, #255	; 0xff
 80094c4:	f000 fad6 	bl	8009a74 <__assert_func>
 80094c8:	3101      	adds	r1, #1
 80094ca:	005b      	lsls	r3, r3, #1
 80094cc:	e7e7      	b.n	800949e <__lshift+0x1a>
 80094ce:	2200      	movs	r2, #0
 80094d0:	0098      	lsls	r0, r3, #2
 80094d2:	500a      	str	r2, [r1, r0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	42ab      	cmp	r3, r5
 80094d8:	dbf9      	blt.n	80094ce <__lshift+0x4a>
 80094da:	43eb      	mvns	r3, r5
 80094dc:	17db      	asrs	r3, r3, #31
 80094de:	401d      	ands	r5, r3
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	00ad      	lsls	r5, r5, #2
 80094e4:	211f      	movs	r1, #31
 80094e6:	0038      	movs	r0, r7
 80094e8:	195d      	adds	r5, r3, r5
 80094ea:	0023      	movs	r3, r4
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	3314      	adds	r3, #20
 80094f0:	0092      	lsls	r2, r2, #2
 80094f2:	4008      	ands	r0, r1
 80094f4:	4684      	mov	ip, r0
 80094f6:	189a      	adds	r2, r3, r2
 80094f8:	420f      	tst	r7, r1
 80094fa:	d02a      	beq.n	8009552 <__lshift+0xce>
 80094fc:	3101      	adds	r1, #1
 80094fe:	1a09      	subs	r1, r1, r0
 8009500:	9105      	str	r1, [sp, #20]
 8009502:	2100      	movs	r1, #0
 8009504:	9503      	str	r5, [sp, #12]
 8009506:	4667      	mov	r7, ip
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	40b8      	lsls	r0, r7
 800950c:	4301      	orrs	r1, r0
 800950e:	9803      	ldr	r0, [sp, #12]
 8009510:	c002      	stmia	r0!, {r1}
 8009512:	cb02      	ldmia	r3!, {r1}
 8009514:	9003      	str	r0, [sp, #12]
 8009516:	9805      	ldr	r0, [sp, #20]
 8009518:	40c1      	lsrs	r1, r0
 800951a:	429a      	cmp	r2, r3
 800951c:	d8f3      	bhi.n	8009506 <__lshift+0x82>
 800951e:	0020      	movs	r0, r4
 8009520:	3015      	adds	r0, #21
 8009522:	2304      	movs	r3, #4
 8009524:	4282      	cmp	r2, r0
 8009526:	d304      	bcc.n	8009532 <__lshift+0xae>
 8009528:	1b13      	subs	r3, r2, r4
 800952a:	3b15      	subs	r3, #21
 800952c:	089b      	lsrs	r3, r3, #2
 800952e:	3301      	adds	r3, #1
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	50e9      	str	r1, [r5, r3]
 8009534:	2900      	cmp	r1, #0
 8009536:	d002      	beq.n	800953e <__lshift+0xba>
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	3302      	adds	r3, #2
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	9804      	ldr	r0, [sp, #16]
 8009542:	3b01      	subs	r3, #1
 8009544:	0021      	movs	r1, r4
 8009546:	6133      	str	r3, [r6, #16]
 8009548:	f7ff fdca 	bl	80090e0 <_Bfree>
 800954c:	0030      	movs	r0, r6
 800954e:	b007      	add	sp, #28
 8009550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009552:	cb02      	ldmia	r3!, {r1}
 8009554:	c502      	stmia	r5!, {r1}
 8009556:	429a      	cmp	r2, r3
 8009558:	d8fb      	bhi.n	8009552 <__lshift+0xce>
 800955a:	e7f0      	b.n	800953e <__lshift+0xba>
 800955c:	0800a91b 	.word	0x0800a91b
 8009560:	0800a92c 	.word	0x0800a92c

08009564 <__mcmp>:
 8009564:	6902      	ldr	r2, [r0, #16]
 8009566:	690b      	ldr	r3, [r1, #16]
 8009568:	b530      	push	{r4, r5, lr}
 800956a:	0004      	movs	r4, r0
 800956c:	1ad0      	subs	r0, r2, r3
 800956e:	429a      	cmp	r2, r3
 8009570:	d10d      	bne.n	800958e <__mcmp+0x2a>
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	3414      	adds	r4, #20
 8009576:	3114      	adds	r1, #20
 8009578:	18e2      	adds	r2, r4, r3
 800957a:	18c9      	adds	r1, r1, r3
 800957c:	3a04      	subs	r2, #4
 800957e:	3904      	subs	r1, #4
 8009580:	6815      	ldr	r5, [r2, #0]
 8009582:	680b      	ldr	r3, [r1, #0]
 8009584:	429d      	cmp	r5, r3
 8009586:	d003      	beq.n	8009590 <__mcmp+0x2c>
 8009588:	2001      	movs	r0, #1
 800958a:	429d      	cmp	r5, r3
 800958c:	d303      	bcc.n	8009596 <__mcmp+0x32>
 800958e:	bd30      	pop	{r4, r5, pc}
 8009590:	4294      	cmp	r4, r2
 8009592:	d3f3      	bcc.n	800957c <__mcmp+0x18>
 8009594:	e7fb      	b.n	800958e <__mcmp+0x2a>
 8009596:	4240      	negs	r0, r0
 8009598:	e7f9      	b.n	800958e <__mcmp+0x2a>
	...

0800959c <__mdiff>:
 800959c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959e:	000e      	movs	r6, r1
 80095a0:	0007      	movs	r7, r0
 80095a2:	0011      	movs	r1, r2
 80095a4:	0030      	movs	r0, r6
 80095a6:	b087      	sub	sp, #28
 80095a8:	0014      	movs	r4, r2
 80095aa:	f7ff ffdb 	bl	8009564 <__mcmp>
 80095ae:	1e05      	subs	r5, r0, #0
 80095b0:	d110      	bne.n	80095d4 <__mdiff+0x38>
 80095b2:	0001      	movs	r1, r0
 80095b4:	0038      	movs	r0, r7
 80095b6:	f7ff fd4f 	bl	8009058 <_Balloc>
 80095ba:	1e02      	subs	r2, r0, #0
 80095bc:	d104      	bne.n	80095c8 <__mdiff+0x2c>
 80095be:	4b40      	ldr	r3, [pc, #256]	; (80096c0 <__mdiff+0x124>)
 80095c0:	4940      	ldr	r1, [pc, #256]	; (80096c4 <__mdiff+0x128>)
 80095c2:	4841      	ldr	r0, [pc, #260]	; (80096c8 <__mdiff+0x12c>)
 80095c4:	f000 fa56 	bl	8009a74 <__assert_func>
 80095c8:	2301      	movs	r3, #1
 80095ca:	6145      	str	r5, [r0, #20]
 80095cc:	6103      	str	r3, [r0, #16]
 80095ce:	0010      	movs	r0, r2
 80095d0:	b007      	add	sp, #28
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d4:	2301      	movs	r3, #1
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	2800      	cmp	r0, #0
 80095da:	db04      	blt.n	80095e6 <__mdiff+0x4a>
 80095dc:	0023      	movs	r3, r4
 80095de:	0034      	movs	r4, r6
 80095e0:	001e      	movs	r6, r3
 80095e2:	2300      	movs	r3, #0
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	0038      	movs	r0, r7
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	f7ff fd35 	bl	8009058 <_Balloc>
 80095ee:	1e02      	subs	r2, r0, #0
 80095f0:	d103      	bne.n	80095fa <__mdiff+0x5e>
 80095f2:	2190      	movs	r1, #144	; 0x90
 80095f4:	4b32      	ldr	r3, [pc, #200]	; (80096c0 <__mdiff+0x124>)
 80095f6:	0089      	lsls	r1, r1, #2
 80095f8:	e7e3      	b.n	80095c2 <__mdiff+0x26>
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	2700      	movs	r7, #0
 80095fe:	60c3      	str	r3, [r0, #12]
 8009600:	6920      	ldr	r0, [r4, #16]
 8009602:	3414      	adds	r4, #20
 8009604:	9401      	str	r4, [sp, #4]
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	0084      	lsls	r4, r0, #2
 800960a:	191b      	adds	r3, r3, r4
 800960c:	0034      	movs	r4, r6
 800960e:	9302      	str	r3, [sp, #8]
 8009610:	6933      	ldr	r3, [r6, #16]
 8009612:	3414      	adds	r4, #20
 8009614:	0099      	lsls	r1, r3, #2
 8009616:	1863      	adds	r3, r4, r1
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	0013      	movs	r3, r2
 800961c:	3314      	adds	r3, #20
 800961e:	469c      	mov	ip, r3
 8009620:	9305      	str	r3, [sp, #20]
 8009622:	9b01      	ldr	r3, [sp, #4]
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	cc02      	ldmia	r4!, {r1}
 800962a:	cb20      	ldmia	r3!, {r5}
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	b2ab      	uxth	r3, r5
 8009630:	19df      	adds	r7, r3, r7
 8009632:	b28b      	uxth	r3, r1
 8009634:	1afb      	subs	r3, r7, r3
 8009636:	0c2d      	lsrs	r5, r5, #16
 8009638:	0c09      	lsrs	r1, r1, #16
 800963a:	1a69      	subs	r1, r5, r1
 800963c:	141d      	asrs	r5, r3, #16
 800963e:	1949      	adds	r1, r1, r5
 8009640:	140f      	asrs	r7, r1, #16
 8009642:	b29b      	uxth	r3, r3
 8009644:	0409      	lsls	r1, r1, #16
 8009646:	430b      	orrs	r3, r1
 8009648:	4661      	mov	r1, ip
 800964a:	c108      	stmia	r1!, {r3}
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	468c      	mov	ip, r1
 8009650:	42a3      	cmp	r3, r4
 8009652:	d8e8      	bhi.n	8009626 <__mdiff+0x8a>
 8009654:	0031      	movs	r1, r6
 8009656:	9c03      	ldr	r4, [sp, #12]
 8009658:	3115      	adds	r1, #21
 800965a:	2304      	movs	r3, #4
 800965c:	428c      	cmp	r4, r1
 800965e:	d304      	bcc.n	800966a <__mdiff+0xce>
 8009660:	1ba3      	subs	r3, r4, r6
 8009662:	3b15      	subs	r3, #21
 8009664:	089b      	lsrs	r3, r3, #2
 8009666:	3301      	adds	r3, #1
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	9901      	ldr	r1, [sp, #4]
 800966c:	18cc      	adds	r4, r1, r3
 800966e:	9905      	ldr	r1, [sp, #20]
 8009670:	0026      	movs	r6, r4
 8009672:	18cb      	adds	r3, r1, r3
 8009674:	469c      	mov	ip, r3
 8009676:	9902      	ldr	r1, [sp, #8]
 8009678:	428e      	cmp	r6, r1
 800967a:	d310      	bcc.n	800969e <__mdiff+0x102>
 800967c:	9e02      	ldr	r6, [sp, #8]
 800967e:	1ee5      	subs	r5, r4, #3
 8009680:	2100      	movs	r1, #0
 8009682:	42ae      	cmp	r6, r5
 8009684:	d304      	bcc.n	8009690 <__mdiff+0xf4>
 8009686:	0031      	movs	r1, r6
 8009688:	3103      	adds	r1, #3
 800968a:	1b09      	subs	r1, r1, r4
 800968c:	0889      	lsrs	r1, r1, #2
 800968e:	0089      	lsls	r1, r1, #2
 8009690:	185b      	adds	r3, r3, r1
 8009692:	3b04      	subs	r3, #4
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	2900      	cmp	r1, #0
 8009698:	d00f      	beq.n	80096ba <__mdiff+0x11e>
 800969a:	6110      	str	r0, [r2, #16]
 800969c:	e797      	b.n	80095ce <__mdiff+0x32>
 800969e:	ce02      	ldmia	r6!, {r1}
 80096a0:	b28d      	uxth	r5, r1
 80096a2:	19ed      	adds	r5, r5, r7
 80096a4:	0c0f      	lsrs	r7, r1, #16
 80096a6:	1429      	asrs	r1, r5, #16
 80096a8:	1879      	adds	r1, r7, r1
 80096aa:	140f      	asrs	r7, r1, #16
 80096ac:	b2ad      	uxth	r5, r5
 80096ae:	0409      	lsls	r1, r1, #16
 80096b0:	430d      	orrs	r5, r1
 80096b2:	4661      	mov	r1, ip
 80096b4:	c120      	stmia	r1!, {r5}
 80096b6:	468c      	mov	ip, r1
 80096b8:	e7dd      	b.n	8009676 <__mdiff+0xda>
 80096ba:	3801      	subs	r0, #1
 80096bc:	e7e9      	b.n	8009692 <__mdiff+0xf6>
 80096be:	46c0      	nop			; (mov r8, r8)
 80096c0:	0800a91b 	.word	0x0800a91b
 80096c4:	00000232 	.word	0x00000232
 80096c8:	0800a92c 	.word	0x0800a92c

080096cc <__d2b>:
 80096cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ce:	2101      	movs	r1, #1
 80096d0:	0014      	movs	r4, r2
 80096d2:	001e      	movs	r6, r3
 80096d4:	9f08      	ldr	r7, [sp, #32]
 80096d6:	f7ff fcbf 	bl	8009058 <_Balloc>
 80096da:	1e05      	subs	r5, r0, #0
 80096dc:	d105      	bne.n	80096ea <__d2b+0x1e>
 80096de:	0002      	movs	r2, r0
 80096e0:	4b26      	ldr	r3, [pc, #152]	; (800977c <__d2b+0xb0>)
 80096e2:	4927      	ldr	r1, [pc, #156]	; (8009780 <__d2b+0xb4>)
 80096e4:	4827      	ldr	r0, [pc, #156]	; (8009784 <__d2b+0xb8>)
 80096e6:	f000 f9c5 	bl	8009a74 <__assert_func>
 80096ea:	0333      	lsls	r3, r6, #12
 80096ec:	0076      	lsls	r6, r6, #1
 80096ee:	0b1b      	lsrs	r3, r3, #12
 80096f0:	0d76      	lsrs	r6, r6, #21
 80096f2:	d124      	bne.n	800973e <__d2b+0x72>
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	2c00      	cmp	r4, #0
 80096f8:	d027      	beq.n	800974a <__d2b+0x7e>
 80096fa:	4668      	mov	r0, sp
 80096fc:	9400      	str	r4, [sp, #0]
 80096fe:	f7ff fd71 	bl	80091e4 <__lo0bits>
 8009702:	9c00      	ldr	r4, [sp, #0]
 8009704:	2800      	cmp	r0, #0
 8009706:	d01e      	beq.n	8009746 <__d2b+0x7a>
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	2120      	movs	r1, #32
 800970c:	001a      	movs	r2, r3
 800970e:	1a09      	subs	r1, r1, r0
 8009710:	408a      	lsls	r2, r1
 8009712:	40c3      	lsrs	r3, r0
 8009714:	4322      	orrs	r2, r4
 8009716:	616a      	str	r2, [r5, #20]
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	9c01      	ldr	r4, [sp, #4]
 800971c:	61ac      	str	r4, [r5, #24]
 800971e:	1e63      	subs	r3, r4, #1
 8009720:	419c      	sbcs	r4, r3
 8009722:	3401      	adds	r4, #1
 8009724:	612c      	str	r4, [r5, #16]
 8009726:	2e00      	cmp	r6, #0
 8009728:	d018      	beq.n	800975c <__d2b+0x90>
 800972a:	4b17      	ldr	r3, [pc, #92]	; (8009788 <__d2b+0xbc>)
 800972c:	18f6      	adds	r6, r6, r3
 800972e:	2335      	movs	r3, #53	; 0x35
 8009730:	1836      	adds	r6, r6, r0
 8009732:	1a18      	subs	r0, r3, r0
 8009734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009736:	603e      	str	r6, [r7, #0]
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	0028      	movs	r0, r5
 800973c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800973e:	2280      	movs	r2, #128	; 0x80
 8009740:	0352      	lsls	r2, r2, #13
 8009742:	4313      	orrs	r3, r2
 8009744:	e7d6      	b.n	80096f4 <__d2b+0x28>
 8009746:	616c      	str	r4, [r5, #20]
 8009748:	e7e7      	b.n	800971a <__d2b+0x4e>
 800974a:	a801      	add	r0, sp, #4
 800974c:	f7ff fd4a 	bl	80091e4 <__lo0bits>
 8009750:	2401      	movs	r4, #1
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	612c      	str	r4, [r5, #16]
 8009756:	616b      	str	r3, [r5, #20]
 8009758:	3020      	adds	r0, #32
 800975a:	e7e4      	b.n	8009726 <__d2b+0x5a>
 800975c:	4b0b      	ldr	r3, [pc, #44]	; (800978c <__d2b+0xc0>)
 800975e:	18c0      	adds	r0, r0, r3
 8009760:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <__d2b+0xc4>)
 8009762:	6038      	str	r0, [r7, #0]
 8009764:	18e3      	adds	r3, r4, r3
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	18eb      	adds	r3, r5, r3
 800976a:	6958      	ldr	r0, [r3, #20]
 800976c:	f7ff fd20 	bl	80091b0 <__hi0bits>
 8009770:	0164      	lsls	r4, r4, #5
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	1a24      	subs	r4, r4, r0
 8009776:	601c      	str	r4, [r3, #0]
 8009778:	e7df      	b.n	800973a <__d2b+0x6e>
 800977a:	46c0      	nop			; (mov r8, r8)
 800977c:	0800a91b 	.word	0x0800a91b
 8009780:	0000030a 	.word	0x0000030a
 8009784:	0800a92c 	.word	0x0800a92c
 8009788:	fffffbcd 	.word	0xfffffbcd
 800978c:	fffffbce 	.word	0xfffffbce
 8009790:	3fffffff 	.word	0x3fffffff

08009794 <_calloc_r>:
 8009794:	434a      	muls	r2, r1
 8009796:	b570      	push	{r4, r5, r6, lr}
 8009798:	0011      	movs	r1, r2
 800979a:	0015      	movs	r5, r2
 800979c:	f7fe f880 	bl	80078a0 <_malloc_r>
 80097a0:	1e04      	subs	r4, r0, #0
 80097a2:	d003      	beq.n	80097ac <_calloc_r+0x18>
 80097a4:	002a      	movs	r2, r5
 80097a6:	2100      	movs	r1, #0
 80097a8:	f7fe f828 	bl	80077fc <memset>
 80097ac:	0020      	movs	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <__ssputs_r>:
 80097b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097b2:	688e      	ldr	r6, [r1, #8]
 80097b4:	b085      	sub	sp, #20
 80097b6:	0007      	movs	r7, r0
 80097b8:	000c      	movs	r4, r1
 80097ba:	9203      	str	r2, [sp, #12]
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	429e      	cmp	r6, r3
 80097c0:	d83c      	bhi.n	800983c <__ssputs_r+0x8c>
 80097c2:	2390      	movs	r3, #144	; 0x90
 80097c4:	898a      	ldrh	r2, [r1, #12]
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	421a      	tst	r2, r3
 80097ca:	d034      	beq.n	8009836 <__ssputs_r+0x86>
 80097cc:	2503      	movs	r5, #3
 80097ce:	6909      	ldr	r1, [r1, #16]
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	1a5b      	subs	r3, r3, r1
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	6963      	ldr	r3, [r4, #20]
 80097d8:	9802      	ldr	r0, [sp, #8]
 80097da:	435d      	muls	r5, r3
 80097dc:	0feb      	lsrs	r3, r5, #31
 80097de:	195d      	adds	r5, r3, r5
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	106d      	asrs	r5, r5, #1
 80097e4:	3301      	adds	r3, #1
 80097e6:	181b      	adds	r3, r3, r0
 80097e8:	42ab      	cmp	r3, r5
 80097ea:	d900      	bls.n	80097ee <__ssputs_r+0x3e>
 80097ec:	001d      	movs	r5, r3
 80097ee:	0553      	lsls	r3, r2, #21
 80097f0:	d532      	bpl.n	8009858 <__ssputs_r+0xa8>
 80097f2:	0029      	movs	r1, r5
 80097f4:	0038      	movs	r0, r7
 80097f6:	f7fe f853 	bl	80078a0 <_malloc_r>
 80097fa:	1e06      	subs	r6, r0, #0
 80097fc:	d109      	bne.n	8009812 <__ssputs_r+0x62>
 80097fe:	230c      	movs	r3, #12
 8009800:	603b      	str	r3, [r7, #0]
 8009802:	2340      	movs	r3, #64	; 0x40
 8009804:	2001      	movs	r0, #1
 8009806:	89a2      	ldrh	r2, [r4, #12]
 8009808:	4240      	negs	r0, r0
 800980a:	4313      	orrs	r3, r2
 800980c:	81a3      	strh	r3, [r4, #12]
 800980e:	b005      	add	sp, #20
 8009810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009812:	9a02      	ldr	r2, [sp, #8]
 8009814:	6921      	ldr	r1, [r4, #16]
 8009816:	f7ff fc06 	bl	8009026 <memcpy>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	4a14      	ldr	r2, [pc, #80]	; (8009870 <__ssputs_r+0xc0>)
 800981e:	401a      	ands	r2, r3
 8009820:	2380      	movs	r3, #128	; 0x80
 8009822:	4313      	orrs	r3, r2
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	9b02      	ldr	r3, [sp, #8]
 8009828:	6126      	str	r6, [r4, #16]
 800982a:	18f6      	adds	r6, r6, r3
 800982c:	6026      	str	r6, [r4, #0]
 800982e:	6165      	str	r5, [r4, #20]
 8009830:	9e01      	ldr	r6, [sp, #4]
 8009832:	1aed      	subs	r5, r5, r3
 8009834:	60a5      	str	r5, [r4, #8]
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	429e      	cmp	r6, r3
 800983a:	d900      	bls.n	800983e <__ssputs_r+0x8e>
 800983c:	9e01      	ldr	r6, [sp, #4]
 800983e:	0032      	movs	r2, r6
 8009840:	9903      	ldr	r1, [sp, #12]
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	f000 f959 	bl	8009afa <memmove>
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	2000      	movs	r0, #0
 800984c:	1b9b      	subs	r3, r3, r6
 800984e:	60a3      	str	r3, [r4, #8]
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	199e      	adds	r6, r3, r6
 8009854:	6026      	str	r6, [r4, #0]
 8009856:	e7da      	b.n	800980e <__ssputs_r+0x5e>
 8009858:	002a      	movs	r2, r5
 800985a:	0038      	movs	r0, r7
 800985c:	f000 f960 	bl	8009b20 <_realloc_r>
 8009860:	1e06      	subs	r6, r0, #0
 8009862:	d1e0      	bne.n	8009826 <__ssputs_r+0x76>
 8009864:	0038      	movs	r0, r7
 8009866:	6921      	ldr	r1, [r4, #16]
 8009868:	f7fd ffd0 	bl	800780c <_free_r>
 800986c:	e7c7      	b.n	80097fe <__ssputs_r+0x4e>
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	fffffb7f 	.word	0xfffffb7f

08009874 <_svfiprintf_r>:
 8009874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009876:	b0a1      	sub	sp, #132	; 0x84
 8009878:	9003      	str	r0, [sp, #12]
 800987a:	001d      	movs	r5, r3
 800987c:	898b      	ldrh	r3, [r1, #12]
 800987e:	000f      	movs	r7, r1
 8009880:	0016      	movs	r6, r2
 8009882:	061b      	lsls	r3, r3, #24
 8009884:	d511      	bpl.n	80098aa <_svfiprintf_r+0x36>
 8009886:	690b      	ldr	r3, [r1, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10e      	bne.n	80098aa <_svfiprintf_r+0x36>
 800988c:	2140      	movs	r1, #64	; 0x40
 800988e:	f7fe f807 	bl	80078a0 <_malloc_r>
 8009892:	6038      	str	r0, [r7, #0]
 8009894:	6138      	str	r0, [r7, #16]
 8009896:	2800      	cmp	r0, #0
 8009898:	d105      	bne.n	80098a6 <_svfiprintf_r+0x32>
 800989a:	230c      	movs	r3, #12
 800989c:	9a03      	ldr	r2, [sp, #12]
 800989e:	3801      	subs	r0, #1
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	b021      	add	sp, #132	; 0x84
 80098a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a6:	2340      	movs	r3, #64	; 0x40
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	2300      	movs	r3, #0
 80098ac:	ac08      	add	r4, sp, #32
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	3320      	adds	r3, #32
 80098b2:	7663      	strb	r3, [r4, #25]
 80098b4:	3310      	adds	r3, #16
 80098b6:	76a3      	strb	r3, [r4, #26]
 80098b8:	9507      	str	r5, [sp, #28]
 80098ba:	0035      	movs	r5, r6
 80098bc:	782b      	ldrb	r3, [r5, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <_svfiprintf_r+0x52>
 80098c2:	2b25      	cmp	r3, #37	; 0x25
 80098c4:	d147      	bne.n	8009956 <_svfiprintf_r+0xe2>
 80098c6:	1bab      	subs	r3, r5, r6
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	42b5      	cmp	r5, r6
 80098cc:	d00c      	beq.n	80098e8 <_svfiprintf_r+0x74>
 80098ce:	0032      	movs	r2, r6
 80098d0:	0039      	movs	r1, r7
 80098d2:	9803      	ldr	r0, [sp, #12]
 80098d4:	f7ff ff6c 	bl	80097b0 <__ssputs_r>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d100      	bne.n	80098de <_svfiprintf_r+0x6a>
 80098dc:	e0ae      	b.n	8009a3c <_svfiprintf_r+0x1c8>
 80098de:	6962      	ldr	r2, [r4, #20]
 80098e0:	9b05      	ldr	r3, [sp, #20]
 80098e2:	4694      	mov	ip, r2
 80098e4:	4463      	add	r3, ip
 80098e6:	6163      	str	r3, [r4, #20]
 80098e8:	782b      	ldrb	r3, [r5, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d100      	bne.n	80098f0 <_svfiprintf_r+0x7c>
 80098ee:	e0a5      	b.n	8009a3c <_svfiprintf_r+0x1c8>
 80098f0:	2201      	movs	r2, #1
 80098f2:	2300      	movs	r3, #0
 80098f4:	4252      	negs	r2, r2
 80098f6:	6062      	str	r2, [r4, #4]
 80098f8:	a904      	add	r1, sp, #16
 80098fa:	3254      	adds	r2, #84	; 0x54
 80098fc:	1852      	adds	r2, r2, r1
 80098fe:	1c6e      	adds	r6, r5, #1
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	60e3      	str	r3, [r4, #12]
 8009904:	60a3      	str	r3, [r4, #8]
 8009906:	7013      	strb	r3, [r2, #0]
 8009908:	65a3      	str	r3, [r4, #88]	; 0x58
 800990a:	2205      	movs	r2, #5
 800990c:	7831      	ldrb	r1, [r6, #0]
 800990e:	4854      	ldr	r0, [pc, #336]	; (8009a60 <_svfiprintf_r+0x1ec>)
 8009910:	f7ff fb7e 	bl	8009010 <memchr>
 8009914:	1c75      	adds	r5, r6, #1
 8009916:	2800      	cmp	r0, #0
 8009918:	d11f      	bne.n	800995a <_svfiprintf_r+0xe6>
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	06d3      	lsls	r3, r2, #27
 800991e:	d504      	bpl.n	800992a <_svfiprintf_r+0xb6>
 8009920:	2353      	movs	r3, #83	; 0x53
 8009922:	a904      	add	r1, sp, #16
 8009924:	185b      	adds	r3, r3, r1
 8009926:	2120      	movs	r1, #32
 8009928:	7019      	strb	r1, [r3, #0]
 800992a:	0713      	lsls	r3, r2, #28
 800992c:	d504      	bpl.n	8009938 <_svfiprintf_r+0xc4>
 800992e:	2353      	movs	r3, #83	; 0x53
 8009930:	a904      	add	r1, sp, #16
 8009932:	185b      	adds	r3, r3, r1
 8009934:	212b      	movs	r1, #43	; 0x2b
 8009936:	7019      	strb	r1, [r3, #0]
 8009938:	7833      	ldrb	r3, [r6, #0]
 800993a:	2b2a      	cmp	r3, #42	; 0x2a
 800993c:	d016      	beq.n	800996c <_svfiprintf_r+0xf8>
 800993e:	0035      	movs	r5, r6
 8009940:	2100      	movs	r1, #0
 8009942:	200a      	movs	r0, #10
 8009944:	68e3      	ldr	r3, [r4, #12]
 8009946:	782a      	ldrb	r2, [r5, #0]
 8009948:	1c6e      	adds	r6, r5, #1
 800994a:	3a30      	subs	r2, #48	; 0x30
 800994c:	2a09      	cmp	r2, #9
 800994e:	d94e      	bls.n	80099ee <_svfiprintf_r+0x17a>
 8009950:	2900      	cmp	r1, #0
 8009952:	d111      	bne.n	8009978 <_svfiprintf_r+0x104>
 8009954:	e017      	b.n	8009986 <_svfiprintf_r+0x112>
 8009956:	3501      	adds	r5, #1
 8009958:	e7b0      	b.n	80098bc <_svfiprintf_r+0x48>
 800995a:	4b41      	ldr	r3, [pc, #260]	; (8009a60 <_svfiprintf_r+0x1ec>)
 800995c:	6822      	ldr	r2, [r4, #0]
 800995e:	1ac0      	subs	r0, r0, r3
 8009960:	2301      	movs	r3, #1
 8009962:	4083      	lsls	r3, r0
 8009964:	4313      	orrs	r3, r2
 8009966:	002e      	movs	r6, r5
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	e7ce      	b.n	800990a <_svfiprintf_r+0x96>
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	1d19      	adds	r1, r3, #4
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	9107      	str	r1, [sp, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	db01      	blt.n	800997c <_svfiprintf_r+0x108>
 8009978:	930b      	str	r3, [sp, #44]	; 0x2c
 800997a:	e004      	b.n	8009986 <_svfiprintf_r+0x112>
 800997c:	425b      	negs	r3, r3
 800997e:	60e3      	str	r3, [r4, #12]
 8009980:	2302      	movs	r3, #2
 8009982:	4313      	orrs	r3, r2
 8009984:	6023      	str	r3, [r4, #0]
 8009986:	782b      	ldrb	r3, [r5, #0]
 8009988:	2b2e      	cmp	r3, #46	; 0x2e
 800998a:	d10a      	bne.n	80099a2 <_svfiprintf_r+0x12e>
 800998c:	786b      	ldrb	r3, [r5, #1]
 800998e:	2b2a      	cmp	r3, #42	; 0x2a
 8009990:	d135      	bne.n	80099fe <_svfiprintf_r+0x18a>
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	3502      	adds	r5, #2
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	9207      	str	r2, [sp, #28]
 800999c:	2b00      	cmp	r3, #0
 800999e:	db2b      	blt.n	80099f8 <_svfiprintf_r+0x184>
 80099a0:	9309      	str	r3, [sp, #36]	; 0x24
 80099a2:	4e30      	ldr	r6, [pc, #192]	; (8009a64 <_svfiprintf_r+0x1f0>)
 80099a4:	2203      	movs	r2, #3
 80099a6:	0030      	movs	r0, r6
 80099a8:	7829      	ldrb	r1, [r5, #0]
 80099aa:	f7ff fb31 	bl	8009010 <memchr>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d006      	beq.n	80099c0 <_svfiprintf_r+0x14c>
 80099b2:	2340      	movs	r3, #64	; 0x40
 80099b4:	1b80      	subs	r0, r0, r6
 80099b6:	4083      	lsls	r3, r0
 80099b8:	6822      	ldr	r2, [r4, #0]
 80099ba:	3501      	adds	r5, #1
 80099bc:	4313      	orrs	r3, r2
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	7829      	ldrb	r1, [r5, #0]
 80099c2:	2206      	movs	r2, #6
 80099c4:	4828      	ldr	r0, [pc, #160]	; (8009a68 <_svfiprintf_r+0x1f4>)
 80099c6:	1c6e      	adds	r6, r5, #1
 80099c8:	7621      	strb	r1, [r4, #24]
 80099ca:	f7ff fb21 	bl	8009010 <memchr>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d03c      	beq.n	8009a4c <_svfiprintf_r+0x1d8>
 80099d2:	4b26      	ldr	r3, [pc, #152]	; (8009a6c <_svfiprintf_r+0x1f8>)
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d125      	bne.n	8009a24 <_svfiprintf_r+0x1b0>
 80099d8:	2207      	movs	r2, #7
 80099da:	9b07      	ldr	r3, [sp, #28]
 80099dc:	3307      	adds	r3, #7
 80099de:	4393      	bics	r3, r2
 80099e0:	3308      	adds	r3, #8
 80099e2:	9307      	str	r3, [sp, #28]
 80099e4:	6963      	ldr	r3, [r4, #20]
 80099e6:	9a04      	ldr	r2, [sp, #16]
 80099e8:	189b      	adds	r3, r3, r2
 80099ea:	6163      	str	r3, [r4, #20]
 80099ec:	e765      	b.n	80098ba <_svfiprintf_r+0x46>
 80099ee:	4343      	muls	r3, r0
 80099f0:	0035      	movs	r5, r6
 80099f2:	2101      	movs	r1, #1
 80099f4:	189b      	adds	r3, r3, r2
 80099f6:	e7a6      	b.n	8009946 <_svfiprintf_r+0xd2>
 80099f8:	2301      	movs	r3, #1
 80099fa:	425b      	negs	r3, r3
 80099fc:	e7d0      	b.n	80099a0 <_svfiprintf_r+0x12c>
 80099fe:	2300      	movs	r3, #0
 8009a00:	200a      	movs	r0, #10
 8009a02:	001a      	movs	r2, r3
 8009a04:	3501      	adds	r5, #1
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	7829      	ldrb	r1, [r5, #0]
 8009a0a:	1c6e      	adds	r6, r5, #1
 8009a0c:	3930      	subs	r1, #48	; 0x30
 8009a0e:	2909      	cmp	r1, #9
 8009a10:	d903      	bls.n	8009a1a <_svfiprintf_r+0x1a6>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0c5      	beq.n	80099a2 <_svfiprintf_r+0x12e>
 8009a16:	9209      	str	r2, [sp, #36]	; 0x24
 8009a18:	e7c3      	b.n	80099a2 <_svfiprintf_r+0x12e>
 8009a1a:	4342      	muls	r2, r0
 8009a1c:	0035      	movs	r5, r6
 8009a1e:	2301      	movs	r3, #1
 8009a20:	1852      	adds	r2, r2, r1
 8009a22:	e7f1      	b.n	8009a08 <_svfiprintf_r+0x194>
 8009a24:	ab07      	add	r3, sp, #28
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	003a      	movs	r2, r7
 8009a2a:	0021      	movs	r1, r4
 8009a2c:	4b10      	ldr	r3, [pc, #64]	; (8009a70 <_svfiprintf_r+0x1fc>)
 8009a2e:	9803      	ldr	r0, [sp, #12]
 8009a30:	f7fe f83e 	bl	8007ab0 <_printf_float>
 8009a34:	9004      	str	r0, [sp, #16]
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	d1d3      	bne.n	80099e4 <_svfiprintf_r+0x170>
 8009a3c:	89bb      	ldrh	r3, [r7, #12]
 8009a3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a40:	065b      	lsls	r3, r3, #25
 8009a42:	d400      	bmi.n	8009a46 <_svfiprintf_r+0x1d2>
 8009a44:	e72d      	b.n	80098a2 <_svfiprintf_r+0x2e>
 8009a46:	2001      	movs	r0, #1
 8009a48:	4240      	negs	r0, r0
 8009a4a:	e72a      	b.n	80098a2 <_svfiprintf_r+0x2e>
 8009a4c:	ab07      	add	r3, sp, #28
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	003a      	movs	r2, r7
 8009a52:	0021      	movs	r1, r4
 8009a54:	4b06      	ldr	r3, [pc, #24]	; (8009a70 <_svfiprintf_r+0x1fc>)
 8009a56:	9803      	ldr	r0, [sp, #12]
 8009a58:	f7fe fae8 	bl	800802c <_printf_i>
 8009a5c:	e7ea      	b.n	8009a34 <_svfiprintf_r+0x1c0>
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	0800aa8c 	.word	0x0800aa8c
 8009a64:	0800aa92 	.word	0x0800aa92
 8009a68:	0800aa96 	.word	0x0800aa96
 8009a6c:	08007ab1 	.word	0x08007ab1
 8009a70:	080097b1 	.word	0x080097b1

08009a74 <__assert_func>:
 8009a74:	b530      	push	{r4, r5, lr}
 8009a76:	0014      	movs	r4, r2
 8009a78:	001a      	movs	r2, r3
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <__assert_func+0x2c>)
 8009a7c:	0005      	movs	r5, r0
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	b085      	sub	sp, #20
 8009a82:	68d8      	ldr	r0, [r3, #12]
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <__assert_func+0x30>)
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	d101      	bne.n	8009a8e <__assert_func+0x1a>
 8009a8a:	4b07      	ldr	r3, [pc, #28]	; (8009aa8 <__assert_func+0x34>)
 8009a8c:	001c      	movs	r4, r3
 8009a8e:	9301      	str	r3, [sp, #4]
 8009a90:	9100      	str	r1, [sp, #0]
 8009a92:	002b      	movs	r3, r5
 8009a94:	4905      	ldr	r1, [pc, #20]	; (8009aac <__assert_func+0x38>)
 8009a96:	9402      	str	r4, [sp, #8]
 8009a98:	f000 f80a 	bl	8009ab0 <fiprintf>
 8009a9c:	f000 faa4 	bl	8009fe8 <abort>
 8009aa0:	2000000c 	.word	0x2000000c
 8009aa4:	0800aa9d 	.word	0x0800aa9d
 8009aa8:	0800aad8 	.word	0x0800aad8
 8009aac:	0800aaaa 	.word	0x0800aaaa

08009ab0 <fiprintf>:
 8009ab0:	b40e      	push	{r1, r2, r3}
 8009ab2:	b503      	push	{r0, r1, lr}
 8009ab4:	0001      	movs	r1, r0
 8009ab6:	ab03      	add	r3, sp, #12
 8009ab8:	4804      	ldr	r0, [pc, #16]	; (8009acc <fiprintf+0x1c>)
 8009aba:	cb04      	ldmia	r3!, {r2}
 8009abc:	6800      	ldr	r0, [r0, #0]
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	f000 f87c 	bl	8009bbc <_vfiprintf_r>
 8009ac4:	b002      	add	sp, #8
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	b003      	add	sp, #12
 8009aca:	4718      	bx	r3
 8009acc:	2000000c 	.word	0x2000000c

08009ad0 <__retarget_lock_init_recursive>:
 8009ad0:	4770      	bx	lr

08009ad2 <__retarget_lock_acquire_recursive>:
 8009ad2:	4770      	bx	lr

08009ad4 <__retarget_lock_release_recursive>:
 8009ad4:	4770      	bx	lr

08009ad6 <__ascii_mbtowc>:
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	d100      	bne.n	8009ade <__ascii_mbtowc+0x8>
 8009adc:	a901      	add	r1, sp, #4
 8009ade:	1e10      	subs	r0, r2, #0
 8009ae0:	d006      	beq.n	8009af0 <__ascii_mbtowc+0x1a>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d006      	beq.n	8009af4 <__ascii_mbtowc+0x1e>
 8009ae6:	7813      	ldrb	r3, [r2, #0]
 8009ae8:	600b      	str	r3, [r1, #0]
 8009aea:	7810      	ldrb	r0, [r2, #0]
 8009aec:	1e43      	subs	r3, r0, #1
 8009aee:	4198      	sbcs	r0, r3
 8009af0:	b002      	add	sp, #8
 8009af2:	4770      	bx	lr
 8009af4:	2002      	movs	r0, #2
 8009af6:	4240      	negs	r0, r0
 8009af8:	e7fa      	b.n	8009af0 <__ascii_mbtowc+0x1a>

08009afa <memmove>:
 8009afa:	b510      	push	{r4, lr}
 8009afc:	4288      	cmp	r0, r1
 8009afe:	d902      	bls.n	8009b06 <memmove+0xc>
 8009b00:	188b      	adds	r3, r1, r2
 8009b02:	4298      	cmp	r0, r3
 8009b04:	d303      	bcc.n	8009b0e <memmove+0x14>
 8009b06:	2300      	movs	r3, #0
 8009b08:	e007      	b.n	8009b1a <memmove+0x20>
 8009b0a:	5c8b      	ldrb	r3, [r1, r2]
 8009b0c:	5483      	strb	r3, [r0, r2]
 8009b0e:	3a01      	subs	r2, #1
 8009b10:	d2fb      	bcs.n	8009b0a <memmove+0x10>
 8009b12:	bd10      	pop	{r4, pc}
 8009b14:	5ccc      	ldrb	r4, [r1, r3]
 8009b16:	54c4      	strb	r4, [r0, r3]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d1fa      	bne.n	8009b14 <memmove+0x1a>
 8009b1e:	e7f8      	b.n	8009b12 <memmove+0x18>

08009b20 <_realloc_r>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	0007      	movs	r7, r0
 8009b24:	000d      	movs	r5, r1
 8009b26:	0016      	movs	r6, r2
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	d105      	bne.n	8009b38 <_realloc_r+0x18>
 8009b2c:	0011      	movs	r1, r2
 8009b2e:	f7fd feb7 	bl	80078a0 <_malloc_r>
 8009b32:	0004      	movs	r4, r0
 8009b34:	0020      	movs	r0, r4
 8009b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	d103      	bne.n	8009b44 <_realloc_r+0x24>
 8009b3c:	f7fd fe66 	bl	800780c <_free_r>
 8009b40:	0034      	movs	r4, r6
 8009b42:	e7f7      	b.n	8009b34 <_realloc_r+0x14>
 8009b44:	f000 fc92 	bl	800a46c <_malloc_usable_size_r>
 8009b48:	002c      	movs	r4, r5
 8009b4a:	42b0      	cmp	r0, r6
 8009b4c:	d2f2      	bcs.n	8009b34 <_realloc_r+0x14>
 8009b4e:	0031      	movs	r1, r6
 8009b50:	0038      	movs	r0, r7
 8009b52:	f7fd fea5 	bl	80078a0 <_malloc_r>
 8009b56:	1e04      	subs	r4, r0, #0
 8009b58:	d0ec      	beq.n	8009b34 <_realloc_r+0x14>
 8009b5a:	0029      	movs	r1, r5
 8009b5c:	0032      	movs	r2, r6
 8009b5e:	f7ff fa62 	bl	8009026 <memcpy>
 8009b62:	0029      	movs	r1, r5
 8009b64:	0038      	movs	r0, r7
 8009b66:	f7fd fe51 	bl	800780c <_free_r>
 8009b6a:	e7e3      	b.n	8009b34 <_realloc_r+0x14>

08009b6c <__sfputc_r>:
 8009b6c:	6893      	ldr	r3, [r2, #8]
 8009b6e:	b510      	push	{r4, lr}
 8009b70:	3b01      	subs	r3, #1
 8009b72:	6093      	str	r3, [r2, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	da04      	bge.n	8009b82 <__sfputc_r+0x16>
 8009b78:	6994      	ldr	r4, [r2, #24]
 8009b7a:	42a3      	cmp	r3, r4
 8009b7c:	db07      	blt.n	8009b8e <__sfputc_r+0x22>
 8009b7e:	290a      	cmp	r1, #10
 8009b80:	d005      	beq.n	8009b8e <__sfputc_r+0x22>
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	1c58      	adds	r0, r3, #1
 8009b86:	6010      	str	r0, [r2, #0]
 8009b88:	7019      	strb	r1, [r3, #0]
 8009b8a:	0008      	movs	r0, r1
 8009b8c:	bd10      	pop	{r4, pc}
 8009b8e:	f000 f94f 	bl	8009e30 <__swbuf_r>
 8009b92:	0001      	movs	r1, r0
 8009b94:	e7f9      	b.n	8009b8a <__sfputc_r+0x1e>

08009b96 <__sfputs_r>:
 8009b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b98:	0006      	movs	r6, r0
 8009b9a:	000f      	movs	r7, r1
 8009b9c:	0014      	movs	r4, r2
 8009b9e:	18d5      	adds	r5, r2, r3
 8009ba0:	42ac      	cmp	r4, r5
 8009ba2:	d101      	bne.n	8009ba8 <__sfputs_r+0x12>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e007      	b.n	8009bb8 <__sfputs_r+0x22>
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	003a      	movs	r2, r7
 8009bac:	0030      	movs	r0, r6
 8009bae:	f7ff ffdd 	bl	8009b6c <__sfputc_r>
 8009bb2:	3401      	adds	r4, #1
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d1f3      	bne.n	8009ba0 <__sfputs_r+0xa>
 8009bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bbc <_vfiprintf_r>:
 8009bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bbe:	b0a1      	sub	sp, #132	; 0x84
 8009bc0:	0006      	movs	r6, r0
 8009bc2:	000c      	movs	r4, r1
 8009bc4:	001f      	movs	r7, r3
 8009bc6:	9203      	str	r2, [sp, #12]
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d004      	beq.n	8009bd6 <_vfiprintf_r+0x1a>
 8009bcc:	6983      	ldr	r3, [r0, #24]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <_vfiprintf_r+0x1a>
 8009bd2:	f000 fb3f 	bl	800a254 <__sinit>
 8009bd6:	4b8e      	ldr	r3, [pc, #568]	; (8009e10 <_vfiprintf_r+0x254>)
 8009bd8:	429c      	cmp	r4, r3
 8009bda:	d11c      	bne.n	8009c16 <_vfiprintf_r+0x5a>
 8009bdc:	6874      	ldr	r4, [r6, #4]
 8009bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009be0:	07db      	lsls	r3, r3, #31
 8009be2:	d405      	bmi.n	8009bf0 <_vfiprintf_r+0x34>
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	059b      	lsls	r3, r3, #22
 8009be8:	d402      	bmi.n	8009bf0 <_vfiprintf_r+0x34>
 8009bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bec:	f7ff ff71 	bl	8009ad2 <__retarget_lock_acquire_recursive>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	071b      	lsls	r3, r3, #28
 8009bf4:	d502      	bpl.n	8009bfc <_vfiprintf_r+0x40>
 8009bf6:	6923      	ldr	r3, [r4, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11d      	bne.n	8009c38 <_vfiprintf_r+0x7c>
 8009bfc:	0021      	movs	r1, r4
 8009bfe:	0030      	movs	r0, r6
 8009c00:	f000 f97a 	bl	8009ef8 <__swsetup_r>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d017      	beq.n	8009c38 <_vfiprintf_r+0x7c>
 8009c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c0a:	07db      	lsls	r3, r3, #31
 8009c0c:	d50d      	bpl.n	8009c2a <_vfiprintf_r+0x6e>
 8009c0e:	2001      	movs	r0, #1
 8009c10:	4240      	negs	r0, r0
 8009c12:	b021      	add	sp, #132	; 0x84
 8009c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c16:	4b7f      	ldr	r3, [pc, #508]	; (8009e14 <_vfiprintf_r+0x258>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d101      	bne.n	8009c20 <_vfiprintf_r+0x64>
 8009c1c:	68b4      	ldr	r4, [r6, #8]
 8009c1e:	e7de      	b.n	8009bde <_vfiprintf_r+0x22>
 8009c20:	4b7d      	ldr	r3, [pc, #500]	; (8009e18 <_vfiprintf_r+0x25c>)
 8009c22:	429c      	cmp	r4, r3
 8009c24:	d1db      	bne.n	8009bde <_vfiprintf_r+0x22>
 8009c26:	68f4      	ldr	r4, [r6, #12]
 8009c28:	e7d9      	b.n	8009bde <_vfiprintf_r+0x22>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	059b      	lsls	r3, r3, #22
 8009c2e:	d4ee      	bmi.n	8009c0e <_vfiprintf_r+0x52>
 8009c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c32:	f7ff ff4f 	bl	8009ad4 <__retarget_lock_release_recursive>
 8009c36:	e7ea      	b.n	8009c0e <_vfiprintf_r+0x52>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	ad08      	add	r5, sp, #32
 8009c3c:	616b      	str	r3, [r5, #20]
 8009c3e:	3320      	adds	r3, #32
 8009c40:	766b      	strb	r3, [r5, #25]
 8009c42:	3310      	adds	r3, #16
 8009c44:	76ab      	strb	r3, [r5, #26]
 8009c46:	9707      	str	r7, [sp, #28]
 8009c48:	9f03      	ldr	r7, [sp, #12]
 8009c4a:	783b      	ldrb	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <_vfiprintf_r+0x98>
 8009c50:	2b25      	cmp	r3, #37	; 0x25
 8009c52:	d14e      	bne.n	8009cf2 <_vfiprintf_r+0x136>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1afb      	subs	r3, r7, r3
 8009c58:	9305      	str	r3, [sp, #20]
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	429f      	cmp	r7, r3
 8009c5e:	d00d      	beq.n	8009c7c <_vfiprintf_r+0xc0>
 8009c60:	9b05      	ldr	r3, [sp, #20]
 8009c62:	0021      	movs	r1, r4
 8009c64:	0030      	movs	r0, r6
 8009c66:	9a03      	ldr	r2, [sp, #12]
 8009c68:	f7ff ff95 	bl	8009b96 <__sfputs_r>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d100      	bne.n	8009c72 <_vfiprintf_r+0xb6>
 8009c70:	e0b5      	b.n	8009dde <_vfiprintf_r+0x222>
 8009c72:	696a      	ldr	r2, [r5, #20]
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	4694      	mov	ip, r2
 8009c78:	4463      	add	r3, ip
 8009c7a:	616b      	str	r3, [r5, #20]
 8009c7c:	783b      	ldrb	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d100      	bne.n	8009c84 <_vfiprintf_r+0xc8>
 8009c82:	e0ac      	b.n	8009dde <_vfiprintf_r+0x222>
 8009c84:	2201      	movs	r2, #1
 8009c86:	1c7b      	adds	r3, r7, #1
 8009c88:	9303      	str	r3, [sp, #12]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4252      	negs	r2, r2
 8009c8e:	606a      	str	r2, [r5, #4]
 8009c90:	a904      	add	r1, sp, #16
 8009c92:	3254      	adds	r2, #84	; 0x54
 8009c94:	1852      	adds	r2, r2, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	60eb      	str	r3, [r5, #12]
 8009c9a:	60ab      	str	r3, [r5, #8]
 8009c9c:	7013      	strb	r3, [r2, #0]
 8009c9e:	65ab      	str	r3, [r5, #88]	; 0x58
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	2205      	movs	r2, #5
 8009ca4:	7819      	ldrb	r1, [r3, #0]
 8009ca6:	485d      	ldr	r0, [pc, #372]	; (8009e1c <_vfiprintf_r+0x260>)
 8009ca8:	f7ff f9b2 	bl	8009010 <memchr>
 8009cac:	9b03      	ldr	r3, [sp, #12]
 8009cae:	1c5f      	adds	r7, r3, #1
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d120      	bne.n	8009cf6 <_vfiprintf_r+0x13a>
 8009cb4:	682a      	ldr	r2, [r5, #0]
 8009cb6:	06d3      	lsls	r3, r2, #27
 8009cb8:	d504      	bpl.n	8009cc4 <_vfiprintf_r+0x108>
 8009cba:	2353      	movs	r3, #83	; 0x53
 8009cbc:	a904      	add	r1, sp, #16
 8009cbe:	185b      	adds	r3, r3, r1
 8009cc0:	2120      	movs	r1, #32
 8009cc2:	7019      	strb	r1, [r3, #0]
 8009cc4:	0713      	lsls	r3, r2, #28
 8009cc6:	d504      	bpl.n	8009cd2 <_vfiprintf_r+0x116>
 8009cc8:	2353      	movs	r3, #83	; 0x53
 8009cca:	a904      	add	r1, sp, #16
 8009ccc:	185b      	adds	r3, r3, r1
 8009cce:	212b      	movs	r1, #43	; 0x2b
 8009cd0:	7019      	strb	r1, [r3, #0]
 8009cd2:	9b03      	ldr	r3, [sp, #12]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd8:	d016      	beq.n	8009d08 <_vfiprintf_r+0x14c>
 8009cda:	2100      	movs	r1, #0
 8009cdc:	68eb      	ldr	r3, [r5, #12]
 8009cde:	9f03      	ldr	r7, [sp, #12]
 8009ce0:	783a      	ldrb	r2, [r7, #0]
 8009ce2:	1c78      	adds	r0, r7, #1
 8009ce4:	3a30      	subs	r2, #48	; 0x30
 8009ce6:	4684      	mov	ip, r0
 8009ce8:	2a09      	cmp	r2, #9
 8009cea:	d94f      	bls.n	8009d8c <_vfiprintf_r+0x1d0>
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d111      	bne.n	8009d14 <_vfiprintf_r+0x158>
 8009cf0:	e017      	b.n	8009d22 <_vfiprintf_r+0x166>
 8009cf2:	3701      	adds	r7, #1
 8009cf4:	e7a9      	b.n	8009c4a <_vfiprintf_r+0x8e>
 8009cf6:	4b49      	ldr	r3, [pc, #292]	; (8009e1c <_vfiprintf_r+0x260>)
 8009cf8:	682a      	ldr	r2, [r5, #0]
 8009cfa:	1ac0      	subs	r0, r0, r3
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4083      	lsls	r3, r0
 8009d00:	4313      	orrs	r3, r2
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	9703      	str	r7, [sp, #12]
 8009d06:	e7cb      	b.n	8009ca0 <_vfiprintf_r+0xe4>
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	1d19      	adds	r1, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9107      	str	r1, [sp, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	db01      	blt.n	8009d18 <_vfiprintf_r+0x15c>
 8009d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d16:	e004      	b.n	8009d22 <_vfiprintf_r+0x166>
 8009d18:	425b      	negs	r3, r3
 8009d1a:	60eb      	str	r3, [r5, #12]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	602b      	str	r3, [r5, #0]
 8009d22:	783b      	ldrb	r3, [r7, #0]
 8009d24:	2b2e      	cmp	r3, #46	; 0x2e
 8009d26:	d10a      	bne.n	8009d3e <_vfiprintf_r+0x182>
 8009d28:	787b      	ldrb	r3, [r7, #1]
 8009d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2c:	d137      	bne.n	8009d9e <_vfiprintf_r+0x1e2>
 8009d2e:	9b07      	ldr	r3, [sp, #28]
 8009d30:	3702      	adds	r7, #2
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9207      	str	r2, [sp, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	db2d      	blt.n	8009d98 <_vfiprintf_r+0x1dc>
 8009d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3e:	2203      	movs	r2, #3
 8009d40:	7839      	ldrb	r1, [r7, #0]
 8009d42:	4837      	ldr	r0, [pc, #220]	; (8009e20 <_vfiprintf_r+0x264>)
 8009d44:	f7ff f964 	bl	8009010 <memchr>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d007      	beq.n	8009d5c <_vfiprintf_r+0x1a0>
 8009d4c:	4b34      	ldr	r3, [pc, #208]	; (8009e20 <_vfiprintf_r+0x264>)
 8009d4e:	682a      	ldr	r2, [r5, #0]
 8009d50:	1ac0      	subs	r0, r0, r3
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	4083      	lsls	r3, r0
 8009d56:	4313      	orrs	r3, r2
 8009d58:	3701      	adds	r7, #1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	7839      	ldrb	r1, [r7, #0]
 8009d5e:	1c7b      	adds	r3, r7, #1
 8009d60:	2206      	movs	r2, #6
 8009d62:	4830      	ldr	r0, [pc, #192]	; (8009e24 <_vfiprintf_r+0x268>)
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	7629      	strb	r1, [r5, #24]
 8009d68:	f7ff f952 	bl	8009010 <memchr>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d045      	beq.n	8009dfc <_vfiprintf_r+0x240>
 8009d70:	4b2d      	ldr	r3, [pc, #180]	; (8009e28 <_vfiprintf_r+0x26c>)
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d127      	bne.n	8009dc6 <_vfiprintf_r+0x20a>
 8009d76:	2207      	movs	r2, #7
 8009d78:	9b07      	ldr	r3, [sp, #28]
 8009d7a:	3307      	adds	r3, #7
 8009d7c:	4393      	bics	r3, r2
 8009d7e:	3308      	adds	r3, #8
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	696b      	ldr	r3, [r5, #20]
 8009d84:	9a04      	ldr	r2, [sp, #16]
 8009d86:	189b      	adds	r3, r3, r2
 8009d88:	616b      	str	r3, [r5, #20]
 8009d8a:	e75d      	b.n	8009c48 <_vfiprintf_r+0x8c>
 8009d8c:	210a      	movs	r1, #10
 8009d8e:	434b      	muls	r3, r1
 8009d90:	4667      	mov	r7, ip
 8009d92:	189b      	adds	r3, r3, r2
 8009d94:	3909      	subs	r1, #9
 8009d96:	e7a3      	b.n	8009ce0 <_vfiprintf_r+0x124>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	425b      	negs	r3, r3
 8009d9c:	e7ce      	b.n	8009d3c <_vfiprintf_r+0x180>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	001a      	movs	r2, r3
 8009da2:	3701      	adds	r7, #1
 8009da4:	606b      	str	r3, [r5, #4]
 8009da6:	7839      	ldrb	r1, [r7, #0]
 8009da8:	1c78      	adds	r0, r7, #1
 8009daa:	3930      	subs	r1, #48	; 0x30
 8009dac:	4684      	mov	ip, r0
 8009dae:	2909      	cmp	r1, #9
 8009db0:	d903      	bls.n	8009dba <_vfiprintf_r+0x1fe>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0c3      	beq.n	8009d3e <_vfiprintf_r+0x182>
 8009db6:	9209      	str	r2, [sp, #36]	; 0x24
 8009db8:	e7c1      	b.n	8009d3e <_vfiprintf_r+0x182>
 8009dba:	230a      	movs	r3, #10
 8009dbc:	435a      	muls	r2, r3
 8009dbe:	4667      	mov	r7, ip
 8009dc0:	1852      	adds	r2, r2, r1
 8009dc2:	3b09      	subs	r3, #9
 8009dc4:	e7ef      	b.n	8009da6 <_vfiprintf_r+0x1ea>
 8009dc6:	ab07      	add	r3, sp, #28
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	0022      	movs	r2, r4
 8009dcc:	0029      	movs	r1, r5
 8009dce:	0030      	movs	r0, r6
 8009dd0:	4b16      	ldr	r3, [pc, #88]	; (8009e2c <_vfiprintf_r+0x270>)
 8009dd2:	f7fd fe6d 	bl	8007ab0 <_printf_float>
 8009dd6:	9004      	str	r0, [sp, #16]
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	d1d1      	bne.n	8009d82 <_vfiprintf_r+0x1c6>
 8009dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009de0:	07db      	lsls	r3, r3, #31
 8009de2:	d405      	bmi.n	8009df0 <_vfiprintf_r+0x234>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	059b      	lsls	r3, r3, #22
 8009de8:	d402      	bmi.n	8009df0 <_vfiprintf_r+0x234>
 8009dea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dec:	f7ff fe72 	bl	8009ad4 <__retarget_lock_release_recursive>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	065b      	lsls	r3, r3, #25
 8009df4:	d500      	bpl.n	8009df8 <_vfiprintf_r+0x23c>
 8009df6:	e70a      	b.n	8009c0e <_vfiprintf_r+0x52>
 8009df8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009dfa:	e70a      	b.n	8009c12 <_vfiprintf_r+0x56>
 8009dfc:	ab07      	add	r3, sp, #28
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	0022      	movs	r2, r4
 8009e02:	0029      	movs	r1, r5
 8009e04:	0030      	movs	r0, r6
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <_vfiprintf_r+0x270>)
 8009e08:	f7fe f910 	bl	800802c <_printf_i>
 8009e0c:	e7e3      	b.n	8009dd6 <_vfiprintf_r+0x21a>
 8009e0e:	46c0      	nop			; (mov r8, r8)
 8009e10:	0800ac04 	.word	0x0800ac04
 8009e14:	0800ac24 	.word	0x0800ac24
 8009e18:	0800abe4 	.word	0x0800abe4
 8009e1c:	0800aa8c 	.word	0x0800aa8c
 8009e20:	0800aa92 	.word	0x0800aa92
 8009e24:	0800aa96 	.word	0x0800aa96
 8009e28:	08007ab1 	.word	0x08007ab1
 8009e2c:	08009b97 	.word	0x08009b97

08009e30 <__swbuf_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	0005      	movs	r5, r0
 8009e34:	000e      	movs	r6, r1
 8009e36:	0014      	movs	r4, r2
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d004      	beq.n	8009e46 <__swbuf_r+0x16>
 8009e3c:	6983      	ldr	r3, [r0, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <__swbuf_r+0x16>
 8009e42:	f000 fa07 	bl	800a254 <__sinit>
 8009e46:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <__swbuf_r+0xa0>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	d12e      	bne.n	8009eaa <__swbuf_r+0x7a>
 8009e4c:	686c      	ldr	r4, [r5, #4]
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071b      	lsls	r3, r3, #28
 8009e56:	d532      	bpl.n	8009ebe <__swbuf_r+0x8e>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02f      	beq.n	8009ebe <__swbuf_r+0x8e>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	6922      	ldr	r2, [r4, #16]
 8009e62:	b2f7      	uxtb	r7, r6
 8009e64:	1a98      	subs	r0, r3, r2
 8009e66:	6963      	ldr	r3, [r4, #20]
 8009e68:	b2f6      	uxtb	r6, r6
 8009e6a:	4283      	cmp	r3, r0
 8009e6c:	dc05      	bgt.n	8009e7a <__swbuf_r+0x4a>
 8009e6e:	0021      	movs	r1, r4
 8009e70:	0028      	movs	r0, r5
 8009e72:	f000 f94d 	bl	800a110 <_fflush_r>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d127      	bne.n	8009eca <__swbuf_r+0x9a>
 8009e7a:	68a3      	ldr	r3, [r4, #8]
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	60a3      	str	r3, [r4, #8]
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	6022      	str	r2, [r4, #0]
 8009e88:	701f      	strb	r7, [r3, #0]
 8009e8a:	6963      	ldr	r3, [r4, #20]
 8009e8c:	4283      	cmp	r3, r0
 8009e8e:	d004      	beq.n	8009e9a <__swbuf_r+0x6a>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	07db      	lsls	r3, r3, #31
 8009e94:	d507      	bpl.n	8009ea6 <__swbuf_r+0x76>
 8009e96:	2e0a      	cmp	r6, #10
 8009e98:	d105      	bne.n	8009ea6 <__swbuf_r+0x76>
 8009e9a:	0021      	movs	r1, r4
 8009e9c:	0028      	movs	r0, r5
 8009e9e:	f000 f937 	bl	800a110 <_fflush_r>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d111      	bne.n	8009eca <__swbuf_r+0x9a>
 8009ea6:	0030      	movs	r0, r6
 8009ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eaa:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <__swbuf_r+0xa4>)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	d101      	bne.n	8009eb4 <__swbuf_r+0x84>
 8009eb0:	68ac      	ldr	r4, [r5, #8]
 8009eb2:	e7cc      	b.n	8009e4e <__swbuf_r+0x1e>
 8009eb4:	4b08      	ldr	r3, [pc, #32]	; (8009ed8 <__swbuf_r+0xa8>)
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	d1c9      	bne.n	8009e4e <__swbuf_r+0x1e>
 8009eba:	68ec      	ldr	r4, [r5, #12]
 8009ebc:	e7c7      	b.n	8009e4e <__swbuf_r+0x1e>
 8009ebe:	0021      	movs	r1, r4
 8009ec0:	0028      	movs	r0, r5
 8009ec2:	f000 f819 	bl	8009ef8 <__swsetup_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d0c9      	beq.n	8009e5e <__swbuf_r+0x2e>
 8009eca:	2601      	movs	r6, #1
 8009ecc:	4276      	negs	r6, r6
 8009ece:	e7ea      	b.n	8009ea6 <__swbuf_r+0x76>
 8009ed0:	0800ac04 	.word	0x0800ac04
 8009ed4:	0800ac24 	.word	0x0800ac24
 8009ed8:	0800abe4 	.word	0x0800abe4

08009edc <__ascii_wctomb>:
 8009edc:	0003      	movs	r3, r0
 8009ede:	1e08      	subs	r0, r1, #0
 8009ee0:	d005      	beq.n	8009eee <__ascii_wctomb+0x12>
 8009ee2:	2aff      	cmp	r2, #255	; 0xff
 8009ee4:	d904      	bls.n	8009ef0 <__ascii_wctomb+0x14>
 8009ee6:	228a      	movs	r2, #138	; 0x8a
 8009ee8:	2001      	movs	r0, #1
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	4240      	negs	r0, r0
 8009eee:	4770      	bx	lr
 8009ef0:	2001      	movs	r0, #1
 8009ef2:	700a      	strb	r2, [r1, #0]
 8009ef4:	e7fb      	b.n	8009eee <__ascii_wctomb+0x12>
	...

08009ef8 <__swsetup_r>:
 8009ef8:	4b37      	ldr	r3, [pc, #220]	; (8009fd8 <__swsetup_r+0xe0>)
 8009efa:	b570      	push	{r4, r5, r6, lr}
 8009efc:	681d      	ldr	r5, [r3, #0]
 8009efe:	0006      	movs	r6, r0
 8009f00:	000c      	movs	r4, r1
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	d005      	beq.n	8009f12 <__swsetup_r+0x1a>
 8009f06:	69ab      	ldr	r3, [r5, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <__swsetup_r+0x1a>
 8009f0c:	0028      	movs	r0, r5
 8009f0e:	f000 f9a1 	bl	800a254 <__sinit>
 8009f12:	4b32      	ldr	r3, [pc, #200]	; (8009fdc <__swsetup_r+0xe4>)
 8009f14:	429c      	cmp	r4, r3
 8009f16:	d10f      	bne.n	8009f38 <__swsetup_r+0x40>
 8009f18:	686c      	ldr	r4, [r5, #4]
 8009f1a:	230c      	movs	r3, #12
 8009f1c:	5ee2      	ldrsh	r2, [r4, r3]
 8009f1e:	b293      	uxth	r3, r2
 8009f20:	0711      	lsls	r1, r2, #28
 8009f22:	d42d      	bmi.n	8009f80 <__swsetup_r+0x88>
 8009f24:	06d9      	lsls	r1, r3, #27
 8009f26:	d411      	bmi.n	8009f4c <__swsetup_r+0x54>
 8009f28:	2309      	movs	r3, #9
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	6033      	str	r3, [r6, #0]
 8009f2e:	3337      	adds	r3, #55	; 0x37
 8009f30:	4313      	orrs	r3, r2
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	4240      	negs	r0, r0
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	4b29      	ldr	r3, [pc, #164]	; (8009fe0 <__swsetup_r+0xe8>)
 8009f3a:	429c      	cmp	r4, r3
 8009f3c:	d101      	bne.n	8009f42 <__swsetup_r+0x4a>
 8009f3e:	68ac      	ldr	r4, [r5, #8]
 8009f40:	e7eb      	b.n	8009f1a <__swsetup_r+0x22>
 8009f42:	4b28      	ldr	r3, [pc, #160]	; (8009fe4 <__swsetup_r+0xec>)
 8009f44:	429c      	cmp	r4, r3
 8009f46:	d1e8      	bne.n	8009f1a <__swsetup_r+0x22>
 8009f48:	68ec      	ldr	r4, [r5, #12]
 8009f4a:	e7e6      	b.n	8009f1a <__swsetup_r+0x22>
 8009f4c:	075b      	lsls	r3, r3, #29
 8009f4e:	d513      	bpl.n	8009f78 <__swsetup_r+0x80>
 8009f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f52:	2900      	cmp	r1, #0
 8009f54:	d008      	beq.n	8009f68 <__swsetup_r+0x70>
 8009f56:	0023      	movs	r3, r4
 8009f58:	3344      	adds	r3, #68	; 0x44
 8009f5a:	4299      	cmp	r1, r3
 8009f5c:	d002      	beq.n	8009f64 <__swsetup_r+0x6c>
 8009f5e:	0030      	movs	r0, r6
 8009f60:	f7fd fc54 	bl	800780c <_free_r>
 8009f64:	2300      	movs	r3, #0
 8009f66:	6363      	str	r3, [r4, #52]	; 0x34
 8009f68:	2224      	movs	r2, #36	; 0x24
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	4393      	bics	r3, r2
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	2300      	movs	r3, #0
 8009f72:	6063      	str	r3, [r4, #4]
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	2308      	movs	r3, #8
 8009f7a:	89a2      	ldrh	r2, [r4, #12]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10b      	bne.n	8009f9e <__swsetup_r+0xa6>
 8009f86:	21a0      	movs	r1, #160	; 0xa0
 8009f88:	2280      	movs	r2, #128	; 0x80
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	0089      	lsls	r1, r1, #2
 8009f8e:	0092      	lsls	r2, r2, #2
 8009f90:	400b      	ands	r3, r1
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d003      	beq.n	8009f9e <__swsetup_r+0xa6>
 8009f96:	0021      	movs	r1, r4
 8009f98:	0030      	movs	r0, r6
 8009f9a:	f000 fa23 	bl	800a3e4 <__smakebuf_r>
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	5ea3      	ldrsh	r3, [r4, r2]
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	b299      	uxth	r1, r3
 8009fa8:	4002      	ands	r2, r0
 8009faa:	4203      	tst	r3, r0
 8009fac:	d00f      	beq.n	8009fce <__swsetup_r+0xd6>
 8009fae:	2200      	movs	r2, #0
 8009fb0:	60a2      	str	r2, [r4, #8]
 8009fb2:	6962      	ldr	r2, [r4, #20]
 8009fb4:	4252      	negs	r2, r2
 8009fb6:	61a2      	str	r2, [r4, #24]
 8009fb8:	2000      	movs	r0, #0
 8009fba:	6922      	ldr	r2, [r4, #16]
 8009fbc:	4282      	cmp	r2, r0
 8009fbe:	d1ba      	bne.n	8009f36 <__swsetup_r+0x3e>
 8009fc0:	060a      	lsls	r2, r1, #24
 8009fc2:	d5b8      	bpl.n	8009f36 <__swsetup_r+0x3e>
 8009fc4:	2240      	movs	r2, #64	; 0x40
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	3801      	subs	r0, #1
 8009fcc:	e7b3      	b.n	8009f36 <__swsetup_r+0x3e>
 8009fce:	0788      	lsls	r0, r1, #30
 8009fd0:	d400      	bmi.n	8009fd4 <__swsetup_r+0xdc>
 8009fd2:	6962      	ldr	r2, [r4, #20]
 8009fd4:	60a2      	str	r2, [r4, #8]
 8009fd6:	e7ef      	b.n	8009fb8 <__swsetup_r+0xc0>
 8009fd8:	2000000c 	.word	0x2000000c
 8009fdc:	0800ac04 	.word	0x0800ac04
 8009fe0:	0800ac24 	.word	0x0800ac24
 8009fe4:	0800abe4 	.word	0x0800abe4

08009fe8 <abort>:
 8009fe8:	2006      	movs	r0, #6
 8009fea:	b510      	push	{r4, lr}
 8009fec:	f000 fa70 	bl	800a4d0 <raise>
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f7fa f907 	bl	8004204 <_exit>
	...

08009ff8 <__sflush_r>:
 8009ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ffa:	898b      	ldrh	r3, [r1, #12]
 8009ffc:	0005      	movs	r5, r0
 8009ffe:	000c      	movs	r4, r1
 800a000:	071a      	lsls	r2, r3, #28
 800a002:	d45f      	bmi.n	800a0c4 <__sflush_r+0xcc>
 800a004:	684a      	ldr	r2, [r1, #4]
 800a006:	2a00      	cmp	r2, #0
 800a008:	dc04      	bgt.n	800a014 <__sflush_r+0x1c>
 800a00a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	dc01      	bgt.n	800a014 <__sflush_r+0x1c>
 800a010:	2000      	movs	r0, #0
 800a012:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a014:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a016:	2f00      	cmp	r7, #0
 800a018:	d0fa      	beq.n	800a010 <__sflush_r+0x18>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2180      	movs	r1, #128	; 0x80
 800a01e:	682e      	ldr	r6, [r5, #0]
 800a020:	602a      	str	r2, [r5, #0]
 800a022:	001a      	movs	r2, r3
 800a024:	0149      	lsls	r1, r1, #5
 800a026:	400a      	ands	r2, r1
 800a028:	420b      	tst	r3, r1
 800a02a:	d034      	beq.n	800a096 <__sflush_r+0x9e>
 800a02c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	075b      	lsls	r3, r3, #29
 800a032:	d506      	bpl.n	800a042 <__sflush_r+0x4a>
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	1ac0      	subs	r0, r0, r3
 800a038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <__sflush_r+0x4a>
 800a03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a040:	1ac0      	subs	r0, r0, r3
 800a042:	0002      	movs	r2, r0
 800a044:	6a21      	ldr	r1, [r4, #32]
 800a046:	2300      	movs	r3, #0
 800a048:	0028      	movs	r0, r5
 800a04a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a04c:	47b8      	blx	r7
 800a04e:	89a1      	ldrh	r1, [r4, #12]
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d106      	bne.n	800a062 <__sflush_r+0x6a>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	2b1d      	cmp	r3, #29
 800a058:	d831      	bhi.n	800a0be <__sflush_r+0xc6>
 800a05a:	4a2c      	ldr	r2, [pc, #176]	; (800a10c <__sflush_r+0x114>)
 800a05c:	40da      	lsrs	r2, r3
 800a05e:	07d3      	lsls	r3, r2, #31
 800a060:	d52d      	bpl.n	800a0be <__sflush_r+0xc6>
 800a062:	2300      	movs	r3, #0
 800a064:	6063      	str	r3, [r4, #4]
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	04cb      	lsls	r3, r1, #19
 800a06c:	d505      	bpl.n	800a07a <__sflush_r+0x82>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	d102      	bne.n	800a078 <__sflush_r+0x80>
 800a072:	682b      	ldr	r3, [r5, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d100      	bne.n	800a07a <__sflush_r+0x82>
 800a078:	6560      	str	r0, [r4, #84]	; 0x54
 800a07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07c:	602e      	str	r6, [r5, #0]
 800a07e:	2900      	cmp	r1, #0
 800a080:	d0c6      	beq.n	800a010 <__sflush_r+0x18>
 800a082:	0023      	movs	r3, r4
 800a084:	3344      	adds	r3, #68	; 0x44
 800a086:	4299      	cmp	r1, r3
 800a088:	d002      	beq.n	800a090 <__sflush_r+0x98>
 800a08a:	0028      	movs	r0, r5
 800a08c:	f7fd fbbe 	bl	800780c <_free_r>
 800a090:	2000      	movs	r0, #0
 800a092:	6360      	str	r0, [r4, #52]	; 0x34
 800a094:	e7bd      	b.n	800a012 <__sflush_r+0x1a>
 800a096:	2301      	movs	r3, #1
 800a098:	0028      	movs	r0, r5
 800a09a:	6a21      	ldr	r1, [r4, #32]
 800a09c:	47b8      	blx	r7
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d1c5      	bne.n	800a02e <__sflush_r+0x36>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0c2      	beq.n	800a02e <__sflush_r+0x36>
 800a0a8:	2b1d      	cmp	r3, #29
 800a0aa:	d001      	beq.n	800a0b0 <__sflush_r+0xb8>
 800a0ac:	2b16      	cmp	r3, #22
 800a0ae:	d101      	bne.n	800a0b4 <__sflush_r+0xbc>
 800a0b0:	602e      	str	r6, [r5, #0]
 800a0b2:	e7ad      	b.n	800a010 <__sflush_r+0x18>
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	89a2      	ldrh	r2, [r4, #12]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	e7a9      	b.n	800a012 <__sflush_r+0x1a>
 800a0be:	2340      	movs	r3, #64	; 0x40
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	e7fa      	b.n	800a0ba <__sflush_r+0xc2>
 800a0c4:	690f      	ldr	r7, [r1, #16]
 800a0c6:	2f00      	cmp	r7, #0
 800a0c8:	d0a2      	beq.n	800a010 <__sflush_r+0x18>
 800a0ca:	680a      	ldr	r2, [r1, #0]
 800a0cc:	600f      	str	r7, [r1, #0]
 800a0ce:	1bd2      	subs	r2, r2, r7
 800a0d0:	9201      	str	r2, [sp, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	079b      	lsls	r3, r3, #30
 800a0d6:	d100      	bne.n	800a0da <__sflush_r+0xe2>
 800a0d8:	694a      	ldr	r2, [r1, #20]
 800a0da:	60a2      	str	r2, [r4, #8]
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dc00      	bgt.n	800a0e4 <__sflush_r+0xec>
 800a0e2:	e795      	b.n	800a010 <__sflush_r+0x18>
 800a0e4:	003a      	movs	r2, r7
 800a0e6:	0028      	movs	r0, r5
 800a0e8:	9b01      	ldr	r3, [sp, #4]
 800a0ea:	6a21      	ldr	r1, [r4, #32]
 800a0ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0ee:	47b0      	blx	r6
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dc06      	bgt.n	800a102 <__sflush_r+0x10a>
 800a0f4:	2340      	movs	r3, #64	; 0x40
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	89a2      	ldrh	r2, [r4, #12]
 800a0fa:	4240      	negs	r0, r0
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	e787      	b.n	800a012 <__sflush_r+0x1a>
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	183f      	adds	r7, r7, r0
 800a106:	1a1b      	subs	r3, r3, r0
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	e7e7      	b.n	800a0dc <__sflush_r+0xe4>
 800a10c:	20400001 	.word	0x20400001

0800a110 <_fflush_r>:
 800a110:	690b      	ldr	r3, [r1, #16]
 800a112:	b570      	push	{r4, r5, r6, lr}
 800a114:	0005      	movs	r5, r0
 800a116:	000c      	movs	r4, r1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <_fflush_r+0x12>
 800a11c:	2500      	movs	r5, #0
 800a11e:	0028      	movs	r0, r5
 800a120:	bd70      	pop	{r4, r5, r6, pc}
 800a122:	2800      	cmp	r0, #0
 800a124:	d004      	beq.n	800a130 <_fflush_r+0x20>
 800a126:	6983      	ldr	r3, [r0, #24]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <_fflush_r+0x20>
 800a12c:	f000 f892 	bl	800a254 <__sinit>
 800a130:	4b14      	ldr	r3, [pc, #80]	; (800a184 <_fflush_r+0x74>)
 800a132:	429c      	cmp	r4, r3
 800a134:	d11b      	bne.n	800a16e <_fflush_r+0x5e>
 800a136:	686c      	ldr	r4, [r5, #4]
 800a138:	220c      	movs	r2, #12
 800a13a:	5ea3      	ldrsh	r3, [r4, r2]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0ed      	beq.n	800a11c <_fflush_r+0xc>
 800a140:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a142:	07d2      	lsls	r2, r2, #31
 800a144:	d404      	bmi.n	800a150 <_fflush_r+0x40>
 800a146:	059b      	lsls	r3, r3, #22
 800a148:	d402      	bmi.n	800a150 <_fflush_r+0x40>
 800a14a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a14c:	f7ff fcc1 	bl	8009ad2 <__retarget_lock_acquire_recursive>
 800a150:	0028      	movs	r0, r5
 800a152:	0021      	movs	r1, r4
 800a154:	f7ff ff50 	bl	8009ff8 <__sflush_r>
 800a158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a15a:	0005      	movs	r5, r0
 800a15c:	07db      	lsls	r3, r3, #31
 800a15e:	d4de      	bmi.n	800a11e <_fflush_r+0xe>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	059b      	lsls	r3, r3, #22
 800a164:	d4db      	bmi.n	800a11e <_fflush_r+0xe>
 800a166:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a168:	f7ff fcb4 	bl	8009ad4 <__retarget_lock_release_recursive>
 800a16c:	e7d7      	b.n	800a11e <_fflush_r+0xe>
 800a16e:	4b06      	ldr	r3, [pc, #24]	; (800a188 <_fflush_r+0x78>)
 800a170:	429c      	cmp	r4, r3
 800a172:	d101      	bne.n	800a178 <_fflush_r+0x68>
 800a174:	68ac      	ldr	r4, [r5, #8]
 800a176:	e7df      	b.n	800a138 <_fflush_r+0x28>
 800a178:	4b04      	ldr	r3, [pc, #16]	; (800a18c <_fflush_r+0x7c>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d1dc      	bne.n	800a138 <_fflush_r+0x28>
 800a17e:	68ec      	ldr	r4, [r5, #12]
 800a180:	e7da      	b.n	800a138 <_fflush_r+0x28>
 800a182:	46c0      	nop			; (mov r8, r8)
 800a184:	0800ac04 	.word	0x0800ac04
 800a188:	0800ac24 	.word	0x0800ac24
 800a18c:	0800abe4 	.word	0x0800abe4

0800a190 <std>:
 800a190:	2300      	movs	r3, #0
 800a192:	b510      	push	{r4, lr}
 800a194:	0004      	movs	r4, r0
 800a196:	6003      	str	r3, [r0, #0]
 800a198:	6043      	str	r3, [r0, #4]
 800a19a:	6083      	str	r3, [r0, #8]
 800a19c:	8181      	strh	r1, [r0, #12]
 800a19e:	6643      	str	r3, [r0, #100]	; 0x64
 800a1a0:	0019      	movs	r1, r3
 800a1a2:	81c2      	strh	r2, [r0, #14]
 800a1a4:	6103      	str	r3, [r0, #16]
 800a1a6:	6143      	str	r3, [r0, #20]
 800a1a8:	6183      	str	r3, [r0, #24]
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	305c      	adds	r0, #92	; 0x5c
 800a1ae:	f7fd fb25 	bl	80077fc <memset>
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <std+0x38>)
 800a1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a1b6:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <std+0x3c>)
 800a1b8:	6224      	str	r4, [r4, #32]
 800a1ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1bc:	4b04      	ldr	r3, [pc, #16]	; (800a1d0 <std+0x40>)
 800a1be:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <std+0x44>)
 800a1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	46c0      	nop			; (mov r8, r8)
 800a1c8:	0800a511 	.word	0x0800a511
 800a1cc:	0800a539 	.word	0x0800a539
 800a1d0:	0800a571 	.word	0x0800a571
 800a1d4:	0800a59d 	.word	0x0800a59d

0800a1d8 <_cleanup_r>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	4902      	ldr	r1, [pc, #8]	; (800a1e4 <_cleanup_r+0xc>)
 800a1dc:	f000 f8ba 	bl	800a354 <_fwalk_reent>
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	46c0      	nop			; (mov r8, r8)
 800a1e4:	0800a111 	.word	0x0800a111

0800a1e8 <__sfmoreglue>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	2568      	movs	r5, #104	; 0x68
 800a1ec:	1e4a      	subs	r2, r1, #1
 800a1ee:	4355      	muls	r5, r2
 800a1f0:	000e      	movs	r6, r1
 800a1f2:	0029      	movs	r1, r5
 800a1f4:	3174      	adds	r1, #116	; 0x74
 800a1f6:	f7fd fb53 	bl	80078a0 <_malloc_r>
 800a1fa:	1e04      	subs	r4, r0, #0
 800a1fc:	d008      	beq.n	800a210 <__sfmoreglue+0x28>
 800a1fe:	2100      	movs	r1, #0
 800a200:	002a      	movs	r2, r5
 800a202:	6001      	str	r1, [r0, #0]
 800a204:	6046      	str	r6, [r0, #4]
 800a206:	300c      	adds	r0, #12
 800a208:	60a0      	str	r0, [r4, #8]
 800a20a:	3268      	adds	r2, #104	; 0x68
 800a20c:	f7fd faf6 	bl	80077fc <memset>
 800a210:	0020      	movs	r0, r4
 800a212:	bd70      	pop	{r4, r5, r6, pc}

0800a214 <__sfp_lock_acquire>:
 800a214:	b510      	push	{r4, lr}
 800a216:	4802      	ldr	r0, [pc, #8]	; (800a220 <__sfp_lock_acquire+0xc>)
 800a218:	f7ff fc5b 	bl	8009ad2 <__retarget_lock_acquire_recursive>
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	46c0      	nop			; (mov r8, r8)
 800a220:	20000500 	.word	0x20000500

0800a224 <__sfp_lock_release>:
 800a224:	b510      	push	{r4, lr}
 800a226:	4802      	ldr	r0, [pc, #8]	; (800a230 <__sfp_lock_release+0xc>)
 800a228:	f7ff fc54 	bl	8009ad4 <__retarget_lock_release_recursive>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	20000500 	.word	0x20000500

0800a234 <__sinit_lock_acquire>:
 800a234:	b510      	push	{r4, lr}
 800a236:	4802      	ldr	r0, [pc, #8]	; (800a240 <__sinit_lock_acquire+0xc>)
 800a238:	f7ff fc4b 	bl	8009ad2 <__retarget_lock_acquire_recursive>
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	200004fb 	.word	0x200004fb

0800a244 <__sinit_lock_release>:
 800a244:	b510      	push	{r4, lr}
 800a246:	4802      	ldr	r0, [pc, #8]	; (800a250 <__sinit_lock_release+0xc>)
 800a248:	f7ff fc44 	bl	8009ad4 <__retarget_lock_release_recursive>
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	200004fb 	.word	0x200004fb

0800a254 <__sinit>:
 800a254:	b513      	push	{r0, r1, r4, lr}
 800a256:	0004      	movs	r4, r0
 800a258:	f7ff ffec 	bl	800a234 <__sinit_lock_acquire>
 800a25c:	69a3      	ldr	r3, [r4, #24]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <__sinit+0x14>
 800a262:	f7ff ffef 	bl	800a244 <__sinit_lock_release>
 800a266:	bd13      	pop	{r0, r1, r4, pc}
 800a268:	64a3      	str	r3, [r4, #72]	; 0x48
 800a26a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a26c:	6523      	str	r3, [r4, #80]	; 0x50
 800a26e:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <__sinit+0x68>)
 800a270:	4a13      	ldr	r2, [pc, #76]	; (800a2c0 <__sinit+0x6c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	62a2      	str	r2, [r4, #40]	; 0x28
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	42a3      	cmp	r3, r4
 800a27a:	d101      	bne.n	800a280 <__sinit+0x2c>
 800a27c:	2301      	movs	r3, #1
 800a27e:	61a3      	str	r3, [r4, #24]
 800a280:	0020      	movs	r0, r4
 800a282:	f000 f81f 	bl	800a2c4 <__sfp>
 800a286:	6060      	str	r0, [r4, #4]
 800a288:	0020      	movs	r0, r4
 800a28a:	f000 f81b 	bl	800a2c4 <__sfp>
 800a28e:	60a0      	str	r0, [r4, #8]
 800a290:	0020      	movs	r0, r4
 800a292:	f000 f817 	bl	800a2c4 <__sfp>
 800a296:	2200      	movs	r2, #0
 800a298:	2104      	movs	r1, #4
 800a29a:	60e0      	str	r0, [r4, #12]
 800a29c:	6860      	ldr	r0, [r4, #4]
 800a29e:	f7ff ff77 	bl	800a190 <std>
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	2109      	movs	r1, #9
 800a2a6:	68a0      	ldr	r0, [r4, #8]
 800a2a8:	f7ff ff72 	bl	800a190 <std>
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	2112      	movs	r1, #18
 800a2b0:	68e0      	ldr	r0, [r4, #12]
 800a2b2:	f7ff ff6d 	bl	800a190 <std>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	61a3      	str	r3, [r4, #24]
 800a2ba:	e7d2      	b.n	800a262 <__sinit+0xe>
 800a2bc:	0800a860 	.word	0x0800a860
 800a2c0:	0800a1d9 	.word	0x0800a1d9

0800a2c4 <__sfp>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	0007      	movs	r7, r0
 800a2c8:	f7ff ffa4 	bl	800a214 <__sfp_lock_acquire>
 800a2cc:	4b1f      	ldr	r3, [pc, #124]	; (800a34c <__sfp+0x88>)
 800a2ce:	681e      	ldr	r6, [r3, #0]
 800a2d0:	69b3      	ldr	r3, [r6, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d102      	bne.n	800a2dc <__sfp+0x18>
 800a2d6:	0030      	movs	r0, r6
 800a2d8:	f7ff ffbc 	bl	800a254 <__sinit>
 800a2dc:	3648      	adds	r6, #72	; 0x48
 800a2de:	68b4      	ldr	r4, [r6, #8]
 800a2e0:	6873      	ldr	r3, [r6, #4]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	d504      	bpl.n	800a2f0 <__sfp+0x2c>
 800a2e6:	6833      	ldr	r3, [r6, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d022      	beq.n	800a332 <__sfp+0x6e>
 800a2ec:	6836      	ldr	r6, [r6, #0]
 800a2ee:	e7f6      	b.n	800a2de <__sfp+0x1a>
 800a2f0:	220c      	movs	r2, #12
 800a2f2:	5ea5      	ldrsh	r5, [r4, r2]
 800a2f4:	2d00      	cmp	r5, #0
 800a2f6:	d11a      	bne.n	800a32e <__sfp+0x6a>
 800a2f8:	0020      	movs	r0, r4
 800a2fa:	4b15      	ldr	r3, [pc, #84]	; (800a350 <__sfp+0x8c>)
 800a2fc:	3058      	adds	r0, #88	; 0x58
 800a2fe:	60e3      	str	r3, [r4, #12]
 800a300:	6665      	str	r5, [r4, #100]	; 0x64
 800a302:	f7ff fbe5 	bl	8009ad0 <__retarget_lock_init_recursive>
 800a306:	f7ff ff8d 	bl	800a224 <__sfp_lock_release>
 800a30a:	0020      	movs	r0, r4
 800a30c:	2208      	movs	r2, #8
 800a30e:	0029      	movs	r1, r5
 800a310:	6025      	str	r5, [r4, #0]
 800a312:	60a5      	str	r5, [r4, #8]
 800a314:	6065      	str	r5, [r4, #4]
 800a316:	6125      	str	r5, [r4, #16]
 800a318:	6165      	str	r5, [r4, #20]
 800a31a:	61a5      	str	r5, [r4, #24]
 800a31c:	305c      	adds	r0, #92	; 0x5c
 800a31e:	f7fd fa6d 	bl	80077fc <memset>
 800a322:	6365      	str	r5, [r4, #52]	; 0x34
 800a324:	63a5      	str	r5, [r4, #56]	; 0x38
 800a326:	64a5      	str	r5, [r4, #72]	; 0x48
 800a328:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a32a:	0020      	movs	r0, r4
 800a32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a32e:	3468      	adds	r4, #104	; 0x68
 800a330:	e7d7      	b.n	800a2e2 <__sfp+0x1e>
 800a332:	2104      	movs	r1, #4
 800a334:	0038      	movs	r0, r7
 800a336:	f7ff ff57 	bl	800a1e8 <__sfmoreglue>
 800a33a:	1e04      	subs	r4, r0, #0
 800a33c:	6030      	str	r0, [r6, #0]
 800a33e:	d1d5      	bne.n	800a2ec <__sfp+0x28>
 800a340:	f7ff ff70 	bl	800a224 <__sfp_lock_release>
 800a344:	230c      	movs	r3, #12
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	e7ef      	b.n	800a32a <__sfp+0x66>
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	0800a860 	.word	0x0800a860
 800a350:	ffff0001 	.word	0xffff0001

0800a354 <_fwalk_reent>:
 800a354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a356:	0004      	movs	r4, r0
 800a358:	0006      	movs	r6, r0
 800a35a:	2700      	movs	r7, #0
 800a35c:	9101      	str	r1, [sp, #4]
 800a35e:	3448      	adds	r4, #72	; 0x48
 800a360:	6863      	ldr	r3, [r4, #4]
 800a362:	68a5      	ldr	r5, [r4, #8]
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	9b00      	ldr	r3, [sp, #0]
 800a368:	3b01      	subs	r3, #1
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	d504      	bpl.n	800a378 <_fwalk_reent+0x24>
 800a36e:	6824      	ldr	r4, [r4, #0]
 800a370:	2c00      	cmp	r4, #0
 800a372:	d1f5      	bne.n	800a360 <_fwalk_reent+0xc>
 800a374:	0038      	movs	r0, r7
 800a376:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a378:	89ab      	ldrh	r3, [r5, #12]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d908      	bls.n	800a390 <_fwalk_reent+0x3c>
 800a37e:	220e      	movs	r2, #14
 800a380:	5eab      	ldrsh	r3, [r5, r2]
 800a382:	3301      	adds	r3, #1
 800a384:	d004      	beq.n	800a390 <_fwalk_reent+0x3c>
 800a386:	0029      	movs	r1, r5
 800a388:	0030      	movs	r0, r6
 800a38a:	9b01      	ldr	r3, [sp, #4]
 800a38c:	4798      	blx	r3
 800a38e:	4307      	orrs	r7, r0
 800a390:	3568      	adds	r5, #104	; 0x68
 800a392:	e7e8      	b.n	800a366 <_fwalk_reent+0x12>

0800a394 <__swhatbuf_r>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	000e      	movs	r6, r1
 800a398:	001d      	movs	r5, r3
 800a39a:	230e      	movs	r3, #14
 800a39c:	5ec9      	ldrsh	r1, [r1, r3]
 800a39e:	0014      	movs	r4, r2
 800a3a0:	b096      	sub	sp, #88	; 0x58
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	da07      	bge.n	800a3b6 <__swhatbuf_r+0x22>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	89b3      	ldrh	r3, [r6, #12]
 800a3ac:	061b      	lsls	r3, r3, #24
 800a3ae:	d411      	bmi.n	800a3d4 <__swhatbuf_r+0x40>
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	e00f      	b.n	800a3d6 <__swhatbuf_r+0x42>
 800a3b6:	466a      	mov	r2, sp
 800a3b8:	f000 f91c 	bl	800a5f4 <_fstat_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	dbf2      	blt.n	800a3a6 <__swhatbuf_r+0x12>
 800a3c0:	23f0      	movs	r3, #240	; 0xf0
 800a3c2:	9901      	ldr	r1, [sp, #4]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	4019      	ands	r1, r3
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <__swhatbuf_r+0x4c>)
 800a3ca:	18c9      	adds	r1, r1, r3
 800a3cc:	424b      	negs	r3, r1
 800a3ce:	4159      	adcs	r1, r3
 800a3d0:	6029      	str	r1, [r5, #0]
 800a3d2:	e7ed      	b.n	800a3b0 <__swhatbuf_r+0x1c>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	b016      	add	sp, #88	; 0x58
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	46c0      	nop			; (mov r8, r8)
 800a3e0:	ffffe000 	.word	0xffffe000

0800a3e4 <__smakebuf_r>:
 800a3e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e6:	2602      	movs	r6, #2
 800a3e8:	898b      	ldrh	r3, [r1, #12]
 800a3ea:	0005      	movs	r5, r0
 800a3ec:	000c      	movs	r4, r1
 800a3ee:	4233      	tst	r3, r6
 800a3f0:	d006      	beq.n	800a400 <__smakebuf_r+0x1c>
 800a3f2:	0023      	movs	r3, r4
 800a3f4:	3347      	adds	r3, #71	; 0x47
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	6163      	str	r3, [r4, #20]
 800a3fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a400:	466a      	mov	r2, sp
 800a402:	ab01      	add	r3, sp, #4
 800a404:	f7ff ffc6 	bl	800a394 <__swhatbuf_r>
 800a408:	9900      	ldr	r1, [sp, #0]
 800a40a:	0007      	movs	r7, r0
 800a40c:	0028      	movs	r0, r5
 800a40e:	f7fd fa47 	bl	80078a0 <_malloc_r>
 800a412:	2800      	cmp	r0, #0
 800a414:	d108      	bne.n	800a428 <__smakebuf_r+0x44>
 800a416:	220c      	movs	r2, #12
 800a418:	5ea3      	ldrsh	r3, [r4, r2]
 800a41a:	059a      	lsls	r2, r3, #22
 800a41c:	d4ef      	bmi.n	800a3fe <__smakebuf_r+0x1a>
 800a41e:	2203      	movs	r2, #3
 800a420:	4393      	bics	r3, r2
 800a422:	431e      	orrs	r6, r3
 800a424:	81a6      	strh	r6, [r4, #12]
 800a426:	e7e4      	b.n	800a3f2 <__smakebuf_r+0xe>
 800a428:	4b0f      	ldr	r3, [pc, #60]	; (800a468 <__smakebuf_r+0x84>)
 800a42a:	62ab      	str	r3, [r5, #40]	; 0x28
 800a42c:	2380      	movs	r3, #128	; 0x80
 800a42e:	89a2      	ldrh	r2, [r4, #12]
 800a430:	6020      	str	r0, [r4, #0]
 800a432:	4313      	orrs	r3, r2
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	6120      	str	r0, [r4, #16]
 800a43a:	6163      	str	r3, [r4, #20]
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00d      	beq.n	800a45e <__smakebuf_r+0x7a>
 800a442:	0028      	movs	r0, r5
 800a444:	230e      	movs	r3, #14
 800a446:	5ee1      	ldrsh	r1, [r4, r3]
 800a448:	f000 f8e6 	bl	800a618 <_isatty_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d006      	beq.n	800a45e <__smakebuf_r+0x7a>
 800a450:	2203      	movs	r2, #3
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	4393      	bics	r3, r2
 800a456:	001a      	movs	r2, r3
 800a458:	2301      	movs	r3, #1
 800a45a:	4313      	orrs	r3, r2
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	89a0      	ldrh	r0, [r4, #12]
 800a460:	4307      	orrs	r7, r0
 800a462:	81a7      	strh	r7, [r4, #12]
 800a464:	e7cb      	b.n	800a3fe <__smakebuf_r+0x1a>
 800a466:	46c0      	nop			; (mov r8, r8)
 800a468:	0800a1d9 	.word	0x0800a1d9

0800a46c <_malloc_usable_size_r>:
 800a46c:	1f0b      	subs	r3, r1, #4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	1f18      	subs	r0, r3, #4
 800a472:	2b00      	cmp	r3, #0
 800a474:	da01      	bge.n	800a47a <_malloc_usable_size_r+0xe>
 800a476:	580b      	ldr	r3, [r1, r0]
 800a478:	18c0      	adds	r0, r0, r3
 800a47a:	4770      	bx	lr

0800a47c <_raise_r>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	0004      	movs	r4, r0
 800a480:	000d      	movs	r5, r1
 800a482:	291f      	cmp	r1, #31
 800a484:	d904      	bls.n	800a490 <_raise_r+0x14>
 800a486:	2316      	movs	r3, #22
 800a488:	6003      	str	r3, [r0, #0]
 800a48a:	2001      	movs	r0, #1
 800a48c:	4240      	negs	r0, r0
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a492:	2b00      	cmp	r3, #0
 800a494:	d004      	beq.n	800a4a0 <_raise_r+0x24>
 800a496:	008a      	lsls	r2, r1, #2
 800a498:	189b      	adds	r3, r3, r2
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	d108      	bne.n	800a4b2 <_raise_r+0x36>
 800a4a0:	0020      	movs	r0, r4
 800a4a2:	f000 f831 	bl	800a508 <_getpid_r>
 800a4a6:	002a      	movs	r2, r5
 800a4a8:	0001      	movs	r1, r0
 800a4aa:	0020      	movs	r0, r4
 800a4ac:	f000 f81a 	bl	800a4e4 <_kill_r>
 800a4b0:	e7ed      	b.n	800a48e <_raise_r+0x12>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	2a01      	cmp	r2, #1
 800a4b6:	d0ea      	beq.n	800a48e <_raise_r+0x12>
 800a4b8:	1c51      	adds	r1, r2, #1
 800a4ba:	d103      	bne.n	800a4c4 <_raise_r+0x48>
 800a4bc:	2316      	movs	r3, #22
 800a4be:	3001      	adds	r0, #1
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	e7e4      	b.n	800a48e <_raise_r+0x12>
 800a4c4:	2400      	movs	r4, #0
 800a4c6:	0028      	movs	r0, r5
 800a4c8:	601c      	str	r4, [r3, #0]
 800a4ca:	4790      	blx	r2
 800a4cc:	0020      	movs	r0, r4
 800a4ce:	e7de      	b.n	800a48e <_raise_r+0x12>

0800a4d0 <raise>:
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <raise+0x10>)
 800a4d4:	0001      	movs	r1, r0
 800a4d6:	6818      	ldr	r0, [r3, #0]
 800a4d8:	f7ff ffd0 	bl	800a47c <_raise_r>
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	2000000c 	.word	0x2000000c

0800a4e4 <_kill_r>:
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	b570      	push	{r4, r5, r6, lr}
 800a4e8:	4d06      	ldr	r5, [pc, #24]	; (800a504 <_kill_r+0x20>)
 800a4ea:	0004      	movs	r4, r0
 800a4ec:	0008      	movs	r0, r1
 800a4ee:	0011      	movs	r1, r2
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	f7f9 fe77 	bl	80041e4 <_kill>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	d103      	bne.n	800a502 <_kill_r+0x1e>
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d000      	beq.n	800a502 <_kill_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd70      	pop	{r4, r5, r6, pc}
 800a504:	200004f4 	.word	0x200004f4

0800a508 <_getpid_r>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	f7f9 fe65 	bl	80041d8 <_getpid>
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <__sread>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	000c      	movs	r4, r1
 800a514:	250e      	movs	r5, #14
 800a516:	5f49      	ldrsh	r1, [r1, r5]
 800a518:	f000 f8a4 	bl	800a664 <_read_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	db03      	blt.n	800a528 <__sread+0x18>
 800a520:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a522:	181b      	adds	r3, r3, r0
 800a524:	6563      	str	r3, [r4, #84]	; 0x54
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	4a02      	ldr	r2, [pc, #8]	; (800a534 <__sread+0x24>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	e7f9      	b.n	800a526 <__sread+0x16>
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	ffffefff 	.word	0xffffefff

0800a538 <__swrite>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	001f      	movs	r7, r3
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	0005      	movs	r5, r0
 800a540:	000c      	movs	r4, r1
 800a542:	0016      	movs	r6, r2
 800a544:	05db      	lsls	r3, r3, #23
 800a546:	d505      	bpl.n	800a554 <__swrite+0x1c>
 800a548:	230e      	movs	r3, #14
 800a54a:	5ec9      	ldrsh	r1, [r1, r3]
 800a54c:	2200      	movs	r2, #0
 800a54e:	2302      	movs	r3, #2
 800a550:	f000 f874 	bl	800a63c <_lseek_r>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	4a05      	ldr	r2, [pc, #20]	; (800a56c <__swrite+0x34>)
 800a558:	0028      	movs	r0, r5
 800a55a:	4013      	ands	r3, r2
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	0032      	movs	r2, r6
 800a560:	230e      	movs	r3, #14
 800a562:	5ee1      	ldrsh	r1, [r4, r3]
 800a564:	003b      	movs	r3, r7
 800a566:	f000 f81f 	bl	800a5a8 <_write_r>
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56c:	ffffefff 	.word	0xffffefff

0800a570 <__sseek>:
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	000c      	movs	r4, r1
 800a574:	250e      	movs	r5, #14
 800a576:	5f49      	ldrsh	r1, [r1, r5]
 800a578:	f000 f860 	bl	800a63c <_lseek_r>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	1c42      	adds	r2, r0, #1
 800a580:	d103      	bne.n	800a58a <__sseek+0x1a>
 800a582:	4a05      	ldr	r2, [pc, #20]	; (800a598 <__sseek+0x28>)
 800a584:	4013      	ands	r3, r2
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	bd70      	pop	{r4, r5, r6, pc}
 800a58a:	2280      	movs	r2, #128	; 0x80
 800a58c:	0152      	lsls	r2, r2, #5
 800a58e:	4313      	orrs	r3, r2
 800a590:	81a3      	strh	r3, [r4, #12]
 800a592:	6560      	str	r0, [r4, #84]	; 0x54
 800a594:	e7f8      	b.n	800a588 <__sseek+0x18>
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	ffffefff 	.word	0xffffefff

0800a59c <__sclose>:
 800a59c:	b510      	push	{r4, lr}
 800a59e:	230e      	movs	r3, #14
 800a5a0:	5ec9      	ldrsh	r1, [r1, r3]
 800a5a2:	f000 f815 	bl	800a5d0 <_close_r>
 800a5a6:	bd10      	pop	{r4, pc}

0800a5a8 <_write_r>:
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	0004      	movs	r4, r0
 800a5ac:	0008      	movs	r0, r1
 800a5ae:	0011      	movs	r1, r2
 800a5b0:	001a      	movs	r2, r3
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	4d05      	ldr	r5, [pc, #20]	; (800a5cc <_write_r+0x24>)
 800a5b6:	602b      	str	r3, [r5, #0]
 800a5b8:	f7f9 fe4d 	bl	8004256 <_write>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d103      	bne.n	800a5c8 <_write_r+0x20>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d000      	beq.n	800a5c8 <_write_r+0x20>
 800a5c6:	6023      	str	r3, [r4, #0]
 800a5c8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	200004f4 	.word	0x200004f4

0800a5d0 <_close_r>:
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	b570      	push	{r4, r5, r6, lr}
 800a5d4:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_close_r+0x20>)
 800a5d6:	0004      	movs	r4, r0
 800a5d8:	0008      	movs	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f9 fe57 	bl	800428e <_close>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d103      	bne.n	800a5ec <_close_r+0x1c>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d000      	beq.n	800a5ec <_close_r+0x1c>
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	bd70      	pop	{r4, r5, r6, pc}
 800a5ee:	46c0      	nop			; (mov r8, r8)
 800a5f0:	200004f4 	.word	0x200004f4

0800a5f4 <_fstat_r>:
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	b570      	push	{r4, r5, r6, lr}
 800a5f8:	4d06      	ldr	r5, [pc, #24]	; (800a614 <_fstat_r+0x20>)
 800a5fa:	0004      	movs	r4, r0
 800a5fc:	0008      	movs	r0, r1
 800a5fe:	0011      	movs	r1, r2
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	f7f9 fe4e 	bl	80042a2 <_fstat>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d103      	bne.n	800a612 <_fstat_r+0x1e>
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d000      	beq.n	800a612 <_fstat_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	200004f4 	.word	0x200004f4

0800a618 <_isatty_r>:
 800a618:	2300      	movs	r3, #0
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	4d06      	ldr	r5, [pc, #24]	; (800a638 <_isatty_r+0x20>)
 800a61e:	0004      	movs	r4, r0
 800a620:	0008      	movs	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f9 fe4b 	bl	80042be <_isatty>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d103      	bne.n	800a634 <_isatty_r+0x1c>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d000      	beq.n	800a634 <_isatty_r+0x1c>
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	bd70      	pop	{r4, r5, r6, pc}
 800a636:	46c0      	nop			; (mov r8, r8)
 800a638:	200004f4 	.word	0x200004f4

0800a63c <_lseek_r>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	0004      	movs	r4, r0
 800a640:	0008      	movs	r0, r1
 800a642:	0011      	movs	r1, r2
 800a644:	001a      	movs	r2, r3
 800a646:	2300      	movs	r3, #0
 800a648:	4d05      	ldr	r5, [pc, #20]	; (800a660 <_lseek_r+0x24>)
 800a64a:	602b      	str	r3, [r5, #0]
 800a64c:	f7f9 fe40 	bl	80042d0 <_lseek>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d103      	bne.n	800a65c <_lseek_r+0x20>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d000      	beq.n	800a65c <_lseek_r+0x20>
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	200004f4 	.word	0x200004f4

0800a664 <_read_r>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	0004      	movs	r4, r0
 800a668:	0008      	movs	r0, r1
 800a66a:	0011      	movs	r1, r2
 800a66c:	001a      	movs	r2, r3
 800a66e:	2300      	movs	r3, #0
 800a670:	4d05      	ldr	r5, [pc, #20]	; (800a688 <_read_r+0x24>)
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	f7f9 fdd2 	bl	800421c <_read>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d103      	bne.n	800a684 <_read_r+0x20>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d000      	beq.n	800a684 <_read_r+0x20>
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	bd70      	pop	{r4, r5, r6, pc}
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	200004f4 	.word	0x200004f4

0800a68c <_init>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	46c0      	nop			; (mov r8, r8)
 800a690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a692:	bc08      	pop	{r3}
 800a694:	469e      	mov	lr, r3
 800a696:	4770      	bx	lr

0800a698 <_fini>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	46c0      	nop			; (mov r8, r8)
 800a69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69e:	bc08      	pop	{r3}
 800a6a0:	469e      	mov	lr, r3
 800a6a2:	4770      	bx	lr
