
Channel_Stimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005084  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f0  080052f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052f0  080052f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052f8  080052f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08005370  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08005370  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce6c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  0002cf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dfb  00000000  00000000  000307e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db61  00000000  00000000  000455db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008073c  00000000  00000000  0005313c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  000d38cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800512c 	.word	0x0800512c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800512c 	.word	0x0800512c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f84c 	bl	80002ec <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__aeabi_d2uiz>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2200      	movs	r2, #0
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002b6:	0004      	movs	r4, r0
 80002b8:	000d      	movs	r5, r1
 80002ba:	f001 fca1 	bl	8001c00 <__aeabi_dcmpge>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d104      	bne.n	80002cc <__aeabi_d2uiz+0x1c>
 80002c2:	0020      	movs	r0, r4
 80002c4:	0029      	movs	r1, r5
 80002c6:	f001 fbe9 	bl	8001a9c <__aeabi_d2iz>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <__aeabi_d2uiz+0x38>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	0020      	movs	r0, r4
 80002d2:	0029      	movs	r1, r5
 80002d4:	f001 f850 	bl	8001378 <__aeabi_dsub>
 80002d8:	f001 fbe0 	bl	8001a9c <__aeabi_d2iz>
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	061b      	lsls	r3, r3, #24
 80002e0:	469c      	mov	ip, r3
 80002e2:	4460      	add	r0, ip
 80002e4:	e7f1      	b.n	80002ca <__aeabi_d2uiz+0x1a>
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	41e00000 	.word	0x41e00000

080002ec <__udivmoddi4>:
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	4657      	mov	r7, sl
 80002f0:	464e      	mov	r6, r9
 80002f2:	4645      	mov	r5, r8
 80002f4:	46de      	mov	lr, fp
 80002f6:	b5e0      	push	{r5, r6, r7, lr}
 80002f8:	0004      	movs	r4, r0
 80002fa:	000d      	movs	r5, r1
 80002fc:	4692      	mov	sl, r2
 80002fe:	4699      	mov	r9, r3
 8000300:	b083      	sub	sp, #12
 8000302:	428b      	cmp	r3, r1
 8000304:	d830      	bhi.n	8000368 <__udivmoddi4+0x7c>
 8000306:	d02d      	beq.n	8000364 <__udivmoddi4+0x78>
 8000308:	4649      	mov	r1, r9
 800030a:	4650      	mov	r0, sl
 800030c:	f001 fca0 	bl	8001c50 <__clzdi2>
 8000310:	0029      	movs	r1, r5
 8000312:	0006      	movs	r6, r0
 8000314:	0020      	movs	r0, r4
 8000316:	f001 fc9b 	bl	8001c50 <__clzdi2>
 800031a:	1a33      	subs	r3, r6, r0
 800031c:	4698      	mov	r8, r3
 800031e:	3b20      	subs	r3, #32
 8000320:	469b      	mov	fp, r3
 8000322:	d433      	bmi.n	800038c <__udivmoddi4+0xa0>
 8000324:	465a      	mov	r2, fp
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	4642      	mov	r2, r8
 800032c:	001f      	movs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d83a      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000338:	42af      	cmp	r7, r5
 800033a:	d100      	bne.n	800033e <__udivmoddi4+0x52>
 800033c:	e078      	b.n	8000430 <__udivmoddi4+0x144>
 800033e:	465b      	mov	r3, fp
 8000340:	1ba4      	subs	r4, r4, r6
 8000342:	41bd      	sbcs	r5, r7
 8000344:	2b00      	cmp	r3, #0
 8000346:	da00      	bge.n	800034a <__udivmoddi4+0x5e>
 8000348:	e075      	b.n	8000436 <__udivmoddi4+0x14a>
 800034a:	2200      	movs	r2, #0
 800034c:	2300      	movs	r3, #0
 800034e:	9200      	str	r2, [sp, #0]
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	465a      	mov	r2, fp
 8000356:	4093      	lsls	r3, r2
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2301      	movs	r3, #1
 800035c:	4642      	mov	r2, r8
 800035e:	4093      	lsls	r3, r2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	e028      	b.n	80003b6 <__udivmoddi4+0xca>
 8000364:	4282      	cmp	r2, r0
 8000366:	d9cf      	bls.n	8000308 <__udivmoddi4+0x1c>
 8000368:	2200      	movs	r2, #0
 800036a:	2300      	movs	r3, #0
 800036c:	9200      	str	r2, [sp, #0]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <__udivmoddi4+0x8e>
 8000376:	601c      	str	r4, [r3, #0]
 8000378:	605d      	str	r5, [r3, #4]
 800037a:	9800      	ldr	r0, [sp, #0]
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	b003      	add	sp, #12
 8000380:	bcf0      	pop	{r4, r5, r6, r7}
 8000382:	46bb      	mov	fp, r7
 8000384:	46b2      	mov	sl, r6
 8000386:	46a9      	mov	r9, r5
 8000388:	46a0      	mov	r8, r4
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038c:	4642      	mov	r2, r8
 800038e:	2320      	movs	r3, #32
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	4652      	mov	r2, sl
 8000394:	40da      	lsrs	r2, r3
 8000396:	4641      	mov	r1, r8
 8000398:	0013      	movs	r3, r2
 800039a:	464a      	mov	r2, r9
 800039c:	408a      	lsls	r2, r1
 800039e:	0017      	movs	r7, r2
 80003a0:	4642      	mov	r2, r8
 80003a2:	431f      	orrs	r7, r3
 80003a4:	4653      	mov	r3, sl
 80003a6:	4093      	lsls	r3, r2
 80003a8:	001e      	movs	r6, r3
 80003aa:	42af      	cmp	r7, r5
 80003ac:	d9c4      	bls.n	8000338 <__udivmoddi4+0x4c>
 80003ae:	2200      	movs	r2, #0
 80003b0:	2300      	movs	r3, #0
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	4643      	mov	r3, r8
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d0d9      	beq.n	8000370 <__udivmoddi4+0x84>
 80003bc:	07fb      	lsls	r3, r7, #31
 80003be:	0872      	lsrs	r2, r6, #1
 80003c0:	431a      	orrs	r2, r3
 80003c2:	4646      	mov	r6, r8
 80003c4:	087b      	lsrs	r3, r7, #1
 80003c6:	e00e      	b.n	80003e6 <__udivmoddi4+0xfa>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d101      	bne.n	80003d0 <__udivmoddi4+0xe4>
 80003cc:	42a2      	cmp	r2, r4
 80003ce:	d80c      	bhi.n	80003ea <__udivmoddi4+0xfe>
 80003d0:	1aa4      	subs	r4, r4, r2
 80003d2:	419d      	sbcs	r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	1924      	adds	r4, r4, r4
 80003d8:	416d      	adcs	r5, r5
 80003da:	2100      	movs	r1, #0
 80003dc:	3e01      	subs	r6, #1
 80003de:	1824      	adds	r4, r4, r0
 80003e0:	414d      	adcs	r5, r1
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d006      	beq.n	80003f4 <__udivmoddi4+0x108>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d9ee      	bls.n	80003c8 <__udivmoddi4+0xdc>
 80003ea:	3e01      	subs	r6, #1
 80003ec:	1924      	adds	r4, r4, r4
 80003ee:	416d      	adcs	r5, r5
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d1f8      	bne.n	80003e6 <__udivmoddi4+0xfa>
 80003f4:	9800      	ldr	r0, [sp, #0]
 80003f6:	9901      	ldr	r1, [sp, #4]
 80003f8:	465b      	mov	r3, fp
 80003fa:	1900      	adds	r0, r0, r4
 80003fc:	4169      	adcs	r1, r5
 80003fe:	2b00      	cmp	r3, #0
 8000400:	db24      	blt.n	800044c <__udivmoddi4+0x160>
 8000402:	002b      	movs	r3, r5
 8000404:	465a      	mov	r2, fp
 8000406:	4644      	mov	r4, r8
 8000408:	40d3      	lsrs	r3, r2
 800040a:	002a      	movs	r2, r5
 800040c:	40e2      	lsrs	r2, r4
 800040e:	001c      	movs	r4, r3
 8000410:	465b      	mov	r3, fp
 8000412:	0015      	movs	r5, r2
 8000414:	2b00      	cmp	r3, #0
 8000416:	db2a      	blt.n	800046e <__udivmoddi4+0x182>
 8000418:	0026      	movs	r6, r4
 800041a:	409e      	lsls	r6, r3
 800041c:	0033      	movs	r3, r6
 800041e:	0026      	movs	r6, r4
 8000420:	4647      	mov	r7, r8
 8000422:	40be      	lsls	r6, r7
 8000424:	0032      	movs	r2, r6
 8000426:	1a80      	subs	r0, r0, r2
 8000428:	4199      	sbcs	r1, r3
 800042a:	9000      	str	r0, [sp, #0]
 800042c:	9101      	str	r1, [sp, #4]
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x84>
 8000430:	42a3      	cmp	r3, r4
 8000432:	d8bc      	bhi.n	80003ae <__udivmoddi4+0xc2>
 8000434:	e783      	b.n	800033e <__udivmoddi4+0x52>
 8000436:	4642      	mov	r2, r8
 8000438:	2320      	movs	r3, #32
 800043a:	2100      	movs	r1, #0
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	2200      	movs	r2, #0
 8000440:	9100      	str	r1, [sp, #0]
 8000442:	9201      	str	r2, [sp, #4]
 8000444:	2201      	movs	r2, #1
 8000446:	40da      	lsrs	r2, r3
 8000448:	9201      	str	r2, [sp, #4]
 800044a:	e786      	b.n	800035a <__udivmoddi4+0x6e>
 800044c:	4642      	mov	r2, r8
 800044e:	2320      	movs	r3, #32
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	002a      	movs	r2, r5
 8000454:	4646      	mov	r6, r8
 8000456:	409a      	lsls	r2, r3
 8000458:	0023      	movs	r3, r4
 800045a:	40f3      	lsrs	r3, r6
 800045c:	4644      	mov	r4, r8
 800045e:	4313      	orrs	r3, r2
 8000460:	002a      	movs	r2, r5
 8000462:	40e2      	lsrs	r2, r4
 8000464:	001c      	movs	r4, r3
 8000466:	465b      	mov	r3, fp
 8000468:	0015      	movs	r5, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	dad4      	bge.n	8000418 <__udivmoddi4+0x12c>
 800046e:	4642      	mov	r2, r8
 8000470:	002f      	movs	r7, r5
 8000472:	2320      	movs	r3, #32
 8000474:	0026      	movs	r6, r4
 8000476:	4097      	lsls	r7, r2
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	40de      	lsrs	r6, r3
 800047c:	003b      	movs	r3, r7
 800047e:	4333      	orrs	r3, r6
 8000480:	e7cd      	b.n	800041e <__udivmoddi4+0x132>
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464f      	mov	r7, r9
 8000488:	4646      	mov	r6, r8
 800048a:	46d6      	mov	lr, sl
 800048c:	0245      	lsls	r5, r0, #9
 800048e:	b5c0      	push	{r6, r7, lr}
 8000490:	0047      	lsls	r7, r0, #1
 8000492:	1c0c      	adds	r4, r1, #0
 8000494:	0a6d      	lsrs	r5, r5, #9
 8000496:	0e3f      	lsrs	r7, r7, #24
 8000498:	0fc6      	lsrs	r6, r0, #31
 800049a:	2f00      	cmp	r7, #0
 800049c:	d066      	beq.n	800056c <__aeabi_fdiv+0xe8>
 800049e:	2fff      	cmp	r7, #255	; 0xff
 80004a0:	d06c      	beq.n	800057c <__aeabi_fdiv+0xf8>
 80004a2:	2300      	movs	r3, #0
 80004a4:	00ea      	lsls	r2, r5, #3
 80004a6:	2580      	movs	r5, #128	; 0x80
 80004a8:	4699      	mov	r9, r3
 80004aa:	469a      	mov	sl, r3
 80004ac:	04ed      	lsls	r5, r5, #19
 80004ae:	4315      	orrs	r5, r2
 80004b0:	3f7f      	subs	r7, #127	; 0x7f
 80004b2:	0260      	lsls	r0, r4, #9
 80004b4:	0061      	lsls	r1, r4, #1
 80004b6:	0a43      	lsrs	r3, r0, #9
 80004b8:	4698      	mov	r8, r3
 80004ba:	0e09      	lsrs	r1, r1, #24
 80004bc:	0fe4      	lsrs	r4, r4, #31
 80004be:	2900      	cmp	r1, #0
 80004c0:	d048      	beq.n	8000554 <__aeabi_fdiv+0xd0>
 80004c2:	29ff      	cmp	r1, #255	; 0xff
 80004c4:	d010      	beq.n	80004e8 <__aeabi_fdiv+0x64>
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	00d8      	lsls	r0, r3, #3
 80004ca:	04d2      	lsls	r2, r2, #19
 80004cc:	4302      	orrs	r2, r0
 80004ce:	4690      	mov	r8, r2
 80004d0:	2000      	movs	r0, #0
 80004d2:	397f      	subs	r1, #127	; 0x7f
 80004d4:	464a      	mov	r2, r9
 80004d6:	0033      	movs	r3, r6
 80004d8:	1a7f      	subs	r7, r7, r1
 80004da:	4302      	orrs	r2, r0
 80004dc:	496c      	ldr	r1, [pc, #432]	; (8000690 <__aeabi_fdiv+0x20c>)
 80004de:	0092      	lsls	r2, r2, #2
 80004e0:	588a      	ldr	r2, [r1, r2]
 80004e2:	4063      	eors	r3, r4
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	4697      	mov	pc, r2
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d16d      	bne.n	80005c8 <__aeabi_fdiv+0x144>
 80004ec:	2002      	movs	r0, #2
 80004ee:	3fff      	subs	r7, #255	; 0xff
 80004f0:	e033      	b.n	800055a <__aeabi_fdiv+0xd6>
 80004f2:	2300      	movs	r3, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	0026      	movs	r6, r4
 80004f8:	4645      	mov	r5, r8
 80004fa:	4682      	mov	sl, r0
 80004fc:	4653      	mov	r3, sl
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d100      	bne.n	8000504 <__aeabi_fdiv+0x80>
 8000502:	e07f      	b.n	8000604 <__aeabi_fdiv+0x180>
 8000504:	2b03      	cmp	r3, #3
 8000506:	d100      	bne.n	800050a <__aeabi_fdiv+0x86>
 8000508:	e094      	b.n	8000634 <__aeabi_fdiv+0x1b0>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d017      	beq.n	800053e <__aeabi_fdiv+0xba>
 800050e:	0038      	movs	r0, r7
 8000510:	307f      	adds	r0, #127	; 0x7f
 8000512:	2800      	cmp	r0, #0
 8000514:	dd5f      	ble.n	80005d6 <__aeabi_fdiv+0x152>
 8000516:	076b      	lsls	r3, r5, #29
 8000518:	d004      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 800051a:	230f      	movs	r3, #15
 800051c:	402b      	ands	r3, r5
 800051e:	2b04      	cmp	r3, #4
 8000520:	d000      	beq.n	8000524 <__aeabi_fdiv+0xa0>
 8000522:	3504      	adds	r5, #4
 8000524:	012b      	lsls	r3, r5, #4
 8000526:	d503      	bpl.n	8000530 <__aeabi_fdiv+0xac>
 8000528:	0038      	movs	r0, r7
 800052a:	4b5a      	ldr	r3, [pc, #360]	; (8000694 <__aeabi_fdiv+0x210>)
 800052c:	3080      	adds	r0, #128	; 0x80
 800052e:	401d      	ands	r5, r3
 8000530:	28fe      	cmp	r0, #254	; 0xfe
 8000532:	dc67      	bgt.n	8000604 <__aeabi_fdiv+0x180>
 8000534:	01ad      	lsls	r5, r5, #6
 8000536:	0a6d      	lsrs	r5, r5, #9
 8000538:	b2c0      	uxtb	r0, r0
 800053a:	e002      	b.n	8000542 <__aeabi_fdiv+0xbe>
 800053c:	001e      	movs	r6, r3
 800053e:	2000      	movs	r0, #0
 8000540:	2500      	movs	r5, #0
 8000542:	05c0      	lsls	r0, r0, #23
 8000544:	4328      	orrs	r0, r5
 8000546:	07f6      	lsls	r6, r6, #31
 8000548:	4330      	orrs	r0, r6
 800054a:	bce0      	pop	{r5, r6, r7}
 800054c:	46ba      	mov	sl, r7
 800054e:	46b1      	mov	r9, r6
 8000550:	46a8      	mov	r8, r5
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	2b00      	cmp	r3, #0
 8000556:	d12b      	bne.n	80005b0 <__aeabi_fdiv+0x12c>
 8000558:	2001      	movs	r0, #1
 800055a:	464a      	mov	r2, r9
 800055c:	0033      	movs	r3, r6
 800055e:	494e      	ldr	r1, [pc, #312]	; (8000698 <__aeabi_fdiv+0x214>)
 8000560:	4302      	orrs	r2, r0
 8000562:	0092      	lsls	r2, r2, #2
 8000564:	588a      	ldr	r2, [r1, r2]
 8000566:	4063      	eors	r3, r4
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4697      	mov	pc, r2
 800056c:	2d00      	cmp	r5, #0
 800056e:	d113      	bne.n	8000598 <__aeabi_fdiv+0x114>
 8000570:	2304      	movs	r3, #4
 8000572:	4699      	mov	r9, r3
 8000574:	3b03      	subs	r3, #3
 8000576:	2700      	movs	r7, #0
 8000578:	469a      	mov	sl, r3
 800057a:	e79a      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 800057c:	2d00      	cmp	r5, #0
 800057e:	d105      	bne.n	800058c <__aeabi_fdiv+0x108>
 8000580:	2308      	movs	r3, #8
 8000582:	4699      	mov	r9, r3
 8000584:	3b06      	subs	r3, #6
 8000586:	27ff      	movs	r7, #255	; 0xff
 8000588:	469a      	mov	sl, r3
 800058a:	e792      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 800058c:	230c      	movs	r3, #12
 800058e:	4699      	mov	r9, r3
 8000590:	3b09      	subs	r3, #9
 8000592:	27ff      	movs	r7, #255	; 0xff
 8000594:	469a      	mov	sl, r3
 8000596:	e78c      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 8000598:	0028      	movs	r0, r5
 800059a:	f001 fb3b 	bl	8001c14 <__clzsi2>
 800059e:	2776      	movs	r7, #118	; 0x76
 80005a0:	1f43      	subs	r3, r0, #5
 80005a2:	409d      	lsls	r5, r3
 80005a4:	2300      	movs	r3, #0
 80005a6:	427f      	negs	r7, r7
 80005a8:	4699      	mov	r9, r3
 80005aa:	469a      	mov	sl, r3
 80005ac:	1a3f      	subs	r7, r7, r0
 80005ae:	e780      	b.n	80004b2 <__aeabi_fdiv+0x2e>
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fb2f 	bl	8001c14 <__clzsi2>
 80005b6:	4642      	mov	r2, r8
 80005b8:	1f43      	subs	r3, r0, #5
 80005ba:	2176      	movs	r1, #118	; 0x76
 80005bc:	409a      	lsls	r2, r3
 80005be:	4249      	negs	r1, r1
 80005c0:	1a09      	subs	r1, r1, r0
 80005c2:	4690      	mov	r8, r2
 80005c4:	2000      	movs	r0, #0
 80005c6:	e785      	b.n	80004d4 <__aeabi_fdiv+0x50>
 80005c8:	21ff      	movs	r1, #255	; 0xff
 80005ca:	2003      	movs	r0, #3
 80005cc:	e782      	b.n	80004d4 <__aeabi_fdiv+0x50>
 80005ce:	001e      	movs	r6, r3
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	2500      	movs	r5, #0
 80005d4:	e7b5      	b.n	8000542 <__aeabi_fdiv+0xbe>
 80005d6:	2301      	movs	r3, #1
 80005d8:	1a1b      	subs	r3, r3, r0
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dcaf      	bgt.n	800053e <__aeabi_fdiv+0xba>
 80005de:	379e      	adds	r7, #158	; 0x9e
 80005e0:	0029      	movs	r1, r5
 80005e2:	40bd      	lsls	r5, r7
 80005e4:	40d9      	lsrs	r1, r3
 80005e6:	1e6a      	subs	r2, r5, #1
 80005e8:	4195      	sbcs	r5, r2
 80005ea:	430d      	orrs	r5, r1
 80005ec:	076b      	lsls	r3, r5, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fdiv+0x176>
 80005f0:	230f      	movs	r3, #15
 80005f2:	402b      	ands	r3, r5
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fdiv+0x176>
 80005f8:	3504      	adds	r5, #4
 80005fa:	016b      	lsls	r3, r5, #5
 80005fc:	d544      	bpl.n	8000688 <__aeabi_fdiv+0x204>
 80005fe:	2001      	movs	r0, #1
 8000600:	2500      	movs	r5, #0
 8000602:	e79e      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000604:	20ff      	movs	r0, #255	; 0xff
 8000606:	2500      	movs	r5, #0
 8000608:	e79b      	b.n	8000542 <__aeabi_fdiv+0xbe>
 800060a:	2580      	movs	r5, #128	; 0x80
 800060c:	2600      	movs	r6, #0
 800060e:	20ff      	movs	r0, #255	; 0xff
 8000610:	03ed      	lsls	r5, r5, #15
 8000612:	e796      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000614:	2300      	movs	r3, #0
 8000616:	4698      	mov	r8, r3
 8000618:	2080      	movs	r0, #128	; 0x80
 800061a:	03c0      	lsls	r0, r0, #15
 800061c:	4205      	tst	r5, r0
 800061e:	d009      	beq.n	8000634 <__aeabi_fdiv+0x1b0>
 8000620:	4643      	mov	r3, r8
 8000622:	4203      	tst	r3, r0
 8000624:	d106      	bne.n	8000634 <__aeabi_fdiv+0x1b0>
 8000626:	4645      	mov	r5, r8
 8000628:	4305      	orrs	r5, r0
 800062a:	026d      	lsls	r5, r5, #9
 800062c:	0026      	movs	r6, r4
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	0a6d      	lsrs	r5, r5, #9
 8000632:	e786      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000634:	2080      	movs	r0, #128	; 0x80
 8000636:	03c0      	lsls	r0, r0, #15
 8000638:	4305      	orrs	r5, r0
 800063a:	026d      	lsls	r5, r5, #9
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	0a6d      	lsrs	r5, r5, #9
 8000640:	e77f      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000642:	4641      	mov	r1, r8
 8000644:	016a      	lsls	r2, r5, #5
 8000646:	0148      	lsls	r0, r1, #5
 8000648:	4282      	cmp	r2, r0
 800064a:	d219      	bcs.n	8000680 <__aeabi_fdiv+0x1fc>
 800064c:	211b      	movs	r1, #27
 800064e:	2500      	movs	r5, #0
 8000650:	3f01      	subs	r7, #1
 8000652:	2601      	movs	r6, #1
 8000654:	0014      	movs	r4, r2
 8000656:	006d      	lsls	r5, r5, #1
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	2c00      	cmp	r4, #0
 800065c:	db01      	blt.n	8000662 <__aeabi_fdiv+0x1de>
 800065e:	4290      	cmp	r0, r2
 8000660:	d801      	bhi.n	8000666 <__aeabi_fdiv+0x1e2>
 8000662:	1a12      	subs	r2, r2, r0
 8000664:	4335      	orrs	r5, r6
 8000666:	3901      	subs	r1, #1
 8000668:	2900      	cmp	r1, #0
 800066a:	d1f3      	bne.n	8000654 <__aeabi_fdiv+0x1d0>
 800066c:	1e50      	subs	r0, r2, #1
 800066e:	4182      	sbcs	r2, r0
 8000670:	0038      	movs	r0, r7
 8000672:	307f      	adds	r0, #127	; 0x7f
 8000674:	001e      	movs	r6, r3
 8000676:	4315      	orrs	r5, r2
 8000678:	2800      	cmp	r0, #0
 800067a:	dd00      	ble.n	800067e <__aeabi_fdiv+0x1fa>
 800067c:	e74b      	b.n	8000516 <__aeabi_fdiv+0x92>
 800067e:	e7aa      	b.n	80005d6 <__aeabi_fdiv+0x152>
 8000680:	211a      	movs	r1, #26
 8000682:	2501      	movs	r5, #1
 8000684:	1a12      	subs	r2, r2, r0
 8000686:	e7e4      	b.n	8000652 <__aeabi_fdiv+0x1ce>
 8000688:	01ad      	lsls	r5, r5, #6
 800068a:	2000      	movs	r0, #0
 800068c:	0a6d      	lsrs	r5, r5, #9
 800068e:	e758      	b.n	8000542 <__aeabi_fdiv+0xbe>
 8000690:	08005144 	.word	0x08005144
 8000694:	f7ffffff 	.word	0xf7ffffff
 8000698:	08005184 	.word	0x08005184

0800069c <__aeabi_fmul>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	4657      	mov	r7, sl
 80006a0:	464e      	mov	r6, r9
 80006a2:	4645      	mov	r5, r8
 80006a4:	46de      	mov	lr, fp
 80006a6:	0244      	lsls	r4, r0, #9
 80006a8:	b5e0      	push	{r5, r6, r7, lr}
 80006aa:	0045      	lsls	r5, r0, #1
 80006ac:	1c0f      	adds	r7, r1, #0
 80006ae:	0a64      	lsrs	r4, r4, #9
 80006b0:	0e2d      	lsrs	r5, r5, #24
 80006b2:	0fc6      	lsrs	r6, r0, #31
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d047      	beq.n	8000748 <__aeabi_fmul+0xac>
 80006b8:	2dff      	cmp	r5, #255	; 0xff
 80006ba:	d04d      	beq.n	8000758 <__aeabi_fmul+0xbc>
 80006bc:	2300      	movs	r3, #0
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	469a      	mov	sl, r3
 80006c2:	469b      	mov	fp, r3
 80006c4:	00e4      	lsls	r4, r4, #3
 80006c6:	04c0      	lsls	r0, r0, #19
 80006c8:	4304      	orrs	r4, r0
 80006ca:	3d7f      	subs	r5, #127	; 0x7f
 80006cc:	0278      	lsls	r0, r7, #9
 80006ce:	0a43      	lsrs	r3, r0, #9
 80006d0:	4699      	mov	r9, r3
 80006d2:	007a      	lsls	r2, r7, #1
 80006d4:	0ffb      	lsrs	r3, r7, #31
 80006d6:	4698      	mov	r8, r3
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	464b      	mov	r3, r9
 80006dc:	d044      	beq.n	8000768 <__aeabi_fmul+0xcc>
 80006de:	2aff      	cmp	r2, #255	; 0xff
 80006e0:	d011      	beq.n	8000706 <__aeabi_fmul+0x6a>
 80006e2:	00d8      	lsls	r0, r3, #3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	4303      	orrs	r3, r0
 80006ea:	4699      	mov	r9, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	3a7f      	subs	r2, #127	; 0x7f
 80006f0:	18ad      	adds	r5, r5, r2
 80006f2:	4647      	mov	r7, r8
 80006f4:	4653      	mov	r3, sl
 80006f6:	4077      	eors	r7, r6
 80006f8:	1c69      	adds	r1, r5, #1
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d83f      	bhi.n	800077e <__aeabi_fmul+0xe2>
 80006fe:	4a72      	ldr	r2, [pc, #456]	; (80008c8 <__aeabi_fmul+0x22c>)
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	58d3      	ldr	r3, [r2, r3]
 8000704:	469f      	mov	pc, r3
 8000706:	35ff      	adds	r5, #255	; 0xff
 8000708:	2b00      	cmp	r3, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fmul+0x72>
 800070c:	e079      	b.n	8000802 <__aeabi_fmul+0x166>
 800070e:	4652      	mov	r2, sl
 8000710:	2302      	movs	r3, #2
 8000712:	431a      	orrs	r2, r3
 8000714:	4692      	mov	sl, r2
 8000716:	2002      	movs	r0, #2
 8000718:	e7eb      	b.n	80006f2 <__aeabi_fmul+0x56>
 800071a:	4647      	mov	r7, r8
 800071c:	464c      	mov	r4, r9
 800071e:	4683      	mov	fp, r0
 8000720:	465b      	mov	r3, fp
 8000722:	2b02      	cmp	r3, #2
 8000724:	d028      	beq.n	8000778 <__aeabi_fmul+0xdc>
 8000726:	2b03      	cmp	r3, #3
 8000728:	d100      	bne.n	800072c <__aeabi_fmul+0x90>
 800072a:	e0c6      	b.n	80008ba <__aeabi_fmul+0x21e>
 800072c:	2b01      	cmp	r3, #1
 800072e:	d14f      	bne.n	80007d0 <__aeabi_fmul+0x134>
 8000730:	2000      	movs	r0, #0
 8000732:	2400      	movs	r4, #0
 8000734:	05c0      	lsls	r0, r0, #23
 8000736:	07ff      	lsls	r7, r7, #31
 8000738:	4320      	orrs	r0, r4
 800073a:	4338      	orrs	r0, r7
 800073c:	bcf0      	pop	{r4, r5, r6, r7}
 800073e:	46bb      	mov	fp, r7
 8000740:	46b2      	mov	sl, r6
 8000742:	46a9      	mov	r9, r5
 8000744:	46a0      	mov	r8, r4
 8000746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000748:	2c00      	cmp	r4, #0
 800074a:	d171      	bne.n	8000830 <__aeabi_fmul+0x194>
 800074c:	2304      	movs	r3, #4
 800074e:	469a      	mov	sl, r3
 8000750:	3b03      	subs	r3, #3
 8000752:	2500      	movs	r5, #0
 8000754:	469b      	mov	fp, r3
 8000756:	e7b9      	b.n	80006cc <__aeabi_fmul+0x30>
 8000758:	2c00      	cmp	r4, #0
 800075a:	d163      	bne.n	8000824 <__aeabi_fmul+0x188>
 800075c:	2308      	movs	r3, #8
 800075e:	469a      	mov	sl, r3
 8000760:	3b06      	subs	r3, #6
 8000762:	25ff      	movs	r5, #255	; 0xff
 8000764:	469b      	mov	fp, r3
 8000766:	e7b1      	b.n	80006cc <__aeabi_fmul+0x30>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d150      	bne.n	800080e <__aeabi_fmul+0x172>
 800076c:	4652      	mov	r2, sl
 800076e:	3301      	adds	r3, #1
 8000770:	431a      	orrs	r2, r3
 8000772:	4692      	mov	sl, r2
 8000774:	2001      	movs	r0, #1
 8000776:	e7bc      	b.n	80006f2 <__aeabi_fmul+0x56>
 8000778:	20ff      	movs	r0, #255	; 0xff
 800077a:	2400      	movs	r4, #0
 800077c:	e7da      	b.n	8000734 <__aeabi_fmul+0x98>
 800077e:	4648      	mov	r0, r9
 8000780:	0c26      	lsrs	r6, r4, #16
 8000782:	0424      	lsls	r4, r4, #16
 8000784:	0c22      	lsrs	r2, r4, #16
 8000786:	0404      	lsls	r4, r0, #16
 8000788:	0c24      	lsrs	r4, r4, #16
 800078a:	464b      	mov	r3, r9
 800078c:	0020      	movs	r0, r4
 800078e:	0c1b      	lsrs	r3, r3, #16
 8000790:	4350      	muls	r0, r2
 8000792:	4374      	muls	r4, r6
 8000794:	435a      	muls	r2, r3
 8000796:	435e      	muls	r6, r3
 8000798:	1912      	adds	r2, r2, r4
 800079a:	0c03      	lsrs	r3, r0, #16
 800079c:	189b      	adds	r3, r3, r2
 800079e:	429c      	cmp	r4, r3
 80007a0:	d903      	bls.n	80007aa <__aeabi_fmul+0x10e>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0252      	lsls	r2, r2, #9
 80007a6:	4694      	mov	ip, r2
 80007a8:	4466      	add	r6, ip
 80007aa:	0400      	lsls	r0, r0, #16
 80007ac:	041a      	lsls	r2, r3, #16
 80007ae:	0c00      	lsrs	r0, r0, #16
 80007b0:	1812      	adds	r2, r2, r0
 80007b2:	0194      	lsls	r4, r2, #6
 80007b4:	1e60      	subs	r0, r4, #1
 80007b6:	4184      	sbcs	r4, r0
 80007b8:	0c1b      	lsrs	r3, r3, #16
 80007ba:	0e92      	lsrs	r2, r2, #26
 80007bc:	199b      	adds	r3, r3, r6
 80007be:	4314      	orrs	r4, r2
 80007c0:	019b      	lsls	r3, r3, #6
 80007c2:	431c      	orrs	r4, r3
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	d572      	bpl.n	80008ae <__aeabi_fmul+0x212>
 80007c8:	2001      	movs	r0, #1
 80007ca:	0863      	lsrs	r3, r4, #1
 80007cc:	4004      	ands	r4, r0
 80007ce:	431c      	orrs	r4, r3
 80007d0:	0008      	movs	r0, r1
 80007d2:	307f      	adds	r0, #127	; 0x7f
 80007d4:	2800      	cmp	r0, #0
 80007d6:	dd3c      	ble.n	8000852 <__aeabi_fmul+0x1b6>
 80007d8:	0763      	lsls	r3, r4, #29
 80007da:	d004      	beq.n	80007e6 <__aeabi_fmul+0x14a>
 80007dc:	230f      	movs	r3, #15
 80007de:	4023      	ands	r3, r4
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fmul+0x14a>
 80007e4:	3404      	adds	r4, #4
 80007e6:	0123      	lsls	r3, r4, #4
 80007e8:	d503      	bpl.n	80007f2 <__aeabi_fmul+0x156>
 80007ea:	3180      	adds	r1, #128	; 0x80
 80007ec:	0008      	movs	r0, r1
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <__aeabi_fmul+0x230>)
 80007f0:	401c      	ands	r4, r3
 80007f2:	28fe      	cmp	r0, #254	; 0xfe
 80007f4:	dcc0      	bgt.n	8000778 <__aeabi_fmul+0xdc>
 80007f6:	01a4      	lsls	r4, r4, #6
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	b2c0      	uxtb	r0, r0
 80007fc:	e79a      	b.n	8000734 <__aeabi_fmul+0x98>
 80007fe:	0037      	movs	r7, r6
 8000800:	e78e      	b.n	8000720 <__aeabi_fmul+0x84>
 8000802:	4652      	mov	r2, sl
 8000804:	2303      	movs	r3, #3
 8000806:	431a      	orrs	r2, r3
 8000808:	4692      	mov	sl, r2
 800080a:	2003      	movs	r0, #3
 800080c:	e771      	b.n	80006f2 <__aeabi_fmul+0x56>
 800080e:	4648      	mov	r0, r9
 8000810:	f001 fa00 	bl	8001c14 <__clzsi2>
 8000814:	464a      	mov	r2, r9
 8000816:	1f43      	subs	r3, r0, #5
 8000818:	409a      	lsls	r2, r3
 800081a:	1a2d      	subs	r5, r5, r0
 800081c:	4691      	mov	r9, r2
 800081e:	2000      	movs	r0, #0
 8000820:	3d76      	subs	r5, #118	; 0x76
 8000822:	e766      	b.n	80006f2 <__aeabi_fmul+0x56>
 8000824:	230c      	movs	r3, #12
 8000826:	469a      	mov	sl, r3
 8000828:	3b09      	subs	r3, #9
 800082a:	25ff      	movs	r5, #255	; 0xff
 800082c:	469b      	mov	fp, r3
 800082e:	e74d      	b.n	80006cc <__aeabi_fmul+0x30>
 8000830:	0020      	movs	r0, r4
 8000832:	f001 f9ef 	bl	8001c14 <__clzsi2>
 8000836:	2576      	movs	r5, #118	; 0x76
 8000838:	1f43      	subs	r3, r0, #5
 800083a:	409c      	lsls	r4, r3
 800083c:	2300      	movs	r3, #0
 800083e:	426d      	negs	r5, r5
 8000840:	469a      	mov	sl, r3
 8000842:	469b      	mov	fp, r3
 8000844:	1a2d      	subs	r5, r5, r0
 8000846:	e741      	b.n	80006cc <__aeabi_fmul+0x30>
 8000848:	2480      	movs	r4, #128	; 0x80
 800084a:	2700      	movs	r7, #0
 800084c:	20ff      	movs	r0, #255	; 0xff
 800084e:	03e4      	lsls	r4, r4, #15
 8000850:	e770      	b.n	8000734 <__aeabi_fmul+0x98>
 8000852:	2301      	movs	r3, #1
 8000854:	1a1b      	subs	r3, r3, r0
 8000856:	2b1b      	cmp	r3, #27
 8000858:	dd00      	ble.n	800085c <__aeabi_fmul+0x1c0>
 800085a:	e769      	b.n	8000730 <__aeabi_fmul+0x94>
 800085c:	319e      	adds	r1, #158	; 0x9e
 800085e:	0020      	movs	r0, r4
 8000860:	408c      	lsls	r4, r1
 8000862:	40d8      	lsrs	r0, r3
 8000864:	1e63      	subs	r3, r4, #1
 8000866:	419c      	sbcs	r4, r3
 8000868:	4304      	orrs	r4, r0
 800086a:	0763      	lsls	r3, r4, #29
 800086c:	d004      	beq.n	8000878 <__aeabi_fmul+0x1dc>
 800086e:	230f      	movs	r3, #15
 8000870:	4023      	ands	r3, r4
 8000872:	2b04      	cmp	r3, #4
 8000874:	d000      	beq.n	8000878 <__aeabi_fmul+0x1dc>
 8000876:	3404      	adds	r4, #4
 8000878:	0163      	lsls	r3, r4, #5
 800087a:	d51a      	bpl.n	80008b2 <__aeabi_fmul+0x216>
 800087c:	2001      	movs	r0, #1
 800087e:	2400      	movs	r4, #0
 8000880:	e758      	b.n	8000734 <__aeabi_fmul+0x98>
 8000882:	2080      	movs	r0, #128	; 0x80
 8000884:	03c0      	lsls	r0, r0, #15
 8000886:	4204      	tst	r4, r0
 8000888:	d009      	beq.n	800089e <__aeabi_fmul+0x202>
 800088a:	464b      	mov	r3, r9
 800088c:	4203      	tst	r3, r0
 800088e:	d106      	bne.n	800089e <__aeabi_fmul+0x202>
 8000890:	464c      	mov	r4, r9
 8000892:	4304      	orrs	r4, r0
 8000894:	0264      	lsls	r4, r4, #9
 8000896:	4647      	mov	r7, r8
 8000898:	20ff      	movs	r0, #255	; 0xff
 800089a:	0a64      	lsrs	r4, r4, #9
 800089c:	e74a      	b.n	8000734 <__aeabi_fmul+0x98>
 800089e:	2080      	movs	r0, #128	; 0x80
 80008a0:	03c0      	lsls	r0, r0, #15
 80008a2:	4304      	orrs	r4, r0
 80008a4:	0264      	lsls	r4, r4, #9
 80008a6:	0037      	movs	r7, r6
 80008a8:	20ff      	movs	r0, #255	; 0xff
 80008aa:	0a64      	lsrs	r4, r4, #9
 80008ac:	e742      	b.n	8000734 <__aeabi_fmul+0x98>
 80008ae:	0029      	movs	r1, r5
 80008b0:	e78e      	b.n	80007d0 <__aeabi_fmul+0x134>
 80008b2:	01a4      	lsls	r4, r4, #6
 80008b4:	2000      	movs	r0, #0
 80008b6:	0a64      	lsrs	r4, r4, #9
 80008b8:	e73c      	b.n	8000734 <__aeabi_fmul+0x98>
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	03c0      	lsls	r0, r0, #15
 80008be:	4304      	orrs	r4, r0
 80008c0:	0264      	lsls	r4, r4, #9
 80008c2:	20ff      	movs	r0, #255	; 0xff
 80008c4:	0a64      	lsrs	r4, r4, #9
 80008c6:	e735      	b.n	8000734 <__aeabi_fmul+0x98>
 80008c8:	080051c4 	.word	0x080051c4
 80008cc:	f7ffffff 	.word	0xf7ffffff

080008d0 <__aeabi_ddiv>:
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	4657      	mov	r7, sl
 80008d4:	464e      	mov	r6, r9
 80008d6:	4645      	mov	r5, r8
 80008d8:	46de      	mov	lr, fp
 80008da:	b5e0      	push	{r5, r6, r7, lr}
 80008dc:	4681      	mov	r9, r0
 80008de:	0005      	movs	r5, r0
 80008e0:	030c      	lsls	r4, r1, #12
 80008e2:	0048      	lsls	r0, r1, #1
 80008e4:	4692      	mov	sl, r2
 80008e6:	001f      	movs	r7, r3
 80008e8:	b085      	sub	sp, #20
 80008ea:	0b24      	lsrs	r4, r4, #12
 80008ec:	0d40      	lsrs	r0, r0, #21
 80008ee:	0fce      	lsrs	r6, r1, #31
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d059      	beq.n	80009a8 <__aeabi_ddiv+0xd8>
 80008f4:	4b87      	ldr	r3, [pc, #540]	; (8000b14 <__aeabi_ddiv+0x244>)
 80008f6:	4298      	cmp	r0, r3
 80008f8:	d100      	bne.n	80008fc <__aeabi_ddiv+0x2c>
 80008fa:	e098      	b.n	8000a2e <__aeabi_ddiv+0x15e>
 80008fc:	0f6b      	lsrs	r3, r5, #29
 80008fe:	00e4      	lsls	r4, r4, #3
 8000900:	431c      	orrs	r4, r3
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	4323      	orrs	r3, r4
 8000908:	4698      	mov	r8, r3
 800090a:	4b83      	ldr	r3, [pc, #524]	; (8000b18 <__aeabi_ddiv+0x248>)
 800090c:	00ed      	lsls	r5, r5, #3
 800090e:	469b      	mov	fp, r3
 8000910:	2300      	movs	r3, #0
 8000912:	4699      	mov	r9, r3
 8000914:	4483      	add	fp, r0
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	033c      	lsls	r4, r7, #12
 800091a:	007b      	lsls	r3, r7, #1
 800091c:	4650      	mov	r0, sl
 800091e:	0b24      	lsrs	r4, r4, #12
 8000920:	0d5b      	lsrs	r3, r3, #21
 8000922:	0fff      	lsrs	r7, r7, #31
 8000924:	2b00      	cmp	r3, #0
 8000926:	d067      	beq.n	80009f8 <__aeabi_ddiv+0x128>
 8000928:	4a7a      	ldr	r2, [pc, #488]	; (8000b14 <__aeabi_ddiv+0x244>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x90>
 800092e:	497a      	ldr	r1, [pc, #488]	; (8000b18 <__aeabi_ddiv+0x248>)
 8000930:	0f42      	lsrs	r2, r0, #29
 8000932:	468c      	mov	ip, r1
 8000934:	00e4      	lsls	r4, r4, #3
 8000936:	4659      	mov	r1, fp
 8000938:	4314      	orrs	r4, r2
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	4463      	add	r3, ip
 800093e:	0412      	lsls	r2, r2, #16
 8000940:	1acb      	subs	r3, r1, r3
 8000942:	4314      	orrs	r4, r2
 8000944:	469b      	mov	fp, r3
 8000946:	00c2      	lsls	r2, r0, #3
 8000948:	2000      	movs	r0, #0
 800094a:	0033      	movs	r3, r6
 800094c:	407b      	eors	r3, r7
 800094e:	469a      	mov	sl, r3
 8000950:	464b      	mov	r3, r9
 8000952:	2b0f      	cmp	r3, #15
 8000954:	d900      	bls.n	8000958 <__aeabi_ddiv+0x88>
 8000956:	e0ef      	b.n	8000b38 <__aeabi_ddiv+0x268>
 8000958:	4970      	ldr	r1, [pc, #448]	; (8000b1c <__aeabi_ddiv+0x24c>)
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	58cb      	ldr	r3, [r1, r3]
 800095e:	469f      	mov	pc, r3
 8000960:	4b6f      	ldr	r3, [pc, #444]	; (8000b20 <__aeabi_ddiv+0x250>)
 8000962:	4652      	mov	r2, sl
 8000964:	469c      	mov	ip, r3
 8000966:	4322      	orrs	r2, r4
 8000968:	44e3      	add	fp, ip
 800096a:	2a00      	cmp	r2, #0
 800096c:	d000      	beq.n	8000970 <__aeabi_ddiv+0xa0>
 800096e:	e095      	b.n	8000a9c <__aeabi_ddiv+0x1cc>
 8000970:	4649      	mov	r1, r9
 8000972:	2302      	movs	r3, #2
 8000974:	4319      	orrs	r1, r3
 8000976:	4689      	mov	r9, r1
 8000978:	2400      	movs	r4, #0
 800097a:	2002      	movs	r0, #2
 800097c:	e7e5      	b.n	800094a <__aeabi_ddiv+0x7a>
 800097e:	2300      	movs	r3, #0
 8000980:	2400      	movs	r4, #0
 8000982:	2500      	movs	r5, #0
 8000984:	4652      	mov	r2, sl
 8000986:	051b      	lsls	r3, r3, #20
 8000988:	4323      	orrs	r3, r4
 800098a:	07d2      	lsls	r2, r2, #31
 800098c:	4313      	orrs	r3, r2
 800098e:	0028      	movs	r0, r5
 8000990:	0019      	movs	r1, r3
 8000992:	b005      	add	sp, #20
 8000994:	bcf0      	pop	{r4, r5, r6, r7}
 8000996:	46bb      	mov	fp, r7
 8000998:	46b2      	mov	sl, r6
 800099a:	46a9      	mov	r9, r5
 800099c:	46a0      	mov	r8, r4
 800099e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a0:	2400      	movs	r4, #0
 80009a2:	2500      	movs	r5, #0
 80009a4:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <__aeabi_ddiv+0x244>)
 80009a6:	e7ed      	b.n	8000984 <__aeabi_ddiv+0xb4>
 80009a8:	464b      	mov	r3, r9
 80009aa:	4323      	orrs	r3, r4
 80009ac:	4698      	mov	r8, r3
 80009ae:	d100      	bne.n	80009b2 <__aeabi_ddiv+0xe2>
 80009b0:	e089      	b.n	8000ac6 <__aeabi_ddiv+0x1f6>
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_ddiv+0xe8>
 80009b6:	e1e0      	b.n	8000d7a <__aeabi_ddiv+0x4aa>
 80009b8:	0020      	movs	r0, r4
 80009ba:	f001 f92b 	bl	8001c14 <__clzsi2>
 80009be:	0001      	movs	r1, r0
 80009c0:	0002      	movs	r2, r0
 80009c2:	390b      	subs	r1, #11
 80009c4:	231d      	movs	r3, #29
 80009c6:	1a5b      	subs	r3, r3, r1
 80009c8:	4649      	mov	r1, r9
 80009ca:	0010      	movs	r0, r2
 80009cc:	40d9      	lsrs	r1, r3
 80009ce:	3808      	subs	r0, #8
 80009d0:	4084      	lsls	r4, r0
 80009d2:	000b      	movs	r3, r1
 80009d4:	464d      	mov	r5, r9
 80009d6:	4323      	orrs	r3, r4
 80009d8:	4698      	mov	r8, r3
 80009da:	4085      	lsls	r5, r0
 80009dc:	4851      	ldr	r0, [pc, #324]	; (8000b24 <__aeabi_ddiv+0x254>)
 80009de:	033c      	lsls	r4, r7, #12
 80009e0:	1a83      	subs	r3, r0, r2
 80009e2:	469b      	mov	fp, r3
 80009e4:	2300      	movs	r3, #0
 80009e6:	4699      	mov	r9, r3
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	007b      	lsls	r3, r7, #1
 80009ec:	4650      	mov	r0, sl
 80009ee:	0b24      	lsrs	r4, r4, #12
 80009f0:	0d5b      	lsrs	r3, r3, #21
 80009f2:	0fff      	lsrs	r7, r7, #31
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d197      	bne.n	8000928 <__aeabi_ddiv+0x58>
 80009f8:	4652      	mov	r2, sl
 80009fa:	4322      	orrs	r2, r4
 80009fc:	d055      	beq.n	8000aaa <__aeabi_ddiv+0x1da>
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x134>
 8000a02:	e1ca      	b.n	8000d9a <__aeabi_ddiv+0x4ca>
 8000a04:	0020      	movs	r0, r4
 8000a06:	f001 f905 	bl	8001c14 <__clzsi2>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	3a0b      	subs	r2, #11
 8000a0e:	231d      	movs	r3, #29
 8000a10:	0001      	movs	r1, r0
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	4652      	mov	r2, sl
 8000a16:	3908      	subs	r1, #8
 8000a18:	40da      	lsrs	r2, r3
 8000a1a:	408c      	lsls	r4, r1
 8000a1c:	4314      	orrs	r4, r2
 8000a1e:	4652      	mov	r2, sl
 8000a20:	408a      	lsls	r2, r1
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <__aeabi_ddiv+0x258>)
 8000a24:	4458      	add	r0, fp
 8000a26:	469b      	mov	fp, r3
 8000a28:	4483      	add	fp, r0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	e78d      	b.n	800094a <__aeabi_ddiv+0x7a>
 8000a2e:	464b      	mov	r3, r9
 8000a30:	4323      	orrs	r3, r4
 8000a32:	4698      	mov	r8, r3
 8000a34:	d140      	bne.n	8000ab8 <__aeabi_ddiv+0x1e8>
 8000a36:	2308      	movs	r3, #8
 8000a38:	4699      	mov	r9, r3
 8000a3a:	3b06      	subs	r3, #6
 8000a3c:	2500      	movs	r5, #0
 8000a3e:	4683      	mov	fp, r0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	e769      	b.n	8000918 <__aeabi_ddiv+0x48>
 8000a44:	46b2      	mov	sl, r6
 8000a46:	9b00      	ldr	r3, [sp, #0]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d0a9      	beq.n	80009a0 <__aeabi_ddiv+0xd0>
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_ddiv+0x182>
 8000a50:	e211      	b.n	8000e76 <__aeabi_ddiv+0x5a6>
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d093      	beq.n	800097e <__aeabi_ddiv+0xae>
 8000a56:	4a35      	ldr	r2, [pc, #212]	; (8000b2c <__aeabi_ddiv+0x25c>)
 8000a58:	445a      	add	r2, fp
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	dc00      	bgt.n	8000a60 <__aeabi_ddiv+0x190>
 8000a5e:	e13c      	b.n	8000cda <__aeabi_ddiv+0x40a>
 8000a60:	076b      	lsls	r3, r5, #29
 8000a62:	d000      	beq.n	8000a66 <__aeabi_ddiv+0x196>
 8000a64:	e1a7      	b.n	8000db6 <__aeabi_ddiv+0x4e6>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4643      	mov	r3, r8
 8000a6a:	01db      	lsls	r3, r3, #7
 8000a6c:	d506      	bpl.n	8000a7c <__aeabi_ddiv+0x1ac>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <__aeabi_ddiv+0x260>)
 8000a72:	401a      	ands	r2, r3
 8000a74:	4690      	mov	r8, r2
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	445a      	add	r2, fp
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <__aeabi_ddiv+0x264>)
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	dc8e      	bgt.n	80009a0 <__aeabi_ddiv+0xd0>
 8000a82:	4643      	mov	r3, r8
 8000a84:	0552      	lsls	r2, r2, #21
 8000a86:	0758      	lsls	r0, r3, #29
 8000a88:	025c      	lsls	r4, r3, #9
 8000a8a:	4305      	orrs	r5, r0
 8000a8c:	0b24      	lsrs	r4, r4, #12
 8000a8e:	0d53      	lsrs	r3, r2, #21
 8000a90:	e778      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000a92:	46ba      	mov	sl, r7
 8000a94:	46a0      	mov	r8, r4
 8000a96:	0015      	movs	r5, r2
 8000a98:	9000      	str	r0, [sp, #0]
 8000a9a:	e7d4      	b.n	8000a46 <__aeabi_ddiv+0x176>
 8000a9c:	464a      	mov	r2, r9
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	4691      	mov	r9, r2
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	4652      	mov	r2, sl
 8000aa8:	e74f      	b.n	800094a <__aeabi_ddiv+0x7a>
 8000aaa:	4649      	mov	r1, r9
 8000aac:	2301      	movs	r3, #1
 8000aae:	4319      	orrs	r1, r3
 8000ab0:	4689      	mov	r9, r1
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	e748      	b.n	800094a <__aeabi_ddiv+0x7a>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	4699      	mov	r9, r3
 8000abc:	3b09      	subs	r3, #9
 8000abe:	46a0      	mov	r8, r4
 8000ac0:	4683      	mov	fp, r0
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	e728      	b.n	8000918 <__aeabi_ddiv+0x48>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	4699      	mov	r9, r3
 8000aca:	2300      	movs	r3, #0
 8000acc:	469b      	mov	fp, r3
 8000ace:	3301      	adds	r3, #1
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	e720      	b.n	8000918 <__aeabi_ddiv+0x48>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2480      	movs	r4, #128	; 0x80
 8000ada:	469a      	mov	sl, r3
 8000adc:	2500      	movs	r5, #0
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <__aeabi_ddiv+0x244>)
 8000ae0:	0324      	lsls	r4, r4, #12
 8000ae2:	e74f      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	4641      	mov	r1, r8
 8000ae8:	031b      	lsls	r3, r3, #12
 8000aea:	4219      	tst	r1, r3
 8000aec:	d008      	beq.n	8000b00 <__aeabi_ddiv+0x230>
 8000aee:	421c      	tst	r4, r3
 8000af0:	d106      	bne.n	8000b00 <__aeabi_ddiv+0x230>
 8000af2:	431c      	orrs	r4, r3
 8000af4:	0324      	lsls	r4, r4, #12
 8000af6:	46ba      	mov	sl, r7
 8000af8:	0015      	movs	r5, r2
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <__aeabi_ddiv+0x244>)
 8000afc:	0b24      	lsrs	r4, r4, #12
 8000afe:	e741      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000b00:	2480      	movs	r4, #128	; 0x80
 8000b02:	4643      	mov	r3, r8
 8000b04:	0324      	lsls	r4, r4, #12
 8000b06:	431c      	orrs	r4, r3
 8000b08:	0324      	lsls	r4, r4, #12
 8000b0a:	46b2      	mov	sl, r6
 8000b0c:	4b01      	ldr	r3, [pc, #4]	; (8000b14 <__aeabi_ddiv+0x244>)
 8000b0e:	0b24      	lsrs	r4, r4, #12
 8000b10:	e738      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	000007ff 	.word	0x000007ff
 8000b18:	fffffc01 	.word	0xfffffc01
 8000b1c:	08005204 	.word	0x08005204
 8000b20:	fffff801 	.word	0xfffff801
 8000b24:	fffffc0d 	.word	0xfffffc0d
 8000b28:	000003f3 	.word	0x000003f3
 8000b2c:	000003ff 	.word	0x000003ff
 8000b30:	feffffff 	.word	0xfeffffff
 8000b34:	000007fe 	.word	0x000007fe
 8000b38:	4544      	cmp	r4, r8
 8000b3a:	d200      	bcs.n	8000b3e <__aeabi_ddiv+0x26e>
 8000b3c:	e116      	b.n	8000d6c <__aeabi_ddiv+0x49c>
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x272>
 8000b40:	e111      	b.n	8000d66 <__aeabi_ddiv+0x496>
 8000b42:	2301      	movs	r3, #1
 8000b44:	425b      	negs	r3, r3
 8000b46:	469c      	mov	ip, r3
 8000b48:	002e      	movs	r6, r5
 8000b4a:	4640      	mov	r0, r8
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	44e3      	add	fp, ip
 8000b50:	0223      	lsls	r3, r4, #8
 8000b52:	0e14      	lsrs	r4, r2, #24
 8000b54:	431c      	orrs	r4, r3
 8000b56:	0c1b      	lsrs	r3, r3, #16
 8000b58:	4699      	mov	r9, r3
 8000b5a:	0423      	lsls	r3, r4, #16
 8000b5c:	0c1f      	lsrs	r7, r3, #16
 8000b5e:	0212      	lsls	r2, r2, #8
 8000b60:	4649      	mov	r1, r9
 8000b62:	9200      	str	r2, [sp, #0]
 8000b64:	9701      	str	r7, [sp, #4]
 8000b66:	f7ff fb55 	bl	8000214 <__aeabi_uidivmod>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	437a      	muls	r2, r7
 8000b6e:	040b      	lsls	r3, r1, #16
 8000b70:	0c31      	lsrs	r1, r6, #16
 8000b72:	4680      	mov	r8, r0
 8000b74:	4319      	orrs	r1, r3
 8000b76:	428a      	cmp	r2, r1
 8000b78:	d90b      	bls.n	8000b92 <__aeabi_ddiv+0x2c2>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	469c      	mov	ip, r3
 8000b80:	1909      	adds	r1, r1, r4
 8000b82:	44e0      	add	r8, ip
 8000b84:	428c      	cmp	r4, r1
 8000b86:	d804      	bhi.n	8000b92 <__aeabi_ddiv+0x2c2>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	d902      	bls.n	8000b92 <__aeabi_ddiv+0x2c2>
 8000b8c:	1e83      	subs	r3, r0, #2
 8000b8e:	4698      	mov	r8, r3
 8000b90:	1909      	adds	r1, r1, r4
 8000b92:	1a88      	subs	r0, r1, r2
 8000b94:	4649      	mov	r1, r9
 8000b96:	f7ff fb3d 	bl	8000214 <__aeabi_uidivmod>
 8000b9a:	0409      	lsls	r1, r1, #16
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	0431      	lsls	r1, r6, #16
 8000ba0:	4666      	mov	r6, ip
 8000ba2:	9a01      	ldr	r2, [sp, #4]
 8000ba4:	0c09      	lsrs	r1, r1, #16
 8000ba6:	4342      	muls	r2, r0
 8000ba8:	0003      	movs	r3, r0
 8000baa:	4331      	orrs	r1, r6
 8000bac:	428a      	cmp	r2, r1
 8000bae:	d904      	bls.n	8000bba <__aeabi_ddiv+0x2ea>
 8000bb0:	1909      	adds	r1, r1, r4
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	428c      	cmp	r4, r1
 8000bb6:	d800      	bhi.n	8000bba <__aeabi_ddiv+0x2ea>
 8000bb8:	e111      	b.n	8000dde <__aeabi_ddiv+0x50e>
 8000bba:	1a89      	subs	r1, r1, r2
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	9e00      	ldr	r6, [sp, #0]
 8000bc0:	0412      	lsls	r2, r2, #16
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	0c33      	lsrs	r3, r6, #16
 8000bc6:	001f      	movs	r7, r3
 8000bc8:	0c10      	lsrs	r0, r2, #16
 8000bca:	4690      	mov	r8, r2
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	0413      	lsls	r3, r2, #16
 8000bd0:	0432      	lsls	r2, r6, #16
 8000bd2:	0c16      	lsrs	r6, r2, #16
 8000bd4:	0032      	movs	r2, r6
 8000bd6:	0c1b      	lsrs	r3, r3, #16
 8000bd8:	435a      	muls	r2, r3
 8000bda:	9603      	str	r6, [sp, #12]
 8000bdc:	437b      	muls	r3, r7
 8000bde:	4346      	muls	r6, r0
 8000be0:	4378      	muls	r0, r7
 8000be2:	0c17      	lsrs	r7, r2, #16
 8000be4:	46bc      	mov	ip, r7
 8000be6:	199b      	adds	r3, r3, r6
 8000be8:	4463      	add	r3, ip
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d903      	bls.n	8000bf6 <__aeabi_ddiv+0x326>
 8000bee:	2680      	movs	r6, #128	; 0x80
 8000bf0:	0276      	lsls	r6, r6, #9
 8000bf2:	46b4      	mov	ip, r6
 8000bf4:	4460      	add	r0, ip
 8000bf6:	0c1e      	lsrs	r6, r3, #16
 8000bf8:	1830      	adds	r0, r6, r0
 8000bfa:	0416      	lsls	r6, r2, #16
 8000bfc:	041b      	lsls	r3, r3, #16
 8000bfe:	0c36      	lsrs	r6, r6, #16
 8000c00:	199e      	adds	r6, r3, r6
 8000c02:	4281      	cmp	r1, r0
 8000c04:	d200      	bcs.n	8000c08 <__aeabi_ddiv+0x338>
 8000c06:	e09c      	b.n	8000d42 <__aeabi_ddiv+0x472>
 8000c08:	d100      	bne.n	8000c0c <__aeabi_ddiv+0x33c>
 8000c0a:	e097      	b.n	8000d3c <__aeabi_ddiv+0x46c>
 8000c0c:	1bae      	subs	r6, r5, r6
 8000c0e:	1a09      	subs	r1, r1, r0
 8000c10:	42b5      	cmp	r5, r6
 8000c12:	4180      	sbcs	r0, r0
 8000c14:	4240      	negs	r0, r0
 8000c16:	1a08      	subs	r0, r1, r0
 8000c18:	4284      	cmp	r4, r0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_ddiv+0x34e>
 8000c1c:	e111      	b.n	8000e42 <__aeabi_ddiv+0x572>
 8000c1e:	4649      	mov	r1, r9
 8000c20:	f7ff faf8 	bl	8000214 <__aeabi_uidivmod>
 8000c24:	9a01      	ldr	r2, [sp, #4]
 8000c26:	040b      	lsls	r3, r1, #16
 8000c28:	4342      	muls	r2, r0
 8000c2a:	0c31      	lsrs	r1, r6, #16
 8000c2c:	0005      	movs	r5, r0
 8000c2e:	4319      	orrs	r1, r3
 8000c30:	428a      	cmp	r2, r1
 8000c32:	d907      	bls.n	8000c44 <__aeabi_ddiv+0x374>
 8000c34:	1909      	adds	r1, r1, r4
 8000c36:	3d01      	subs	r5, #1
 8000c38:	428c      	cmp	r4, r1
 8000c3a:	d803      	bhi.n	8000c44 <__aeabi_ddiv+0x374>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	d901      	bls.n	8000c44 <__aeabi_ddiv+0x374>
 8000c40:	1e85      	subs	r5, r0, #2
 8000c42:	1909      	adds	r1, r1, r4
 8000c44:	1a88      	subs	r0, r1, r2
 8000c46:	4649      	mov	r1, r9
 8000c48:	f7ff fae4 	bl	8000214 <__aeabi_uidivmod>
 8000c4c:	0409      	lsls	r1, r1, #16
 8000c4e:	468c      	mov	ip, r1
 8000c50:	0431      	lsls	r1, r6, #16
 8000c52:	4666      	mov	r6, ip
 8000c54:	9a01      	ldr	r2, [sp, #4]
 8000c56:	0c09      	lsrs	r1, r1, #16
 8000c58:	4342      	muls	r2, r0
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	4331      	orrs	r1, r6
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	d907      	bls.n	8000c72 <__aeabi_ddiv+0x3a2>
 8000c62:	1909      	adds	r1, r1, r4
 8000c64:	3b01      	subs	r3, #1
 8000c66:	428c      	cmp	r4, r1
 8000c68:	d803      	bhi.n	8000c72 <__aeabi_ddiv+0x3a2>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	d901      	bls.n	8000c72 <__aeabi_ddiv+0x3a2>
 8000c6e:	1e83      	subs	r3, r0, #2
 8000c70:	1909      	adds	r1, r1, r4
 8000c72:	9e03      	ldr	r6, [sp, #12]
 8000c74:	1a89      	subs	r1, r1, r2
 8000c76:	0032      	movs	r2, r6
 8000c78:	042d      	lsls	r5, r5, #16
 8000c7a:	431d      	orrs	r5, r3
 8000c7c:	9f02      	ldr	r7, [sp, #8]
 8000c7e:	042b      	lsls	r3, r5, #16
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	435a      	muls	r2, r3
 8000c84:	437b      	muls	r3, r7
 8000c86:	469c      	mov	ip, r3
 8000c88:	0c28      	lsrs	r0, r5, #16
 8000c8a:	4346      	muls	r6, r0
 8000c8c:	0c13      	lsrs	r3, r2, #16
 8000c8e:	44b4      	add	ip, r6
 8000c90:	4463      	add	r3, ip
 8000c92:	4378      	muls	r0, r7
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d903      	bls.n	8000ca0 <__aeabi_ddiv+0x3d0>
 8000c98:	2680      	movs	r6, #128	; 0x80
 8000c9a:	0276      	lsls	r6, r6, #9
 8000c9c:	46b4      	mov	ip, r6
 8000c9e:	4460      	add	r0, ip
 8000ca0:	0c1e      	lsrs	r6, r3, #16
 8000ca2:	0412      	lsls	r2, r2, #16
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	0c12      	lsrs	r2, r2, #16
 8000ca8:	1830      	adds	r0, r6, r0
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	4281      	cmp	r1, r0
 8000cae:	d306      	bcc.n	8000cbe <__aeabi_ddiv+0x3ee>
 8000cb0:	d002      	beq.n	8000cb8 <__aeabi_ddiv+0x3e8>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	431d      	orrs	r5, r3
 8000cb6:	e6ce      	b.n	8000a56 <__aeabi_ddiv+0x186>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_ddiv+0x3ee>
 8000cbc:	e6cb      	b.n	8000a56 <__aeabi_ddiv+0x186>
 8000cbe:	1861      	adds	r1, r4, r1
 8000cc0:	1e6e      	subs	r6, r5, #1
 8000cc2:	42a1      	cmp	r1, r4
 8000cc4:	d200      	bcs.n	8000cc8 <__aeabi_ddiv+0x3f8>
 8000cc6:	e0a4      	b.n	8000e12 <__aeabi_ddiv+0x542>
 8000cc8:	4281      	cmp	r1, r0
 8000cca:	d200      	bcs.n	8000cce <__aeabi_ddiv+0x3fe>
 8000ccc:	e0c9      	b.n	8000e62 <__aeabi_ddiv+0x592>
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_ddiv+0x402>
 8000cd0:	e0d9      	b.n	8000e86 <__aeabi_ddiv+0x5b6>
 8000cd2:	0035      	movs	r5, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__aeabi_ddiv+0x3e2>
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	426d      	negs	r5, r5
 8000cda:	2101      	movs	r1, #1
 8000cdc:	1a89      	subs	r1, r1, r2
 8000cde:	2938      	cmp	r1, #56	; 0x38
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_ddiv+0x414>
 8000ce2:	e64c      	b.n	800097e <__aeabi_ddiv+0xae>
 8000ce4:	291f      	cmp	r1, #31
 8000ce6:	dc00      	bgt.n	8000cea <__aeabi_ddiv+0x41a>
 8000ce8:	e07f      	b.n	8000dea <__aeabi_ddiv+0x51a>
 8000cea:	231f      	movs	r3, #31
 8000cec:	425b      	negs	r3, r3
 8000cee:	1a9a      	subs	r2, r3, r2
 8000cf0:	4643      	mov	r3, r8
 8000cf2:	40d3      	lsrs	r3, r2
 8000cf4:	2920      	cmp	r1, #32
 8000cf6:	d004      	beq.n	8000d02 <__aeabi_ddiv+0x432>
 8000cf8:	4644      	mov	r4, r8
 8000cfa:	4a65      	ldr	r2, [pc, #404]	; (8000e90 <__aeabi_ddiv+0x5c0>)
 8000cfc:	445a      	add	r2, fp
 8000cfe:	4094      	lsls	r4, r2
 8000d00:	4325      	orrs	r5, r4
 8000d02:	1e6a      	subs	r2, r5, #1
 8000d04:	4195      	sbcs	r5, r2
 8000d06:	2207      	movs	r2, #7
 8000d08:	432b      	orrs	r3, r5
 8000d0a:	0015      	movs	r5, r2
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	401d      	ands	r5, r3
 8000d10:	421a      	tst	r2, r3
 8000d12:	d100      	bne.n	8000d16 <__aeabi_ddiv+0x446>
 8000d14:	e0a1      	b.n	8000e5a <__aeabi_ddiv+0x58a>
 8000d16:	220f      	movs	r2, #15
 8000d18:	2400      	movs	r4, #0
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	2a04      	cmp	r2, #4
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x452>
 8000d20:	e098      	b.n	8000e54 <__aeabi_ddiv+0x584>
 8000d22:	1d1a      	adds	r2, r3, #4
 8000d24:	429a      	cmp	r2, r3
 8000d26:	419b      	sbcs	r3, r3
 8000d28:	425b      	negs	r3, r3
 8000d2a:	18e4      	adds	r4, r4, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	0222      	lsls	r2, r4, #8
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_ddiv+0x464>
 8000d32:	e08f      	b.n	8000e54 <__aeabi_ddiv+0x584>
 8000d34:	2301      	movs	r3, #1
 8000d36:	2400      	movs	r4, #0
 8000d38:	2500      	movs	r5, #0
 8000d3a:	e623      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000d3c:	42b5      	cmp	r5, r6
 8000d3e:	d300      	bcc.n	8000d42 <__aeabi_ddiv+0x472>
 8000d40:	e764      	b.n	8000c0c <__aeabi_ddiv+0x33c>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	9b00      	ldr	r3, [sp, #0]
 8000d48:	469c      	mov	ip, r3
 8000d4a:	4465      	add	r5, ip
 8000d4c:	001f      	movs	r7, r3
 8000d4e:	429d      	cmp	r5, r3
 8000d50:	419b      	sbcs	r3, r3
 8000d52:	425b      	negs	r3, r3
 8000d54:	191b      	adds	r3, r3, r4
 8000d56:	18c9      	adds	r1, r1, r3
 8000d58:	428c      	cmp	r4, r1
 8000d5a:	d23a      	bcs.n	8000dd2 <__aeabi_ddiv+0x502>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	d863      	bhi.n	8000e28 <__aeabi_ddiv+0x558>
 8000d60:	d060      	beq.n	8000e24 <__aeabi_ddiv+0x554>
 8000d62:	4690      	mov	r8, r2
 8000d64:	e752      	b.n	8000c0c <__aeabi_ddiv+0x33c>
 8000d66:	42aa      	cmp	r2, r5
 8000d68:	d900      	bls.n	8000d6c <__aeabi_ddiv+0x49c>
 8000d6a:	e6ea      	b.n	8000b42 <__aeabi_ddiv+0x272>
 8000d6c:	4643      	mov	r3, r8
 8000d6e:	07de      	lsls	r6, r3, #31
 8000d70:	0858      	lsrs	r0, r3, #1
 8000d72:	086b      	lsrs	r3, r5, #1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	07ed      	lsls	r5, r5, #31
 8000d78:	e6ea      	b.n	8000b50 <__aeabi_ddiv+0x280>
 8000d7a:	4648      	mov	r0, r9
 8000d7c:	f000 ff4a 	bl	8001c14 <__clzsi2>
 8000d80:	0001      	movs	r1, r0
 8000d82:	0002      	movs	r2, r0
 8000d84:	3115      	adds	r1, #21
 8000d86:	3220      	adds	r2, #32
 8000d88:	291c      	cmp	r1, #28
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_ddiv+0x4be>
 8000d8c:	e61a      	b.n	80009c4 <__aeabi_ddiv+0xf4>
 8000d8e:	464b      	mov	r3, r9
 8000d90:	3808      	subs	r0, #8
 8000d92:	4083      	lsls	r3, r0
 8000d94:	2500      	movs	r5, #0
 8000d96:	4698      	mov	r8, r3
 8000d98:	e620      	b.n	80009dc <__aeabi_ddiv+0x10c>
 8000d9a:	f000 ff3b 	bl	8001c14 <__clzsi2>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	001a      	movs	r2, r3
 8000da2:	3215      	adds	r2, #21
 8000da4:	3020      	adds	r0, #32
 8000da6:	2a1c      	cmp	r2, #28
 8000da8:	dc00      	bgt.n	8000dac <__aeabi_ddiv+0x4dc>
 8000daa:	e630      	b.n	8000a0e <__aeabi_ddiv+0x13e>
 8000dac:	4654      	mov	r4, sl
 8000dae:	3b08      	subs	r3, #8
 8000db0:	2200      	movs	r2, #0
 8000db2:	409c      	lsls	r4, r3
 8000db4:	e635      	b.n	8000a22 <__aeabi_ddiv+0x152>
 8000db6:	230f      	movs	r3, #15
 8000db8:	402b      	ands	r3, r5
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x4f0>
 8000dbe:	e652      	b.n	8000a66 <__aeabi_ddiv+0x196>
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	419b      	sbcs	r3, r3
 8000dc8:	3504      	adds	r5, #4
 8000dca:	425b      	negs	r3, r3
 8000dcc:	08ed      	lsrs	r5, r5, #3
 8000dce:	4498      	add	r8, r3
 8000dd0:	e64a      	b.n	8000a68 <__aeabi_ddiv+0x198>
 8000dd2:	428c      	cmp	r4, r1
 8000dd4:	d1c5      	bne.n	8000d62 <__aeabi_ddiv+0x492>
 8000dd6:	42af      	cmp	r7, r5
 8000dd8:	d9c0      	bls.n	8000d5c <__aeabi_ddiv+0x48c>
 8000dda:	4690      	mov	r8, r2
 8000ddc:	e716      	b.n	8000c0c <__aeabi_ddiv+0x33c>
 8000dde:	428a      	cmp	r2, r1
 8000de0:	d800      	bhi.n	8000de4 <__aeabi_ddiv+0x514>
 8000de2:	e6ea      	b.n	8000bba <__aeabi_ddiv+0x2ea>
 8000de4:	1e83      	subs	r3, r0, #2
 8000de6:	1909      	adds	r1, r1, r4
 8000de8:	e6e7      	b.n	8000bba <__aeabi_ddiv+0x2ea>
 8000dea:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <__aeabi_ddiv+0x5c4>)
 8000dec:	0028      	movs	r0, r5
 8000dee:	445a      	add	r2, fp
 8000df0:	4643      	mov	r3, r8
 8000df2:	4095      	lsls	r5, r2
 8000df4:	4093      	lsls	r3, r2
 8000df6:	40c8      	lsrs	r0, r1
 8000df8:	1e6a      	subs	r2, r5, #1
 8000dfa:	4195      	sbcs	r5, r2
 8000dfc:	4644      	mov	r4, r8
 8000dfe:	4303      	orrs	r3, r0
 8000e00:	432b      	orrs	r3, r5
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	075a      	lsls	r2, r3, #29
 8000e06:	d092      	beq.n	8000d2e <__aeabi_ddiv+0x45e>
 8000e08:	220f      	movs	r2, #15
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	2a04      	cmp	r2, #4
 8000e0e:	d188      	bne.n	8000d22 <__aeabi_ddiv+0x452>
 8000e10:	e78d      	b.n	8000d2e <__aeabi_ddiv+0x45e>
 8000e12:	0035      	movs	r5, r6
 8000e14:	4281      	cmp	r1, r0
 8000e16:	d000      	beq.n	8000e1a <__aeabi_ddiv+0x54a>
 8000e18:	e74b      	b.n	8000cb2 <__aeabi_ddiv+0x3e2>
 8000e1a:	9a00      	ldr	r2, [sp, #0]
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_ddiv+0x552>
 8000e20:	e747      	b.n	8000cb2 <__aeabi_ddiv+0x3e2>
 8000e22:	e618      	b.n	8000a56 <__aeabi_ddiv+0x186>
 8000e24:	42ae      	cmp	r6, r5
 8000e26:	d99c      	bls.n	8000d62 <__aeabi_ddiv+0x492>
 8000e28:	2302      	movs	r3, #2
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	9b00      	ldr	r3, [sp, #0]
 8000e30:	44e0      	add	r8, ip
 8000e32:	469c      	mov	ip, r3
 8000e34:	4465      	add	r5, ip
 8000e36:	429d      	cmp	r5, r3
 8000e38:	419b      	sbcs	r3, r3
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	191b      	adds	r3, r3, r4
 8000e3e:	18c9      	adds	r1, r1, r3
 8000e40:	e6e4      	b.n	8000c0c <__aeabi_ddiv+0x33c>
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <__aeabi_ddiv+0x5c8>)
 8000e44:	445a      	add	r2, fp
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	dc00      	bgt.n	8000e4c <__aeabi_ddiv+0x57c>
 8000e4a:	e744      	b.n	8000cd6 <__aeabi_ddiv+0x406>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2500      	movs	r5, #0
 8000e50:	4498      	add	r8, r3
 8000e52:	e609      	b.n	8000a68 <__aeabi_ddiv+0x198>
 8000e54:	0765      	lsls	r5, r4, #29
 8000e56:	0264      	lsls	r4, r4, #9
 8000e58:	0b24      	lsrs	r4, r4, #12
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	431d      	orrs	r5, r3
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e590      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000e62:	9e00      	ldr	r6, [sp, #0]
 8000e64:	3d02      	subs	r5, #2
 8000e66:	0072      	lsls	r2, r6, #1
 8000e68:	42b2      	cmp	r2, r6
 8000e6a:	41bf      	sbcs	r7, r7
 8000e6c:	427f      	negs	r7, r7
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	1909      	adds	r1, r1, r4
 8000e72:	9200      	str	r2, [sp, #0]
 8000e74:	e7ce      	b.n	8000e14 <__aeabi_ddiv+0x544>
 8000e76:	2480      	movs	r4, #128	; 0x80
 8000e78:	4643      	mov	r3, r8
 8000e7a:	0324      	lsls	r4, r4, #12
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	0324      	lsls	r4, r4, #12
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <__aeabi_ddiv+0x5cc>)
 8000e82:	0b24      	lsrs	r4, r4, #12
 8000e84:	e57e      	b.n	8000984 <__aeabi_ddiv+0xb4>
 8000e86:	9a00      	ldr	r2, [sp, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3ea      	bcc.n	8000e62 <__aeabi_ddiv+0x592>
 8000e8c:	0035      	movs	r5, r6
 8000e8e:	e7c4      	b.n	8000e1a <__aeabi_ddiv+0x54a>
 8000e90:	0000043e 	.word	0x0000043e
 8000e94:	0000041e 	.word	0x0000041e
 8000e98:	000003ff 	.word	0x000003ff
 8000e9c:	000007ff 	.word	0x000007ff

08000ea0 <__aeabi_dmul>:
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	4657      	mov	r7, sl
 8000ea4:	464e      	mov	r6, r9
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	46de      	mov	lr, fp
 8000eaa:	b5e0      	push	{r5, r6, r7, lr}
 8000eac:	4698      	mov	r8, r3
 8000eae:	030c      	lsls	r4, r1, #12
 8000eb0:	004b      	lsls	r3, r1, #1
 8000eb2:	0006      	movs	r6, r0
 8000eb4:	4692      	mov	sl, r2
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	0b24      	lsrs	r4, r4, #12
 8000eba:	0d5b      	lsrs	r3, r3, #21
 8000ebc:	0fcf      	lsrs	r7, r1, #31
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <__aeabi_dmul+0xfc>
 8000ec2:	4add      	ldr	r2, [pc, #884]	; (8001238 <__aeabi_dmul+0x398>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dmul+0x2a>
 8000ec8:	e086      	b.n	8000fd8 <__aeabi_dmul+0x138>
 8000eca:	0f42      	lsrs	r2, r0, #29
 8000ecc:	00e4      	lsls	r4, r4, #3
 8000ece:	4314      	orrs	r4, r2
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	0412      	lsls	r2, r2, #16
 8000ed4:	4314      	orrs	r4, r2
 8000ed6:	4ad9      	ldr	r2, [pc, #868]	; (800123c <__aeabi_dmul+0x39c>)
 8000ed8:	00c5      	lsls	r5, r0, #3
 8000eda:	4694      	mov	ip, r2
 8000edc:	4463      	add	r3, ip
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	4699      	mov	r9, r3
 8000ee4:	469b      	mov	fp, r3
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	4642      	mov	r2, r8
 8000eea:	031e      	lsls	r6, r3, #12
 8000eec:	0fd2      	lsrs	r2, r2, #31
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4650      	mov	r0, sl
 8000ef2:	4690      	mov	r8, r2
 8000ef4:	0b36      	lsrs	r6, r6, #12
 8000ef6:	0d5b      	lsrs	r3, r3, #21
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dmul+0x5c>
 8000efa:	e078      	b.n	8000fee <__aeabi_dmul+0x14e>
 8000efc:	4ace      	ldr	r2, [pc, #824]	; (8001238 <__aeabi_dmul+0x398>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01d      	beq.n	8000f3e <__aeabi_dmul+0x9e>
 8000f02:	49ce      	ldr	r1, [pc, #824]	; (800123c <__aeabi_dmul+0x39c>)
 8000f04:	0f42      	lsrs	r2, r0, #29
 8000f06:	468c      	mov	ip, r1
 8000f08:	9900      	ldr	r1, [sp, #0]
 8000f0a:	4463      	add	r3, ip
 8000f0c:	00f6      	lsls	r6, r6, #3
 8000f0e:	468c      	mov	ip, r1
 8000f10:	4316      	orrs	r6, r2
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	449c      	add	ip, r3
 8000f16:	0412      	lsls	r2, r2, #16
 8000f18:	4663      	mov	r3, ip
 8000f1a:	4316      	orrs	r6, r2
 8000f1c:	00c2      	lsls	r2, r0, #3
 8000f1e:	2000      	movs	r0, #0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	9900      	ldr	r1, [sp, #0]
 8000f24:	4643      	mov	r3, r8
 8000f26:	3101      	adds	r1, #1
 8000f28:	468c      	mov	ip, r1
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	407b      	eors	r3, r7
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	290f      	cmp	r1, #15
 8000f32:	d900      	bls.n	8000f36 <__aeabi_dmul+0x96>
 8000f34:	e07e      	b.n	8001034 <__aeabi_dmul+0x194>
 8000f36:	4bc2      	ldr	r3, [pc, #776]	; (8001240 <__aeabi_dmul+0x3a0>)
 8000f38:	0089      	lsls	r1, r1, #2
 8000f3a:	5859      	ldr	r1, [r3, r1]
 8000f3c:	468f      	mov	pc, r1
 8000f3e:	4652      	mov	r2, sl
 8000f40:	9b00      	ldr	r3, [sp, #0]
 8000f42:	4332      	orrs	r2, r6
 8000f44:	d000      	beq.n	8000f48 <__aeabi_dmul+0xa8>
 8000f46:	e156      	b.n	80011f6 <__aeabi_dmul+0x356>
 8000f48:	49bb      	ldr	r1, [pc, #748]	; (8001238 <__aeabi_dmul+0x398>)
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	4463      	add	r3, ip
 8000f50:	4649      	mov	r1, r9
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2302      	movs	r3, #2
 8000f56:	4319      	orrs	r1, r3
 8000f58:	4689      	mov	r9, r1
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	e7e1      	b.n	8000f22 <__aeabi_dmul+0x82>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	0034      	movs	r4, r6
 8000f64:	0015      	movs	r5, r2
 8000f66:	4683      	mov	fp, r0
 8000f68:	465b      	mov	r3, fp
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d05e      	beq.n	800102c <__aeabi_dmul+0x18c>
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dmul+0xd4>
 8000f72:	e1f3      	b.n	800135c <__aeabi_dmul+0x4bc>
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d000      	beq.n	8000f7a <__aeabi_dmul+0xda>
 8000f78:	e118      	b.n	80011ac <__aeabi_dmul+0x30c>
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	9b01      	ldr	r3, [sp, #4]
 8000f82:	0512      	lsls	r2, r2, #20
 8000f84:	4322      	orrs	r2, r4
 8000f86:	07db      	lsls	r3, r3, #31
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	0028      	movs	r0, r5
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	b007      	add	sp, #28
 8000f90:	bcf0      	pop	{r4, r5, r6, r7}
 8000f92:	46bb      	mov	fp, r7
 8000f94:	46b2      	mov	sl, r6
 8000f96:	46a9      	mov	r9, r5
 8000f98:	46a0      	mov	r8, r4
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9c:	0025      	movs	r5, r4
 8000f9e:	4305      	orrs	r5, r0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dmul+0x104>
 8000fa2:	e141      	b.n	8001228 <__aeabi_dmul+0x388>
 8000fa4:	2c00      	cmp	r4, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dmul+0x10a>
 8000fa8:	e1ad      	b.n	8001306 <__aeabi_dmul+0x466>
 8000faa:	0020      	movs	r0, r4
 8000fac:	f000 fe32 	bl	8001c14 <__clzsi2>
 8000fb0:	0001      	movs	r1, r0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	390b      	subs	r1, #11
 8000fb6:	231d      	movs	r3, #29
 8000fb8:	0010      	movs	r0, r2
 8000fba:	1a5b      	subs	r3, r3, r1
 8000fbc:	0031      	movs	r1, r6
 8000fbe:	0035      	movs	r5, r6
 8000fc0:	3808      	subs	r0, #8
 8000fc2:	4084      	lsls	r4, r0
 8000fc4:	40d9      	lsrs	r1, r3
 8000fc6:	4085      	lsls	r5, r0
 8000fc8:	430c      	orrs	r4, r1
 8000fca:	489e      	ldr	r0, [pc, #632]	; (8001244 <__aeabi_dmul+0x3a4>)
 8000fcc:	1a83      	subs	r3, r0, r2
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	469b      	mov	fp, r3
 8000fd6:	e786      	b.n	8000ee6 <__aeabi_dmul+0x46>
 8000fd8:	0005      	movs	r5, r0
 8000fda:	4325      	orrs	r5, r4
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_dmul+0x140>
 8000fde:	e11c      	b.n	800121a <__aeabi_dmul+0x37a>
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	4691      	mov	r9, r2
 8000fea:	469b      	mov	fp, r3
 8000fec:	e77b      	b.n	8000ee6 <__aeabi_dmul+0x46>
 8000fee:	4652      	mov	r2, sl
 8000ff0:	4332      	orrs	r2, r6
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dmul+0x156>
 8000ff4:	e10a      	b.n	800120c <__aeabi_dmul+0x36c>
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dmul+0x15c>
 8000ffa:	e176      	b.n	80012ea <__aeabi_dmul+0x44a>
 8000ffc:	0030      	movs	r0, r6
 8000ffe:	f000 fe09 	bl	8001c14 <__clzsi2>
 8001002:	0002      	movs	r2, r0
 8001004:	3a0b      	subs	r2, #11
 8001006:	231d      	movs	r3, #29
 8001008:	0001      	movs	r1, r0
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	4652      	mov	r2, sl
 800100e:	3908      	subs	r1, #8
 8001010:	40da      	lsrs	r2, r3
 8001012:	408e      	lsls	r6, r1
 8001014:	4316      	orrs	r6, r2
 8001016:	4652      	mov	r2, sl
 8001018:	408a      	lsls	r2, r1
 800101a:	9b00      	ldr	r3, [sp, #0]
 800101c:	4989      	ldr	r1, [pc, #548]	; (8001244 <__aeabi_dmul+0x3a4>)
 800101e:	1a18      	subs	r0, r3, r0
 8001020:	0003      	movs	r3, r0
 8001022:	468c      	mov	ip, r1
 8001024:	4463      	add	r3, ip
 8001026:	2000      	movs	r0, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	e77a      	b.n	8000f22 <__aeabi_dmul+0x82>
 800102c:	2400      	movs	r4, #0
 800102e:	2500      	movs	r5, #0
 8001030:	4a81      	ldr	r2, [pc, #516]	; (8001238 <__aeabi_dmul+0x398>)
 8001032:	e7a5      	b.n	8000f80 <__aeabi_dmul+0xe0>
 8001034:	0c2f      	lsrs	r7, r5, #16
 8001036:	042d      	lsls	r5, r5, #16
 8001038:	0c2d      	lsrs	r5, r5, #16
 800103a:	002b      	movs	r3, r5
 800103c:	0c11      	lsrs	r1, r2, #16
 800103e:	0412      	lsls	r2, r2, #16
 8001040:	0c12      	lsrs	r2, r2, #16
 8001042:	4353      	muls	r3, r2
 8001044:	4698      	mov	r8, r3
 8001046:	0013      	movs	r3, r2
 8001048:	0028      	movs	r0, r5
 800104a:	437b      	muls	r3, r7
 800104c:	4699      	mov	r9, r3
 800104e:	4348      	muls	r0, r1
 8001050:	4448      	add	r0, r9
 8001052:	4683      	mov	fp, r0
 8001054:	4640      	mov	r0, r8
 8001056:	000b      	movs	r3, r1
 8001058:	0c00      	lsrs	r0, r0, #16
 800105a:	4682      	mov	sl, r0
 800105c:	4658      	mov	r0, fp
 800105e:	437b      	muls	r3, r7
 8001060:	4450      	add	r0, sl
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	4581      	cmp	r9, r0
 8001066:	d906      	bls.n	8001076 <__aeabi_dmul+0x1d6>
 8001068:	469a      	mov	sl, r3
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	4699      	mov	r9, r3
 8001070:	44ca      	add	sl, r9
 8001072:	4653      	mov	r3, sl
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	0c03      	lsrs	r3, r0, #16
 8001078:	469b      	mov	fp, r3
 800107a:	4643      	mov	r3, r8
 800107c:	041b      	lsls	r3, r3, #16
 800107e:	0400      	lsls	r0, r0, #16
 8001080:	0c1b      	lsrs	r3, r3, #16
 8001082:	4698      	mov	r8, r3
 8001084:	0003      	movs	r3, r0
 8001086:	4443      	add	r3, r8
 8001088:	9304      	str	r3, [sp, #16]
 800108a:	0c33      	lsrs	r3, r6, #16
 800108c:	4699      	mov	r9, r3
 800108e:	002b      	movs	r3, r5
 8001090:	0436      	lsls	r6, r6, #16
 8001092:	0c36      	lsrs	r6, r6, #16
 8001094:	4373      	muls	r3, r6
 8001096:	4698      	mov	r8, r3
 8001098:	0033      	movs	r3, r6
 800109a:	437b      	muls	r3, r7
 800109c:	469a      	mov	sl, r3
 800109e:	464b      	mov	r3, r9
 80010a0:	435d      	muls	r5, r3
 80010a2:	435f      	muls	r7, r3
 80010a4:	4643      	mov	r3, r8
 80010a6:	4455      	add	r5, sl
 80010a8:	0c18      	lsrs	r0, r3, #16
 80010aa:	1940      	adds	r0, r0, r5
 80010ac:	4582      	cmp	sl, r0
 80010ae:	d903      	bls.n	80010b8 <__aeabi_dmul+0x218>
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	025b      	lsls	r3, r3, #9
 80010b4:	469a      	mov	sl, r3
 80010b6:	4457      	add	r7, sl
 80010b8:	0c05      	lsrs	r5, r0, #16
 80010ba:	19eb      	adds	r3, r5, r7
 80010bc:	9305      	str	r3, [sp, #20]
 80010be:	4643      	mov	r3, r8
 80010c0:	041d      	lsls	r5, r3, #16
 80010c2:	0c2d      	lsrs	r5, r5, #16
 80010c4:	0400      	lsls	r0, r0, #16
 80010c6:	1940      	adds	r0, r0, r5
 80010c8:	0c25      	lsrs	r5, r4, #16
 80010ca:	0424      	lsls	r4, r4, #16
 80010cc:	0c24      	lsrs	r4, r4, #16
 80010ce:	0027      	movs	r7, r4
 80010d0:	4357      	muls	r7, r2
 80010d2:	436a      	muls	r2, r5
 80010d4:	4690      	mov	r8, r2
 80010d6:	002a      	movs	r2, r5
 80010d8:	0c3b      	lsrs	r3, r7, #16
 80010da:	469a      	mov	sl, r3
 80010dc:	434a      	muls	r2, r1
 80010de:	4361      	muls	r1, r4
 80010e0:	4441      	add	r1, r8
 80010e2:	4451      	add	r1, sl
 80010e4:	4483      	add	fp, r0
 80010e6:	4588      	cmp	r8, r1
 80010e8:	d903      	bls.n	80010f2 <__aeabi_dmul+0x252>
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	4698      	mov	r8, r3
 80010f0:	4442      	add	r2, r8
 80010f2:	043f      	lsls	r7, r7, #16
 80010f4:	0c0b      	lsrs	r3, r1, #16
 80010f6:	0c3f      	lsrs	r7, r7, #16
 80010f8:	0409      	lsls	r1, r1, #16
 80010fa:	19c9      	adds	r1, r1, r7
 80010fc:	0027      	movs	r7, r4
 80010fe:	4698      	mov	r8, r3
 8001100:	464b      	mov	r3, r9
 8001102:	4377      	muls	r7, r6
 8001104:	435c      	muls	r4, r3
 8001106:	436e      	muls	r6, r5
 8001108:	435d      	muls	r5, r3
 800110a:	0c3b      	lsrs	r3, r7, #16
 800110c:	4699      	mov	r9, r3
 800110e:	19a4      	adds	r4, r4, r6
 8001110:	444c      	add	r4, r9
 8001112:	4442      	add	r2, r8
 8001114:	9503      	str	r5, [sp, #12]
 8001116:	42a6      	cmp	r6, r4
 8001118:	d904      	bls.n	8001124 <__aeabi_dmul+0x284>
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4698      	mov	r8, r3
 8001120:	4445      	add	r5, r8
 8001122:	9503      	str	r5, [sp, #12]
 8001124:	9b02      	ldr	r3, [sp, #8]
 8001126:	043f      	lsls	r7, r7, #16
 8001128:	445b      	add	r3, fp
 800112a:	001e      	movs	r6, r3
 800112c:	4283      	cmp	r3, r0
 800112e:	4180      	sbcs	r0, r0
 8001130:	0423      	lsls	r3, r4, #16
 8001132:	4698      	mov	r8, r3
 8001134:	9b05      	ldr	r3, [sp, #20]
 8001136:	0c3f      	lsrs	r7, r7, #16
 8001138:	4447      	add	r7, r8
 800113a:	4698      	mov	r8, r3
 800113c:	1876      	adds	r6, r6, r1
 800113e:	428e      	cmp	r6, r1
 8001140:	4189      	sbcs	r1, r1
 8001142:	4447      	add	r7, r8
 8001144:	4240      	negs	r0, r0
 8001146:	183d      	adds	r5, r7, r0
 8001148:	46a8      	mov	r8, r5
 800114a:	4693      	mov	fp, r2
 800114c:	4249      	negs	r1, r1
 800114e:	468a      	mov	sl, r1
 8001150:	44c3      	add	fp, r8
 8001152:	429f      	cmp	r7, r3
 8001154:	41bf      	sbcs	r7, r7
 8001156:	4580      	cmp	r8, r0
 8001158:	4180      	sbcs	r0, r0
 800115a:	9b03      	ldr	r3, [sp, #12]
 800115c:	44da      	add	sl, fp
 800115e:	4698      	mov	r8, r3
 8001160:	4653      	mov	r3, sl
 8001162:	4240      	negs	r0, r0
 8001164:	427f      	negs	r7, r7
 8001166:	4307      	orrs	r7, r0
 8001168:	0c24      	lsrs	r4, r4, #16
 800116a:	4593      	cmp	fp, r2
 800116c:	4192      	sbcs	r2, r2
 800116e:	458a      	cmp	sl, r1
 8001170:	4189      	sbcs	r1, r1
 8001172:	193f      	adds	r7, r7, r4
 8001174:	0ddc      	lsrs	r4, r3, #23
 8001176:	9b04      	ldr	r3, [sp, #16]
 8001178:	0275      	lsls	r5, r6, #9
 800117a:	431d      	orrs	r5, r3
 800117c:	1e68      	subs	r0, r5, #1
 800117e:	4185      	sbcs	r5, r0
 8001180:	4653      	mov	r3, sl
 8001182:	4252      	negs	r2, r2
 8001184:	4249      	negs	r1, r1
 8001186:	430a      	orrs	r2, r1
 8001188:	18bf      	adds	r7, r7, r2
 800118a:	4447      	add	r7, r8
 800118c:	0df6      	lsrs	r6, r6, #23
 800118e:	027f      	lsls	r7, r7, #9
 8001190:	4335      	orrs	r5, r6
 8001192:	025a      	lsls	r2, r3, #9
 8001194:	433c      	orrs	r4, r7
 8001196:	4315      	orrs	r5, r2
 8001198:	01fb      	lsls	r3, r7, #7
 800119a:	d400      	bmi.n	800119e <__aeabi_dmul+0x2fe>
 800119c:	e0c1      	b.n	8001322 <__aeabi_dmul+0x482>
 800119e:	2101      	movs	r1, #1
 80011a0:	086a      	lsrs	r2, r5, #1
 80011a2:	400d      	ands	r5, r1
 80011a4:	4315      	orrs	r5, r2
 80011a6:	07e2      	lsls	r2, r4, #31
 80011a8:	4315      	orrs	r5, r2
 80011aa:	0864      	lsrs	r4, r4, #1
 80011ac:	4926      	ldr	r1, [pc, #152]	; (8001248 <__aeabi_dmul+0x3a8>)
 80011ae:	4461      	add	r1, ip
 80011b0:	2900      	cmp	r1, #0
 80011b2:	dd56      	ble.n	8001262 <__aeabi_dmul+0x3c2>
 80011b4:	076b      	lsls	r3, r5, #29
 80011b6:	d009      	beq.n	80011cc <__aeabi_dmul+0x32c>
 80011b8:	220f      	movs	r2, #15
 80011ba:	402a      	ands	r2, r5
 80011bc:	2a04      	cmp	r2, #4
 80011be:	d005      	beq.n	80011cc <__aeabi_dmul+0x32c>
 80011c0:	1d2a      	adds	r2, r5, #4
 80011c2:	42aa      	cmp	r2, r5
 80011c4:	41ad      	sbcs	r5, r5
 80011c6:	426d      	negs	r5, r5
 80011c8:	1964      	adds	r4, r4, r5
 80011ca:	0015      	movs	r5, r2
 80011cc:	01e3      	lsls	r3, r4, #7
 80011ce:	d504      	bpl.n	80011da <__aeabi_dmul+0x33a>
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	4a1e      	ldr	r2, [pc, #120]	; (800124c <__aeabi_dmul+0x3ac>)
 80011d4:	00c9      	lsls	r1, r1, #3
 80011d6:	4014      	ands	r4, r2
 80011d8:	4461      	add	r1, ip
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <__aeabi_dmul+0x3b0>)
 80011dc:	4291      	cmp	r1, r2
 80011de:	dd00      	ble.n	80011e2 <__aeabi_dmul+0x342>
 80011e0:	e724      	b.n	800102c <__aeabi_dmul+0x18c>
 80011e2:	0762      	lsls	r2, r4, #29
 80011e4:	08ed      	lsrs	r5, r5, #3
 80011e6:	0264      	lsls	r4, r4, #9
 80011e8:	0549      	lsls	r1, r1, #21
 80011ea:	4315      	orrs	r5, r2
 80011ec:	0b24      	lsrs	r4, r4, #12
 80011ee:	0d4a      	lsrs	r2, r1, #21
 80011f0:	e6c6      	b.n	8000f80 <__aeabi_dmul+0xe0>
 80011f2:	9701      	str	r7, [sp, #4]
 80011f4:	e6b8      	b.n	8000f68 <__aeabi_dmul+0xc8>
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <__aeabi_dmul+0x398>)
 80011f8:	2003      	movs	r0, #3
 80011fa:	4694      	mov	ip, r2
 80011fc:	4463      	add	r3, ip
 80011fe:	464a      	mov	r2, r9
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2303      	movs	r3, #3
 8001204:	431a      	orrs	r2, r3
 8001206:	4691      	mov	r9, r2
 8001208:	4652      	mov	r2, sl
 800120a:	e68a      	b.n	8000f22 <__aeabi_dmul+0x82>
 800120c:	4649      	mov	r1, r9
 800120e:	2301      	movs	r3, #1
 8001210:	4319      	orrs	r1, r3
 8001212:	4689      	mov	r9, r1
 8001214:	2600      	movs	r6, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e683      	b.n	8000f22 <__aeabi_dmul+0x82>
 800121a:	220c      	movs	r2, #12
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2303      	movs	r3, #3
 8001220:	0005      	movs	r5, r0
 8001222:	4691      	mov	r9, r2
 8001224:	469b      	mov	fp, r3
 8001226:	e65e      	b.n	8000ee6 <__aeabi_dmul+0x46>
 8001228:	2304      	movs	r3, #4
 800122a:	4699      	mov	r9, r3
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	2400      	movs	r4, #0
 8001234:	469b      	mov	fp, r3
 8001236:	e656      	b.n	8000ee6 <__aeabi_dmul+0x46>
 8001238:	000007ff 	.word	0x000007ff
 800123c:	fffffc01 	.word	0xfffffc01
 8001240:	08005244 	.word	0x08005244
 8001244:	fffffc0d 	.word	0xfffffc0d
 8001248:	000003ff 	.word	0x000003ff
 800124c:	feffffff 	.word	0xfeffffff
 8001250:	000007fe 	.word	0x000007fe
 8001254:	2300      	movs	r3, #0
 8001256:	2480      	movs	r4, #128	; 0x80
 8001258:	2500      	movs	r5, #0
 800125a:	4a44      	ldr	r2, [pc, #272]	; (800136c <__aeabi_dmul+0x4cc>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	0324      	lsls	r4, r4, #12
 8001260:	e68e      	b.n	8000f80 <__aeabi_dmul+0xe0>
 8001262:	2001      	movs	r0, #1
 8001264:	1a40      	subs	r0, r0, r1
 8001266:	2838      	cmp	r0, #56	; 0x38
 8001268:	dd00      	ble.n	800126c <__aeabi_dmul+0x3cc>
 800126a:	e686      	b.n	8000f7a <__aeabi_dmul+0xda>
 800126c:	281f      	cmp	r0, #31
 800126e:	dd5b      	ble.n	8001328 <__aeabi_dmul+0x488>
 8001270:	221f      	movs	r2, #31
 8001272:	0023      	movs	r3, r4
 8001274:	4252      	negs	r2, r2
 8001276:	1a51      	subs	r1, r2, r1
 8001278:	40cb      	lsrs	r3, r1
 800127a:	0019      	movs	r1, r3
 800127c:	2820      	cmp	r0, #32
 800127e:	d003      	beq.n	8001288 <__aeabi_dmul+0x3e8>
 8001280:	4a3b      	ldr	r2, [pc, #236]	; (8001370 <__aeabi_dmul+0x4d0>)
 8001282:	4462      	add	r2, ip
 8001284:	4094      	lsls	r4, r2
 8001286:	4325      	orrs	r5, r4
 8001288:	1e6a      	subs	r2, r5, #1
 800128a:	4195      	sbcs	r5, r2
 800128c:	002a      	movs	r2, r5
 800128e:	430a      	orrs	r2, r1
 8001290:	2107      	movs	r1, #7
 8001292:	000d      	movs	r5, r1
 8001294:	2400      	movs	r4, #0
 8001296:	4015      	ands	r5, r2
 8001298:	4211      	tst	r1, r2
 800129a:	d05b      	beq.n	8001354 <__aeabi_dmul+0x4b4>
 800129c:	210f      	movs	r1, #15
 800129e:	2400      	movs	r4, #0
 80012a0:	4011      	ands	r1, r2
 80012a2:	2904      	cmp	r1, #4
 80012a4:	d053      	beq.n	800134e <__aeabi_dmul+0x4ae>
 80012a6:	1d11      	adds	r1, r2, #4
 80012a8:	4291      	cmp	r1, r2
 80012aa:	4192      	sbcs	r2, r2
 80012ac:	4252      	negs	r2, r2
 80012ae:	18a4      	adds	r4, r4, r2
 80012b0:	000a      	movs	r2, r1
 80012b2:	0223      	lsls	r3, r4, #8
 80012b4:	d54b      	bpl.n	800134e <__aeabi_dmul+0x4ae>
 80012b6:	2201      	movs	r2, #1
 80012b8:	2400      	movs	r4, #0
 80012ba:	2500      	movs	r5, #0
 80012bc:	e660      	b.n	8000f80 <__aeabi_dmul+0xe0>
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	031b      	lsls	r3, r3, #12
 80012c2:	421c      	tst	r4, r3
 80012c4:	d009      	beq.n	80012da <__aeabi_dmul+0x43a>
 80012c6:	421e      	tst	r6, r3
 80012c8:	d107      	bne.n	80012da <__aeabi_dmul+0x43a>
 80012ca:	4333      	orrs	r3, r6
 80012cc:	031c      	lsls	r4, r3, #12
 80012ce:	4643      	mov	r3, r8
 80012d0:	0015      	movs	r5, r2
 80012d2:	0b24      	lsrs	r4, r4, #12
 80012d4:	4a25      	ldr	r2, [pc, #148]	; (800136c <__aeabi_dmul+0x4cc>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	e652      	b.n	8000f80 <__aeabi_dmul+0xe0>
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0312      	lsls	r2, r2, #12
 80012de:	4314      	orrs	r4, r2
 80012e0:	0324      	lsls	r4, r4, #12
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <__aeabi_dmul+0x4cc>)
 80012e4:	0b24      	lsrs	r4, r4, #12
 80012e6:	9701      	str	r7, [sp, #4]
 80012e8:	e64a      	b.n	8000f80 <__aeabi_dmul+0xe0>
 80012ea:	f000 fc93 	bl	8001c14 <__clzsi2>
 80012ee:	0003      	movs	r3, r0
 80012f0:	001a      	movs	r2, r3
 80012f2:	3215      	adds	r2, #21
 80012f4:	3020      	adds	r0, #32
 80012f6:	2a1c      	cmp	r2, #28
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dmul+0x45c>
 80012fa:	e684      	b.n	8001006 <__aeabi_dmul+0x166>
 80012fc:	4656      	mov	r6, sl
 80012fe:	3b08      	subs	r3, #8
 8001300:	2200      	movs	r2, #0
 8001302:	409e      	lsls	r6, r3
 8001304:	e689      	b.n	800101a <__aeabi_dmul+0x17a>
 8001306:	f000 fc85 	bl	8001c14 <__clzsi2>
 800130a:	0001      	movs	r1, r0
 800130c:	0002      	movs	r2, r0
 800130e:	3115      	adds	r1, #21
 8001310:	3220      	adds	r2, #32
 8001312:	291c      	cmp	r1, #28
 8001314:	dc00      	bgt.n	8001318 <__aeabi_dmul+0x478>
 8001316:	e64e      	b.n	8000fb6 <__aeabi_dmul+0x116>
 8001318:	0034      	movs	r4, r6
 800131a:	3808      	subs	r0, #8
 800131c:	2500      	movs	r5, #0
 800131e:	4084      	lsls	r4, r0
 8001320:	e653      	b.n	8000fca <__aeabi_dmul+0x12a>
 8001322:	9b00      	ldr	r3, [sp, #0]
 8001324:	469c      	mov	ip, r3
 8001326:	e741      	b.n	80011ac <__aeabi_dmul+0x30c>
 8001328:	4912      	ldr	r1, [pc, #72]	; (8001374 <__aeabi_dmul+0x4d4>)
 800132a:	0022      	movs	r2, r4
 800132c:	4461      	add	r1, ip
 800132e:	002e      	movs	r6, r5
 8001330:	408d      	lsls	r5, r1
 8001332:	408a      	lsls	r2, r1
 8001334:	40c6      	lsrs	r6, r0
 8001336:	1e69      	subs	r1, r5, #1
 8001338:	418d      	sbcs	r5, r1
 800133a:	4332      	orrs	r2, r6
 800133c:	432a      	orrs	r2, r5
 800133e:	40c4      	lsrs	r4, r0
 8001340:	0753      	lsls	r3, r2, #29
 8001342:	d0b6      	beq.n	80012b2 <__aeabi_dmul+0x412>
 8001344:	210f      	movs	r1, #15
 8001346:	4011      	ands	r1, r2
 8001348:	2904      	cmp	r1, #4
 800134a:	d1ac      	bne.n	80012a6 <__aeabi_dmul+0x406>
 800134c:	e7b1      	b.n	80012b2 <__aeabi_dmul+0x412>
 800134e:	0765      	lsls	r5, r4, #29
 8001350:	0264      	lsls	r4, r4, #9
 8001352:	0b24      	lsrs	r4, r4, #12
 8001354:	08d2      	lsrs	r2, r2, #3
 8001356:	4315      	orrs	r5, r2
 8001358:	2200      	movs	r2, #0
 800135a:	e611      	b.n	8000f80 <__aeabi_dmul+0xe0>
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	0312      	lsls	r2, r2, #12
 8001360:	4314      	orrs	r4, r2
 8001362:	0324      	lsls	r4, r4, #12
 8001364:	4a01      	ldr	r2, [pc, #4]	; (800136c <__aeabi_dmul+0x4cc>)
 8001366:	0b24      	lsrs	r4, r4, #12
 8001368:	e60a      	b.n	8000f80 <__aeabi_dmul+0xe0>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	000007ff 	.word	0x000007ff
 8001370:	0000043e 	.word	0x0000043e
 8001374:	0000041e 	.word	0x0000041e

08001378 <__aeabi_dsub>:
 8001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137a:	4657      	mov	r7, sl
 800137c:	464e      	mov	r6, r9
 800137e:	4645      	mov	r5, r8
 8001380:	46de      	mov	lr, fp
 8001382:	0004      	movs	r4, r0
 8001384:	b5e0      	push	{r5, r6, r7, lr}
 8001386:	001f      	movs	r7, r3
 8001388:	0010      	movs	r0, r2
 800138a:	030b      	lsls	r3, r1, #12
 800138c:	0f62      	lsrs	r2, r4, #29
 800138e:	004e      	lsls	r6, r1, #1
 8001390:	0fcd      	lsrs	r5, r1, #31
 8001392:	0a5b      	lsrs	r3, r3, #9
 8001394:	0339      	lsls	r1, r7, #12
 8001396:	4313      	orrs	r3, r2
 8001398:	0a49      	lsrs	r1, r1, #9
 800139a:	00e2      	lsls	r2, r4, #3
 800139c:	0f44      	lsrs	r4, r0, #29
 800139e:	4321      	orrs	r1, r4
 80013a0:	4cc2      	ldr	r4, [pc, #776]	; (80016ac <__aeabi_dsub+0x334>)
 80013a2:	4691      	mov	r9, r2
 80013a4:	4692      	mov	sl, r2
 80013a6:	00c0      	lsls	r0, r0, #3
 80013a8:	007a      	lsls	r2, r7, #1
 80013aa:	4680      	mov	r8, r0
 80013ac:	0d76      	lsrs	r6, r6, #21
 80013ae:	0d52      	lsrs	r2, r2, #21
 80013b0:	0fff      	lsrs	r7, r7, #31
 80013b2:	42a2      	cmp	r2, r4
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dsub+0x40>
 80013b6:	e0b4      	b.n	8001522 <__aeabi_dsub+0x1aa>
 80013b8:	2401      	movs	r4, #1
 80013ba:	4067      	eors	r7, r4
 80013bc:	46bb      	mov	fp, r7
 80013be:	42bd      	cmp	r5, r7
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x4c>
 80013c2:	e088      	b.n	80014d6 <__aeabi_dsub+0x15e>
 80013c4:	1ab4      	subs	r4, r6, r2
 80013c6:	46a4      	mov	ip, r4
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	dc00      	bgt.n	80013ce <__aeabi_dsub+0x56>
 80013cc:	e0b2      	b.n	8001534 <__aeabi_dsub+0x1bc>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dsub+0x5c>
 80013d2:	e0c5      	b.n	8001560 <__aeabi_dsub+0x1e8>
 80013d4:	4ab5      	ldr	r2, [pc, #724]	; (80016ac <__aeabi_dsub+0x334>)
 80013d6:	4296      	cmp	r6, r2
 80013d8:	d100      	bne.n	80013dc <__aeabi_dsub+0x64>
 80013da:	e28b      	b.n	80018f4 <__aeabi_dsub+0x57c>
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	4311      	orrs	r1, r2
 80013e2:	4662      	mov	r2, ip
 80013e4:	2a38      	cmp	r2, #56	; 0x38
 80013e6:	dd00      	ble.n	80013ea <__aeabi_dsub+0x72>
 80013e8:	e1a1      	b.n	800172e <__aeabi_dsub+0x3b6>
 80013ea:	2a1f      	cmp	r2, #31
 80013ec:	dd00      	ble.n	80013f0 <__aeabi_dsub+0x78>
 80013ee:	e216      	b.n	800181e <__aeabi_dsub+0x4a6>
 80013f0:	2720      	movs	r7, #32
 80013f2:	000c      	movs	r4, r1
 80013f4:	1abf      	subs	r7, r7, r2
 80013f6:	40bc      	lsls	r4, r7
 80013f8:	0002      	movs	r2, r0
 80013fa:	46a0      	mov	r8, r4
 80013fc:	4664      	mov	r4, ip
 80013fe:	40b8      	lsls	r0, r7
 8001400:	40e2      	lsrs	r2, r4
 8001402:	4644      	mov	r4, r8
 8001404:	4314      	orrs	r4, r2
 8001406:	0002      	movs	r2, r0
 8001408:	1e50      	subs	r0, r2, #1
 800140a:	4182      	sbcs	r2, r0
 800140c:	4660      	mov	r0, ip
 800140e:	40c1      	lsrs	r1, r0
 8001410:	4322      	orrs	r2, r4
 8001412:	1a5b      	subs	r3, r3, r1
 8001414:	4649      	mov	r1, r9
 8001416:	1a8c      	subs	r4, r1, r2
 8001418:	45a1      	cmp	r9, r4
 800141a:	4192      	sbcs	r2, r2
 800141c:	4252      	negs	r2, r2
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	4698      	mov	r8, r3
 8001422:	4643      	mov	r3, r8
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	d400      	bmi.n	800142a <__aeabi_dsub+0xb2>
 8001428:	e117      	b.n	800165a <__aeabi_dsub+0x2e2>
 800142a:	4643      	mov	r3, r8
 800142c:	025b      	lsls	r3, r3, #9
 800142e:	0a5b      	lsrs	r3, r3, #9
 8001430:	4698      	mov	r8, r3
 8001432:	4643      	mov	r3, r8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d100      	bne.n	800143a <__aeabi_dsub+0xc2>
 8001438:	e16c      	b.n	8001714 <__aeabi_dsub+0x39c>
 800143a:	4640      	mov	r0, r8
 800143c:	f000 fbea 	bl	8001c14 <__clzsi2>
 8001440:	0002      	movs	r2, r0
 8001442:	3a08      	subs	r2, #8
 8001444:	2120      	movs	r1, #32
 8001446:	0020      	movs	r0, r4
 8001448:	4643      	mov	r3, r8
 800144a:	1a89      	subs	r1, r1, r2
 800144c:	4093      	lsls	r3, r2
 800144e:	40c8      	lsrs	r0, r1
 8001450:	4094      	lsls	r4, r2
 8001452:	4303      	orrs	r3, r0
 8001454:	4296      	cmp	r6, r2
 8001456:	dd00      	ble.n	800145a <__aeabi_dsub+0xe2>
 8001458:	e157      	b.n	800170a <__aeabi_dsub+0x392>
 800145a:	1b96      	subs	r6, r2, r6
 800145c:	1c71      	adds	r1, r6, #1
 800145e:	291f      	cmp	r1, #31
 8001460:	dd00      	ble.n	8001464 <__aeabi_dsub+0xec>
 8001462:	e1cb      	b.n	80017fc <__aeabi_dsub+0x484>
 8001464:	2220      	movs	r2, #32
 8001466:	0018      	movs	r0, r3
 8001468:	0026      	movs	r6, r4
 800146a:	1a52      	subs	r2, r2, r1
 800146c:	4094      	lsls	r4, r2
 800146e:	4090      	lsls	r0, r2
 8001470:	40ce      	lsrs	r6, r1
 8001472:	40cb      	lsrs	r3, r1
 8001474:	1e62      	subs	r2, r4, #1
 8001476:	4194      	sbcs	r4, r2
 8001478:	4330      	orrs	r0, r6
 800147a:	4698      	mov	r8, r3
 800147c:	2600      	movs	r6, #0
 800147e:	4304      	orrs	r4, r0
 8001480:	0763      	lsls	r3, r4, #29
 8001482:	d009      	beq.n	8001498 <__aeabi_dsub+0x120>
 8001484:	230f      	movs	r3, #15
 8001486:	4023      	ands	r3, r4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d005      	beq.n	8001498 <__aeabi_dsub+0x120>
 800148c:	1d23      	adds	r3, r4, #4
 800148e:	42a3      	cmp	r3, r4
 8001490:	41a4      	sbcs	r4, r4
 8001492:	4264      	negs	r4, r4
 8001494:	44a0      	add	r8, r4
 8001496:	001c      	movs	r4, r3
 8001498:	4643      	mov	r3, r8
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	d400      	bmi.n	80014a0 <__aeabi_dsub+0x128>
 800149e:	e0df      	b.n	8001660 <__aeabi_dsub+0x2e8>
 80014a0:	4b82      	ldr	r3, [pc, #520]	; (80016ac <__aeabi_dsub+0x334>)
 80014a2:	3601      	adds	r6, #1
 80014a4:	429e      	cmp	r6, r3
 80014a6:	d100      	bne.n	80014aa <__aeabi_dsub+0x132>
 80014a8:	e0fb      	b.n	80016a2 <__aeabi_dsub+0x32a>
 80014aa:	4642      	mov	r2, r8
 80014ac:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <__aeabi_dsub+0x338>)
 80014ae:	08e4      	lsrs	r4, r4, #3
 80014b0:	401a      	ands	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	0571      	lsls	r1, r6, #21
 80014b6:	0752      	lsls	r2, r2, #29
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4322      	orrs	r2, r4
 80014bc:	0b1b      	lsrs	r3, r3, #12
 80014be:	0d49      	lsrs	r1, r1, #21
 80014c0:	0509      	lsls	r1, r1, #20
 80014c2:	07ed      	lsls	r5, r5, #31
 80014c4:	4319      	orrs	r1, r3
 80014c6:	4329      	orrs	r1, r5
 80014c8:	0010      	movs	r0, r2
 80014ca:	bcf0      	pop	{r4, r5, r6, r7}
 80014cc:	46bb      	mov	fp, r7
 80014ce:	46b2      	mov	sl, r6
 80014d0:	46a9      	mov	r9, r5
 80014d2:	46a0      	mov	r8, r4
 80014d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014d6:	1ab4      	subs	r4, r6, r2
 80014d8:	46a4      	mov	ip, r4
 80014da:	2c00      	cmp	r4, #0
 80014dc:	dd58      	ble.n	8001590 <__aeabi_dsub+0x218>
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dsub+0x16c>
 80014e2:	e09e      	b.n	8001622 <__aeabi_dsub+0x2aa>
 80014e4:	4a71      	ldr	r2, [pc, #452]	; (80016ac <__aeabi_dsub+0x334>)
 80014e6:	4296      	cmp	r6, r2
 80014e8:	d100      	bne.n	80014ec <__aeabi_dsub+0x174>
 80014ea:	e13b      	b.n	8001764 <__aeabi_dsub+0x3ec>
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0412      	lsls	r2, r2, #16
 80014f0:	4311      	orrs	r1, r2
 80014f2:	4662      	mov	r2, ip
 80014f4:	2a38      	cmp	r2, #56	; 0x38
 80014f6:	dd00      	ble.n	80014fa <__aeabi_dsub+0x182>
 80014f8:	e0c1      	b.n	800167e <__aeabi_dsub+0x306>
 80014fa:	2a1f      	cmp	r2, #31
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_dsub+0x188>
 80014fe:	e1bb      	b.n	8001878 <__aeabi_dsub+0x500>
 8001500:	000c      	movs	r4, r1
 8001502:	3a20      	subs	r2, #32
 8001504:	40d4      	lsrs	r4, r2
 8001506:	0022      	movs	r2, r4
 8001508:	4664      	mov	r4, ip
 800150a:	2c20      	cmp	r4, #32
 800150c:	d004      	beq.n	8001518 <__aeabi_dsub+0x1a0>
 800150e:	2740      	movs	r7, #64	; 0x40
 8001510:	1b3f      	subs	r7, r7, r4
 8001512:	40b9      	lsls	r1, r7
 8001514:	4308      	orrs	r0, r1
 8001516:	4680      	mov	r8, r0
 8001518:	4644      	mov	r4, r8
 800151a:	1e61      	subs	r1, r4, #1
 800151c:	418c      	sbcs	r4, r1
 800151e:	4314      	orrs	r4, r2
 8001520:	e0b1      	b.n	8001686 <__aeabi_dsub+0x30e>
 8001522:	000c      	movs	r4, r1
 8001524:	4304      	orrs	r4, r0
 8001526:	d02a      	beq.n	800157e <__aeabi_dsub+0x206>
 8001528:	46bb      	mov	fp, r7
 800152a:	42bd      	cmp	r5, r7
 800152c:	d02d      	beq.n	800158a <__aeabi_dsub+0x212>
 800152e:	4c61      	ldr	r4, [pc, #388]	; (80016b4 <__aeabi_dsub+0x33c>)
 8001530:	46a4      	mov	ip, r4
 8001532:	44b4      	add	ip, r6
 8001534:	4664      	mov	r4, ip
 8001536:	2c00      	cmp	r4, #0
 8001538:	d05c      	beq.n	80015f4 <__aeabi_dsub+0x27c>
 800153a:	1b94      	subs	r4, r2, r6
 800153c:	46a4      	mov	ip, r4
 800153e:	2e00      	cmp	r6, #0
 8001540:	d000      	beq.n	8001544 <__aeabi_dsub+0x1cc>
 8001542:	e115      	b.n	8001770 <__aeabi_dsub+0x3f8>
 8001544:	464d      	mov	r5, r9
 8001546:	431d      	orrs	r5, r3
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x1d4>
 800154a:	e1c3      	b.n	80018d4 <__aeabi_dsub+0x55c>
 800154c:	1e65      	subs	r5, r4, #1
 800154e:	2c01      	cmp	r4, #1
 8001550:	d100      	bne.n	8001554 <__aeabi_dsub+0x1dc>
 8001552:	e20c      	b.n	800196e <__aeabi_dsub+0x5f6>
 8001554:	4e55      	ldr	r6, [pc, #340]	; (80016ac <__aeabi_dsub+0x334>)
 8001556:	42b4      	cmp	r4, r6
 8001558:	d100      	bne.n	800155c <__aeabi_dsub+0x1e4>
 800155a:	e1f8      	b.n	800194e <__aeabi_dsub+0x5d6>
 800155c:	46ac      	mov	ip, r5
 800155e:	e10e      	b.n	800177e <__aeabi_dsub+0x406>
 8001560:	000a      	movs	r2, r1
 8001562:	4302      	orrs	r2, r0
 8001564:	d100      	bne.n	8001568 <__aeabi_dsub+0x1f0>
 8001566:	e136      	b.n	80017d6 <__aeabi_dsub+0x45e>
 8001568:	0022      	movs	r2, r4
 800156a:	3a01      	subs	r2, #1
 800156c:	2c01      	cmp	r4, #1
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x1fa>
 8001570:	e1c6      	b.n	8001900 <__aeabi_dsub+0x588>
 8001572:	4c4e      	ldr	r4, [pc, #312]	; (80016ac <__aeabi_dsub+0x334>)
 8001574:	45a4      	cmp	ip, r4
 8001576:	d100      	bne.n	800157a <__aeabi_dsub+0x202>
 8001578:	e0f4      	b.n	8001764 <__aeabi_dsub+0x3ec>
 800157a:	4694      	mov	ip, r2
 800157c:	e731      	b.n	80013e2 <__aeabi_dsub+0x6a>
 800157e:	2401      	movs	r4, #1
 8001580:	4067      	eors	r7, r4
 8001582:	46bb      	mov	fp, r7
 8001584:	42bd      	cmp	r5, r7
 8001586:	d000      	beq.n	800158a <__aeabi_dsub+0x212>
 8001588:	e71c      	b.n	80013c4 <__aeabi_dsub+0x4c>
 800158a:	4c4a      	ldr	r4, [pc, #296]	; (80016b4 <__aeabi_dsub+0x33c>)
 800158c:	46a4      	mov	ip, r4
 800158e:	44b4      	add	ip, r6
 8001590:	4664      	mov	r4, ip
 8001592:	2c00      	cmp	r4, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_dsub+0x220>
 8001596:	e0cf      	b.n	8001738 <__aeabi_dsub+0x3c0>
 8001598:	1b94      	subs	r4, r2, r6
 800159a:	46a4      	mov	ip, r4
 800159c:	2e00      	cmp	r6, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dsub+0x22a>
 80015a0:	e15c      	b.n	800185c <__aeabi_dsub+0x4e4>
 80015a2:	4e42      	ldr	r6, [pc, #264]	; (80016ac <__aeabi_dsub+0x334>)
 80015a4:	42b2      	cmp	r2, r6
 80015a6:	d100      	bne.n	80015aa <__aeabi_dsub+0x232>
 80015a8:	e1ec      	b.n	8001984 <__aeabi_dsub+0x60c>
 80015aa:	2680      	movs	r6, #128	; 0x80
 80015ac:	0436      	lsls	r6, r6, #16
 80015ae:	4333      	orrs	r3, r6
 80015b0:	4664      	mov	r4, ip
 80015b2:	2c38      	cmp	r4, #56	; 0x38
 80015b4:	dd00      	ble.n	80015b8 <__aeabi_dsub+0x240>
 80015b6:	e1b3      	b.n	8001920 <__aeabi_dsub+0x5a8>
 80015b8:	2c1f      	cmp	r4, #31
 80015ba:	dd00      	ble.n	80015be <__aeabi_dsub+0x246>
 80015bc:	e238      	b.n	8001a30 <__aeabi_dsub+0x6b8>
 80015be:	2620      	movs	r6, #32
 80015c0:	1b36      	subs	r6, r6, r4
 80015c2:	001c      	movs	r4, r3
 80015c4:	40b4      	lsls	r4, r6
 80015c6:	464f      	mov	r7, r9
 80015c8:	46a0      	mov	r8, r4
 80015ca:	4664      	mov	r4, ip
 80015cc:	40e7      	lsrs	r7, r4
 80015ce:	4644      	mov	r4, r8
 80015d0:	433c      	orrs	r4, r7
 80015d2:	464f      	mov	r7, r9
 80015d4:	40b7      	lsls	r7, r6
 80015d6:	003e      	movs	r6, r7
 80015d8:	1e77      	subs	r7, r6, #1
 80015da:	41be      	sbcs	r6, r7
 80015dc:	4334      	orrs	r4, r6
 80015de:	4666      	mov	r6, ip
 80015e0:	40f3      	lsrs	r3, r6
 80015e2:	18c9      	adds	r1, r1, r3
 80015e4:	1824      	adds	r4, r4, r0
 80015e6:	4284      	cmp	r4, r0
 80015e8:	419b      	sbcs	r3, r3
 80015ea:	425b      	negs	r3, r3
 80015ec:	4698      	mov	r8, r3
 80015ee:	0016      	movs	r6, r2
 80015f0:	4488      	add	r8, r1
 80015f2:	e04e      	b.n	8001692 <__aeabi_dsub+0x31a>
 80015f4:	4a30      	ldr	r2, [pc, #192]	; (80016b8 <__aeabi_dsub+0x340>)
 80015f6:	1c74      	adds	r4, r6, #1
 80015f8:	4214      	tst	r4, r2
 80015fa:	d000      	beq.n	80015fe <__aeabi_dsub+0x286>
 80015fc:	e0d6      	b.n	80017ac <__aeabi_dsub+0x434>
 80015fe:	464a      	mov	r2, r9
 8001600:	431a      	orrs	r2, r3
 8001602:	2e00      	cmp	r6, #0
 8001604:	d000      	beq.n	8001608 <__aeabi_dsub+0x290>
 8001606:	e15b      	b.n	80018c0 <__aeabi_dsub+0x548>
 8001608:	2a00      	cmp	r2, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dsub+0x296>
 800160c:	e1a5      	b.n	800195a <__aeabi_dsub+0x5e2>
 800160e:	000a      	movs	r2, r1
 8001610:	4302      	orrs	r2, r0
 8001612:	d000      	beq.n	8001616 <__aeabi_dsub+0x29e>
 8001614:	e1bb      	b.n	800198e <__aeabi_dsub+0x616>
 8001616:	464a      	mov	r2, r9
 8001618:	0759      	lsls	r1, r3, #29
 800161a:	08d2      	lsrs	r2, r2, #3
 800161c:	430a      	orrs	r2, r1
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	e027      	b.n	8001672 <__aeabi_dsub+0x2fa>
 8001622:	000a      	movs	r2, r1
 8001624:	4302      	orrs	r2, r0
 8001626:	d100      	bne.n	800162a <__aeabi_dsub+0x2b2>
 8001628:	e174      	b.n	8001914 <__aeabi_dsub+0x59c>
 800162a:	0022      	movs	r2, r4
 800162c:	3a01      	subs	r2, #1
 800162e:	2c01      	cmp	r4, #1
 8001630:	d005      	beq.n	800163e <__aeabi_dsub+0x2c6>
 8001632:	4c1e      	ldr	r4, [pc, #120]	; (80016ac <__aeabi_dsub+0x334>)
 8001634:	45a4      	cmp	ip, r4
 8001636:	d100      	bne.n	800163a <__aeabi_dsub+0x2c2>
 8001638:	e094      	b.n	8001764 <__aeabi_dsub+0x3ec>
 800163a:	4694      	mov	ip, r2
 800163c:	e759      	b.n	80014f2 <__aeabi_dsub+0x17a>
 800163e:	4448      	add	r0, r9
 8001640:	4548      	cmp	r0, r9
 8001642:	4192      	sbcs	r2, r2
 8001644:	185b      	adds	r3, r3, r1
 8001646:	4698      	mov	r8, r3
 8001648:	0004      	movs	r4, r0
 800164a:	4252      	negs	r2, r2
 800164c:	4490      	add	r8, r2
 800164e:	4643      	mov	r3, r8
 8001650:	2602      	movs	r6, #2
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	d500      	bpl.n	8001658 <__aeabi_dsub+0x2e0>
 8001656:	e0c4      	b.n	80017e2 <__aeabi_dsub+0x46a>
 8001658:	3e01      	subs	r6, #1
 800165a:	0763      	lsls	r3, r4, #29
 800165c:	d000      	beq.n	8001660 <__aeabi_dsub+0x2e8>
 800165e:	e711      	b.n	8001484 <__aeabi_dsub+0x10c>
 8001660:	4643      	mov	r3, r8
 8001662:	46b4      	mov	ip, r6
 8001664:	0759      	lsls	r1, r3, #29
 8001666:	08e2      	lsrs	r2, r4, #3
 8001668:	430a      	orrs	r2, r1
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	490f      	ldr	r1, [pc, #60]	; (80016ac <__aeabi_dsub+0x334>)
 800166e:	458c      	cmp	ip, r1
 8001670:	d040      	beq.n	80016f4 <__aeabi_dsub+0x37c>
 8001672:	4661      	mov	r1, ip
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	0549      	lsls	r1, r1, #21
 8001678:	0b1b      	lsrs	r3, r3, #12
 800167a:	0d49      	lsrs	r1, r1, #21
 800167c:	e720      	b.n	80014c0 <__aeabi_dsub+0x148>
 800167e:	4301      	orrs	r1, r0
 8001680:	000c      	movs	r4, r1
 8001682:	1e61      	subs	r1, r4, #1
 8001684:	418c      	sbcs	r4, r1
 8001686:	444c      	add	r4, r9
 8001688:	454c      	cmp	r4, r9
 800168a:	4192      	sbcs	r2, r2
 800168c:	4252      	negs	r2, r2
 800168e:	4690      	mov	r8, r2
 8001690:	4498      	add	r8, r3
 8001692:	4643      	mov	r3, r8
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	d5e0      	bpl.n	800165a <__aeabi_dsub+0x2e2>
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__aeabi_dsub+0x334>)
 800169a:	3601      	adds	r6, #1
 800169c:	429e      	cmp	r6, r3
 800169e:	d000      	beq.n	80016a2 <__aeabi_dsub+0x32a>
 80016a0:	e09f      	b.n	80017e2 <__aeabi_dsub+0x46a>
 80016a2:	0031      	movs	r1, r6
 80016a4:	2300      	movs	r3, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	e70a      	b.n	80014c0 <__aeabi_dsub+0x148>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	000007ff 	.word	0x000007ff
 80016b0:	ff7fffff 	.word	0xff7fffff
 80016b4:	fffff801 	.word	0xfffff801
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dsub+0x34a>
 80016c0:	e160      	b.n	8001984 <__aeabi_dsub+0x60c>
 80016c2:	000a      	movs	r2, r1
 80016c4:	4302      	orrs	r2, r0
 80016c6:	d04d      	beq.n	8001764 <__aeabi_dsub+0x3ec>
 80016c8:	464a      	mov	r2, r9
 80016ca:	075c      	lsls	r4, r3, #29
 80016cc:	08d2      	lsrs	r2, r2, #3
 80016ce:	4322      	orrs	r2, r4
 80016d0:	2480      	movs	r4, #128	; 0x80
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	0324      	lsls	r4, r4, #12
 80016d6:	4223      	tst	r3, r4
 80016d8:	d007      	beq.n	80016ea <__aeabi_dsub+0x372>
 80016da:	08ce      	lsrs	r6, r1, #3
 80016dc:	4226      	tst	r6, r4
 80016de:	d104      	bne.n	80016ea <__aeabi_dsub+0x372>
 80016e0:	465d      	mov	r5, fp
 80016e2:	0033      	movs	r3, r6
 80016e4:	08c2      	lsrs	r2, r0, #3
 80016e6:	0749      	lsls	r1, r1, #29
 80016e8:	430a      	orrs	r2, r1
 80016ea:	0f51      	lsrs	r1, r2, #29
 80016ec:	00d2      	lsls	r2, r2, #3
 80016ee:	08d2      	lsrs	r2, r2, #3
 80016f0:	0749      	lsls	r1, r1, #29
 80016f2:	430a      	orrs	r2, r1
 80016f4:	0011      	movs	r1, r2
 80016f6:	4319      	orrs	r1, r3
 80016f8:	d100      	bne.n	80016fc <__aeabi_dsub+0x384>
 80016fa:	e1c8      	b.n	8001a8e <__aeabi_dsub+0x716>
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0309      	lsls	r1, r1, #12
 8001700:	430b      	orrs	r3, r1
 8001702:	031b      	lsls	r3, r3, #12
 8001704:	49d5      	ldr	r1, [pc, #852]	; (8001a5c <__aeabi_dsub+0x6e4>)
 8001706:	0b1b      	lsrs	r3, r3, #12
 8001708:	e6da      	b.n	80014c0 <__aeabi_dsub+0x148>
 800170a:	49d5      	ldr	r1, [pc, #852]	; (8001a60 <__aeabi_dsub+0x6e8>)
 800170c:	1ab6      	subs	r6, r6, r2
 800170e:	400b      	ands	r3, r1
 8001710:	4698      	mov	r8, r3
 8001712:	e6b5      	b.n	8001480 <__aeabi_dsub+0x108>
 8001714:	0020      	movs	r0, r4
 8001716:	f000 fa7d 	bl	8001c14 <__clzsi2>
 800171a:	0002      	movs	r2, r0
 800171c:	3218      	adds	r2, #24
 800171e:	2a1f      	cmp	r2, #31
 8001720:	dc00      	bgt.n	8001724 <__aeabi_dsub+0x3ac>
 8001722:	e68f      	b.n	8001444 <__aeabi_dsub+0xcc>
 8001724:	0023      	movs	r3, r4
 8001726:	3808      	subs	r0, #8
 8001728:	4083      	lsls	r3, r0
 800172a:	2400      	movs	r4, #0
 800172c:	e692      	b.n	8001454 <__aeabi_dsub+0xdc>
 800172e:	4308      	orrs	r0, r1
 8001730:	0002      	movs	r2, r0
 8001732:	1e50      	subs	r0, r2, #1
 8001734:	4182      	sbcs	r2, r0
 8001736:	e66d      	b.n	8001414 <__aeabi_dsub+0x9c>
 8001738:	4cca      	ldr	r4, [pc, #808]	; (8001a64 <__aeabi_dsub+0x6ec>)
 800173a:	1c72      	adds	r2, r6, #1
 800173c:	4222      	tst	r2, r4
 800173e:	d000      	beq.n	8001742 <__aeabi_dsub+0x3ca>
 8001740:	e0ad      	b.n	800189e <__aeabi_dsub+0x526>
 8001742:	464a      	mov	r2, r9
 8001744:	431a      	orrs	r2, r3
 8001746:	2e00      	cmp	r6, #0
 8001748:	d1b8      	bne.n	80016bc <__aeabi_dsub+0x344>
 800174a:	2a00      	cmp	r2, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x3d8>
 800174e:	e158      	b.n	8001a02 <__aeabi_dsub+0x68a>
 8001750:	000a      	movs	r2, r1
 8001752:	4302      	orrs	r2, r0
 8001754:	d000      	beq.n	8001758 <__aeabi_dsub+0x3e0>
 8001756:	e159      	b.n	8001a0c <__aeabi_dsub+0x694>
 8001758:	464a      	mov	r2, r9
 800175a:	0759      	lsls	r1, r3, #29
 800175c:	08d2      	lsrs	r2, r2, #3
 800175e:	430a      	orrs	r2, r1
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	e786      	b.n	8001672 <__aeabi_dsub+0x2fa>
 8001764:	464a      	mov	r2, r9
 8001766:	0759      	lsls	r1, r3, #29
 8001768:	08d2      	lsrs	r2, r2, #3
 800176a:	430a      	orrs	r2, r1
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	e7c1      	b.n	80016f4 <__aeabi_dsub+0x37c>
 8001770:	4dba      	ldr	r5, [pc, #744]	; (8001a5c <__aeabi_dsub+0x6e4>)
 8001772:	42aa      	cmp	r2, r5
 8001774:	d100      	bne.n	8001778 <__aeabi_dsub+0x400>
 8001776:	e11e      	b.n	80019b6 <__aeabi_dsub+0x63e>
 8001778:	2580      	movs	r5, #128	; 0x80
 800177a:	042d      	lsls	r5, r5, #16
 800177c:	432b      	orrs	r3, r5
 800177e:	4664      	mov	r4, ip
 8001780:	2c38      	cmp	r4, #56	; 0x38
 8001782:	dc5d      	bgt.n	8001840 <__aeabi_dsub+0x4c8>
 8001784:	2c1f      	cmp	r4, #31
 8001786:	dd00      	ble.n	800178a <__aeabi_dsub+0x412>
 8001788:	e0d0      	b.n	800192c <__aeabi_dsub+0x5b4>
 800178a:	2520      	movs	r5, #32
 800178c:	4667      	mov	r7, ip
 800178e:	1b2d      	subs	r5, r5, r4
 8001790:	464e      	mov	r6, r9
 8001792:	001c      	movs	r4, r3
 8001794:	40fe      	lsrs	r6, r7
 8001796:	40ac      	lsls	r4, r5
 8001798:	4334      	orrs	r4, r6
 800179a:	464e      	mov	r6, r9
 800179c:	40ae      	lsls	r6, r5
 800179e:	0035      	movs	r5, r6
 80017a0:	40fb      	lsrs	r3, r7
 80017a2:	1e6e      	subs	r6, r5, #1
 80017a4:	41b5      	sbcs	r5, r6
 80017a6:	1ac9      	subs	r1, r1, r3
 80017a8:	432c      	orrs	r4, r5
 80017aa:	e04e      	b.n	800184a <__aeabi_dsub+0x4d2>
 80017ac:	464a      	mov	r2, r9
 80017ae:	1a14      	subs	r4, r2, r0
 80017b0:	45a1      	cmp	r9, r4
 80017b2:	4192      	sbcs	r2, r2
 80017b4:	4252      	negs	r2, r2
 80017b6:	4690      	mov	r8, r2
 80017b8:	1a5f      	subs	r7, r3, r1
 80017ba:	003a      	movs	r2, r7
 80017bc:	4647      	mov	r7, r8
 80017be:	1bd2      	subs	r2, r2, r7
 80017c0:	4690      	mov	r8, r2
 80017c2:	0212      	lsls	r2, r2, #8
 80017c4:	d500      	bpl.n	80017c8 <__aeabi_dsub+0x450>
 80017c6:	e08b      	b.n	80018e0 <__aeabi_dsub+0x568>
 80017c8:	4642      	mov	r2, r8
 80017ca:	4322      	orrs	r2, r4
 80017cc:	d000      	beq.n	80017d0 <__aeabi_dsub+0x458>
 80017ce:	e630      	b.n	8001432 <__aeabi_dsub+0xba>
 80017d0:	2300      	movs	r3, #0
 80017d2:	2500      	movs	r5, #0
 80017d4:	e74d      	b.n	8001672 <__aeabi_dsub+0x2fa>
 80017d6:	464a      	mov	r2, r9
 80017d8:	0759      	lsls	r1, r3, #29
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	430a      	orrs	r2, r1
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	e744      	b.n	800166c <__aeabi_dsub+0x2f4>
 80017e2:	4642      	mov	r2, r8
 80017e4:	4b9e      	ldr	r3, [pc, #632]	; (8001a60 <__aeabi_dsub+0x6e8>)
 80017e6:	0861      	lsrs	r1, r4, #1
 80017e8:	401a      	ands	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	2201      	movs	r2, #1
 80017ee:	4014      	ands	r4, r2
 80017f0:	430c      	orrs	r4, r1
 80017f2:	07da      	lsls	r2, r3, #31
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	4698      	mov	r8, r3
 80017f8:	4314      	orrs	r4, r2
 80017fa:	e641      	b.n	8001480 <__aeabi_dsub+0x108>
 80017fc:	001a      	movs	r2, r3
 80017fe:	3e1f      	subs	r6, #31
 8001800:	40f2      	lsrs	r2, r6
 8001802:	0016      	movs	r6, r2
 8001804:	2920      	cmp	r1, #32
 8001806:	d003      	beq.n	8001810 <__aeabi_dsub+0x498>
 8001808:	2240      	movs	r2, #64	; 0x40
 800180a:	1a51      	subs	r1, r2, r1
 800180c:	408b      	lsls	r3, r1
 800180e:	431c      	orrs	r4, r3
 8001810:	1e62      	subs	r2, r4, #1
 8001812:	4194      	sbcs	r4, r2
 8001814:	2300      	movs	r3, #0
 8001816:	4334      	orrs	r4, r6
 8001818:	4698      	mov	r8, r3
 800181a:	2600      	movs	r6, #0
 800181c:	e71d      	b.n	800165a <__aeabi_dsub+0x2e2>
 800181e:	000c      	movs	r4, r1
 8001820:	3a20      	subs	r2, #32
 8001822:	40d4      	lsrs	r4, r2
 8001824:	0022      	movs	r2, r4
 8001826:	4664      	mov	r4, ip
 8001828:	2c20      	cmp	r4, #32
 800182a:	d004      	beq.n	8001836 <__aeabi_dsub+0x4be>
 800182c:	2740      	movs	r7, #64	; 0x40
 800182e:	1b3f      	subs	r7, r7, r4
 8001830:	40b9      	lsls	r1, r7
 8001832:	4308      	orrs	r0, r1
 8001834:	4680      	mov	r8, r0
 8001836:	4644      	mov	r4, r8
 8001838:	1e61      	subs	r1, r4, #1
 800183a:	418c      	sbcs	r4, r1
 800183c:	4322      	orrs	r2, r4
 800183e:	e5e9      	b.n	8001414 <__aeabi_dsub+0x9c>
 8001840:	464c      	mov	r4, r9
 8001842:	4323      	orrs	r3, r4
 8001844:	001c      	movs	r4, r3
 8001846:	1e63      	subs	r3, r4, #1
 8001848:	419c      	sbcs	r4, r3
 800184a:	1b04      	subs	r4, r0, r4
 800184c:	42a0      	cmp	r0, r4
 800184e:	419b      	sbcs	r3, r3
 8001850:	425b      	negs	r3, r3
 8001852:	1acb      	subs	r3, r1, r3
 8001854:	4698      	mov	r8, r3
 8001856:	465d      	mov	r5, fp
 8001858:	0016      	movs	r6, r2
 800185a:	e5e2      	b.n	8001422 <__aeabi_dsub+0xaa>
 800185c:	464e      	mov	r6, r9
 800185e:	431e      	orrs	r6, r3
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x4ec>
 8001862:	e0ae      	b.n	80019c2 <__aeabi_dsub+0x64a>
 8001864:	1e66      	subs	r6, r4, #1
 8001866:	2c01      	cmp	r4, #1
 8001868:	d100      	bne.n	800186c <__aeabi_dsub+0x4f4>
 800186a:	e0fd      	b.n	8001a68 <__aeabi_dsub+0x6f0>
 800186c:	4f7b      	ldr	r7, [pc, #492]	; (8001a5c <__aeabi_dsub+0x6e4>)
 800186e:	42bc      	cmp	r4, r7
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x4fc>
 8001872:	e107      	b.n	8001a84 <__aeabi_dsub+0x70c>
 8001874:	46b4      	mov	ip, r6
 8001876:	e69b      	b.n	80015b0 <__aeabi_dsub+0x238>
 8001878:	4664      	mov	r4, ip
 800187a:	2220      	movs	r2, #32
 800187c:	1b12      	subs	r2, r2, r4
 800187e:	000c      	movs	r4, r1
 8001880:	4094      	lsls	r4, r2
 8001882:	0007      	movs	r7, r0
 8001884:	4090      	lsls	r0, r2
 8001886:	46a0      	mov	r8, r4
 8001888:	4664      	mov	r4, ip
 800188a:	1e42      	subs	r2, r0, #1
 800188c:	4190      	sbcs	r0, r2
 800188e:	4662      	mov	r2, ip
 8001890:	40e7      	lsrs	r7, r4
 8001892:	4644      	mov	r4, r8
 8001894:	40d1      	lsrs	r1, r2
 8001896:	433c      	orrs	r4, r7
 8001898:	4304      	orrs	r4, r0
 800189a:	185b      	adds	r3, r3, r1
 800189c:	e6f3      	b.n	8001686 <__aeabi_dsub+0x30e>
 800189e:	4c6f      	ldr	r4, [pc, #444]	; (8001a5c <__aeabi_dsub+0x6e4>)
 80018a0:	42a2      	cmp	r2, r4
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dsub+0x52e>
 80018a4:	e0d5      	b.n	8001a52 <__aeabi_dsub+0x6da>
 80018a6:	4448      	add	r0, r9
 80018a8:	185b      	adds	r3, r3, r1
 80018aa:	4548      	cmp	r0, r9
 80018ac:	4189      	sbcs	r1, r1
 80018ae:	4249      	negs	r1, r1
 80018b0:	185b      	adds	r3, r3, r1
 80018b2:	07dc      	lsls	r4, r3, #31
 80018b4:	0840      	lsrs	r0, r0, #1
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	4698      	mov	r8, r3
 80018ba:	0016      	movs	r6, r2
 80018bc:	4304      	orrs	r4, r0
 80018be:	e6cc      	b.n	800165a <__aeabi_dsub+0x2e2>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d000      	beq.n	80018c6 <__aeabi_dsub+0x54e>
 80018c4:	e082      	b.n	80019cc <__aeabi_dsub+0x654>
 80018c6:	000a      	movs	r2, r1
 80018c8:	4302      	orrs	r2, r0
 80018ca:	d140      	bne.n	800194e <__aeabi_dsub+0x5d6>
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	2500      	movs	r5, #0
 80018d0:	031b      	lsls	r3, r3, #12
 80018d2:	e713      	b.n	80016fc <__aeabi_dsub+0x384>
 80018d4:	074b      	lsls	r3, r1, #29
 80018d6:	08c2      	lsrs	r2, r0, #3
 80018d8:	431a      	orrs	r2, r3
 80018da:	465d      	mov	r5, fp
 80018dc:	08cb      	lsrs	r3, r1, #3
 80018de:	e6c5      	b.n	800166c <__aeabi_dsub+0x2f4>
 80018e0:	464a      	mov	r2, r9
 80018e2:	1a84      	subs	r4, r0, r2
 80018e4:	42a0      	cmp	r0, r4
 80018e6:	4192      	sbcs	r2, r2
 80018e8:	1acb      	subs	r3, r1, r3
 80018ea:	4252      	negs	r2, r2
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	4698      	mov	r8, r3
 80018f0:	465d      	mov	r5, fp
 80018f2:	e59e      	b.n	8001432 <__aeabi_dsub+0xba>
 80018f4:	464a      	mov	r2, r9
 80018f6:	0759      	lsls	r1, r3, #29
 80018f8:	08d2      	lsrs	r2, r2, #3
 80018fa:	430a      	orrs	r2, r1
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	e6f9      	b.n	80016f4 <__aeabi_dsub+0x37c>
 8001900:	464a      	mov	r2, r9
 8001902:	1a14      	subs	r4, r2, r0
 8001904:	45a1      	cmp	r9, r4
 8001906:	4192      	sbcs	r2, r2
 8001908:	1a5b      	subs	r3, r3, r1
 800190a:	4252      	negs	r2, r2
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	4698      	mov	r8, r3
 8001910:	2601      	movs	r6, #1
 8001912:	e586      	b.n	8001422 <__aeabi_dsub+0xaa>
 8001914:	464a      	mov	r2, r9
 8001916:	0759      	lsls	r1, r3, #29
 8001918:	08d2      	lsrs	r2, r2, #3
 800191a:	430a      	orrs	r2, r1
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	e6a5      	b.n	800166c <__aeabi_dsub+0x2f4>
 8001920:	464c      	mov	r4, r9
 8001922:	4323      	orrs	r3, r4
 8001924:	001c      	movs	r4, r3
 8001926:	1e63      	subs	r3, r4, #1
 8001928:	419c      	sbcs	r4, r3
 800192a:	e65b      	b.n	80015e4 <__aeabi_dsub+0x26c>
 800192c:	4665      	mov	r5, ip
 800192e:	001e      	movs	r6, r3
 8001930:	3d20      	subs	r5, #32
 8001932:	40ee      	lsrs	r6, r5
 8001934:	2c20      	cmp	r4, #32
 8001936:	d005      	beq.n	8001944 <__aeabi_dsub+0x5cc>
 8001938:	2540      	movs	r5, #64	; 0x40
 800193a:	1b2d      	subs	r5, r5, r4
 800193c:	40ab      	lsls	r3, r5
 800193e:	464c      	mov	r4, r9
 8001940:	431c      	orrs	r4, r3
 8001942:	46a2      	mov	sl, r4
 8001944:	4654      	mov	r4, sl
 8001946:	1e63      	subs	r3, r4, #1
 8001948:	419c      	sbcs	r4, r3
 800194a:	4334      	orrs	r4, r6
 800194c:	e77d      	b.n	800184a <__aeabi_dsub+0x4d2>
 800194e:	074b      	lsls	r3, r1, #29
 8001950:	08c2      	lsrs	r2, r0, #3
 8001952:	431a      	orrs	r2, r3
 8001954:	465d      	mov	r5, fp
 8001956:	08cb      	lsrs	r3, r1, #3
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dsub+0x37c>
 800195a:	000a      	movs	r2, r1
 800195c:	4302      	orrs	r2, r0
 800195e:	d100      	bne.n	8001962 <__aeabi_dsub+0x5ea>
 8001960:	e736      	b.n	80017d0 <__aeabi_dsub+0x458>
 8001962:	074b      	lsls	r3, r1, #29
 8001964:	08c2      	lsrs	r2, r0, #3
 8001966:	431a      	orrs	r2, r3
 8001968:	465d      	mov	r5, fp
 800196a:	08cb      	lsrs	r3, r1, #3
 800196c:	e681      	b.n	8001672 <__aeabi_dsub+0x2fa>
 800196e:	464a      	mov	r2, r9
 8001970:	1a84      	subs	r4, r0, r2
 8001972:	42a0      	cmp	r0, r4
 8001974:	4192      	sbcs	r2, r2
 8001976:	1acb      	subs	r3, r1, r3
 8001978:	4252      	negs	r2, r2
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	4698      	mov	r8, r3
 800197e:	465d      	mov	r5, fp
 8001980:	2601      	movs	r6, #1
 8001982:	e54e      	b.n	8001422 <__aeabi_dsub+0xaa>
 8001984:	074b      	lsls	r3, r1, #29
 8001986:	08c2      	lsrs	r2, r0, #3
 8001988:	431a      	orrs	r2, r3
 800198a:	08cb      	lsrs	r3, r1, #3
 800198c:	e6b2      	b.n	80016f4 <__aeabi_dsub+0x37c>
 800198e:	464a      	mov	r2, r9
 8001990:	1a14      	subs	r4, r2, r0
 8001992:	45a1      	cmp	r9, r4
 8001994:	4192      	sbcs	r2, r2
 8001996:	1a5f      	subs	r7, r3, r1
 8001998:	4252      	negs	r2, r2
 800199a:	1aba      	subs	r2, r7, r2
 800199c:	4690      	mov	r8, r2
 800199e:	0212      	lsls	r2, r2, #8
 80019a0:	d56b      	bpl.n	8001a7a <__aeabi_dsub+0x702>
 80019a2:	464a      	mov	r2, r9
 80019a4:	1a84      	subs	r4, r0, r2
 80019a6:	42a0      	cmp	r0, r4
 80019a8:	4192      	sbcs	r2, r2
 80019aa:	1acb      	subs	r3, r1, r3
 80019ac:	4252      	negs	r2, r2
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	4698      	mov	r8, r3
 80019b2:	465d      	mov	r5, fp
 80019b4:	e564      	b.n	8001480 <__aeabi_dsub+0x108>
 80019b6:	074b      	lsls	r3, r1, #29
 80019b8:	08c2      	lsrs	r2, r0, #3
 80019ba:	431a      	orrs	r2, r3
 80019bc:	465d      	mov	r5, fp
 80019be:	08cb      	lsrs	r3, r1, #3
 80019c0:	e698      	b.n	80016f4 <__aeabi_dsub+0x37c>
 80019c2:	074b      	lsls	r3, r1, #29
 80019c4:	08c2      	lsrs	r2, r0, #3
 80019c6:	431a      	orrs	r2, r3
 80019c8:	08cb      	lsrs	r3, r1, #3
 80019ca:	e64f      	b.n	800166c <__aeabi_dsub+0x2f4>
 80019cc:	000a      	movs	r2, r1
 80019ce:	4302      	orrs	r2, r0
 80019d0:	d090      	beq.n	80018f4 <__aeabi_dsub+0x57c>
 80019d2:	464a      	mov	r2, r9
 80019d4:	075c      	lsls	r4, r3, #29
 80019d6:	08d2      	lsrs	r2, r2, #3
 80019d8:	4314      	orrs	r4, r2
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	08db      	lsrs	r3, r3, #3
 80019de:	0312      	lsls	r2, r2, #12
 80019e0:	4213      	tst	r3, r2
 80019e2:	d008      	beq.n	80019f6 <__aeabi_dsub+0x67e>
 80019e4:	08ce      	lsrs	r6, r1, #3
 80019e6:	4216      	tst	r6, r2
 80019e8:	d105      	bne.n	80019f6 <__aeabi_dsub+0x67e>
 80019ea:	08c0      	lsrs	r0, r0, #3
 80019ec:	0749      	lsls	r1, r1, #29
 80019ee:	4308      	orrs	r0, r1
 80019f0:	0004      	movs	r4, r0
 80019f2:	465d      	mov	r5, fp
 80019f4:	0033      	movs	r3, r6
 80019f6:	0f61      	lsrs	r1, r4, #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	0749      	lsls	r1, r1, #29
 80019fc:	08d2      	lsrs	r2, r2, #3
 80019fe:	430a      	orrs	r2, r1
 8001a00:	e678      	b.n	80016f4 <__aeabi_dsub+0x37c>
 8001a02:	074b      	lsls	r3, r1, #29
 8001a04:	08c2      	lsrs	r2, r0, #3
 8001a06:	431a      	orrs	r2, r3
 8001a08:	08cb      	lsrs	r3, r1, #3
 8001a0a:	e632      	b.n	8001672 <__aeabi_dsub+0x2fa>
 8001a0c:	4448      	add	r0, r9
 8001a0e:	185b      	adds	r3, r3, r1
 8001a10:	4548      	cmp	r0, r9
 8001a12:	4192      	sbcs	r2, r2
 8001a14:	4698      	mov	r8, r3
 8001a16:	4252      	negs	r2, r2
 8001a18:	4490      	add	r8, r2
 8001a1a:	4643      	mov	r3, r8
 8001a1c:	0004      	movs	r4, r0
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	d400      	bmi.n	8001a24 <__aeabi_dsub+0x6ac>
 8001a22:	e61a      	b.n	800165a <__aeabi_dsub+0x2e2>
 8001a24:	4642      	mov	r2, r8
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <__aeabi_dsub+0x6e8>)
 8001a28:	2601      	movs	r6, #1
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	e614      	b.n	800165a <__aeabi_dsub+0x2e2>
 8001a30:	4666      	mov	r6, ip
 8001a32:	001f      	movs	r7, r3
 8001a34:	3e20      	subs	r6, #32
 8001a36:	40f7      	lsrs	r7, r6
 8001a38:	2c20      	cmp	r4, #32
 8001a3a:	d005      	beq.n	8001a48 <__aeabi_dsub+0x6d0>
 8001a3c:	2640      	movs	r6, #64	; 0x40
 8001a3e:	1b36      	subs	r6, r6, r4
 8001a40:	40b3      	lsls	r3, r6
 8001a42:	464c      	mov	r4, r9
 8001a44:	431c      	orrs	r4, r3
 8001a46:	46a2      	mov	sl, r4
 8001a48:	4654      	mov	r4, sl
 8001a4a:	1e63      	subs	r3, r4, #1
 8001a4c:	419c      	sbcs	r4, r3
 8001a4e:	433c      	orrs	r4, r7
 8001a50:	e5c8      	b.n	80015e4 <__aeabi_dsub+0x26c>
 8001a52:	0011      	movs	r1, r2
 8001a54:	2300      	movs	r3, #0
 8001a56:	2200      	movs	r2, #0
 8001a58:	e532      	b.n	80014c0 <__aeabi_dsub+0x148>
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	000007ff 	.word	0x000007ff
 8001a60:	ff7fffff 	.word	0xff7fffff
 8001a64:	000007fe 	.word	0x000007fe
 8001a68:	464a      	mov	r2, r9
 8001a6a:	1814      	adds	r4, r2, r0
 8001a6c:	4284      	cmp	r4, r0
 8001a6e:	4192      	sbcs	r2, r2
 8001a70:	185b      	adds	r3, r3, r1
 8001a72:	4698      	mov	r8, r3
 8001a74:	4252      	negs	r2, r2
 8001a76:	4490      	add	r8, r2
 8001a78:	e5e9      	b.n	800164e <__aeabi_dsub+0x2d6>
 8001a7a:	4642      	mov	r2, r8
 8001a7c:	4322      	orrs	r2, r4
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_dsub+0x70a>
 8001a80:	e6a6      	b.n	80017d0 <__aeabi_dsub+0x458>
 8001a82:	e5ea      	b.n	800165a <__aeabi_dsub+0x2e2>
 8001a84:	074b      	lsls	r3, r1, #29
 8001a86:	08c2      	lsrs	r2, r0, #3
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	08cb      	lsrs	r3, r1, #3
 8001a8c:	e632      	b.n	80016f4 <__aeabi_dsub+0x37c>
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4901      	ldr	r1, [pc, #4]	; (8001a98 <__aeabi_dsub+0x720>)
 8001a92:	0013      	movs	r3, r2
 8001a94:	e514      	b.n	80014c0 <__aeabi_dsub+0x148>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	000007ff 	.word	0x000007ff

08001a9c <__aeabi_d2iz>:
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	b530      	push	{r4, r5, lr}
 8001aa0:	4c13      	ldr	r4, [pc, #76]	; (8001af0 <__aeabi_d2iz+0x54>)
 8001aa2:	0053      	lsls	r3, r2, #1
 8001aa4:	0309      	lsls	r1, r1, #12
 8001aa6:	0005      	movs	r5, r0
 8001aa8:	0b09      	lsrs	r1, r1, #12
 8001aaa:	2000      	movs	r0, #0
 8001aac:	0d5b      	lsrs	r3, r3, #21
 8001aae:	0fd2      	lsrs	r2, r2, #31
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	dd04      	ble.n	8001abe <__aeabi_d2iz+0x22>
 8001ab4:	480f      	ldr	r0, [pc, #60]	; (8001af4 <__aeabi_d2iz+0x58>)
 8001ab6:	4283      	cmp	r3, r0
 8001ab8:	dd02      	ble.n	8001ac0 <__aeabi_d2iz+0x24>
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <__aeabi_d2iz+0x5c>)
 8001abc:	18d0      	adds	r0, r2, r3
 8001abe:	bd30      	pop	{r4, r5, pc}
 8001ac0:	2080      	movs	r0, #128	; 0x80
 8001ac2:	0340      	lsls	r0, r0, #13
 8001ac4:	4301      	orrs	r1, r0
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <__aeabi_d2iz+0x60>)
 8001ac8:	1ac0      	subs	r0, r0, r3
 8001aca:	281f      	cmp	r0, #31
 8001acc:	dd08      	ble.n	8001ae0 <__aeabi_d2iz+0x44>
 8001ace:	480c      	ldr	r0, [pc, #48]	; (8001b00 <__aeabi_d2iz+0x64>)
 8001ad0:	1ac3      	subs	r3, r0, r3
 8001ad2:	40d9      	lsrs	r1, r3
 8001ad4:	000b      	movs	r3, r1
 8001ad6:	4258      	negs	r0, r3
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	d1f0      	bne.n	8001abe <__aeabi_d2iz+0x22>
 8001adc:	0018      	movs	r0, r3
 8001ade:	e7ee      	b.n	8001abe <__aeabi_d2iz+0x22>
 8001ae0:	4c08      	ldr	r4, [pc, #32]	; (8001b04 <__aeabi_d2iz+0x68>)
 8001ae2:	40c5      	lsrs	r5, r0
 8001ae4:	46a4      	mov	ip, r4
 8001ae6:	4463      	add	r3, ip
 8001ae8:	4099      	lsls	r1, r3
 8001aea:	000b      	movs	r3, r1
 8001aec:	432b      	orrs	r3, r5
 8001aee:	e7f2      	b.n	8001ad6 <__aeabi_d2iz+0x3a>
 8001af0:	000003fe 	.word	0x000003fe
 8001af4:	0000041d 	.word	0x0000041d
 8001af8:	7fffffff 	.word	0x7fffffff
 8001afc:	00000433 	.word	0x00000433
 8001b00:	00000413 	.word	0x00000413
 8001b04:	fffffbed 	.word	0xfffffbed

08001b08 <__aeabi_f2d>:
 8001b08:	b570      	push	{r4, r5, r6, lr}
 8001b0a:	0043      	lsls	r3, r0, #1
 8001b0c:	0246      	lsls	r6, r0, #9
 8001b0e:	0fc4      	lsrs	r4, r0, #31
 8001b10:	20fe      	movs	r0, #254	; 0xfe
 8001b12:	0e1b      	lsrs	r3, r3, #24
 8001b14:	1c59      	adds	r1, r3, #1
 8001b16:	0a75      	lsrs	r5, r6, #9
 8001b18:	4208      	tst	r0, r1
 8001b1a:	d00c      	beq.n	8001b36 <__aeabi_f2d+0x2e>
 8001b1c:	22e0      	movs	r2, #224	; 0xe0
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4694      	mov	ip, r2
 8001b22:	076d      	lsls	r5, r5, #29
 8001b24:	0b36      	lsrs	r6, r6, #12
 8001b26:	4463      	add	r3, ip
 8001b28:	051b      	lsls	r3, r3, #20
 8001b2a:	4333      	orrs	r3, r6
 8001b2c:	07e4      	lsls	r4, r4, #31
 8001b2e:	4323      	orrs	r3, r4
 8001b30:	0028      	movs	r0, r5
 8001b32:	0019      	movs	r1, r3
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d114      	bne.n	8001b64 <__aeabi_f2d+0x5c>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	d01b      	beq.n	8001b76 <__aeabi_f2d+0x6e>
 8001b3e:	0028      	movs	r0, r5
 8001b40:	f000 f868 	bl	8001c14 <__clzsi2>
 8001b44:	280a      	cmp	r0, #10
 8001b46:	dc1c      	bgt.n	8001b82 <__aeabi_f2d+0x7a>
 8001b48:	230b      	movs	r3, #11
 8001b4a:	002a      	movs	r2, r5
 8001b4c:	1a1b      	subs	r3, r3, r0
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	0003      	movs	r3, r0
 8001b52:	3315      	adds	r3, #21
 8001b54:	409d      	lsls	r5, r3
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_f2d+0x88>)
 8001b58:	0312      	lsls	r2, r2, #12
 8001b5a:	1a1b      	subs	r3, r3, r0
 8001b5c:	055b      	lsls	r3, r3, #21
 8001b5e:	0b16      	lsrs	r6, r2, #12
 8001b60:	0d5b      	lsrs	r3, r3, #21
 8001b62:	e7e1      	b.n	8001b28 <__aeabi_f2d+0x20>
 8001b64:	2d00      	cmp	r5, #0
 8001b66:	d009      	beq.n	8001b7c <__aeabi_f2d+0x74>
 8001b68:	0b32      	lsrs	r2, r6, #12
 8001b6a:	2680      	movs	r6, #128	; 0x80
 8001b6c:	0336      	lsls	r6, r6, #12
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <__aeabi_f2d+0x8c>)
 8001b70:	076d      	lsls	r5, r5, #29
 8001b72:	4316      	orrs	r6, r2
 8001b74:	e7d8      	b.n	8001b28 <__aeabi_f2d+0x20>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2600      	movs	r6, #0
 8001b7a:	e7d5      	b.n	8001b28 <__aeabi_f2d+0x20>
 8001b7c:	2600      	movs	r6, #0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <__aeabi_f2d+0x8c>)
 8001b80:	e7d2      	b.n	8001b28 <__aeabi_f2d+0x20>
 8001b82:	0003      	movs	r3, r0
 8001b84:	002a      	movs	r2, r5
 8001b86:	3b0b      	subs	r3, #11
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	e7e3      	b.n	8001b56 <__aeabi_f2d+0x4e>
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	00000389 	.word	0x00000389
 8001b94:	000007ff 	.word	0x000007ff

08001b98 <__aeabi_cdrcmple>:
 8001b98:	4684      	mov	ip, r0
 8001b9a:	1c10      	adds	r0, r2, #0
 8001b9c:	4662      	mov	r2, ip
 8001b9e:	468c      	mov	ip, r1
 8001ba0:	1c19      	adds	r1, r3, #0
 8001ba2:	4663      	mov	r3, ip
 8001ba4:	e000      	b.n	8001ba8 <__aeabi_cdcmpeq>
 8001ba6:	46c0      	nop			; (mov r8, r8)

08001ba8 <__aeabi_cdcmpeq>:
 8001ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001baa:	f000 f90b 	bl	8001dc4 <__ledf2>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d401      	bmi.n	8001bb6 <__aeabi_cdcmpeq+0xe>
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	42c8      	cmn	r0, r1
 8001bb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001bb8 <__aeabi_dcmpeq>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	f000 f855 	bl	8001c68 <__eqdf2>
 8001bbe:	4240      	negs	r0, r0
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	bd10      	pop	{r4, pc}

08001bc4 <__aeabi_dcmplt>:
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	f000 f8fd 	bl	8001dc4 <__ledf2>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	db01      	blt.n	8001bd2 <__aeabi_dcmplt+0xe>
 8001bce:	2000      	movs	r0, #0
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)

08001bd8 <__aeabi_dcmple>:
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	f000 f8f3 	bl	8001dc4 <__ledf2>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	dd01      	ble.n	8001be6 <__aeabi_dcmple+0xe>
 8001be2:	2000      	movs	r0, #0
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	2001      	movs	r0, #1
 8001be8:	bd10      	pop	{r4, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)

08001bec <__aeabi_dcmpgt>:
 8001bec:	b510      	push	{r4, lr}
 8001bee:	f000 f877 	bl	8001ce0 <__gedf2>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dc01      	bgt.n	8001bfa <__aeabi_dcmpgt+0xe>
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	bd10      	pop	{r4, pc}
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)

08001c00 <__aeabi_dcmpge>:
 8001c00:	b510      	push	{r4, lr}
 8001c02:	f000 f86d 	bl	8001ce0 <__gedf2>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	da01      	bge.n	8001c0e <__aeabi_dcmpge+0xe>
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	2001      	movs	r0, #1
 8001c10:	bd10      	pop	{r4, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)

08001c14 <__clzsi2>:
 8001c14:	211c      	movs	r1, #28
 8001c16:	2301      	movs	r3, #1
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	d301      	bcc.n	8001c22 <__clzsi2+0xe>
 8001c1e:	0c00      	lsrs	r0, r0, #16
 8001c20:	3910      	subs	r1, #16
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	4298      	cmp	r0, r3
 8001c26:	d301      	bcc.n	8001c2c <__clzsi2+0x18>
 8001c28:	0a00      	lsrs	r0, r0, #8
 8001c2a:	3908      	subs	r1, #8
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	4298      	cmp	r0, r3
 8001c30:	d301      	bcc.n	8001c36 <__clzsi2+0x22>
 8001c32:	0900      	lsrs	r0, r0, #4
 8001c34:	3904      	subs	r1, #4
 8001c36:	a202      	add	r2, pc, #8	; (adr r2, 8001c40 <__clzsi2+0x2c>)
 8001c38:	5c10      	ldrb	r0, [r2, r0]
 8001c3a:	1840      	adds	r0, r0, r1
 8001c3c:	4770      	bx	lr
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	02020304 	.word	0x02020304
 8001c44:	01010101 	.word	0x01010101
	...

08001c50 <__clzdi2>:
 8001c50:	b510      	push	{r4, lr}
 8001c52:	2900      	cmp	r1, #0
 8001c54:	d103      	bne.n	8001c5e <__clzdi2+0xe>
 8001c56:	f7ff ffdd 	bl	8001c14 <__clzsi2>
 8001c5a:	3020      	adds	r0, #32
 8001c5c:	e002      	b.n	8001c64 <__clzdi2+0x14>
 8001c5e:	1c08      	adds	r0, r1, #0
 8001c60:	f7ff ffd8 	bl	8001c14 <__clzsi2>
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)

08001c68 <__eqdf2>:
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	464f      	mov	r7, r9
 8001c6c:	4646      	mov	r6, r8
 8001c6e:	46d6      	mov	lr, sl
 8001c70:	4694      	mov	ip, r2
 8001c72:	4691      	mov	r9, r2
 8001c74:	031a      	lsls	r2, r3, #12
 8001c76:	0b12      	lsrs	r2, r2, #12
 8001c78:	4d18      	ldr	r5, [pc, #96]	; (8001cdc <__eqdf2+0x74>)
 8001c7a:	b5c0      	push	{r6, r7, lr}
 8001c7c:	004c      	lsls	r4, r1, #1
 8001c7e:	030f      	lsls	r7, r1, #12
 8001c80:	4692      	mov	sl, r2
 8001c82:	005a      	lsls	r2, r3, #1
 8001c84:	0006      	movs	r6, r0
 8001c86:	4680      	mov	r8, r0
 8001c88:	0b3f      	lsrs	r7, r7, #12
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	0d64      	lsrs	r4, r4, #21
 8001c8e:	0fc9      	lsrs	r1, r1, #31
 8001c90:	0d52      	lsrs	r2, r2, #21
 8001c92:	0fdb      	lsrs	r3, r3, #31
 8001c94:	42ac      	cmp	r4, r5
 8001c96:	d00a      	beq.n	8001cae <__eqdf2+0x46>
 8001c98:	42aa      	cmp	r2, r5
 8001c9a:	d003      	beq.n	8001ca4 <__eqdf2+0x3c>
 8001c9c:	4294      	cmp	r4, r2
 8001c9e:	d101      	bne.n	8001ca4 <__eqdf2+0x3c>
 8001ca0:	4557      	cmp	r7, sl
 8001ca2:	d00d      	beq.n	8001cc0 <__eqdf2+0x58>
 8001ca4:	bce0      	pop	{r5, r6, r7}
 8001ca6:	46ba      	mov	sl, r7
 8001ca8:	46b1      	mov	r9, r6
 8001caa:	46a8      	mov	r8, r5
 8001cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cae:	003d      	movs	r5, r7
 8001cb0:	4335      	orrs	r5, r6
 8001cb2:	d1f7      	bne.n	8001ca4 <__eqdf2+0x3c>
 8001cb4:	42a2      	cmp	r2, r4
 8001cb6:	d1f5      	bne.n	8001ca4 <__eqdf2+0x3c>
 8001cb8:	4652      	mov	r2, sl
 8001cba:	4665      	mov	r5, ip
 8001cbc:	432a      	orrs	r2, r5
 8001cbe:	d1f1      	bne.n	8001ca4 <__eqdf2+0x3c>
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	45c8      	cmp	r8, r9
 8001cc4:	d1ee      	bne.n	8001ca4 <__eqdf2+0x3c>
 8001cc6:	4299      	cmp	r1, r3
 8001cc8:	d006      	beq.n	8001cd8 <__eqdf2+0x70>
 8001cca:	2c00      	cmp	r4, #0
 8001ccc:	d1ea      	bne.n	8001ca4 <__eqdf2+0x3c>
 8001cce:	433e      	orrs	r6, r7
 8001cd0:	0030      	movs	r0, r6
 8001cd2:	1e46      	subs	r6, r0, #1
 8001cd4:	41b0      	sbcs	r0, r6
 8001cd6:	e7e5      	b.n	8001ca4 <__eqdf2+0x3c>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7e3      	b.n	8001ca4 <__eqdf2+0x3c>
 8001cdc:	000007ff 	.word	0x000007ff

08001ce0 <__gedf2>:
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	464e      	mov	r6, r9
 8001ce4:	4645      	mov	r5, r8
 8001ce6:	4657      	mov	r7, sl
 8001ce8:	46de      	mov	lr, fp
 8001cea:	0004      	movs	r4, r0
 8001cec:	0018      	movs	r0, r3
 8001cee:	b5e0      	push	{r5, r6, r7, lr}
 8001cf0:	0016      	movs	r6, r2
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	0b1b      	lsrs	r3, r3, #12
 8001cf6:	4d32      	ldr	r5, [pc, #200]	; (8001dc0 <__gedf2+0xe0>)
 8001cf8:	030f      	lsls	r7, r1, #12
 8001cfa:	004a      	lsls	r2, r1, #1
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	0043      	lsls	r3, r0, #1
 8001d00:	46a4      	mov	ip, r4
 8001d02:	46b0      	mov	r8, r6
 8001d04:	0b3f      	lsrs	r7, r7, #12
 8001d06:	0d52      	lsrs	r2, r2, #21
 8001d08:	0fc9      	lsrs	r1, r1, #31
 8001d0a:	0d5b      	lsrs	r3, r3, #21
 8001d0c:	0fc0      	lsrs	r0, r0, #31
 8001d0e:	42aa      	cmp	r2, r5
 8001d10:	d029      	beq.n	8001d66 <__gedf2+0x86>
 8001d12:	42ab      	cmp	r3, r5
 8001d14:	d018      	beq.n	8001d48 <__gedf2+0x68>
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d12a      	bne.n	8001d70 <__gedf2+0x90>
 8001d1a:	433c      	orrs	r4, r7
 8001d1c:	46a3      	mov	fp, r4
 8001d1e:	4265      	negs	r5, r4
 8001d20:	4165      	adcs	r5, r4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <__gedf2+0x4c>
 8001d26:	464c      	mov	r4, r9
 8001d28:	4326      	orrs	r6, r4
 8001d2a:	d027      	beq.n	8001d7c <__gedf2+0x9c>
 8001d2c:	2d00      	cmp	r5, #0
 8001d2e:	d115      	bne.n	8001d5c <__gedf2+0x7c>
 8001d30:	4281      	cmp	r1, r0
 8001d32:	d028      	beq.n	8001d86 <__gedf2+0xa6>
 8001d34:	2002      	movs	r0, #2
 8001d36:	3901      	subs	r1, #1
 8001d38:	4008      	ands	r0, r1
 8001d3a:	3801      	subs	r0, #1
 8001d3c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3e:	46bb      	mov	fp, r7
 8001d40:	46b2      	mov	sl, r6
 8001d42:	46a9      	mov	r9, r5
 8001d44:	46a0      	mov	r8, r4
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	464d      	mov	r5, r9
 8001d4a:	432e      	orrs	r6, r5
 8001d4c:	d12f      	bne.n	8001dae <__gedf2+0xce>
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d1ee      	bne.n	8001d30 <__gedf2+0x50>
 8001d52:	433c      	orrs	r4, r7
 8001d54:	4265      	negs	r5, r4
 8001d56:	4165      	adcs	r5, r4
 8001d58:	2d00      	cmp	r5, #0
 8001d5a:	d0e9      	beq.n	8001d30 <__gedf2+0x50>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d1ed      	bne.n	8001d3c <__gedf2+0x5c>
 8001d60:	2001      	movs	r0, #1
 8001d62:	4240      	negs	r0, r0
 8001d64:	e7ea      	b.n	8001d3c <__gedf2+0x5c>
 8001d66:	003d      	movs	r5, r7
 8001d68:	4325      	orrs	r5, r4
 8001d6a:	d120      	bne.n	8001dae <__gedf2+0xce>
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d0eb      	beq.n	8001d48 <__gedf2+0x68>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1dd      	bne.n	8001d30 <__gedf2+0x50>
 8001d74:	464c      	mov	r4, r9
 8001d76:	4326      	orrs	r6, r4
 8001d78:	d1da      	bne.n	8001d30 <__gedf2+0x50>
 8001d7a:	e7db      	b.n	8001d34 <__gedf2+0x54>
 8001d7c:	465b      	mov	r3, fp
 8001d7e:	2000      	movs	r0, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0db      	beq.n	8001d3c <__gedf2+0x5c>
 8001d84:	e7d6      	b.n	8001d34 <__gedf2+0x54>
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dc0a      	bgt.n	8001da0 <__gedf2+0xc0>
 8001d8a:	dbe7      	blt.n	8001d5c <__gedf2+0x7c>
 8001d8c:	454f      	cmp	r7, r9
 8001d8e:	d8d1      	bhi.n	8001d34 <__gedf2+0x54>
 8001d90:	d010      	beq.n	8001db4 <__gedf2+0xd4>
 8001d92:	2000      	movs	r0, #0
 8001d94:	454f      	cmp	r7, r9
 8001d96:	d2d1      	bcs.n	8001d3c <__gedf2+0x5c>
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	d0e1      	beq.n	8001d60 <__gedf2+0x80>
 8001d9c:	0008      	movs	r0, r1
 8001d9e:	e7cd      	b.n	8001d3c <__gedf2+0x5c>
 8001da0:	4243      	negs	r3, r0
 8001da2:	4158      	adcs	r0, r3
 8001da4:	2302      	movs	r3, #2
 8001da6:	4240      	negs	r0, r0
 8001da8:	4018      	ands	r0, r3
 8001daa:	3801      	subs	r0, #1
 8001dac:	e7c6      	b.n	8001d3c <__gedf2+0x5c>
 8001dae:	2002      	movs	r0, #2
 8001db0:	4240      	negs	r0, r0
 8001db2:	e7c3      	b.n	8001d3c <__gedf2+0x5c>
 8001db4:	45c4      	cmp	ip, r8
 8001db6:	d8bd      	bhi.n	8001d34 <__gedf2+0x54>
 8001db8:	2000      	movs	r0, #0
 8001dba:	45c4      	cmp	ip, r8
 8001dbc:	d2be      	bcs.n	8001d3c <__gedf2+0x5c>
 8001dbe:	e7eb      	b.n	8001d98 <__gedf2+0xb8>
 8001dc0:	000007ff 	.word	0x000007ff

08001dc4 <__ledf2>:
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	464e      	mov	r6, r9
 8001dc8:	4645      	mov	r5, r8
 8001dca:	4657      	mov	r7, sl
 8001dcc:	46de      	mov	lr, fp
 8001dce:	0004      	movs	r4, r0
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	b5e0      	push	{r5, r6, r7, lr}
 8001dd4:	0016      	movs	r6, r2
 8001dd6:	031b      	lsls	r3, r3, #12
 8001dd8:	0b1b      	lsrs	r3, r3, #12
 8001dda:	4d31      	ldr	r5, [pc, #196]	; (8001ea0 <__ledf2+0xdc>)
 8001ddc:	030f      	lsls	r7, r1, #12
 8001dde:	004a      	lsls	r2, r1, #1
 8001de0:	4699      	mov	r9, r3
 8001de2:	0043      	lsls	r3, r0, #1
 8001de4:	46a4      	mov	ip, r4
 8001de6:	46b0      	mov	r8, r6
 8001de8:	0b3f      	lsrs	r7, r7, #12
 8001dea:	0d52      	lsrs	r2, r2, #21
 8001dec:	0fc9      	lsrs	r1, r1, #31
 8001dee:	0d5b      	lsrs	r3, r3, #21
 8001df0:	0fc0      	lsrs	r0, r0, #31
 8001df2:	42aa      	cmp	r2, r5
 8001df4:	d011      	beq.n	8001e1a <__ledf2+0x56>
 8001df6:	42ab      	cmp	r3, r5
 8001df8:	d014      	beq.n	8001e24 <__ledf2+0x60>
 8001dfa:	2a00      	cmp	r2, #0
 8001dfc:	d12f      	bne.n	8001e5e <__ledf2+0x9a>
 8001dfe:	433c      	orrs	r4, r7
 8001e00:	46a3      	mov	fp, r4
 8001e02:	4265      	negs	r5, r4
 8001e04:	4165      	adcs	r5, r4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d114      	bne.n	8001e34 <__ledf2+0x70>
 8001e0a:	464c      	mov	r4, r9
 8001e0c:	4326      	orrs	r6, r4
 8001e0e:	d111      	bne.n	8001e34 <__ledf2+0x70>
 8001e10:	465b      	mov	r3, fp
 8001e12:	2000      	movs	r0, #0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d017      	beq.n	8001e48 <__ledf2+0x84>
 8001e18:	e010      	b.n	8001e3c <__ledf2+0x78>
 8001e1a:	003d      	movs	r5, r7
 8001e1c:	4325      	orrs	r5, r4
 8001e1e:	d112      	bne.n	8001e46 <__ledf2+0x82>
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d11c      	bne.n	8001e5e <__ledf2+0x9a>
 8001e24:	464d      	mov	r5, r9
 8001e26:	432e      	orrs	r6, r5
 8001e28:	d10d      	bne.n	8001e46 <__ledf2+0x82>
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d104      	bne.n	8001e38 <__ledf2+0x74>
 8001e2e:	433c      	orrs	r4, r7
 8001e30:	4265      	negs	r5, r4
 8001e32:	4165      	adcs	r5, r4
 8001e34:	2d00      	cmp	r5, #0
 8001e36:	d10d      	bne.n	8001e54 <__ledf2+0x90>
 8001e38:	4281      	cmp	r1, r0
 8001e3a:	d016      	beq.n	8001e6a <__ledf2+0xa6>
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	3901      	subs	r1, #1
 8001e40:	4008      	ands	r0, r1
 8001e42:	3801      	subs	r0, #1
 8001e44:	e000      	b.n	8001e48 <__ledf2+0x84>
 8001e46:	2002      	movs	r0, #2
 8001e48:	bcf0      	pop	{r4, r5, r6, r7}
 8001e4a:	46bb      	mov	fp, r7
 8001e4c:	46b2      	mov	sl, r6
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	46a0      	mov	r8, r4
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d1f7      	bne.n	8001e48 <__ledf2+0x84>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	4240      	negs	r0, r0
 8001e5c:	e7f4      	b.n	8001e48 <__ledf2+0x84>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ea      	bne.n	8001e38 <__ledf2+0x74>
 8001e62:	464c      	mov	r4, r9
 8001e64:	4326      	orrs	r6, r4
 8001e66:	d1e7      	bne.n	8001e38 <__ledf2+0x74>
 8001e68:	e7e8      	b.n	8001e3c <__ledf2+0x78>
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dd06      	ble.n	8001e7c <__ledf2+0xb8>
 8001e6e:	4243      	negs	r3, r0
 8001e70:	4158      	adcs	r0, r3
 8001e72:	2302      	movs	r3, #2
 8001e74:	4240      	negs	r0, r0
 8001e76:	4018      	ands	r0, r3
 8001e78:	3801      	subs	r0, #1
 8001e7a:	e7e5      	b.n	8001e48 <__ledf2+0x84>
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbe9      	blt.n	8001e54 <__ledf2+0x90>
 8001e80:	454f      	cmp	r7, r9
 8001e82:	d8db      	bhi.n	8001e3c <__ledf2+0x78>
 8001e84:	d006      	beq.n	8001e94 <__ledf2+0xd0>
 8001e86:	2000      	movs	r0, #0
 8001e88:	454f      	cmp	r7, r9
 8001e8a:	d2dd      	bcs.n	8001e48 <__ledf2+0x84>
 8001e8c:	2900      	cmp	r1, #0
 8001e8e:	d0e3      	beq.n	8001e58 <__ledf2+0x94>
 8001e90:	0008      	movs	r0, r1
 8001e92:	e7d9      	b.n	8001e48 <__ledf2+0x84>
 8001e94:	45c4      	cmp	ip, r8
 8001e96:	d8d1      	bhi.n	8001e3c <__ledf2+0x78>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	45c4      	cmp	ip, r8
 8001e9c:	d2d4      	bcs.n	8001e48 <__ledf2+0x84>
 8001e9e:	e7f5      	b.n	8001e8c <__ledf2+0xc8>
 8001ea0:	000007ff 	.word	0x000007ff

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eaa:	f000 fc29 	bl	8002700 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eae:	f000 f917 	bl	80020e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb2:	f000 fa57 	bl	8002364 <MX_GPIO_Init>
  MX_DMA_Init();
 8001eb6:	f000 fa37 	bl	8002328 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eba:	f000 fa05 	bl	80022c8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001ebe:	f000 f97b 	bl	80021b8 <MX_DAC_Init>
  MX_TIM2_Init();
 8001ec2:	f000 f9ad 	bl	8002220 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint32_t n_tot = GetSize_LUT();
 8001ec6:	f000 f837 	bl	8001f38 <GetSize_LUT>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	607b      	str	r3, [r7, #4]
  LUT = (uint32_t *) malloc(n_tot * sizeof(*LUT));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f003 f896 	bl	8005004 <malloc>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	001a      	movs	r2, r3
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <main+0x84>)
 8001ede:	601a      	str	r2, [r3, #0]
  if (LUT != NULL) GenerateBiphasicPulse_LUT(LUT, 50, 10, 5, 100, n_tot);
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <main+0x84>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <main+0x5a>
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <main+0x84>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	490f      	ldr	r1, [pc, #60]	; (8001f2c <main+0x88>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	220a      	movs	r2, #10
 8001efa:	f000 f841 	bl	8001f80 <GenerateBiphasicPulse_LUT>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)LUT, n_tot, DAC_ALIGN_12B_R);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <main+0x84>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	480a      	ldr	r0, [pc, #40]	; (8001f30 <main+0x8c>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	9100      	str	r1, [sp, #0]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f000 fdce 	bl	8002aac <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <main+0x90>)
 8001f12:	0018      	movs	r0, r3
 8001f14:	f002 f98a 	bl	800422c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      while (1)
      {
    	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001f18:	23a0      	movs	r3, #160	; 0xa0
 8001f1a:	05db      	lsls	r3, r3, #23
 8001f1c:	2120      	movs	r1, #32
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f001 f9bb 	bl	800329a <HAL_GPIO_TogglePin>
 8001f24:	e7f8      	b.n	8001f18 <main+0x74>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000098 	.word	0x20000098
 8001f2c:	42480000 	.word	0x42480000
 8001f30:	200000e4 	.word	0x200000e4
 8001f34:	200000f4 	.word	0x200000f4

08001f38 <GetSize_LUT>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
uint32_t GetSize_LUT(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
	uint32_t F_Trig = F_CLK/(((TIM2->PSC)+ 1)*((TIM2->ARR) + 1));
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	05db      	lsls	r3, r3, #23
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	05db      	lsls	r3, r3, #23
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4353      	muls	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	480a      	ldr	r0, [pc, #40]	; (8001f7c <GetSize_LUT+0x44>)
 8001f54:	f7fe f8d8 	bl	8000108 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	607b      	str	r3, [r7, #4]
	uint32_t n_tot = PERIOD_MS * F_Trig / 1000;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2264      	movs	r2, #100	; 0x64
 8001f60:	4353      	muls	r3, r2
 8001f62:	22fa      	movs	r2, #250	; 0xfa
 8001f64:	0091      	lsls	r1, r2, #2
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7fe f8ce 	bl	8000108 <__udivsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	603b      	str	r3, [r7, #0]
	return n_tot;
 8001f70:	683b      	ldr	r3, [r7, #0]
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b002      	add	sp, #8
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	001fff68 	.word	0x001fff68

08001f80 <GenerateBiphasicPulse_LUT>:
void GenerateBiphasicPulse_LUT(uint32_t *LUT, float Amplitude_mA, uint16_t Pulse_Period_mS, uint16_t Interpulse_Period_mS, uint16_t Period_mS, uint32_t n_tot)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	1c0a      	adds	r2, r1, #0
 8001f94:	801a      	strh	r2, [r3, #0]
	uint32_t i = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
	uint32_t n_phase = n_tot * Pulse_Period_mS / Period_mS;
 8001f9a:	1dbb      	adds	r3, r7, #6
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa0:	435a      	muls	r2, r3
 8001fa2:	2430      	movs	r4, #48	; 0x30
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	0019      	movs	r1, r3
 8001faa:	0010      	movs	r0, r2
 8001fac:	f7fe f8ac 	bl	8000108 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]
	uint32_t n_interphase = n_tot * Interpulse_Period_mS / Period_mS;
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fba:	435a      	muls	r2, r3
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	0010      	movs	r0, r2
 8001fc4:	f7fe f8a0 	bl	8000108 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	617b      	str	r3, [r7, #20]
	uint16_t Amplitude = (((Amplitude_mA / 1000) * R_SHUNT_OHMS) / VREF) * 4096;
 8001fcc:	493f      	ldr	r1, [pc, #252]	; (80020cc <GenerateBiphasicPulse_LUT+0x14c>)
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f7fe fa58 	bl	8000484 <__aeabi_fdiv>
 8001fd4:	1c03      	adds	r3, r0, #0
 8001fd6:	493e      	ldr	r1, [pc, #248]	; (80020d0 <GenerateBiphasicPulse_LUT+0x150>)
 8001fd8:	1c18      	adds	r0, r3, #0
 8001fda:	f7fe fb5f 	bl	800069c <__aeabi_fmul>
 8001fde:	1c03      	adds	r3, r0, #0
 8001fe0:	1c18      	adds	r0, r3, #0
 8001fe2:	f7ff fd91 	bl	8001b08 <__aeabi_f2d>
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <GenerateBiphasicPulse_LUT+0x154>)
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <GenerateBiphasicPulse_LUT+0x158>)
 8001fea:	f7fe fc71 	bl	80008d0 <__aeabi_ddiv>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	0010      	movs	r0, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <GenerateBiphasicPulse_LUT+0x15c>)
 8001ffa:	f7fe ff51 	bl	8000ea0 <__aeabi_dmul>
 8001ffe:	0002      	movs	r2, r0
 8002000:	000b      	movs	r3, r1
 8002002:	2112      	movs	r1, #18
 8002004:	187c      	adds	r4, r7, r1
 8002006:	0010      	movs	r0, r2
 8002008:	0019      	movs	r1, r3
 800200a:	f7fe f951 	bl	80002b0 <__aeabi_d2uiz>
 800200e:	0003      	movs	r3, r0
 8002010:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < n_phase; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e00e      	b.n	8002036 <GenerateBiphasicPulse_LUT+0xb6>
	{
		*(LUT + i) = 2048 + Amplitude; // Amplitude is currently just a 12-bit number specifying DAC_OUT value
 8002018:	2312      	movs	r3, #18
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	1899      	adds	r1, r3, r2
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	18d3      	adds	r3, r2, r3
 800202c:	000a      	movs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < n_phase; i++)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3301      	adds	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3ec      	bcc.n	8002018 <GenerateBiphasicPulse_LUT+0x98>
	}
	for (i = n_phase; i < (n_phase + n_interphase); i++)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e009      	b.n	8002058 <GenerateBiphasicPulse_LUT+0xd8>
	{
		*(LUT + i) = 2048; // Middle of DAC Output Range is 0 mA
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	601a      	str	r2, [r3, #0]
	for (i = n_phase; i < (n_phase + n_interphase); i++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	18d3      	adds	r3, r2, r3
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3ef      	bcc.n	8002044 <GenerateBiphasicPulse_LUT+0xc4>
	}
	for (i = (n_phase + n_interphase); i < (2*n_phase + n_interphase); i++)
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	18d3      	adds	r3, r2, r3
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	e00e      	b.n	800208c <GenerateBiphasicPulse_LUT+0x10c>
	{
		*(LUT + i) = 2048 - Amplitude;
 800206e:	2312      	movs	r3, #18
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	1ad1      	subs	r1, r2, r3
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	18d3      	adds	r3, r2, r3
 8002082:	000a      	movs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
	for (i = (n_phase + n_interphase); i < (2*n_phase + n_interphase); i++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	005a      	lsls	r2, r3, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	18d3      	adds	r3, r2, r3
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3e9      	bcc.n	800206e <GenerateBiphasicPulse_LUT+0xee>
	}
	for (i = (2*n_phase + n_interphase); i < n_tot; i++)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	18d3      	adds	r3, r2, r3
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	e009      	b.n	80020ba <GenerateBiphasicPulse_LUT+0x13a>
	{
		*(LUT + i) = 2048;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	18d3      	adds	r3, r2, r3
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]
	for (i = (2*n_phase + n_interphase); i < n_tot; i++)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	429a      	cmp	r2, r3
 80020c0:	d3f1      	bcc.n	80020a6 <GenerateBiphasicPulse_LUT+0x126>
	}
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b009      	add	sp, #36	; 0x24
 80020ca:	bd90      	pop	{r4, r7, pc}
 80020cc:	447a0000 	.word	0x447a0000
 80020d0:	42040000 	.word	0x42040000
 80020d4:	66666666 	.word	0x66666666
 80020d8:	400a6666 	.word	0x400a6666
 80020dc:	40b00000 	.word	0x40b00000

080020e0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b09d      	sub	sp, #116	; 0x74
 80020e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e6:	2438      	movs	r4, #56	; 0x38
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	0018      	movs	r0, r3
 80020ec:	2338      	movs	r3, #56	; 0x38
 80020ee:	001a      	movs	r2, r3
 80020f0:	2100      	movs	r1, #0
 80020f2:	f002 ff91 	bl	8005018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f6:	2324      	movs	r3, #36	; 0x24
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	0018      	movs	r0, r3
 80020fc:	2314      	movs	r3, #20
 80020fe:	001a      	movs	r2, r3
 8002100:	2100      	movs	r1, #0
 8002102:	f002 ff89 	bl	8005018 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002106:	003b      	movs	r3, r7
 8002108:	0018      	movs	r0, r3
 800210a:	2324      	movs	r3, #36	; 0x24
 800210c:	001a      	movs	r2, r3
 800210e:	2100      	movs	r1, #0
 8002110:	f002 ff82 	bl	8005018 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002114:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <SystemClock_Config+0xd0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <SystemClock_Config+0xd4>)
 800211a:	401a      	ands	r2, r3
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <SystemClock_Config+0xd0>)
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0109      	lsls	r1, r1, #4
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002126:	0021      	movs	r1, r4
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2210      	movs	r2, #16
 800212c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2201      	movs	r2, #1
 8002132:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	22a0      	movs	r2, #160	; 0xa0
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002148:	187b      	adds	r3, r7, r1
 800214a:	0018      	movs	r0, r3
 800214c:	f001 f8c0 	bl	80032d0 <HAL_RCC_OscConfig>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002154:	f000 f96a 	bl	800242c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	2124      	movs	r1, #36	; 0x24
 800215a:	187b      	adds	r3, r7, r1
 800215c:	220f      	movs	r2, #15
 800215e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2200      	movs	r2, #0
 8002164:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	187b      	adds	r3, r7, r1
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002178:	187b      	adds	r3, r7, r1
 800217a:	2100      	movs	r1, #0
 800217c:	0018      	movs	r0, r3
 800217e:	f001 fc6b 	bl	8003a58 <HAL_RCC_ClockConfig>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002186:	f000 f951 	bl	800242c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800218a:	003b      	movs	r3, r7
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002190:	003b      	movs	r3, r7
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002196:	003b      	movs	r3, r7
 8002198:	0018      	movs	r0, r3
 800219a:	f001 fea3 	bl	8003ee4 <HAL_RCCEx_PeriphCLKConfig>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80021a2:	f000 f943 	bl	800242c <Error_Handler>
  }
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b01d      	add	sp, #116	; 0x74
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	40007000 	.word	0x40007000
 80021b4:	ffffe7ff 	.word	0xffffe7ff

080021b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80021be:	003b      	movs	r3, r7
 80021c0:	0018      	movs	r0, r3
 80021c2:	2308      	movs	r3, #8
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f002 ff26 	bl	8005018 <memset>

  /* USER CODE BEGIN DAC_Init 1 */
  hdac.Instance = DAC;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_DAC_Init+0x60>)
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <MX_DAC_Init+0x64>)
 80021d0:	601a      	str	r2, [r3, #0]
  DAC->CR = DAC_CR_EN1 | DAC_CR_TEN1 | DAC_CR_BOFF1;
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <MX_DAC_Init+0x64>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_DAC_Init+0x60>)
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <MX_DAC_Init+0x64>)
 80021dc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_DAC_Init+0x60>)
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 fbdb 	bl	800299c <HAL_DAC_Init>
 80021e6:	1e03      	subs	r3, r0, #0
 80021e8:	d001      	beq.n	80021ee <MX_DAC_Init+0x36>
  {
    Error_Handler();
 80021ea:	f000 f91f 	bl	800242c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80021ee:	003b      	movs	r3, r7
 80021f0:	2224      	movs	r2, #36	; 0x24
 80021f2:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021f4:	003b      	movs	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021fa:	0039      	movs	r1, r7
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_DAC_Init+0x60>)
 80021fe:	2200      	movs	r2, #0
 8002200:	0018      	movs	r0, r3
 8002202:	f000 fc07 	bl	8002a14 <HAL_DAC_ConfigChannel>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d001      	beq.n	800220e <MX_DAC_Init+0x56>
  {
    Error_Handler();
 800220a:	f000 f90f 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	200000e4 	.word	0x200000e4
 800221c:	40007400 	.word	0x40007400

08002220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002226:	2308      	movs	r3, #8
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	0018      	movs	r0, r3
 800222c:	2310      	movs	r3, #16
 800222e:	001a      	movs	r2, r3
 8002230:	2100      	movs	r1, #0
 8002232:	f002 fef1 	bl	8005018 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002236:	003b      	movs	r3, r7
 8002238:	0018      	movs	r0, r3
 800223a:	2308      	movs	r3, #8
 800223c:	001a      	movs	r2, r3
 800223e:	2100      	movs	r1, #0
 8002240:	f002 feea 	bl	8005018 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <MX_TIM2_Init+0xa4>)
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	05d2      	lsls	r2, r2, #23
 800224a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <MX_TIM2_Init+0xa4>)
 800224e:	2200      	movs	r2, #0
 8002250:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <MX_TIM2_Init+0xa4>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2096;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <MX_TIM2_Init+0xa4>)
 800225a:	2283      	movs	r2, #131	; 0x83
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_TIM2_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <MX_TIM2_Init+0xa4>)
 8002268:	2200      	movs	r2, #0
 800226a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <MX_TIM2_Init+0xa4>)
 800226e:	0018      	movs	r0, r3
 8002270:	f001 ff9c 	bl	80041ac <HAL_TIM_Base_Init>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002278:	f000 f8d8 	bl	800242c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227c:	2108      	movs	r1, #8
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	0152      	lsls	r2, r2, #5
 8002284:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002286:	187a      	adds	r2, r7, r1
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_TIM2_Init+0xa4>)
 800228a:	0011      	movs	r1, r2
 800228c:	0018      	movs	r0, r3
 800228e:	f002 f811 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d001      	beq.n	800229a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002296:	f000 f8c9 	bl	800242c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800229a:	003b      	movs	r3, r7
 800229c:	2220      	movs	r2, #32
 800229e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a0:	003b      	movs	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022a6:	003a      	movs	r2, r7
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_TIM2_Init+0xa4>)
 80022aa:	0011      	movs	r1, r2
 80022ac:	0018      	movs	r0, r3
 80022ae:	f002 f9b9 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022b6:	f000 f8b9 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	200000f4 	.word	0x200000f4

080022c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <MX_USART2_UART_Init+0x5c>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022d4:	22e1      	movs	r2, #225	; 0xe1
 80022d6:	0252      	lsls	r2, r2, #9
 80022d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_USART2_UART_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <MX_USART2_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_USART2_UART_Init+0x58>)
 8002306:	2200      	movs	r2, #0
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <MX_USART2_UART_Init+0x58>)
 800230c:	0018      	movs	r0, r3
 800230e:	f002 f9e1 	bl	80046d4 <HAL_UART_Init>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d001      	beq.n	800231a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002316:	f000 f889 	bl	800242c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000134 	.word	0x20000134
 8002324:	40004400 	.word	0x40004400

08002328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_DMA_Init+0x38>)
 8002330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <MX_DMA_Init+0x38>)
 8002334:	2101      	movs	r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_DMA_Init+0x38>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	200a      	movs	r0, #10
 800234c:	f000 faf4 	bl	8002938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002350:	200a      	movs	r0, #10
 8002352:	f000 fb06 	bl	8002962 <HAL_NVIC_EnableIRQ>

}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	40021000 	.word	0x40021000

08002364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	240c      	movs	r4, #12
 800236c:	193b      	adds	r3, r7, r4
 800236e:	0018      	movs	r0, r3
 8002370:	2314      	movs	r3, #20
 8002372:	001a      	movs	r2, r3
 8002374:	2100      	movs	r1, #0
 8002376:	f002 fe4f 	bl	8005018 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <MX_GPIO_Init+0xbc>)
 800237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <MX_GPIO_Init+0xbc>)
 8002380:	2104      	movs	r1, #4
 8002382:	430a      	orrs	r2, r1
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <MX_GPIO_Init+0xbc>)
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <MX_GPIO_Init+0xbc>)
 8002394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <MX_GPIO_Init+0xbc>)
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	430a      	orrs	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <MX_GPIO_Init+0xbc>)
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	4013      	ands	r3, r2
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <MX_GPIO_Init+0xbc>)
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_GPIO_Init+0xbc>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_GPIO_Init+0xbc>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	2201      	movs	r2, #1
 80023bc:	4013      	ands	r3, r2
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023c2:	23a0      	movs	r3, #160	; 0xa0
 80023c4:	05db      	lsls	r3, r3, #23
 80023c6:	2200      	movs	r2, #0
 80023c8:	2120      	movs	r1, #32
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 ff48 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023d0:	193b      	adds	r3, r7, r4
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	0192      	lsls	r2, r2, #6
 80023d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <MX_GPIO_Init+0xc0>)
 80023dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <MX_GPIO_Init+0xc4>)
 80023e8:	0019      	movs	r1, r3
 80023ea:	0010      	movs	r0, r2
 80023ec:	f000 fdc2 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023f0:	0021      	movs	r1, r4
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2220      	movs	r2, #32
 80023f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2201      	movs	r2, #1
 80023fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800240a:	187a      	adds	r2, r7, r1
 800240c:	23a0      	movs	r3, #160	; 0xa0
 800240e:	05db      	lsls	r3, r3, #23
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fdae 	bl	8002f74 <HAL_GPIO_Init>

}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b009      	add	sp, #36	; 0x24
 800241e:	bd90      	pop	{r4, r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	10210000 	.word	0x10210000
 8002428:	50000800 	.word	0x50000800

0800242c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002430:	b672      	cpsid	i
}
 8002432:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002434:	e7fe      	b.n	8002434 <Error_Handler+0x8>
	...

08002438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_MspInit+0x24>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_MspInit+0x24>)
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_MspInit+0x24>)
 800244a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_MspInit+0x24>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0549      	lsls	r1, r1, #21
 8002452:	430a      	orrs	r2, r1
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000

08002460 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	240c      	movs	r4, #12
 800246a:	193b      	adds	r3, r7, r4
 800246c:	0018      	movs	r0, r3
 800246e:	2314      	movs	r3, #20
 8002470:	001a      	movs	r2, r3
 8002472:	2100      	movs	r1, #0
 8002474:	f002 fdd0 	bl	8005018 <memset>
  if(hdac->Instance==DAC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <HAL_DAC_MspInit+0xc8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d14e      	bne.n	8002520 <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_DAC_MspInit+0xcc>)
 8002484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_DAC_MspInit+0xcc>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0589      	lsls	r1, r1, #22
 800248c:	430a      	orrs	r2, r1
 800248e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_DAC_MspInit+0xcc>)
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_DAC_MspInit+0xcc>)
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_DAC_MspInit+0xcc>)
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	2201      	movs	r2, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	2210      	movs	r2, #16
 80024ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	2203      	movs	r2, #3
 80024b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	193a      	adds	r2, r7, r4
 80024bc:	23a0      	movs	r3, #160	; 0xa0
 80024be:	05db      	lsls	r3, r3, #23
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fd56 	bl	8002f74 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_DAC_MspInit+0xd4>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_9;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024d0:	2209      	movs	r2, #9
 80024d2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024d6:	2210      	movs	r2, #16
 80024d8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024e8:	2280      	movs	r2, #128	; 0x80
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024f8:	2220      	movs	r2, #32
 80024fa:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0192      	lsls	r2, r2, #6
 8002502:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fb7a 	bl	8002c00 <HAL_DMA_Init>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d001      	beq.n	8002514 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 8002510:	f7ff ff8c 	bl	800242c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_DAC_MspInit+0xd0>)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b009      	add	sp, #36	; 0x24
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	40007400 	.word	0x40007400
 800252c:	40021000 	.word	0x40021000
 8002530:	2000009c 	.word	0x2000009c
 8002534:	4002001c 	.word	0x4002001c

08002538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	05db      	lsls	r3, r3, #23
 8002548:	429a      	cmp	r2, r3
 800254a:	d105      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_TIM_Base_MspInit+0x28>)
 800254e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_TIM_Base_MspInit+0x28>)
 8002552:	2101      	movs	r1, #1
 8002554:	430a      	orrs	r2, r1
 8002556:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	240c      	movs	r4, #12
 800256e:	193b      	adds	r3, r7, r4
 8002570:	0018      	movs	r0, r3
 8002572:	2314      	movs	r3, #20
 8002574:	001a      	movs	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f002 fd4e 	bl	8005018 <memset>
  if(huart->Instance==USART2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_UART_MspInit+0x80>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d129      	bne.n	80025da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_UART_MspInit+0x84>)
 8002588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_UART_MspInit+0x84>)
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	0289      	lsls	r1, r1, #10
 8002590:	430a      	orrs	r2, r1
 8002592:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_UART_MspInit+0x84>)
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_UART_MspInit+0x84>)
 800259a:	2101      	movs	r1, #1
 800259c:	430a      	orrs	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_UART_MspInit+0x84>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2201      	movs	r2, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025ac:	0021      	movs	r1, r4
 80025ae:	187b      	adds	r3, r7, r1
 80025b0:	220c      	movs	r2, #12
 80025b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	2202      	movs	r2, #2
 80025b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2203      	movs	r2, #3
 80025c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2204      	movs	r2, #4
 80025ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	187a      	adds	r2, r7, r1
 80025ce:	23a0      	movs	r3, #160	; 0xa0
 80025d0:	05db      	lsls	r3, r3, #23
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fccd 	bl	8002f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b009      	add	sp, #36	; 0x24
 80025e0:	bd90      	pop	{r4, r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40004400 	.word	0x40004400
 80025e8:	40021000 	.word	0x40021000

080025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <NMI_Handler+0x4>

080025f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <HardFault_Handler+0x4>

080025f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025fc:	46c0      	nop			; (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002610:	f000 f8ca 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002622:	0018      	movs	r0, r3
 8002624:	f000 fbca 	bl	8002dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	2000009c 	.word	0x2000009c

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	18d3      	adds	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f002 fca4 	bl	8004fb0 <__errno>
 8002668:	0003      	movs	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	2301      	movs	r3, #1
 8002670:	425b      	negs	r3, r3
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	18d2      	adds	r2, r2, r3
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b006      	add	sp, #24
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20002000 	.word	0x20002000
 8002694:	00000400 	.word	0x00000400
 8002698:	2000008c 	.word	0x2000008c
 800269c:	200001d0 	.word	0x200001d0

080026a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80026ac:	480d      	ldr	r0, [pc, #52]	; (80026e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b0:	480d      	ldr	r0, [pc, #52]	; (80026e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026b2:	490e      	ldr	r1, [pc, #56]	; (80026ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <LoopForever+0xe>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026c8:	4c0b      	ldr	r4, [pc, #44]	; (80026f8 <LoopForever+0x16>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026d6:	f7ff ffe3 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f002 fc6f 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7ff fbe1 	bl	8001ea4 <main>

080026e2 <LoopForever>:

LoopForever:
    b LoopForever
 80026e2:	e7fe      	b.n	80026e2 <LoopForever>
  ldr   r0, =_estack
 80026e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026f0:	08005300 	.word	0x08005300
  ldr r2, =_sbss
 80026f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026f8:	200001cc 	.word	0x200001cc

080026fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC1_COMP_IRQHandler>
	...

08002700 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_Init+0x3c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_Init+0x3c>)
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002718:	2000      	movs	r0, #0
 800271a:	f000 f811 	bl	8002740 <HAL_InitTick>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d003      	beq.n	800272a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002722:	1dfb      	adds	r3, r7, #7
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e001      	b.n	800272e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800272a:	f7ff fe85 	bl	8002438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800272e:	1dfb      	adds	r3, r7, #7
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_InitTick+0x5c>)
 800274a:	681c      	ldr	r4, [r3, #0]
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_InitTick+0x60>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	0019      	movs	r1, r3
 8002752:	23fa      	movs	r3, #250	; 0xfa
 8002754:	0098      	lsls	r0, r3, #2
 8002756:	f7fd fcd7 	bl	8000108 <__udivsi3>
 800275a:	0003      	movs	r3, r0
 800275c:	0019      	movs	r1, r3
 800275e:	0020      	movs	r0, r4
 8002760:	f7fd fcd2 	bl	8000108 <__udivsi3>
 8002764:	0003      	movs	r3, r0
 8002766:	0018      	movs	r0, r3
 8002768:	f000 f90b 	bl	8002982 <HAL_SYSTICK_Config>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00f      	b.n	8002794 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d80b      	bhi.n	8002792 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	2301      	movs	r3, #1
 800277e:	425b      	negs	r3, r3
 8002780:	2200      	movs	r2, #0
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f8d8 	bl	8002938 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_InitTick+0x64>)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b003      	add	sp, #12
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000008 	.word	0x20000008
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_IncTick+0x1c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	001a      	movs	r2, r3
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_IncTick+0x20>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	18d2      	adds	r2, r2, r3
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_IncTick+0x20>)
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	20000008 	.word	0x20000008
 80027c8:	200001b8 	.word	0x200001b8

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b02      	ldr	r3, [pc, #8]	; (80027dc <HAL_GetTick+0x10>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	200001b8 	.word	0x200001b8

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0002      	movs	r2, r0
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b7f      	cmp	r3, #127	; 0x7f
 80027f2:	d809      	bhi.n	8002808 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	001a      	movs	r2, r3
 80027fa:	231f      	movs	r3, #31
 80027fc:	401a      	ands	r2, r3
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_EnableIRQ+0x30>)
 8002800:	2101      	movs	r1, #1
 8002802:	4091      	lsls	r1, r2
 8002804:	000a      	movs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
  }
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	0002      	movs	r2, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b7f      	cmp	r3, #127	; 0x7f
 8002828:	d828      	bhi.n	800287c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800282a:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <__NVIC_SetPriority+0xd4>)
 800282c:	1dfb      	adds	r3, r7, #7
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	33c0      	adds	r3, #192	; 0xc0
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	589b      	ldr	r3, [r3, r2]
 800283a:	1dfa      	adds	r2, r7, #7
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	0011      	movs	r1, r2
 8002840:	2203      	movs	r2, #3
 8002842:	400a      	ands	r2, r1
 8002844:	00d2      	lsls	r2, r2, #3
 8002846:	21ff      	movs	r1, #255	; 0xff
 8002848:	4091      	lsls	r1, r2
 800284a:	000a      	movs	r2, r1
 800284c:	43d2      	mvns	r2, r2
 800284e:	401a      	ands	r2, r3
 8002850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	401a      	ands	r2, r3
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	0018      	movs	r0, r3
 8002860:	2303      	movs	r3, #3
 8002862:	4003      	ands	r3, r0
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002868:	481f      	ldr	r0, [pc, #124]	; (80028e8 <__NVIC_SetPriority+0xd4>)
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b25b      	sxtb	r3, r3
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	430a      	orrs	r2, r1
 8002874:	33c0      	adds	r3, #192	; 0xc0
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800287a:	e031      	b.n	80028e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <__NVIC_SetPriority+0xd8>)
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	0019      	movs	r1, r3
 8002884:	230f      	movs	r3, #15
 8002886:	400b      	ands	r3, r1
 8002888:	3b08      	subs	r3, #8
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3306      	adds	r3, #6
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	3304      	adds	r3, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1dfa      	adds	r2, r7, #7
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	0011      	movs	r1, r2
 800289c:	2203      	movs	r2, #3
 800289e:	400a      	ands	r2, r1
 80028a0:	00d2      	lsls	r2, r2, #3
 80028a2:	21ff      	movs	r1, #255	; 0xff
 80028a4:	4091      	lsls	r1, r2
 80028a6:	000a      	movs	r2, r1
 80028a8:	43d2      	mvns	r2, r2
 80028aa:	401a      	ands	r2, r3
 80028ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	019b      	lsls	r3, r3, #6
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	401a      	ands	r2, r3
 80028b6:	1dfb      	adds	r3, r7, #7
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	2303      	movs	r3, #3
 80028be:	4003      	ands	r3, r0
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c4:	4809      	ldr	r0, [pc, #36]	; (80028ec <__NVIC_SetPriority+0xd8>)
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	001c      	movs	r4, r3
 80028cc:	230f      	movs	r3, #15
 80028ce:	4023      	ands	r3, r4
 80028d0:	3b08      	subs	r3, #8
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	430a      	orrs	r2, r1
 80028d6:	3306      	adds	r3, #6
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	18c3      	adds	r3, r0, r3
 80028dc:	3304      	adds	r3, #4
 80028de:	601a      	str	r2, [r3, #0]
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b003      	add	sp, #12
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	045b      	lsls	r3, r3, #17
 8002900:	429a      	cmp	r2, r3
 8002902:	d301      	bcc.n	8002908 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002904:	2301      	movs	r3, #1
 8002906:	e010      	b.n	800292a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <SysTick_Config+0x44>)
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	3a01      	subs	r2, #1
 800290e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002910:	2301      	movs	r3, #1
 8002912:	425b      	negs	r3, r3
 8002914:	2103      	movs	r1, #3
 8002916:	0018      	movs	r0, r3
 8002918:	f7ff ff7c 	bl	8002814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <SysTick_Config+0x44>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <SysTick_Config+0x44>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	210f      	movs	r1, #15
 8002944:	187b      	adds	r3, r7, r1
 8002946:	1c02      	adds	r2, r0, #0
 8002948:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	187b      	adds	r3, r7, r1
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b25b      	sxtb	r3, r3
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff ff5d 	bl	8002814 <__NVIC_SetPriority>
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	0002      	movs	r2, r0
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296e:	1dfb      	adds	r3, r7, #7
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b25b      	sxtb	r3, r3
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff ff33 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ffaf 	bl	80028f0 <SysTick_Config>
 8002992:	0003      	movs	r3, r0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e015      	b.n	80029da <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	791b      	ldrb	r3, [r3, #4]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff fd4d 	bl	8002460 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b002      	add	sp, #8
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b002      	add	sp, #8
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	795b      	ldrb	r3, [r3, #5]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DAC_ConfigChannel+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e035      	b.n	8002aa0 <HAL_DAC_ConfigChannel+0x8c>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_DAC_ConfigChannel+0x94>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	0013      	movs	r3, r2
 8002a50:	43da      	mvns	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	21c0      	movs	r1, #192	; 0xc0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4099      	lsls	r1, r3
 8002a86:	000b      	movs	r3, r1
 8002a88:	43d9      	mvns	r1, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	400a      	ands	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b006      	add	sp, #24
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	00000ffe 	.word	0x00000ffe

08002aac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	795b      	ldrb	r3, [r3, #5]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_DAC_Start_DMA+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e055      	b.n	8002b76 <HAL_DAC_Start_DMA+0xca>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_DAC_Start_DMA+0xd4>)
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <HAL_DAC_Start_DMA+0xd8>)
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_DAC_Start_DMA+0xdc>)
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0149      	lsls	r1, r1, #5
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
     
  /* Case of use of channel 1 */
  switch(Alignment)
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d013      	beq.n	8002b2e <HAL_DAC_Start_DMA+0x82>
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d815      	bhi.n	8002b38 <HAL_DAC_Start_DMA+0x8c>
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_DAC_Start_DMA+0x6e>
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d005      	beq.n	8002b24 <HAL_DAC_Start_DMA+0x78>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8002b18:	e00e      	b.n	8002b38 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	617b      	str	r3, [r7, #20]
      break;
 8002b22:	e00a      	b.n	8002b3a <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	617b      	str	r3, [r7, #20]
      break;
 8002b2c:	e005      	b.n	8002b3a <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3310      	adds	r3, #16
 8002b34:	617b      	str	r3, [r7, #20]
      break;
 8002b36:	e000      	b.n	8002b3a <HAL_DAC_Start_DMA+0x8e>
      break;
 8002b38:	46c0      	nop			; (mov r8, r8)
  }
  UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
  
  /* Enable the DMA Stream */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0189      	lsls	r1, r1, #6
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6898      	ldr	r0, [r3, #8]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	f000 f8cb 	bl	8002cf0 <HAL_DMA_Start_IT>
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6819      	ldr	r1, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	409a      	lsls	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b006      	add	sp, #24
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	08002b8d 	.word	0x08002b8d
 8002b84:	08002bb1 	.word	0x08002bb1
 8002b88:	08002bcf 	.word	0x08002bcf

08002b8c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff ff20 	bl	80029e2 <HAL_DAC_ConvCpltCallbackCh1>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	711a      	strb	r2, [r3, #4]
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff ff16 	bl	80029f2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  
}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2204      	movs	r2, #4
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	60da      	str	r2, [r3, #12]

  HAL_DAC_ErrorCallbackCh1(hdac);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7ff ff09 	bl	8002a02 <HAL_DAC_ErrorCallbackCh1>

  hdac->State= HAL_DAC_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	711a      	strb	r2, [r3, #4]
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e061      	b.n	8002cd6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a32      	ldr	r2, [pc, #200]	; (8002ce0 <HAL_DMA_Init+0xe0>)
 8002c18:	4694      	mov	ip, r2
 8002c1a:	4463      	add	r3, ip
 8002c1c:	2114      	movs	r1, #20
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fd fa72 	bl	8000108 <__udivsi3>
 8002c24:	0003      	movs	r3, r0
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ce4 <HAL_DMA_Init+0xe4>)
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2225      	movs	r2, #37	; 0x25
 8002c36:	2102      	movs	r1, #2
 8002c38:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <HAL_DMA_Init+0xe8>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	01db      	lsls	r3, r3, #7
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d018      	beq.n	8002cbe <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_DMA_Init+0xec>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	211c      	movs	r1, #28
 8002c96:	400b      	ands	r3, r1
 8002c98:	210f      	movs	r1, #15
 8002c9a:	4099      	lsls	r1, r3
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_DMA_Init+0xec>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_DMA_Init+0xec>)
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	201c      	movs	r0, #28
 8002cb4:	4003      	ands	r3, r0
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_DMA_Init+0xec>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2225      	movs	r2, #37	; 0x25
 8002cc8:	2101      	movs	r1, #1
 8002cca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	bffdfff8 	.word	0xbffdfff8
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	ffff800f 	.word	0xffff800f
 8002cec:	400200a8 	.word	0x400200a8

08002cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2317      	movs	r3, #23
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2224      	movs	r2, #36	; 0x24
 8002d0a:	5c9b      	ldrb	r3, [r3, r2]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Start_IT+0x24>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e04f      	b.n	8002db4 <HAL_DMA_Start_IT+0xc4>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2224      	movs	r2, #36	; 0x24
 8002d18:	2101      	movs	r1, #1
 8002d1a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2225      	movs	r2, #37	; 0x25
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d13a      	bne.n	8002d9e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2225      	movs	r2, #37	; 0x25
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2101      	movs	r1, #1
 8002d42:	438a      	bics	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f8e3 	bl	8002f18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	210e      	movs	r1, #14
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e00f      	b.n	8002d8c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2104      	movs	r1, #4
 8002d78:	438a      	bics	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	210a      	movs	r1, #10
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e007      	b.n	8002dae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2224      	movs	r2, #36	; 0x24
 8002da2:	2100      	movs	r1, #0
 8002da4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002da6:	2317      	movs	r3, #23
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2202      	movs	r2, #2
 8002dac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002dae:	2317      	movs	r3, #23
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	781b      	ldrb	r3, [r3, #0]
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b006      	add	sp, #24
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	221c      	movs	r2, #28
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2204      	movs	r2, #4
 8002dde:	409a      	lsls	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4013      	ands	r3, r2
 8002de6:	d026      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x7a>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2204      	movs	r2, #4
 8002dec:	4013      	ands	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2220      	movs	r2, #32
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2104      	movs	r1, #4
 8002e08:	438a      	bics	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	221c      	movs	r2, #28
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2104      	movs	r1, #4
 8002e1a:	4091      	lsls	r1, r2
 8002e1c:	000a      	movs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x6e>
 8002e28:	e071      	b.n	8002f0e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	0010      	movs	r0, r2
 8002e32:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	e06b      	b.n	8002f0e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	221c      	movs	r2, #28
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2202      	movs	r2, #2
 8002e40:	409a      	lsls	r2, r3
 8002e42:	0013      	movs	r3, r2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4013      	ands	r3, r2
 8002e48:	d02d      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xea>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d029      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d10b      	bne.n	8002e76 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	210a      	movs	r1, #10
 8002e6a:	438a      	bics	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2225      	movs	r2, #37	; 0x25
 8002e72:	2101      	movs	r1, #1
 8002e74:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	221c      	movs	r2, #28
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2102      	movs	r1, #2
 8002e84:	4091      	lsls	r1, r2
 8002e86:	000a      	movs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2224      	movs	r2, #36	; 0x24
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d039      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	0010      	movs	r0, r2
 8002ea2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ea4:	e033      	b.n	8002f0e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	221c      	movs	r2, #28
 8002eac:	4013      	ands	r3, r2
 8002eae:	2208      	movs	r2, #8
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d02a      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x154>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d026      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	210e      	movs	r1, #14
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	221c      	movs	r2, #28
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4091      	lsls	r1, r2
 8002ee2:	000a      	movs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2225      	movs	r2, #37	; 0x25
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	0010      	movs	r0, r2
 8002f0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46c0      	nop			; (mov r8, r8)
}
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	221c      	movs	r2, #28
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2101      	movs	r1, #1
 8002f34:	4091      	lsls	r1, r2
 8002f36:	000a      	movs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d108      	bne.n	8002f5c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f5a:	e007      	b.n	8002f6c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f8a:	e14f      	b.n	800322c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4091      	lsls	r1, r2
 8002f96:	000a      	movs	r2, r1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d100      	bne.n	8002fa4 <HAL_GPIO_Init+0x30>
 8002fa2:	e140      	b.n	8003226 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d00b      	beq.n	8002fc4 <HAL_GPIO_Init+0x50>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fb8:	2b11      	cmp	r3, #17
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d130      	bne.n	8003026 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	0013      	movs	r3, r2
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	43da      	mvns	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	2201      	movs	r2, #1
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
 8003018:	0013      	movs	r3, r2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	2203      	movs	r2, #3
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	43da      	mvns	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	0013      	movs	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0xf2>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b12      	cmp	r3, #18
 8003064:	d123      	bne.n	80030ae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	58d3      	ldr	r3, [r2, r3]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2207      	movs	r2, #7
 8003078:	4013      	ands	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	409a      	lsls	r2, r3
 8003080:	0013      	movs	r3, r2
 8003082:	43da      	mvns	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2107      	movs	r1, #7
 8003092:	400b      	ands	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	409a      	lsls	r2, r3
 8003098:	0013      	movs	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	43da      	mvns	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	401a      	ands	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	0013      	movs	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	055b      	lsls	r3, r3, #21
 80030ea:	4013      	ands	r3, r2
 80030ec:	d100      	bne.n	80030f0 <HAL_GPIO_Init+0x17c>
 80030ee:	e09a      	b.n	8003226 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f0:	4b54      	ldr	r3, [pc, #336]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_GPIO_Init+0x2d4>)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	589b      	ldr	r3, [r3, r2]
 8003108:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2203      	movs	r2, #3
 800310e:	4013      	ands	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	409a      	lsls	r2, r3
 8003116:	0013      	movs	r3, r2
 8003118:	43da      	mvns	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	23a0      	movs	r3, #160	; 0xa0
 8003124:	05db      	lsls	r3, r3, #23
 8003126:	429a      	cmp	r2, r3
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x1ea>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a47      	ldr	r2, [pc, #284]	; (800324c <HAL_GPIO_Init+0x2d8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x1e6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a46      	ldr	r2, [pc, #280]	; (8003250 <HAL_GPIO_Init+0x2dc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x1e2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a45      	ldr	r2, [pc, #276]	; (8003254 <HAL_GPIO_Init+0x2e0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x1de>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a44      	ldr	r2, [pc, #272]	; (8003258 <HAL_GPIO_Init+0x2e4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x1da>
 800314a:	2305      	movs	r3, #5
 800314c:	e008      	b.n	8003160 <HAL_GPIO_Init+0x1ec>
 800314e:	2306      	movs	r3, #6
 8003150:	e006      	b.n	8003160 <HAL_GPIO_Init+0x1ec>
 8003152:	2303      	movs	r3, #3
 8003154:	e004      	b.n	8003160 <HAL_GPIO_Init+0x1ec>
 8003156:	2302      	movs	r3, #2
 8003158:	e002      	b.n	8003160 <HAL_GPIO_Init+0x1ec>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_GPIO_Init+0x1ec>
 800315e:	2300      	movs	r3, #0
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	2103      	movs	r1, #3
 8003164:	400a      	ands	r2, r1
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	4093      	lsls	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003170:	4935      	ldr	r1, [pc, #212]	; (8003248 <HAL_GPIO_Init+0x2d4>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	43da      	mvns	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	025b      	lsls	r3, r3, #9
 8003196:	4013      	ands	r3, r2
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a2:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_GPIO_Init+0x2e8>)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031a8:	4b2c      	ldr	r3, [pc, #176]	; (800325c <HAL_GPIO_Init+0x2e8>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43da      	mvns	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	029b      	lsls	r3, r3, #10
 80031c0:	4013      	ands	r3, r2
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031cc:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_GPIO_Init+0x2e8>)
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_GPIO_Init+0x2e8>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43da      	mvns	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	035b      	lsls	r3, r3, #13
 80031ea:	4013      	ands	r3, r2
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031f6:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_GPIO_Init+0x2e8>)
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_GPIO_Init+0x2e8>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43da      	mvns	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	039b      	lsls	r3, r3, #14
 8003214:	4013      	ands	r3, r2
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003220:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3301      	adds	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	40da      	lsrs	r2, r3
 8003234:	1e13      	subs	r3, r2, #0
 8003236:	d000      	beq.n	800323a <HAL_GPIO_Init+0x2c6>
 8003238:	e6a8      	b.n	8002f8c <HAL_GPIO_Init+0x18>
  }
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b006      	add	sp, #24
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000
 8003248:	40010000 	.word	0x40010000
 800324c:	50000400 	.word	0x50000400
 8003250:	50000800 	.word	0x50000800
 8003254:	50000c00 	.word	0x50000c00
 8003258:	50001c00 	.word	0x50001c00
 800325c:	40010400 	.word	0x40010400

08003260 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	0008      	movs	r0, r1
 800326a:	0011      	movs	r1, r2
 800326c:	1cbb      	adds	r3, r7, #2
 800326e:	1c02      	adds	r2, r0, #0
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	1c7b      	adds	r3, r7, #1
 8003274:	1c0a      	adds	r2, r1, #0
 8003276:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003278:	1c7b      	adds	r3, r7, #1
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003280:	1cbb      	adds	r3, r7, #2
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003288:	e003      	b.n	8003292 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	881a      	ldrh	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	000a      	movs	r2, r1
 80032a4:	1cbb      	adds	r3, r7, #2
 80032a6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ae:	1cbb      	adds	r3, r7, #2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	041a      	lsls	r2, r3, #16
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	1cb9      	adds	r1, r7, #2
 80032be:	8809      	ldrh	r1, [r1, #0]
 80032c0:	400b      	ands	r3, r1
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b004      	add	sp, #16
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	f000 fbaf 	bl	8003a42 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e4:	4bcf      	ldr	r3, [pc, #828]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	220c      	movs	r2, #12
 80032ea:	4013      	ands	r3, r2
 80032ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ee:	4bcd      	ldr	r3, [pc, #820]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	025b      	lsls	r3, r3, #9
 80032f6:	4013      	ands	r3, r2
 80032f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d100      	bne.n	8003306 <HAL_RCC_OscConfig+0x36>
 8003304:	e07e      	b.n	8003404 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d007      	beq.n	800331c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d112      	bne.n	8003338 <HAL_RCC_OscConfig+0x68>
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	025b      	lsls	r3, r3, #9
 8003318:	429a      	cmp	r2, r3
 800331a:	d10d      	bne.n	8003338 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	4bc1      	ldr	r3, [pc, #772]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	2380      	movs	r3, #128	; 0x80
 8003322:	029b      	lsls	r3, r3, #10
 8003324:	4013      	ands	r3, r2
 8003326:	d100      	bne.n	800332a <HAL_RCC_OscConfig+0x5a>
 8003328:	e06b      	b.n	8003402 <HAL_RCC_OscConfig+0x132>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d167      	bne.n	8003402 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f000 fb85 	bl	8003a42 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x84>
 8003344:	4bb7      	ldr	r3, [pc, #732]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4bb6      	ldr	r3, [pc, #728]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	0249      	lsls	r1, r1, #9
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e027      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	23a0      	movs	r3, #160	; 0xa0
 800335a:	02db      	lsls	r3, r3, #11
 800335c:	429a      	cmp	r2, r3
 800335e:	d10e      	bne.n	800337e <HAL_RCC_OscConfig+0xae>
 8003360:	4bb0      	ldr	r3, [pc, #704]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4baf      	ldr	r3, [pc, #700]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	02c9      	lsls	r1, r1, #11
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	4bad      	ldr	r3, [pc, #692]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4bac      	ldr	r3, [pc, #688]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0249      	lsls	r1, r1, #9
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e012      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 800337e:	4ba9      	ldr	r3, [pc, #676]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4ba8      	ldr	r3, [pc, #672]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003384:	49a8      	ldr	r1, [pc, #672]	; (8003628 <HAL_RCC_OscConfig+0x358>)
 8003386:	400a      	ands	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4ba6      	ldr	r3, [pc, #664]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	4013      	ands	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4ba2      	ldr	r3, [pc, #648]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4ba1      	ldr	r3, [pc, #644]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800339e:	49a3      	ldr	r1, [pc, #652]	; (800362c <HAL_RCC_OscConfig+0x35c>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d015      	beq.n	80033d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff fa0e 	bl	80027cc <HAL_GetTick>
 80033b0:	0003      	movs	r3, r0
 80033b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b4:	e009      	b.n	80033ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b6:	f7ff fa09 	bl	80027cc <HAL_GetTick>
 80033ba:	0002      	movs	r2, r0
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d902      	bls.n	80033ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	f000 fb3c 	bl	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ca:	4b96      	ldr	r3, [pc, #600]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	4013      	ands	r3, r2
 80033d4:	d0ef      	beq.n	80033b6 <HAL_RCC_OscConfig+0xe6>
 80033d6:	e015      	b.n	8003404 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7ff f9f8 	bl	80027cc <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e2:	f7ff f9f3 	bl	80027cc <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b64      	cmp	r3, #100	; 0x64
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e326      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f4:	4b8b      	ldr	r3, [pc, #556]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	029b      	lsls	r3, r3, #10
 80033fc:	4013      	ands	r3, r2
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x112>
 8003400:	e000      	b.n	8003404 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003402:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2202      	movs	r2, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d100      	bne.n	8003410 <HAL_RCC_OscConfig+0x140>
 800340e:	e08b      	b.n	8003528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d005      	beq.n	8003428 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d13e      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1d0>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d13b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2204      	movs	r2, #4
 800342e:	4013      	ands	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_RCC_OscConfig+0x16c>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e302      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b79      	ldr	r3, [pc, #484]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a7b      	ldr	r2, [pc, #492]	; (8003630 <HAL_RCC_OscConfig+0x360>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	4b75      	ldr	r3, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003452:	4b74      	ldr	r3, [pc, #464]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2209      	movs	r2, #9
 8003458:	4393      	bics	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	4b71      	ldr	r3, [pc, #452]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003464:	f000 fc40 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003468:	0001      	movs	r1, r0
 800346a:	4b6e      	ldr	r3, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	220f      	movs	r2, #15
 8003472:	4013      	ands	r3, r2
 8003474:	4a6f      	ldr	r2, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x364>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	000a      	movs	r2, r1
 800347a:	40da      	lsrs	r2, r3
 800347c:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_RCC_OscConfig+0x368>)
 800347e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003480:	4b6e      	ldr	r3, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x36c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2513      	movs	r5, #19
 8003486:	197c      	adds	r4, r7, r5
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff f959 	bl	8002740 <HAL_InitTick>
 800348e:	0003      	movs	r3, r0
 8003490:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003492:	197b      	adds	r3, r7, r5
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d046      	beq.n	8003528 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800349a:	197b      	adds	r3, r7, r5
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	e2d0      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d027      	beq.n	80034f6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034a6:	4b5f      	ldr	r3, [pc, #380]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2209      	movs	r2, #9
 80034ac:	4393      	bics	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7ff f988 	bl	80027cc <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c2:	f7ff f983 	bl	80027cc <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e2b6      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d4:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2204      	movs	r2, #4
 80034da:	4013      	ands	r3, r2
 80034dc:	d0f1      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a53      	ldr	r2, [pc, #332]	; (8003630 <HAL_RCC_OscConfig+0x360>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	021a      	lsls	r2, r3, #8
 80034ee:	4b4d      	ldr	r3, [pc, #308]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	e018      	b.n	8003528 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	438a      	bics	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003502:	f7ff f963 	bl	80027cc <HAL_GetTick>
 8003506:	0003      	movs	r3, r0
 8003508:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7ff f95e 	bl	80027cc <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e291      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d1f1      	bne.n	800350c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	4013      	ands	r3, r2
 8003530:	d100      	bne.n	8003534 <HAL_RCC_OscConfig+0x264>
 8003532:	e0a1      	b.n	8003678 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d140      	bne.n	80035bc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800353a:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4013      	ands	r3, r2
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x282>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e277      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a3a      	ldr	r2, [pc, #232]	; (8003640 <HAL_RCC_OscConfig+0x370>)
 8003558:	4013      	ands	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003560:	4b30      	ldr	r3, [pc, #192]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	0a19      	lsrs	r1, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	061a      	lsls	r2, r3, #24
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	0b5b      	lsrs	r3, r3, #13
 8003580:	3301      	adds	r3, #1
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	0212      	lsls	r2, r2, #8
 8003586:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003588:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	210f      	movs	r1, #15
 8003590:	400b      	ands	r3, r1
 8003592:	4928      	ldr	r1, [pc, #160]	; (8003634 <HAL_RCC_OscConfig+0x364>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x368>)
 800359a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x36c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2513      	movs	r5, #19
 80035a2:	197c      	adds	r4, r7, r5
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff f8cb 	bl	8002740 <HAL_InitTick>
 80035aa:	0003      	movs	r3, r0
 80035ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80035ae:	197b      	adds	r3, r7, r5
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d060      	beq.n	8003678 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80035b6:	197b      	adds	r3, r7, r5
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	e242      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03f      	beq.n	8003644 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	0049      	lsls	r1, r1, #1
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7ff f8fb 	bl	80027cc <HAL_GetTick>
 80035d6:	0003      	movs	r3, r0
 80035d8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035dc:	f7ff f8f6 	bl	80027cc <HAL_GetTick>
 80035e0:	0002      	movs	r2, r0
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e229      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x370>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	0a19      	lsrs	r1, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	061a      	lsls	r2, r3, #24
 800361c:	4b01      	ldr	r3, [pc, #4]	; (8003624 <HAL_RCC_OscConfig+0x354>)
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	e029      	b.n	8003678 <HAL_RCC_OscConfig+0x3a8>
 8003624:	40021000 	.word	0x40021000
 8003628:	fffeffff 	.word	0xfffeffff
 800362c:	fffbffff 	.word	0xfffbffff
 8003630:	ffffe0ff 	.word	0xffffe0ff
 8003634:	08005284 	.word	0x08005284
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004
 8003640:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003644:	4bbd      	ldr	r3, [pc, #756]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4bbc      	ldr	r3, [pc, #752]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800364a:	49bd      	ldr	r1, [pc, #756]	; (8003940 <HAL_RCC_OscConfig+0x670>)
 800364c:	400a      	ands	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7ff f8bc 	bl	80027cc <HAL_GetTick>
 8003654:	0003      	movs	r3, r0
 8003656:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800365a:	f7ff f8b7 	bl	80027cc <HAL_GetTick>
 800365e:	0002      	movs	r2, r0
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1ea      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800366c:	4bb3      	ldr	r3, [pc, #716]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4013      	ands	r3, r2
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	4013      	ands	r3, r2
 8003680:	d036      	beq.n	80036f0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d019      	beq.n	80036be <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4bac      	ldr	r3, [pc, #688]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800368c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368e:	4bab      	ldr	r3, [pc, #684]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003690:	2101      	movs	r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7ff f899 	bl	80027cc <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a0:	f7ff f894 	bl	80027cc <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1c7      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036b2:	4ba2      	ldr	r3, [pc, #648]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b6:	2202      	movs	r2, #2
 80036b8:	4013      	ands	r3, r2
 80036ba:	d0f1      	beq.n	80036a0 <HAL_RCC_OscConfig+0x3d0>
 80036bc:	e018      	b.n	80036f0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b9f      	ldr	r3, [pc, #636]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80036c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c2:	4b9e      	ldr	r3, [pc, #632]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	438a      	bics	r2, r1
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7ff f87f 	bl	80027cc <HAL_GetTick>
 80036ce:	0003      	movs	r3, r0
 80036d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7ff f87a 	bl	80027cc <HAL_GetTick>
 80036d8:	0002      	movs	r2, r0
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1ad      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036e6:	4b95      	ldr	r3, [pc, #596]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d1f1      	bne.n	80036d4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2204      	movs	r2, #4
 80036f6:	4013      	ands	r3, r2
 80036f8:	d100      	bne.n	80036fc <HAL_RCC_OscConfig+0x42c>
 80036fa:	e0ae      	b.n	800385a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fc:	2027      	movs	r0, #39	; 0x27
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003704:	4b8d      	ldr	r3, [pc, #564]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	055b      	lsls	r3, r3, #21
 800370c:	4013      	ands	r3, r2
 800370e:	d109      	bne.n	8003724 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003710:	4b8a      	ldr	r3, [pc, #552]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003714:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	0549      	lsls	r1, r1, #21
 800371a:	430a      	orrs	r2, r1
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800371e:	183b      	adds	r3, r7, r0
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	4b87      	ldr	r3, [pc, #540]	; (8003944 <HAL_RCC_OscConfig+0x674>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4013      	ands	r3, r2
 800372e:	d11a      	bne.n	8003766 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003730:	4b84      	ldr	r3, [pc, #528]	; (8003944 <HAL_RCC_OscConfig+0x674>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b83      	ldr	r3, [pc, #524]	; (8003944 <HAL_RCC_OscConfig+0x674>)
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0049      	lsls	r1, r1, #1
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7ff f845 	bl	80027cc <HAL_GetTick>
 8003742:	0003      	movs	r3, r0
 8003744:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7ff f840 	bl	80027cc <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e173      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b7a      	ldr	r3, [pc, #488]	; (8003944 <HAL_RCC_OscConfig+0x674>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	429a      	cmp	r2, r3
 8003770:	d107      	bne.n	8003782 <HAL_RCC_OscConfig+0x4b2>
 8003772:	4b72      	ldr	r3, [pc, #456]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003776:	4b71      	ldr	r3, [pc, #452]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	0049      	lsls	r1, r1, #1
 800377c:	430a      	orrs	r2, r1
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
 8003780:	e031      	b.n	80037e6 <HAL_RCC_OscConfig+0x516>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x4d4>
 800378a:	4b6c      	ldr	r3, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800378c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800378e:	4b6b      	ldr	r3, [pc, #428]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003790:	496b      	ldr	r1, [pc, #428]	; (8003940 <HAL_RCC_OscConfig+0x670>)
 8003792:	400a      	ands	r2, r1
 8003794:	651a      	str	r2, [r3, #80]	; 0x50
 8003796:	4b69      	ldr	r3, [pc, #420]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800379c:	496a      	ldr	r1, [pc, #424]	; (8003948 <HAL_RCC_OscConfig+0x678>)
 800379e:	400a      	ands	r2, r1
 80037a0:	651a      	str	r2, [r3, #80]	; 0x50
 80037a2:	e020      	b.n	80037e6 <HAL_RCC_OscConfig+0x516>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	23a0      	movs	r3, #160	; 0xa0
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d10e      	bne.n	80037ce <HAL_RCC_OscConfig+0x4fe>
 80037b0:	4b62      	ldr	r3, [pc, #392]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	00c9      	lsls	r1, r1, #3
 80037ba:	430a      	orrs	r2, r1
 80037bc:	651a      	str	r2, [r3, #80]	; 0x50
 80037be:	4b5f      	ldr	r3, [pc, #380]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c2:	4b5e      	ldr	r3, [pc, #376]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0049      	lsls	r1, r1, #1
 80037c8:	430a      	orrs	r2, r1
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0x516>
 80037ce:	4b5b      	ldr	r3, [pc, #364]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037d2:	4b5a      	ldr	r3, [pc, #360]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037d4:	495a      	ldr	r1, [pc, #360]	; (8003940 <HAL_RCC_OscConfig+0x670>)
 80037d6:	400a      	ands	r2, r1
 80037d8:	651a      	str	r2, [r3, #80]	; 0x50
 80037da:	4b58      	ldr	r3, [pc, #352]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037de:	4b57      	ldr	r3, [pc, #348]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80037e0:	4959      	ldr	r1, [pc, #356]	; (8003948 <HAL_RCC_OscConfig+0x678>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d015      	beq.n	800381a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ee:	f7fe ffed 	bl	80027cc <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037f6:	e009      	b.n	800380c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fe ffe8 	bl	80027cc <HAL_GetTick>
 80037fc:	0002      	movs	r2, r0
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_OscConfig+0x67c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e11a      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800380c:	4b4b      	ldr	r3, [pc, #300]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800380e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4013      	ands	r3, r2
 8003816:	d0ef      	beq.n	80037f8 <HAL_RCC_OscConfig+0x528>
 8003818:	e014      	b.n	8003844 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fe ffd7 	bl	80027cc <HAL_GetTick>
 800381e:	0003      	movs	r3, r0
 8003820:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003822:	e009      	b.n	8003838 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe ffd2 	bl	80027cc <HAL_GetTick>
 8003828:	0002      	movs	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	4a47      	ldr	r2, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x67c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e104      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003838:	4b40      	ldr	r3, [pc, #256]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800383a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4013      	ands	r3, r2
 8003842:	d1ef      	bne.n	8003824 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003844:	2327      	movs	r3, #39	; 0x27
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d105      	bne.n	800385a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003852:	4b3a      	ldr	r3, [pc, #232]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003854:	493e      	ldr	r1, [pc, #248]	; (8003950 <HAL_RCC_OscConfig+0x680>)
 8003856:	400a      	ands	r2, r1
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2220      	movs	r2, #32
 8003860:	4013      	ands	r3, r2
 8003862:	d049      	beq.n	80038f8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d026      	beq.n	80038ba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800386c:	4b33      	ldr	r3, [pc, #204]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003872:	2101      	movs	r1, #1
 8003874:	430a      	orrs	r2, r1
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800387a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387c:	4b2f      	ldr	r3, [pc, #188]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 800387e:	2101      	movs	r1, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	635a      	str	r2, [r3, #52]	; 0x34
 8003884:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x684>)
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	4b32      	ldr	r3, [pc, #200]	; (8003954 <HAL_RCC_OscConfig+0x684>)
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	0189      	lsls	r1, r1, #6
 800388e:	430a      	orrs	r2, r1
 8003890:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fe ff9b 	bl	80027cc <HAL_GetTick>
 8003896:	0003      	movs	r3, r0
 8003898:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800389c:	f7fe ff96 	bl	80027cc <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0c9      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038ae:	4b23      	ldr	r3, [pc, #140]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2202      	movs	r2, #2
 80038b4:	4013      	ands	r3, r2
 80038b6:	d0f1      	beq.n	800389c <HAL_RCC_OscConfig+0x5cc>
 80038b8:	e01e      	b.n	80038f8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	438a      	bics	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <HAL_RCC_OscConfig+0x684>)
 80038c8:	6a1a      	ldr	r2, [r3, #32]
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_OscConfig+0x684>)
 80038cc:	4922      	ldr	r1, [pc, #136]	; (8003958 <HAL_RCC_OscConfig+0x688>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fe ff7b 	bl	80027cc <HAL_GetTick>
 80038d6:	0003      	movs	r3, r0
 80038d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038dc:	f7fe ff76 	bl	80027cc <HAL_GetTick>
 80038e0:	0002      	movs	r2, r0
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e0a9      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2202      	movs	r2, #2
 80038f4:	4013      	ands	r3, r2
 80038f6:	d1f1      	bne.n	80038dc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d100      	bne.n	8003902 <HAL_RCC_OscConfig+0x632>
 8003900:	e09e      	b.n	8003a40 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d100      	bne.n	800390a <HAL_RCC_OscConfig+0x63a>
 8003908:	e077      	b.n	80039fa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	2b02      	cmp	r3, #2
 8003910:	d158      	bne.n	80039c4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_OscConfig+0x66c>)
 8003918:	4910      	ldr	r1, [pc, #64]	; (800395c <HAL_RCC_OscConfig+0x68c>)
 800391a:	400a      	ands	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fe ff55 	bl	80027cc <HAL_GetTick>
 8003922:	0003      	movs	r3, r0
 8003924:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003926:	e01b      	b.n	8003960 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe ff50 	bl	80027cc <HAL_GetTick>
 800392c:	0002      	movs	r2, r0
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d914      	bls.n	8003960 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e083      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	40021000 	.word	0x40021000
 8003940:	fffffeff 	.word	0xfffffeff
 8003944:	40007000 	.word	0x40007000
 8003948:	fffffbff 	.word	0xfffffbff
 800394c:	00001388 	.word	0x00001388
 8003950:	efffffff 	.word	0xefffffff
 8003954:	40010000 	.word	0x40010000
 8003958:	ffffdfff 	.word	0xffffdfff
 800395c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003960:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	049b      	lsls	r3, r3, #18
 8003968:	4013      	ands	r3, r2
 800396a:	d1dd      	bne.n	8003928 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	431a      	orrs	r2, r3
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 8003988:	430a      	orrs	r2, r1
 800398a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	0449      	lsls	r1, r1, #17
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe ff17 	bl	80027cc <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe ff12 	bl	80027cc <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e045      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039b6:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	049b      	lsls	r3, r3, #18
 80039be:	4013      	ands	r3, r2
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x6d4>
 80039c2:	e03d      	b.n	8003a40 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 80039ca:	4922      	ldr	r1, [pc, #136]	; (8003a54 <HAL_RCC_OscConfig+0x784>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fe fefc 	bl	80027cc <HAL_GetTick>
 80039d4:	0003      	movs	r3, r0
 80039d6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fef7 	bl	80027cc <HAL_GetTick>
 80039de:	0002      	movs	r2, r0
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e02a      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	049b      	lsls	r3, r3, #18
 80039f4:	4013      	ands	r3, r2
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x70a>
 80039f8:	e022      	b.n	8003a40 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e01d      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_RCC_OscConfig+0x77c>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	025b      	lsls	r3, r3, #9
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d10f      	bne.n	8003a3c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	23f0      	movs	r3, #240	; 0xf0
 8003a20:	039b      	lsls	r3, r3, #14
 8003a22:	401a      	ands	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	23c0      	movs	r3, #192	; 0xc0
 8003a30:	041b      	lsls	r3, r3, #16
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b00a      	add	sp, #40	; 0x28
 8003a48:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	ff02ffff 	.word	0xff02ffff
 8003a54:	feffffff 	.word	0xfeffffff

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b5b0      	push	{r4, r5, r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e128      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b96      	ldr	r3, [pc, #600]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d91e      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b93      	ldr	r3, [pc, #588]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4393      	bics	r3, r2
 8003a82:	0019      	movs	r1, r3
 8003a84:	4b90      	ldr	r3, [pc, #576]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fe9e 	bl	80027cc <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a94:	e009      	b.n	8003aaa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a96:	f7fe fe99 	bl	80027cc <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	4a8a      	ldr	r2, [pc, #552]	; (8003ccc <HAL_RCC_ClockConfig+0x274>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e109      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b87      	ldr	r3, [pc, #540]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2202      	movs	r2, #2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac2:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	22f0      	movs	r2, #240	; 0xf0
 8003ac8:	4393      	bics	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b7f      	ldr	r3, [pc, #508]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0x8a>
 8003ae0:	e089      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aea:	4b79      	ldr	r3, [pc, #484]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	029b      	lsls	r3, r3, #10
 8003af2:	4013      	ands	r3, r2
 8003af4:	d120      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0e1      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d107      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b02:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	049b      	lsls	r3, r3, #18
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d114      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0d5      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	4013      	ands	r3, r2
 8003b22:	d109      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0ca      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b28:	4b69      	ldr	r3, [pc, #420]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4013      	ands	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0c2      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b38:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	4393      	bics	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4c:	f7fe fe3e 	bl	80027cc <HAL_GetTick>
 8003b50:	0003      	movs	r3, r0
 8003b52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b5c:	e009      	b.n	8003b72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5e:	f7fe fe35 	bl	80027cc <HAL_GetTick>
 8003b62:	0002      	movs	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_RCC_ClockConfig+0x274>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0a5      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b72:	4b57      	ldr	r3, [pc, #348]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	220c      	movs	r2, #12
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d1ef      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x106>
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d111      	bne.n	8003bac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8a:	f7fe fe1f 	bl	80027cc <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a4d      	ldr	r2, [pc, #308]	; (8003ccc <HAL_RCC_ClockConfig+0x274>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e08f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b9e:	4b4c      	ldr	r3, [pc, #304]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	220c      	movs	r2, #12
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d1ef      	bne.n	8003b8a <HAL_RCC_ClockConfig+0x132>
 8003baa:	e024      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d11b      	bne.n	8003bec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb4:	e009      	b.n	8003bca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb6:	f7fe fe09 	bl	80027cc <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	4a42      	ldr	r2, [pc, #264]	; (8003ccc <HAL_RCC_ClockConfig+0x274>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e079      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bca:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	220c      	movs	r2, #12
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d1ef      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x15e>
 8003bd6:	e00e      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7fe fdf8 	bl	80027cc <HAL_GetTick>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <HAL_RCC_ClockConfig+0x274>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e068      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bec:	4b38      	ldr	r3, [pc, #224]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	220c      	movs	r2, #12
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d21e      	bcs.n	8003c42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c04:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	4b2e      	ldr	r3, [pc, #184]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c16:	f7fe fdd9 	bl	80027cc <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	e009      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fe fdd4 	bl	80027cc <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	4a28      	ldr	r2, [pc, #160]	; (8003ccc <HAL_RCC_ClockConfig+0x274>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e044      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCC_ClockConfig+0x270>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d1ee      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a20      	ldr	r2, [pc, #128]	; (8003cd4 <HAL_RCC_ClockConfig+0x27c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c6a:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <HAL_RCC_ClockConfig+0x280>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00da      	lsls	r2, r3, #3
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c80:	f000 f832 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003c84:	0001      	movs	r1, r0
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_RCC_ClockConfig+0x278>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	220f      	movs	r2, #15
 8003c8e:	4013      	ands	r3, r2
 8003c90:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_RCC_ClockConfig+0x284>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	000a      	movs	r2, r1
 8003c96:	40da      	lsrs	r2, r3
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x288>)
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <HAL_RCC_ClockConfig+0x28c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	250b      	movs	r5, #11
 8003ca2:	197c      	adds	r4, r7, r5
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fe fd4b 	bl	8002740 <HAL_InitTick>
 8003caa:	0003      	movs	r3, r0
 8003cac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003cae:	197b      	adds	r3, r7, r5
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003cb6:	197b      	adds	r3, r7, r5
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	00001388 	.word	0x00001388
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	fffff8ff 	.word	0xfffff8ff
 8003cd8:	ffffc7ff 	.word	0xffffc7ff
 8003cdc:	08005284 	.word	0x08005284
 8003ce0:	20000000 	.word	0x20000000
 8003ce4:	20000004 	.word	0x20000004

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cea:	b097      	sub	sp, #92	; 0x5c
 8003cec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003cee:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d014      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfe:	d900      	bls.n	8003d02 <HAL_RCC_GetSysClockFreq+0x1a>
 8003d00:	e09d      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x156>
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x24>
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d00b      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0a:	e098      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x156>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d0c:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2210      	movs	r2, #16
 8003d12:	4013      	ands	r3, r2
 8003d14:	d002      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003d16:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d18:	653b      	str	r3, [r7, #80]	; 0x50
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003d1a:	e09e      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
        sysclockfreq =  HSI_VALUE;
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1e:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8003d20:	e09b      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d22:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d24:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8003d26:	e098      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2a:	0c9a      	lsrs	r2, r3, #18
 8003d2c:	230f      	movs	r3, #15
 8003d2e:	401a      	ands	r2, r3
 8003d30:	4b50      	ldr	r3, [pc, #320]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003d32:	5c9b      	ldrb	r3, [r3, r2]
 8003d34:	64bb      	str	r3, [r7, #72]	; 0x48
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d38:	0d9a      	lsrs	r2, r3, #22
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	3301      	adds	r3, #1
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d42:	4b48      	ldr	r3, [pc, #288]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d03a      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d52:	2300      	movs	r3, #0
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	0ed4      	lsrs	r4, r2, #27
 8003d5c:	015e      	lsls	r6, r3, #5
 8003d5e:	4326      	orrs	r6, r4
 8003d60:	0155      	lsls	r5, r2, #5
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003d66:	1aed      	subs	r5, r5, r3
 8003d68:	41a6      	sbcs	r6, r4
 8003d6a:	002a      	movs	r2, r5
 8003d6c:	0033      	movs	r3, r6
 8003d6e:	0e94      	lsrs	r4, r2, #26
 8003d70:	0199      	lsls	r1, r3, #6
 8003d72:	4321      	orrs	r1, r4
 8003d74:	0190      	lsls	r0, r2, #6
 8003d76:	1a80      	subs	r0, r0, r2
 8003d78:	4199      	sbcs	r1, r3
 8003d7a:	0f43      	lsrs	r3, r0, #29
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d82:	431a      	orrs	r2, r3
 8003d84:	637a      	str	r2, [r7, #52]	; 0x34
 8003d86:	00c3      	lsls	r3, r0, #3
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d8e:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8003d90:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8003d92:	1940      	adds	r0, r0, r5
 8003d94:	4171      	adcs	r1, r6
 8003d96:	0d43      	lsrs	r3, r0, #21
 8003d98:	02ca      	lsls	r2, r1, #11
 8003d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da2:	02c3      	lsls	r3, r0, #11
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f7fc fa33 	bl	8000220 <__aeabi_uldivmod>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	000b      	movs	r3, r1
 8003dbe:	0013      	movs	r3, r2
 8003dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8003dc2:	e039      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d01a      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	69b8      	ldr	r0, [r7, #24]
 8003ddc:	69f9      	ldr	r1, [r7, #28]
 8003dde:	f7fc fa3f 	bl	8000260 <__aeabi_lmul>
 8003de2:	0002      	movs	r2, r0
 8003de4:	000b      	movs	r3, r1
 8003de6:	0010      	movs	r0, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f7fc fa13 	bl	8000220 <__aeabi_uldivmod>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	000b      	movs	r3, r1
 8003dfe:	0013      	movs	r3, r2
 8003e00:	657b      	str	r3, [r7, #84]	; 0x54
 8003e02:	e019      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x150>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	68b8      	ldr	r0, [r7, #8]
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f7fc fa24 	bl	8000260 <__aeabi_lmul>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	000b      	movs	r3, r1
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	607b      	str	r3, [r7, #4]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f7fc f9f8 	bl	8000220 <__aeabi_uldivmod>
 8003e30:	0002      	movs	r2, r0
 8003e32:	000b      	movs	r3, r1
 8003e34:	0013      	movs	r3, r2
 8003e36:	657b      	str	r3, [r7, #84]	; 0x54
        }
      }
      sysclockfreq = pllvco;
 8003e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3a:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8003e3c:	e00d      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x17c>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0b5b      	lsrs	r3, r3, #13
 8003e44:	2207      	movs	r2, #7
 8003e46:	4013      	ands	r3, r2
 8003e48:	643b      	str	r3, [r7, #64]	; 0x40
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	2280      	movs	r2, #128	; 0x80
 8003e50:	0212      	lsls	r2, r2, #8
 8003e52:	409a      	lsls	r2, r3
 8003e54:	0013      	movs	r3, r2
 8003e56:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8003e58:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b017      	add	sp, #92	; 0x5c
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	40021000 	.word	0x40021000
 8003e68:	003d0900 	.word	0x003d0900
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	01e84800 	.word	0x01e84800
 8003e74:	0800529c 	.word	0x0800529c

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000000 	.word	0x20000000

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e90:	f7ff fff2 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e94:	0001      	movs	r1, r0
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	40d9      	lsrs	r1, r3
 8003ea6:	000b      	movs	r3, r1
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08005294 	.word	0x08005294

08003eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ebc:	f7ff ffdc 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec0:	0001      	movs	r1, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	0adb      	lsrs	r3, r3, #11
 8003ec8:	2207      	movs	r2, #7
 8003eca:	4013      	ands	r3, r2
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ece:	5cd3      	ldrb	r3, [r2, r3]
 8003ed0:	40d9      	lsrs	r1, r3
 8003ed2:	000b      	movs	r3, r1
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08005294 	.word	0x08005294

08003ee4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003eec:	2317      	movs	r3, #23
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	4013      	ands	r3, r2
 8003efc:	d106      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	4013      	ands	r3, r2
 8003f08:	d100      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003f0a:	e0d9      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0c:	4b9c      	ldr	r3, [pc, #624]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	055b      	lsls	r3, r3, #21
 8003f14:	4013      	ands	r3, r2
 8003f16:	d10a      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b99      	ldr	r3, [pc, #612]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f1c:	4b98      	ldr	r3, [pc, #608]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f1e:	2180      	movs	r1, #128	; 0x80
 8003f20:	0549      	lsls	r1, r1, #21
 8003f22:	430a      	orrs	r2, r1
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003f26:	2317      	movs	r3, #23
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b95      	ldr	r3, [pc, #596]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	d11a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b92      	ldr	r3, [pc, #584]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b91      	ldr	r3, [pc, #580]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	0049      	lsls	r1, r1, #1
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f48:	f7fe fc40 	bl	80027cc <HAL_GetTick>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	e008      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f52:	f7fe fc3b 	bl	80027cc <HAL_GetTick>
 8003f56:	0002      	movs	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b64      	cmp	r3, #100	; 0x64
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e108      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	4b87      	ldr	r3, [pc, #540]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f70:	4b83      	ldr	r3, [pc, #524]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	23c0      	movs	r3, #192	; 0xc0
 8003f76:	039b      	lsls	r3, r3, #14
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	23c0      	movs	r3, #192	; 0xc0
 8003f82:	039b      	lsls	r3, r3, #14
 8003f84:	4013      	ands	r3, r2
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	23c0      	movs	r3, #192	; 0xc0
 8003f92:	039b      	lsls	r3, r3, #14
 8003f94:	4013      	ands	r3, r2
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	23c0      	movs	r3, #192	; 0xc0
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	23c0      	movs	r3, #192	; 0xc0
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10a      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003fae:	4b74      	ldr	r3, [pc, #464]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	029b      	lsls	r3, r3, #10
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	029b      	lsls	r3, r3, #10
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d8      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003fc4:	4b6e      	ldr	r3, [pc, #440]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fc8:	23c0      	movs	r3, #192	; 0xc0
 8003fca:	029b      	lsls	r3, r3, #10
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d049      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	23c0      	movs	r3, #192	; 0xc0
 8003fdc:	029b      	lsls	r3, r3, #10
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d004      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2220      	movs	r2, #32
 8003fec:	4013      	ands	r3, r2
 8003fee:	d10d      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	23c0      	movs	r3, #192	; 0xc0
 8003ff6:	029b      	lsls	r3, r3, #10
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d034      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	4013      	ands	r3, r2
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800400c:	4b5c      	ldr	r3, [pc, #368]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	4a5d      	ldr	r2, [pc, #372]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004016:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800401a:	4b59      	ldr	r3, [pc, #356]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	0309      	lsls	r1, r1, #12
 8004020:	430a      	orrs	r2, r1
 8004022:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004024:	4b56      	ldr	r3, [pc, #344]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004028:	4b55      	ldr	r3, [pc, #340]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800402a:	4958      	ldr	r1, [pc, #352]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800402c:	400a      	ands	r2, r1
 800402e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004030:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	2380      	movs	r3, #128	; 0x80
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4013      	ands	r3, r2
 800403e:	d014      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe fbc4 	bl	80027cc <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004048:	e009      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe fbbf 	bl	80027cc <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	4a4e      	ldr	r2, [pc, #312]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e08b      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405e:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4013      	ands	r3, r2
 8004068:	d0ef      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	23c0      	movs	r3, #192	; 0xc0
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	401a      	ands	r2, r3
 8004074:	23c0      	movs	r3, #192	; 0xc0
 8004076:	029b      	lsls	r3, r3, #10
 8004078:	429a      	cmp	r2, r3
 800407a:	d10c      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a44      	ldr	r2, [pc, #272]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	23c0      	movs	r3, #192	; 0xc0
 800408c:	039b      	lsls	r3, r3, #14
 800408e:	401a      	ands	r2, r3
 8004090:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004098:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	23c0      	movs	r3, #192	; 0xc0
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	401a      	ands	r2, r3
 80040a4:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040a6:	430a      	orrs	r2, r1
 80040a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040aa:	2317      	movs	r3, #23
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b8:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040ba:	4937      	ldr	r1, [pc, #220]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80040bc:	400a      	ands	r2, r1
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	2203      	movs	r2, #3
 80040d0:	4393      	bics	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4b29      	ldr	r3, [pc, #164]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040da:	430a      	orrs	r2, r1
 80040dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2202      	movs	r2, #2
 80040e4:	4013      	ands	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ec:	220c      	movs	r2, #12
 80040ee:	4393      	bics	r3, r2
 80040f0:	0019      	movs	r1, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040f8:	430a      	orrs	r2, r1
 80040fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2204      	movs	r2, #4
 8004102:	4013      	ands	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800410c:	4013      	ands	r3, r2
 800410e:	0019      	movs	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004116:	430a      	orrs	r2, r1
 8004118:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2208      	movs	r2, #8
 8004120:	4013      	ands	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800412a:	4013      	ands	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004134:	430a      	orrs	r2, r1
 8004136:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2240      	movs	r2, #64	; 0x40
 800413e:	4013      	ands	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004142:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004152:	430a      	orrs	r2, r1
 8004154:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	4013      	ands	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004166:	4013      	ands	r3, r2
 8004168:	0019      	movs	r1, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004170:	430a      	orrs	r2, r1
 8004172:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b006      	add	sp, #24
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	40021000 	.word	0x40021000
 8004184:	40007000 	.word	0x40007000
 8004188:	fffcffff 	.word	0xfffcffff
 800418c:	fff7ffff 	.word	0xfff7ffff
 8004190:	00001388 	.word	0x00001388
 8004194:	ffcfffff 	.word	0xffcfffff
 8004198:	efffffff 	.word	0xefffffff
 800419c:	fffff3ff 	.word	0xfffff3ff
 80041a0:	ffffcfff 	.word	0xffffcfff
 80041a4:	fbffffff 	.word	0xfbffffff
 80041a8:	fff3ffff 	.word	0xfff3ffff

080041ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e032      	b.n	8004224 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2239      	movs	r2, #57	; 0x39
 80041c2:	5c9b      	ldrb	r3, [r3, r2]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2238      	movs	r2, #56	; 0x38
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7fe f9af 	bl	8002538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2239      	movs	r2, #57	; 0x39
 80041de:	2102      	movs	r1, #2
 80041e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	0019      	movs	r1, r3
 80041ec:	0010      	movs	r0, r2
 80041ee:	f000 f92b 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	223e      	movs	r2, #62	; 0x3e
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	223a      	movs	r2, #58	; 0x3a
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	223b      	movs	r2, #59	; 0x3b
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	223c      	movs	r2, #60	; 0x3c
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	223d      	movs	r2, #61	; 0x3d
 8004216:	2101      	movs	r1, #1
 8004218:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2239      	movs	r2, #57	; 0x39
 800421e:	2101      	movs	r1, #1
 8004220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2239      	movs	r2, #57	; 0x39
 8004238:	5c9b      	ldrb	r3, [r3, r2]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d001      	beq.n	8004244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e02e      	b.n	80042a2 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2239      	movs	r2, #57	; 0x39
 8004248:	2102      	movs	r1, #2
 800424a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	05db      	lsls	r3, r3, #23
 8004254:	429a      	cmp	r2, r3
 8004256:	d009      	beq.n	800426c <HAL_TIM_Base_Start+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_TIM_Base_Start+0x80>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_Base_Start+0x40>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <HAL_TIM_Base_Start+0x84>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d111      	bne.n	8004290 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2207      	movs	r2, #7
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b06      	cmp	r3, #6
 800427c:	d010      	beq.n	80042a0 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	e007      	b.n	80042a0 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b004      	add	sp, #16
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	40010800 	.word	0x40010800
 80042b0:	40011400 	.word	0x40011400

080042b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2238      	movs	r2, #56	; 0x38
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x18>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b7      	b.n	800443c <HAL_TIM_ConfigClockSource+0x188>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2238      	movs	r2, #56	; 0x38
 80042d0:	2101      	movs	r1, #1
 80042d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2239      	movs	r2, #57	; 0x39
 80042d8:	2102      	movs	r1, #2
 80042da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2277      	movs	r2, #119	; 0x77
 80042e8:	4393      	bics	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a55      	ldr	r2, [pc, #340]	; (8004444 <HAL_TIM_ConfigClockSource+0x190>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	0192      	lsls	r2, r2, #6
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xd6>
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	0192      	lsls	r2, r2, #6
 800430c:	4293      	cmp	r3, r2
 800430e:	d900      	bls.n	8004312 <HAL_TIM_ConfigClockSource+0x5e>
 8004310:	e088      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	0152      	lsls	r2, r2, #5
 8004316:	4293      	cmp	r3, r2
 8004318:	d100      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x68>
 800431a:	e085      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	0152      	lsls	r2, r2, #5
 8004320:	4293      	cmp	r3, r2
 8004322:	d900      	bls.n	8004326 <HAL_TIM_ConfigClockSource+0x72>
 8004324:	e07e      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004326:	2b70      	cmp	r3, #112	; 0x70
 8004328:	d018      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xa8>
 800432a:	d900      	bls.n	800432e <HAL_TIM_ConfigClockSource+0x7a>
 800432c:	e07a      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 800432e:	2b60      	cmp	r3, #96	; 0x60
 8004330:	d04f      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x11e>
 8004332:	d900      	bls.n	8004336 <HAL_TIM_ConfigClockSource+0x82>
 8004334:	e076      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004336:	2b50      	cmp	r3, #80	; 0x50
 8004338:	d03b      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xfe>
 800433a:	d900      	bls.n	800433e <HAL_TIM_ConfigClockSource+0x8a>
 800433c:	e072      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d057      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x13e>
 8004342:	d900      	bls.n	8004346 <HAL_TIM_ConfigClockSource+0x92>
 8004344:	e06e      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d063      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
 800434a:	d86b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d060      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
 8004350:	d868      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d05d      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d05b      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800435a:	e063      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f000 f93a 	bl	80045e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2277      	movs	r2, #119	; 0x77
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e04f      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 f923 	bl	80045e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	01c9      	lsls	r1, r1, #7
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e03b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	001a      	movs	r2, r3
 80043c0:	f000 f896 	bl	80044f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2150      	movs	r1, #80	; 0x50
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 f8f0 	bl	80045b0 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e02b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	001a      	movs	r2, r3
 80043e0:	f000 f8b4 	bl	800454c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2160      	movs	r1, #96	; 0x60
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 f8e0 	bl	80045b0 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e01b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	001a      	movs	r2, r3
 8004400:	f000 f876 	bl	80044f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f8d0 	bl	80045b0 <TIM_ITRx_SetConfig>
      break;
 8004410:	e00b      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f000 f8c7 	bl	80045b0 <TIM_ITRx_SetConfig>
        break;
 8004422:	e002      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	e000      	b.n	800442a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004428:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2239      	movs	r2, #57	; 0x39
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2238      	movs	r2, #56	; 0x38
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b004      	add	sp, #16
 8004442:	bd80      	pop	{r7, pc}
 8004444:	ffff00ff 	.word	0xffff00ff

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	05db      	lsls	r3, r3, #23
 800445e:	429a      	cmp	r2, r3
 8004460:	d007      	beq.n	8004472 <TIM_Base_SetConfig+0x2a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <TIM_Base_SetConfig+0x9c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_Base_SetConfig+0x2a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <TIM_Base_SetConfig+0xa0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d108      	bne.n	8004484 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2270      	movs	r2, #112	; 0x70
 8004476:	4393      	bics	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	05db      	lsls	r3, r3, #23
 800448a:	429a      	cmp	r2, r3
 800448c:	d007      	beq.n	800449e <TIM_Base_SetConfig+0x56>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <TIM_Base_SetConfig+0x9c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0x56>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <TIM_Base_SetConfig+0xa0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a12      	ldr	r2, [pc, #72]	; (80044ec <TIM_Base_SetConfig+0xa4>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	4393      	bics	r3, r2
 80044b6:	001a      	movs	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	615a      	str	r2, [r3, #20]
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b004      	add	sp, #16
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40010800 	.word	0x40010800
 80044e8:	40011400 	.word	0x40011400
 80044ec:	fffffcff 	.word	0xfffffcff

080044f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	2201      	movs	r2, #1
 8004508:	4393      	bics	r3, r2
 800450a:	001a      	movs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	22f0      	movs	r2, #240	; 0xf0
 800451a:	4393      	bics	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	220a      	movs	r2, #10
 800452c:	4393      	bics	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b006      	add	sp, #24
 800454a:	bd80      	pop	{r7, pc}

0800454c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2210      	movs	r2, #16
 800455e:	4393      	bics	r3, r2
 8004560:	001a      	movs	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <TIM_TI2_ConfigInputStage+0x60>)
 8004576:	4013      	ands	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	22a0      	movs	r2, #160	; 0xa0
 8004588:	4393      	bics	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b006      	add	sp, #24
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	ffff0fff 	.word	0xffff0fff

080045b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2270      	movs	r2, #112	; 0x70
 80045c4:	4393      	bics	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	2207      	movs	r2, #7
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <TIM_ETR_SetConfig+0x3c>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	431a      	orrs	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	b006      	add	sp, #24
 800461e:	bd80      	pop	{r7, pc}
 8004620:	ffff00ff 	.word	0xffff00ff

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2238      	movs	r2, #56	; 0x38
 8004632:	5c9b      	ldrb	r3, [r3, r2]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e042      	b.n	80046c2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2238      	movs	r2, #56	; 0x38
 8004640:	2101      	movs	r1, #1
 8004642:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2239      	movs	r2, #57	; 0x39
 8004648:	2102      	movs	r1, #2
 800464a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2270      	movs	r2, #112	; 0x70
 8004660:	4393      	bics	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	05db      	lsls	r3, r3, #23
 800467e:	429a      	cmp	r2, r3
 8004680:	d009      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a11      	ldr	r2, [pc, #68]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0f      	ldr	r2, [pc, #60]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d10c      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2280      	movs	r2, #128	; 0x80
 800469a:	4393      	bics	r3, r2
 800469c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2239      	movs	r2, #57	; 0x39
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2238      	movs	r2, #56	; 0x38
 80046bc:	2100      	movs	r1, #0
 80046be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b004      	add	sp, #16
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	40010800 	.word	0x40010800
 80046d0:	40011400 	.word	0x40011400

080046d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e044      	b.n	8004770 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2274      	movs	r2, #116	; 0x74
 80046f2:	2100      	movs	r1, #0
 80046f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7fd ff33 	bl	8002564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2224      	movs	r2, #36	; 0x24
 8004702:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	438a      	bics	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f830 	bl	800477c <UART_SetConfig>
 800471c:	0003      	movs	r3, r0
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e024      	b.n	8004770 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 fac3 	bl	8004cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	490d      	ldr	r1, [pc, #52]	; (8004778 <HAL_UART_Init+0xa4>)
 8004742:	400a      	ands	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	212a      	movs	r1, #42	; 0x2a
 8004752:	438a      	bics	r2, r1
 8004754:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	430a      	orrs	r2, r1
 8004764:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	0018      	movs	r0, r3
 800476a:	f000 fb5b 	bl	8004e24 <UART_CheckIdleState>
 800476e:	0003      	movs	r3, r0
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}
 8004778:	ffffb7ff 	.word	0xffffb7ff

0800477c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af00      	add	r7, sp, #0
 8004782:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004784:	231a      	movs	r3, #26
 8004786:	2218      	movs	r2, #24
 8004788:	4694      	mov	ip, r2
 800478a:	44bc      	add	ip, r7
 800478c:	4463      	add	r3, ip
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	431a      	orrs	r2, r3
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4ac1      	ldr	r2, [pc, #772]	; (8004ab8 <UART_SetConfig+0x33c>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	0019      	movs	r1, r3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4abd      	ldr	r2, [pc, #756]	; (8004abc <UART_SetConfig+0x340>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4ab7      	ldr	r2, [pc, #732]	; (8004ac0 <UART_SetConfig+0x344>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ee:	4313      	orrs	r3, r2
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4ab2      	ldr	r2, [pc, #712]	; (8004ac4 <UART_SetConfig+0x348>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4aae      	ldr	r2, [pc, #696]	; (8004ac8 <UART_SetConfig+0x34c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d136      	bne.n	8004880 <UART_SetConfig+0x104>
 8004812:	4bae      	ldr	r3, [pc, #696]	; (8004acc <UART_SetConfig+0x350>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	2203      	movs	r2, #3
 8004818:	4013      	ands	r3, r2
 800481a:	2b03      	cmp	r3, #3
 800481c:	d020      	beq.n	8004860 <UART_SetConfig+0xe4>
 800481e:	d827      	bhi.n	8004870 <UART_SetConfig+0xf4>
 8004820:	2b02      	cmp	r3, #2
 8004822:	d00d      	beq.n	8004840 <UART_SetConfig+0xc4>
 8004824:	d824      	bhi.n	8004870 <UART_SetConfig+0xf4>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0xb4>
 800482a:	2b01      	cmp	r3, #1
 800482c:	d010      	beq.n	8004850 <UART_SetConfig+0xd4>
 800482e:	e01f      	b.n	8004870 <UART_SetConfig+0xf4>
 8004830:	231b      	movs	r3, #27
 8004832:	2218      	movs	r2, #24
 8004834:	4694      	mov	ip, r2
 8004836:	44bc      	add	ip, r7
 8004838:	4463      	add	r3, ip
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e0ab      	b.n	8004998 <UART_SetConfig+0x21c>
 8004840:	231b      	movs	r3, #27
 8004842:	2218      	movs	r2, #24
 8004844:	4694      	mov	ip, r2
 8004846:	44bc      	add	ip, r7
 8004848:	4463      	add	r3, ip
 800484a:	2202      	movs	r2, #2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e0a3      	b.n	8004998 <UART_SetConfig+0x21c>
 8004850:	231b      	movs	r3, #27
 8004852:	2218      	movs	r2, #24
 8004854:	4694      	mov	ip, r2
 8004856:	44bc      	add	ip, r7
 8004858:	4463      	add	r3, ip
 800485a:	2204      	movs	r2, #4
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e09b      	b.n	8004998 <UART_SetConfig+0x21c>
 8004860:	231b      	movs	r3, #27
 8004862:	2218      	movs	r2, #24
 8004864:	4694      	mov	ip, r2
 8004866:	44bc      	add	ip, r7
 8004868:	4463      	add	r3, ip
 800486a:	2208      	movs	r2, #8
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e093      	b.n	8004998 <UART_SetConfig+0x21c>
 8004870:	231b      	movs	r3, #27
 8004872:	2218      	movs	r2, #24
 8004874:	4694      	mov	ip, r2
 8004876:	44bc      	add	ip, r7
 8004878:	4463      	add	r3, ip
 800487a:	2210      	movs	r2, #16
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e08b      	b.n	8004998 <UART_SetConfig+0x21c>
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a92      	ldr	r2, [pc, #584]	; (8004ad0 <UART_SetConfig+0x354>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d136      	bne.n	80048f8 <UART_SetConfig+0x17c>
 800488a:	4b90      	ldr	r3, [pc, #576]	; (8004acc <UART_SetConfig+0x350>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	220c      	movs	r2, #12
 8004890:	4013      	ands	r3, r2
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d020      	beq.n	80048d8 <UART_SetConfig+0x15c>
 8004896:	d827      	bhi.n	80048e8 <UART_SetConfig+0x16c>
 8004898:	2b08      	cmp	r3, #8
 800489a:	d00d      	beq.n	80048b8 <UART_SetConfig+0x13c>
 800489c:	d824      	bhi.n	80048e8 <UART_SetConfig+0x16c>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <UART_SetConfig+0x12c>
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d010      	beq.n	80048c8 <UART_SetConfig+0x14c>
 80048a6:	e01f      	b.n	80048e8 <UART_SetConfig+0x16c>
 80048a8:	231b      	movs	r3, #27
 80048aa:	2218      	movs	r2, #24
 80048ac:	4694      	mov	ip, r2
 80048ae:	44bc      	add	ip, r7
 80048b0:	4463      	add	r3, ip
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e06f      	b.n	8004998 <UART_SetConfig+0x21c>
 80048b8:	231b      	movs	r3, #27
 80048ba:	2218      	movs	r2, #24
 80048bc:	4694      	mov	ip, r2
 80048be:	44bc      	add	ip, r7
 80048c0:	4463      	add	r3, ip
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e067      	b.n	8004998 <UART_SetConfig+0x21c>
 80048c8:	231b      	movs	r3, #27
 80048ca:	2218      	movs	r2, #24
 80048cc:	4694      	mov	ip, r2
 80048ce:	44bc      	add	ip, r7
 80048d0:	4463      	add	r3, ip
 80048d2:	2204      	movs	r2, #4
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e05f      	b.n	8004998 <UART_SetConfig+0x21c>
 80048d8:	231b      	movs	r3, #27
 80048da:	2218      	movs	r2, #24
 80048dc:	4694      	mov	ip, r2
 80048de:	44bc      	add	ip, r7
 80048e0:	4463      	add	r3, ip
 80048e2:	2208      	movs	r2, #8
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e057      	b.n	8004998 <UART_SetConfig+0x21c>
 80048e8:	231b      	movs	r3, #27
 80048ea:	2218      	movs	r2, #24
 80048ec:	4694      	mov	ip, r2
 80048ee:	44bc      	add	ip, r7
 80048f0:	4463      	add	r3, ip
 80048f2:	2210      	movs	r2, #16
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e04f      	b.n	8004998 <UART_SetConfig+0x21c>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a70      	ldr	r2, [pc, #448]	; (8004ac0 <UART_SetConfig+0x344>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d143      	bne.n	800498a <UART_SetConfig+0x20e>
 8004902:	4b72      	ldr	r3, [pc, #456]	; (8004acc <UART_SetConfig+0x350>)
 8004904:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004906:	23c0      	movs	r3, #192	; 0xc0
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4013      	ands	r3, r2
 800490c:	22c0      	movs	r2, #192	; 0xc0
 800490e:	0112      	lsls	r2, r2, #4
 8004910:	4293      	cmp	r3, r2
 8004912:	d02a      	beq.n	800496a <UART_SetConfig+0x1ee>
 8004914:	22c0      	movs	r2, #192	; 0xc0
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	4293      	cmp	r3, r2
 800491a:	d82e      	bhi.n	800497a <UART_SetConfig+0x1fe>
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	0112      	lsls	r2, r2, #4
 8004920:	4293      	cmp	r3, r2
 8004922:	d012      	beq.n	800494a <UART_SetConfig+0x1ce>
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	4293      	cmp	r3, r2
 800492a:	d826      	bhi.n	800497a <UART_SetConfig+0x1fe>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <UART_SetConfig+0x1be>
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	00d2      	lsls	r2, r2, #3
 8004934:	4293      	cmp	r3, r2
 8004936:	d010      	beq.n	800495a <UART_SetConfig+0x1de>
 8004938:	e01f      	b.n	800497a <UART_SetConfig+0x1fe>
 800493a:	231b      	movs	r3, #27
 800493c:	2218      	movs	r2, #24
 800493e:	4694      	mov	ip, r2
 8004940:	44bc      	add	ip, r7
 8004942:	4463      	add	r3, ip
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e026      	b.n	8004998 <UART_SetConfig+0x21c>
 800494a:	231b      	movs	r3, #27
 800494c:	2218      	movs	r2, #24
 800494e:	4694      	mov	ip, r2
 8004950:	44bc      	add	ip, r7
 8004952:	4463      	add	r3, ip
 8004954:	2202      	movs	r2, #2
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e01e      	b.n	8004998 <UART_SetConfig+0x21c>
 800495a:	231b      	movs	r3, #27
 800495c:	2218      	movs	r2, #24
 800495e:	4694      	mov	ip, r2
 8004960:	44bc      	add	ip, r7
 8004962:	4463      	add	r3, ip
 8004964:	2204      	movs	r2, #4
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e016      	b.n	8004998 <UART_SetConfig+0x21c>
 800496a:	231b      	movs	r3, #27
 800496c:	2218      	movs	r2, #24
 800496e:	4694      	mov	ip, r2
 8004970:	44bc      	add	ip, r7
 8004972:	4463      	add	r3, ip
 8004974:	2208      	movs	r2, #8
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e00e      	b.n	8004998 <UART_SetConfig+0x21c>
 800497a:	231b      	movs	r3, #27
 800497c:	2218      	movs	r2, #24
 800497e:	4694      	mov	ip, r2
 8004980:	44bc      	add	ip, r7
 8004982:	4463      	add	r3, ip
 8004984:	2210      	movs	r2, #16
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e006      	b.n	8004998 <UART_SetConfig+0x21c>
 800498a:	231b      	movs	r3, #27
 800498c:	2218      	movs	r2, #24
 800498e:	4694      	mov	ip, r2
 8004990:	44bc      	add	ip, r7
 8004992:	4463      	add	r3, ip
 8004994:	2210      	movs	r2, #16
 8004996:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a48      	ldr	r2, [pc, #288]	; (8004ac0 <UART_SetConfig+0x344>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d000      	beq.n	80049a4 <UART_SetConfig+0x228>
 80049a2:	e09b      	b.n	8004adc <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049a4:	231b      	movs	r3, #27
 80049a6:	2218      	movs	r2, #24
 80049a8:	4694      	mov	ip, r2
 80049aa:	44bc      	add	ip, r7
 80049ac:	4463      	add	r3, ip
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d01d      	beq.n	80049f0 <UART_SetConfig+0x274>
 80049b4:	dc20      	bgt.n	80049f8 <UART_SetConfig+0x27c>
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d015      	beq.n	80049e6 <UART_SetConfig+0x26a>
 80049ba:	dc1d      	bgt.n	80049f8 <UART_SetConfig+0x27c>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <UART_SetConfig+0x24a>
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d005      	beq.n	80049d0 <UART_SetConfig+0x254>
 80049c4:	e018      	b.n	80049f8 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c6:	f7ff fa61 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 80049ca:	0003      	movs	r3, r0
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ce:	e01d      	b.n	8004a0c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d0:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <UART_SetConfig+0x350>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2210      	movs	r2, #16
 80049d6:	4013      	ands	r3, r2
 80049d8:	d002      	beq.n	80049e0 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049da:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <UART_SetConfig+0x358>)
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049de:	e015      	b.n	8004a0c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 80049e0:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <UART_SetConfig+0x35c>)
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e4:	e012      	b.n	8004a0c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7ff f97f 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 80049ea:	0003      	movs	r3, r0
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ee:	e00d      	b.n	8004a0c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049f6:	e009      	b.n	8004a0c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80049fc:	231a      	movs	r3, #26
 80049fe:	2218      	movs	r2, #24
 8004a00:	4694      	mov	ip, r2
 8004a02:	44bc      	add	ip, r7
 8004a04:	4463      	add	r3, ip
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
        break;
 8004a0a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d100      	bne.n	8004a14 <UART_SetConfig+0x298>
 8004a12:	e139      	b.n	8004c88 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	0013      	movs	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d305      	bcc.n	8004a30 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d907      	bls.n	8004a40 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004a30:	231a      	movs	r3, #26
 8004a32:	2218      	movs	r2, #24
 8004a34:	4694      	mov	ip, r2
 8004a36:	44bc      	add	ip, r7
 8004a38:	4463      	add	r3, ip
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e123      	b.n	8004c88 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	6939      	ldr	r1, [r7, #16]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	000b      	movs	r3, r1
 8004a4e:	0e1b      	lsrs	r3, r3, #24
 8004a50:	0010      	movs	r0, r2
 8004a52:	0205      	lsls	r5, r0, #8
 8004a54:	431d      	orrs	r5, r3
 8004a56:	000b      	movs	r3, r1
 8004a58:	021c      	lsls	r4, r3, #8
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68b8      	ldr	r0, [r7, #8]
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	1900      	adds	r0, r0, r4
 8004a6c:	4169      	adcs	r1, r5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f7fb fbd0 	bl	8000220 <__aeabi_uldivmod>
 8004a80:	0002      	movs	r2, r0
 8004a82:	000b      	movs	r3, r1
 8004a84:	0013      	movs	r3, r2
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8a:	23c0      	movs	r3, #192	; 0xc0
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d309      	bcc.n	8004aa6 <UART_SetConfig+0x32a>
 8004a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	035b      	lsls	r3, r3, #13
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d204      	bcs.n	8004aa6 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	e0f0      	b.n	8004c88 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004aa6:	231a      	movs	r3, #26
 8004aa8:	2218      	movs	r2, #24
 8004aaa:	4694      	mov	ip, r2
 8004aac:	44bc      	add	ip, r7
 8004aae:	4463      	add	r3, ip
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e0e8      	b.n	8004c88 <UART_SetConfig+0x50c>
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	efff69f3 	.word	0xefff69f3
 8004abc:	ffffcfff 	.word	0xffffcfff
 8004ac0:	40004800 	.word	0x40004800
 8004ac4:	fffff4ff 	.word	0xfffff4ff
 8004ac8:	40013800 	.word	0x40013800
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40004400 	.word	0x40004400
 8004ad4:	003d0900 	.word	0x003d0900
 8004ad8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d000      	beq.n	8004aea <UART_SetConfig+0x36e>
 8004ae8:	e074      	b.n	8004bd4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004aea:	231b      	movs	r3, #27
 8004aec:	2218      	movs	r2, #24
 8004aee:	4694      	mov	ip, r2
 8004af0:	44bc      	add	ip, r7
 8004af2:	4463      	add	r3, ip
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d822      	bhi.n	8004b40 <UART_SetConfig+0x3c4>
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	4b6a      	ldr	r3, [pc, #424]	; (8004ca8 <UART_SetConfig+0x52c>)
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b04:	f7ff f9c2 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b0c:	e022      	b.n	8004b54 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b0e:	f7ff f9d3 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 8004b12:	0003      	movs	r3, r0
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b16:	e01d      	b.n	8004b54 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b64      	ldr	r3, [pc, #400]	; (8004cac <UART_SetConfig+0x530>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d002      	beq.n	8004b28 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b22:	4b63      	ldr	r3, [pc, #396]	; (8004cb0 <UART_SetConfig+0x534>)
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b26:	e015      	b.n	8004b54 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b62      	ldr	r3, [pc, #392]	; (8004cb4 <UART_SetConfig+0x538>)
 8004b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b2c:	e012      	b.n	8004b54 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7ff f8db 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8004b32:	0003      	movs	r3, r0
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b36:	e00d      	b.n	8004b54 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b3e:	e009      	b.n	8004b54 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b44:	231a      	movs	r3, #26
 8004b46:	2218      	movs	r2, #24
 8004b48:	4694      	mov	ip, r2
 8004b4a:	44bc      	add	ip, r7
 8004b4c:	4463      	add	r3, ip
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
        break;
 8004b52:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d100      	bne.n	8004b5c <UART_SetConfig+0x3e0>
 8004b5a:	e095      	b.n	8004c88 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	005a      	lsls	r2, r3, #1
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	18d2      	adds	r2, r2, r3
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	0010      	movs	r0, r2
 8004b70:	f7fb faca 	bl	8000108 <__udivsi3>
 8004b74:	0003      	movs	r3, r0
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	2b0f      	cmp	r3, #15
 8004b7e:	d921      	bls.n	8004bc4 <UART_SetConfig+0x448>
 8004b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	025b      	lsls	r3, r3, #9
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d21c      	bcs.n	8004bc4 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	200e      	movs	r0, #14
 8004b90:	2418      	movs	r4, #24
 8004b92:	193b      	adds	r3, r7, r4
 8004b94:	181b      	adds	r3, r3, r0
 8004b96:	210f      	movs	r1, #15
 8004b98:	438a      	bics	r2, r1
 8004b9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2207      	movs	r2, #7
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	b299      	uxth	r1, r3
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	181b      	adds	r3, r3, r0
 8004bac:	193a      	adds	r2, r7, r4
 8004bae:	1812      	adds	r2, r2, r0
 8004bb0:	8812      	ldrh	r2, [r2, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	193a      	adds	r2, r7, r4
 8004bbc:	1812      	adds	r2, r2, r0
 8004bbe:	8812      	ldrh	r2, [r2, #0]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	e061      	b.n	8004c88 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc4:	231a      	movs	r3, #26
 8004bc6:	2218      	movs	r2, #24
 8004bc8:	4694      	mov	ip, r2
 8004bca:	44bc      	add	ip, r7
 8004bcc:	4463      	add	r3, ip
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e059      	b.n	8004c88 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd4:	231b      	movs	r3, #27
 8004bd6:	2218      	movs	r2, #24
 8004bd8:	4694      	mov	ip, r2
 8004bda:	44bc      	add	ip, r7
 8004bdc:	4463      	add	r3, ip
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d822      	bhi.n	8004c2a <UART_SetConfig+0x4ae>
 8004be4:	009a      	lsls	r2, r3, #2
 8004be6:	4b34      	ldr	r3, [pc, #208]	; (8004cb8 <UART_SetConfig+0x53c>)
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bee:	f7ff f94d 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bf6:	e022      	b.n	8004c3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7ff f95e 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c00:	e01d      	b.n	8004c3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <UART_SetConfig+0x530>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2210      	movs	r2, #16
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d002      	beq.n	8004c12 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <UART_SetConfig+0x534>)
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c10:	e015      	b.n	8004c3e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004c12:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <UART_SetConfig+0x538>)
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c16:	e012      	b.n	8004c3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c18:	f7ff f866 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c20:	e00d      	b.n	8004c3e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c28:	e009      	b.n	8004c3e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c2e:	231a      	movs	r3, #26
 8004c30:	2218      	movs	r2, #24
 8004c32:	4694      	mov	ip, r2
 8004c34:	44bc      	add	ip, r7
 8004c36:	4463      	add	r3, ip
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
        break;
 8004c3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d021      	beq.n	8004c88 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	085a      	lsrs	r2, r3, #1
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	18d2      	adds	r2, r2, r3
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	0019      	movs	r1, r3
 8004c54:	0010      	movs	r0, r2
 8004c56:	f7fb fa57 	bl	8000108 <__udivsi3>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	d909      	bls.n	8004c7a <UART_SetConfig+0x4fe>
 8004c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	025b      	lsls	r3, r3, #9
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d204      	bcs.n	8004c7a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e006      	b.n	8004c88 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7a:	231a      	movs	r3, #26
 8004c7c:	2218      	movs	r2, #24
 8004c7e:	4694      	mov	ip, r2
 8004c80:	44bc      	add	ip, r7
 8004c82:	4463      	add	r3, ip
 8004c84:	2201      	movs	r2, #1
 8004c86:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2200      	movs	r2, #0
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c94:	231a      	movs	r3, #26
 8004c96:	2218      	movs	r2, #24
 8004c98:	4694      	mov	ip, r2
 8004c9a:	44bc      	add	ip, r7
 8004c9c:	4463      	add	r3, ip
 8004c9e:	781b      	ldrb	r3, [r3, #0]
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b00e      	add	sp, #56	; 0x38
 8004ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ca8:	080052a8 	.word	0x080052a8
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	003d0900 	.word	0x003d0900
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	080052cc 	.word	0x080052cc

08004cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a4a      	ldr	r2, [pc, #296]	; (8004e00 <UART_AdvFeatureConfig+0x144>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	0019      	movs	r1, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2202      	movs	r2, #2
 8004cec:	4013      	ands	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4a43      	ldr	r2, [pc, #268]	; (8004e04 <UART_AdvFeatureConfig+0x148>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <UART_AdvFeatureConfig+0x14c>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2208      	movs	r2, #8
 8004d30:	4013      	ands	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4a34      	ldr	r2, [pc, #208]	; (8004e0c <UART_AdvFeatureConfig+0x150>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	0019      	movs	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2210      	movs	r2, #16
 8004d52:	4013      	ands	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <UART_AdvFeatureConfig+0x154>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2220      	movs	r2, #32
 8004d74:	4013      	ands	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <UART_AdvFeatureConfig+0x158>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	0019      	movs	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2240      	movs	r2, #64	; 0x40
 8004d96:	4013      	ands	r3, r2
 8004d98:	d01d      	beq.n	8004dd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <UART_AdvFeatureConfig+0x15c>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	035b      	lsls	r3, r3, #13
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d10b      	bne.n	8004dd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <UART_AdvFeatureConfig+0x160>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <UART_AdvFeatureConfig+0x164>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  }
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	fffdffff 	.word	0xfffdffff
 8004e04:	fffeffff 	.word	0xfffeffff
 8004e08:	fffbffff 	.word	0xfffbffff
 8004e0c:	ffff7fff 	.word	0xffff7fff
 8004e10:	ffffefff 	.word	0xffffefff
 8004e14:	ffffdfff 	.word	0xffffdfff
 8004e18:	ffefffff 	.word	0xffefffff
 8004e1c:	ff9fffff 	.word	0xff9fffff
 8004e20:	fff7ffff 	.word	0xfff7ffff

08004e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2280      	movs	r2, #128	; 0x80
 8004e30:	2100      	movs	r1, #0
 8004e32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e34:	f7fd fcca 	bl	80027cc <HAL_GetTick>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2208      	movs	r2, #8
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d10c      	bne.n	8004e64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	0391      	lsls	r1, r2, #14
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <UART_CheckIdleState+0x8c>)
 8004e54:	9200      	str	r2, [sp, #0]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f000 f82c 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d001      	beq.n	8004e64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e021      	b.n	8004ea8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d10c      	bne.n	8004e8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	03d1      	lsls	r1, r2, #15
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <UART_CheckIdleState+0x8c>)
 8004e7c:	9200      	str	r2, [sp, #0]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f000 f818 	bl	8004eb4 <UART_WaitOnFlagUntilTimeout>
 8004e84:	1e03      	subs	r3, r0, #0
 8004e86:	d001      	beq.n	8004e8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e00d      	b.n	8004ea8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2274      	movs	r2, #116	; 0x74
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b004      	add	sp, #16
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	01ffffff 	.word	0x01ffffff

08004eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	1dfb      	adds	r3, r7, #7
 8004ec2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec4:	e05e      	b.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	d05b      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ecc:	f7fd fc7e 	bl	80027cc <HAL_GetTick>
 8004ed0:	0002      	movs	r2, r0
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11b      	bne.n	8004f1a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	492f      	ldr	r1, [pc, #188]	; (8004fac <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004eee:	400a      	ands	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	438a      	bics	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2274      	movs	r2, #116	; 0x74
 8004f12:	2100      	movs	r1, #0
 8004f14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e044      	b.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2204      	movs	r2, #4
 8004f22:	4013      	ands	r3, r2
 8004f24:	d02e      	beq.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	401a      	ands	r2, r3
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d124      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	0112      	lsls	r2, r2, #4
 8004f42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4917      	ldr	r1, [pc, #92]	; (8004fac <UART_WaitOnFlagUntilTimeout+0xf8>)
 8004f50:	400a      	ands	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	438a      	bics	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	2120      	movs	r1, #32
 8004f76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2274      	movs	r2, #116	; 0x74
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e00f      	b.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	425a      	negs	r2, r3
 8004f94:	4153      	adcs	r3, r2
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	001a      	movs	r2, r3
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d091      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b004      	add	sp, #16
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	fffffe5f 	.word	0xfffffe5f

08004fb0 <__errno>:
 8004fb0:	4b01      	ldr	r3, [pc, #4]	; (8004fb8 <__errno+0x8>)
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	4770      	bx	lr
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	2000000c 	.word	0x2000000c

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	4d0c      	ldr	r5, [pc, #48]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc2:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	42a6      	cmp	r6, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	2600      	movs	r6, #0
 8004fce:	f000 f8ad 	bl	800512c <_init>
 8004fd2:	4d0a      	ldr	r5, [pc, #40]	; (8004ffc <__libc_init_array+0x40>)
 8004fd4:	4c0a      	ldr	r4, [pc, #40]	; (8005000 <__libc_init_array+0x44>)
 8004fd6:	1b64      	subs	r4, r4, r5
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	42a6      	cmp	r6, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	00b3      	lsls	r3, r6, #2
 8004fe2:	58eb      	ldr	r3, [r5, r3]
 8004fe4:	4798      	blx	r3
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	00b3      	lsls	r3, r6, #2
 8004fec:	58eb      	ldr	r3, [r5, r3]
 8004fee:	4798      	blx	r3
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	080052f8 	.word	0x080052f8
 8004ff8:	080052f8 	.word	0x080052f8
 8004ffc:	080052f8 	.word	0x080052f8
 8005000:	080052fc 	.word	0x080052fc

08005004 <malloc>:
 8005004:	b510      	push	{r4, lr}
 8005006:	4b03      	ldr	r3, [pc, #12]	; (8005014 <malloc+0x10>)
 8005008:	0001      	movs	r1, r0
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	f000 f80c 	bl	8005028 <_malloc_r>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	2000000c 	.word	0x2000000c

08005018 <memset>:
 8005018:	0003      	movs	r3, r0
 800501a:	1882      	adds	r2, r0, r2
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	7019      	strb	r1, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <_malloc_r>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	2303      	movs	r3, #3
 800502c:	1ccd      	adds	r5, r1, #3
 800502e:	439d      	bics	r5, r3
 8005030:	3508      	adds	r5, #8
 8005032:	0006      	movs	r6, r0
 8005034:	2d0c      	cmp	r5, #12
 8005036:	d21f      	bcs.n	8005078 <_malloc_r+0x50>
 8005038:	250c      	movs	r5, #12
 800503a:	42a9      	cmp	r1, r5
 800503c:	d81e      	bhi.n	800507c <_malloc_r+0x54>
 800503e:	0030      	movs	r0, r6
 8005040:	f000 f862 	bl	8005108 <__malloc_lock>
 8005044:	4925      	ldr	r1, [pc, #148]	; (80050dc <_malloc_r+0xb4>)
 8005046:	680a      	ldr	r2, [r1, #0]
 8005048:	0014      	movs	r4, r2
 800504a:	2c00      	cmp	r4, #0
 800504c:	d11a      	bne.n	8005084 <_malloc_r+0x5c>
 800504e:	4f24      	ldr	r7, [pc, #144]	; (80050e0 <_malloc_r+0xb8>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <_malloc_r+0x38>
 8005056:	0021      	movs	r1, r4
 8005058:	0030      	movs	r0, r6
 800505a:	f000 f843 	bl	80050e4 <_sbrk_r>
 800505e:	6038      	str	r0, [r7, #0]
 8005060:	0029      	movs	r1, r5
 8005062:	0030      	movs	r0, r6
 8005064:	f000 f83e 	bl	80050e4 <_sbrk_r>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d12b      	bne.n	80050c4 <_malloc_r+0x9c>
 800506c:	230c      	movs	r3, #12
 800506e:	0030      	movs	r0, r6
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	f000 f851 	bl	8005118 <__malloc_unlock>
 8005076:	e003      	b.n	8005080 <_malloc_r+0x58>
 8005078:	2d00      	cmp	r5, #0
 800507a:	dade      	bge.n	800503a <_malloc_r+0x12>
 800507c:	230c      	movs	r3, #12
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	2000      	movs	r0, #0
 8005082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	1b5b      	subs	r3, r3, r5
 8005088:	d419      	bmi.n	80050be <_malloc_r+0x96>
 800508a:	2b0b      	cmp	r3, #11
 800508c:	d903      	bls.n	8005096 <_malloc_r+0x6e>
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	18e4      	adds	r4, r4, r3
 8005092:	6025      	str	r5, [r4, #0]
 8005094:	e003      	b.n	800509e <_malloc_r+0x76>
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	42a2      	cmp	r2, r4
 800509a:	d10e      	bne.n	80050ba <_malloc_r+0x92>
 800509c:	600b      	str	r3, [r1, #0]
 800509e:	0030      	movs	r0, r6
 80050a0:	f000 f83a 	bl	8005118 <__malloc_unlock>
 80050a4:	0020      	movs	r0, r4
 80050a6:	2207      	movs	r2, #7
 80050a8:	300b      	adds	r0, #11
 80050aa:	1d23      	adds	r3, r4, #4
 80050ac:	4390      	bics	r0, r2
 80050ae:	1ac2      	subs	r2, r0, r3
 80050b0:	4298      	cmp	r0, r3
 80050b2:	d0e6      	beq.n	8005082 <_malloc_r+0x5a>
 80050b4:	1a1b      	subs	r3, r3, r0
 80050b6:	50a3      	str	r3, [r4, r2]
 80050b8:	e7e3      	b.n	8005082 <_malloc_r+0x5a>
 80050ba:	6053      	str	r3, [r2, #4]
 80050bc:	e7ef      	b.n	800509e <_malloc_r+0x76>
 80050be:	0022      	movs	r2, r4
 80050c0:	6864      	ldr	r4, [r4, #4]
 80050c2:	e7c2      	b.n	800504a <_malloc_r+0x22>
 80050c4:	2303      	movs	r3, #3
 80050c6:	1cc4      	adds	r4, r0, #3
 80050c8:	439c      	bics	r4, r3
 80050ca:	42a0      	cmp	r0, r4
 80050cc:	d0e1      	beq.n	8005092 <_malloc_r+0x6a>
 80050ce:	1a21      	subs	r1, r4, r0
 80050d0:	0030      	movs	r0, r6
 80050d2:	f000 f807 	bl	80050e4 <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d1db      	bne.n	8005092 <_malloc_r+0x6a>
 80050da:	e7c7      	b.n	800506c <_malloc_r+0x44>
 80050dc:	20000090 	.word	0x20000090
 80050e0:	20000094 	.word	0x20000094

080050e4 <_sbrk_r>:
 80050e4:	2300      	movs	r3, #0
 80050e6:	b570      	push	{r4, r5, r6, lr}
 80050e8:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_sbrk_r+0x20>)
 80050ea:	0004      	movs	r4, r0
 80050ec:	0008      	movs	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fd faa0 	bl	8002634 <_sbrk>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d103      	bne.n	8005100 <_sbrk_r+0x1c>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d000      	beq.n	8005100 <_sbrk_r+0x1c>
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	bd70      	pop	{r4, r5, r6, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	200001bc 	.word	0x200001bc

08005108 <__malloc_lock>:
 8005108:	b510      	push	{r4, lr}
 800510a:	4802      	ldr	r0, [pc, #8]	; (8005114 <__malloc_lock+0xc>)
 800510c:	f000 f80c 	bl	8005128 <__retarget_lock_acquire_recursive>
 8005110:	bd10      	pop	{r4, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	200001c4 	.word	0x200001c4

08005118 <__malloc_unlock>:
 8005118:	b510      	push	{r4, lr}
 800511a:	4802      	ldr	r0, [pc, #8]	; (8005124 <__malloc_unlock+0xc>)
 800511c:	f000 f805 	bl	800512a <__retarget_lock_release_recursive>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	200001c4 	.word	0x200001c4

08005128 <__retarget_lock_acquire_recursive>:
 8005128:	4770      	bx	lr

0800512a <__retarget_lock_release_recursive>:
 800512a:	4770      	bx	lr

0800512c <_init>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005132:	bc08      	pop	{r3}
 8005134:	469e      	mov	lr, r3
 8005136:	4770      	bx	lr

08005138 <_fini>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr
