
Channel_Stimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b144  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0800b208  0800b208  0001b208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b87c  0800b87c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b87c  0800b87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b884  0800b884  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b884  0800b884  0001b884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc4  200001dc  0800ba68  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a0  0800ba68  000211a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002398f  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b4f  00000000  00000000  00043b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  000486e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00049d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a481  00000000  00000000  0004b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3ca  00000000  00000000  000655d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a822  00000000  00000000  000839a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e1c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  0010e218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b1ec 	.word	0x0800b1ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800b1ec 	.word	0x0800b1ec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f865 	bl	800150c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffaf 	bl	80013b0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f857 	bl	800150c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f84d 	bl	800150c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffd1 	bl	8001428 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffc7 	bl	8001428 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_d2uiz>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	2200      	movs	r2, #0
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <__aeabi_d2uiz+0x38>)
 800053e:	0004      	movs	r4, r0
 8000540:	000d      	movs	r5, r1
 8000542:	f7ff ffa7 	bl	8000494 <__aeabi_dcmpge>
 8000546:	2800      	cmp	r0, #0
 8000548:	d104      	bne.n	8000554 <__aeabi_d2uiz+0x1c>
 800054a:	0020      	movs	r0, r4
 800054c:	0029      	movs	r1, r5
 800054e:	f001 fe69 	bl	8002224 <__aeabi_d2iz>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <__aeabi_d2uiz+0x38>)
 8000556:	2200      	movs	r2, #0
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fab2 	bl	8001ac4 <__aeabi_dsub>
 8000560:	f001 fe60 	bl	8002224 <__aeabi_d2iz>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	061b      	lsls	r3, r3, #24
 8000568:	469c      	mov	ip, r3
 800056a:	4460      	add	r0, ip
 800056c:	e7f1      	b.n	8000552 <__aeabi_d2uiz+0x1a>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	41e00000 	.word	0x41e00000

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f001 fef0 	bl	8002378 <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f001 feeb 	bl	8002378 <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_dadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	464f      	mov	r7, r9
 8000710:	46d6      	mov	lr, sl
 8000712:	4646      	mov	r6, r8
 8000714:	000d      	movs	r5, r1
 8000716:	0001      	movs	r1, r0
 8000718:	0018      	movs	r0, r3
 800071a:	b5c0      	push	{r6, r7, lr}
 800071c:	0017      	movs	r7, r2
 800071e:	032b      	lsls	r3, r5, #12
 8000720:	0a5a      	lsrs	r2, r3, #9
 8000722:	0f4b      	lsrs	r3, r1, #29
 8000724:	4313      	orrs	r3, r2
 8000726:	00ca      	lsls	r2, r1, #3
 8000728:	4691      	mov	r9, r2
 800072a:	0302      	lsls	r2, r0, #12
 800072c:	006e      	lsls	r6, r5, #1
 800072e:	0041      	lsls	r1, r0, #1
 8000730:	0a52      	lsrs	r2, r2, #9
 8000732:	0fec      	lsrs	r4, r5, #31
 8000734:	0f7d      	lsrs	r5, r7, #29
 8000736:	4315      	orrs	r5, r2
 8000738:	0d76      	lsrs	r6, r6, #21
 800073a:	0d49      	lsrs	r1, r1, #21
 800073c:	0fc0      	lsrs	r0, r0, #31
 800073e:	4682      	mov	sl, r0
 8000740:	46ac      	mov	ip, r5
 8000742:	00ff      	lsls	r7, r7, #3
 8000744:	1a72      	subs	r2, r6, r1
 8000746:	4284      	cmp	r4, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x40>
 800074a:	e098      	b.n	800087e <__aeabi_dadd+0x172>
 800074c:	2a00      	cmp	r2, #0
 800074e:	dc00      	bgt.n	8000752 <__aeabi_dadd+0x46>
 8000750:	e081      	b.n	8000856 <__aeabi_dadd+0x14a>
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x4c>
 8000756:	e0b6      	b.n	80008c6 <__aeabi_dadd+0x1ba>
 8000758:	49c9      	ldr	r1, [pc, #804]	; (8000a80 <__aeabi_dadd+0x374>)
 800075a:	428e      	cmp	r6, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x54>
 800075e:	e172      	b.n	8000a46 <__aeabi_dadd+0x33a>
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0028      	movs	r0, r5
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	4308      	orrs	r0, r1
 8000768:	4684      	mov	ip, r0
 800076a:	2a38      	cmp	r2, #56	; 0x38
 800076c:	dd00      	ble.n	8000770 <__aeabi_dadd+0x64>
 800076e:	e15e      	b.n	8000a2e <__aeabi_dadd+0x322>
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x6a>
 8000774:	e1ee      	b.n	8000b54 <__aeabi_dadd+0x448>
 8000776:	2020      	movs	r0, #32
 8000778:	0039      	movs	r1, r7
 800077a:	4665      	mov	r5, ip
 800077c:	1a80      	subs	r0, r0, r2
 800077e:	4087      	lsls	r7, r0
 8000780:	40d1      	lsrs	r1, r2
 8000782:	4085      	lsls	r5, r0
 8000784:	430d      	orrs	r5, r1
 8000786:	0039      	movs	r1, r7
 8000788:	1e4f      	subs	r7, r1, #1
 800078a:	41b9      	sbcs	r1, r7
 800078c:	4667      	mov	r7, ip
 800078e:	40d7      	lsrs	r7, r2
 8000790:	4329      	orrs	r1, r5
 8000792:	1bdb      	subs	r3, r3, r7
 8000794:	464a      	mov	r2, r9
 8000796:	1a55      	subs	r5, r2, r1
 8000798:	45a9      	cmp	r9, r5
 800079a:	4189      	sbcs	r1, r1
 800079c:	4249      	negs	r1, r1
 800079e:	1a5b      	subs	r3, r3, r1
 80007a0:	4698      	mov	r8, r3
 80007a2:	4643      	mov	r3, r8
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	d400      	bmi.n	80007aa <__aeabi_dadd+0x9e>
 80007a8:	e0cc      	b.n	8000944 <__aeabi_dadd+0x238>
 80007aa:	4643      	mov	r3, r8
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	4698      	mov	r8, r3
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0xae>
 80007b8:	e12c      	b.n	8000a14 <__aeabi_dadd+0x308>
 80007ba:	4640      	mov	r0, r8
 80007bc:	f001 fdbe 	bl	800233c <__clzsi2>
 80007c0:	0001      	movs	r1, r0
 80007c2:	3908      	subs	r1, #8
 80007c4:	2220      	movs	r2, #32
 80007c6:	0028      	movs	r0, r5
 80007c8:	4643      	mov	r3, r8
 80007ca:	1a52      	subs	r2, r2, r1
 80007cc:	408b      	lsls	r3, r1
 80007ce:	40d0      	lsrs	r0, r2
 80007d0:	408d      	lsls	r5, r1
 80007d2:	4303      	orrs	r3, r0
 80007d4:	428e      	cmp	r6, r1
 80007d6:	dd00      	ble.n	80007da <__aeabi_dadd+0xce>
 80007d8:	e117      	b.n	8000a0a <__aeabi_dadd+0x2fe>
 80007da:	1b8e      	subs	r6, r1, r6
 80007dc:	1c72      	adds	r2, r6, #1
 80007de:	2a1f      	cmp	r2, #31
 80007e0:	dd00      	ble.n	80007e4 <__aeabi_dadd+0xd8>
 80007e2:	e1a7      	b.n	8000b34 <__aeabi_dadd+0x428>
 80007e4:	2120      	movs	r1, #32
 80007e6:	0018      	movs	r0, r3
 80007e8:	002e      	movs	r6, r5
 80007ea:	1a89      	subs	r1, r1, r2
 80007ec:	408d      	lsls	r5, r1
 80007ee:	4088      	lsls	r0, r1
 80007f0:	40d6      	lsrs	r6, r2
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	1e69      	subs	r1, r5, #1
 80007f6:	418d      	sbcs	r5, r1
 80007f8:	4330      	orrs	r0, r6
 80007fa:	4698      	mov	r8, r3
 80007fc:	2600      	movs	r6, #0
 80007fe:	4305      	orrs	r5, r0
 8000800:	076b      	lsls	r3, r5, #29
 8000802:	d009      	beq.n	8000818 <__aeabi_dadd+0x10c>
 8000804:	230f      	movs	r3, #15
 8000806:	402b      	ands	r3, r5
 8000808:	2b04      	cmp	r3, #4
 800080a:	d005      	beq.n	8000818 <__aeabi_dadd+0x10c>
 800080c:	1d2b      	adds	r3, r5, #4
 800080e:	42ab      	cmp	r3, r5
 8000810:	41ad      	sbcs	r5, r5
 8000812:	426d      	negs	r5, r5
 8000814:	44a8      	add	r8, r5
 8000816:	001d      	movs	r5, r3
 8000818:	4643      	mov	r3, r8
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	d400      	bmi.n	8000820 <__aeabi_dadd+0x114>
 800081e:	e094      	b.n	800094a <__aeabi_dadd+0x23e>
 8000820:	4b97      	ldr	r3, [pc, #604]	; (8000a80 <__aeabi_dadd+0x374>)
 8000822:	1c72      	adds	r2, r6, #1
 8000824:	429a      	cmp	r2, r3
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x11e>
 8000828:	e09d      	b.n	8000966 <__aeabi_dadd+0x25a>
 800082a:	4641      	mov	r1, r8
 800082c:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <__aeabi_dadd+0x378>)
 800082e:	08ed      	lsrs	r5, r5, #3
 8000830:	4019      	ands	r1, r3
 8000832:	000b      	movs	r3, r1
 8000834:	0552      	lsls	r2, r2, #21
 8000836:	0749      	lsls	r1, r1, #29
 8000838:	025b      	lsls	r3, r3, #9
 800083a:	4329      	orrs	r1, r5
 800083c:	0b1b      	lsrs	r3, r3, #12
 800083e:	0d52      	lsrs	r2, r2, #21
 8000840:	0512      	lsls	r2, r2, #20
 8000842:	4313      	orrs	r3, r2
 8000844:	07e4      	lsls	r4, r4, #31
 8000846:	4323      	orrs	r3, r4
 8000848:	0008      	movs	r0, r1
 800084a:	0019      	movs	r1, r3
 800084c:	bce0      	pop	{r5, r6, r7}
 800084e:	46ba      	mov	sl, r7
 8000850:	46b1      	mov	r9, r6
 8000852:	46a8      	mov	r8, r5
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2a00      	cmp	r2, #0
 8000858:	d043      	beq.n	80008e2 <__aeabi_dadd+0x1d6>
 800085a:	1b8a      	subs	r2, r1, r6
 800085c:	2e00      	cmp	r6, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x156>
 8000860:	e12a      	b.n	8000ab8 <__aeabi_dadd+0x3ac>
 8000862:	464c      	mov	r4, r9
 8000864:	431c      	orrs	r4, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x15e>
 8000868:	e1d1      	b.n	8000c0e <__aeabi_dadd+0x502>
 800086a:	1e54      	subs	r4, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x166>
 8000870:	e21f      	b.n	8000cb2 <__aeabi_dadd+0x5a6>
 8000872:	4d83      	ldr	r5, [pc, #524]	; (8000a80 <__aeabi_dadd+0x374>)
 8000874:	42aa      	cmp	r2, r5
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x16e>
 8000878:	e272      	b.n	8000d60 <__aeabi_dadd+0x654>
 800087a:	0022      	movs	r2, r4
 800087c:	e123      	b.n	8000ac6 <__aeabi_dadd+0x3ba>
 800087e:	2a00      	cmp	r2, #0
 8000880:	dc00      	bgt.n	8000884 <__aeabi_dadd+0x178>
 8000882:	e098      	b.n	80009b6 <__aeabi_dadd+0x2aa>
 8000884:	2900      	cmp	r1, #0
 8000886:	d042      	beq.n	800090e <__aeabi_dadd+0x202>
 8000888:	497d      	ldr	r1, [pc, #500]	; (8000a80 <__aeabi_dadd+0x374>)
 800088a:	428e      	cmp	r6, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x184>
 800088e:	e0da      	b.n	8000a46 <__aeabi_dadd+0x33a>
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0028      	movs	r0, r5
 8000894:	0409      	lsls	r1, r1, #16
 8000896:	4308      	orrs	r0, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2a38      	cmp	r2, #56	; 0x38
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x194>
 800089e:	e129      	b.n	8000af4 <__aeabi_dadd+0x3e8>
 80008a0:	2a1f      	cmp	r2, #31
 80008a2:	dc00      	bgt.n	80008a6 <__aeabi_dadd+0x19a>
 80008a4:	e187      	b.n	8000bb6 <__aeabi_dadd+0x4aa>
 80008a6:	0011      	movs	r1, r2
 80008a8:	4665      	mov	r5, ip
 80008aa:	3920      	subs	r1, #32
 80008ac:	40cd      	lsrs	r5, r1
 80008ae:	2a20      	cmp	r2, #32
 80008b0:	d004      	beq.n	80008bc <__aeabi_dadd+0x1b0>
 80008b2:	2040      	movs	r0, #64	; 0x40
 80008b4:	4661      	mov	r1, ip
 80008b6:	1a82      	subs	r2, r0, r2
 80008b8:	4091      	lsls	r1, r2
 80008ba:	430f      	orrs	r7, r1
 80008bc:	0039      	movs	r1, r7
 80008be:	1e4f      	subs	r7, r1, #1
 80008c0:	41b9      	sbcs	r1, r7
 80008c2:	430d      	orrs	r5, r1
 80008c4:	e11b      	b.n	8000afe <__aeabi_dadd+0x3f2>
 80008c6:	0029      	movs	r1, r5
 80008c8:	4339      	orrs	r1, r7
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x1c2>
 80008cc:	e0b5      	b.n	8000a3a <__aeabi_dadd+0x32e>
 80008ce:	1e51      	subs	r1, r2, #1
 80008d0:	2a01      	cmp	r2, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1ca>
 80008d4:	e1ab      	b.n	8000c2e <__aeabi_dadd+0x522>
 80008d6:	486a      	ldr	r0, [pc, #424]	; (8000a80 <__aeabi_dadd+0x374>)
 80008d8:	4282      	cmp	r2, r0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x1d2>
 80008dc:	e1b2      	b.n	8000c44 <__aeabi_dadd+0x538>
 80008de:	000a      	movs	r2, r1
 80008e0:	e743      	b.n	800076a <__aeabi_dadd+0x5e>
 80008e2:	4969      	ldr	r1, [pc, #420]	; (8000a88 <__aeabi_dadd+0x37c>)
 80008e4:	1c75      	adds	r5, r6, #1
 80008e6:	420d      	tst	r5, r1
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x1e0>
 80008ea:	e0cf      	b.n	8000a8c <__aeabi_dadd+0x380>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x1e6>
 80008f0:	e193      	b.n	8000c1a <__aeabi_dadd+0x50e>
 80008f2:	4649      	mov	r1, r9
 80008f4:	4319      	orrs	r1, r3
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x1ee>
 80008f8:	e1d1      	b.n	8000c9e <__aeabi_dadd+0x592>
 80008fa:	4661      	mov	r1, ip
 80008fc:	4339      	orrs	r1, r7
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x1f6>
 8000900:	e1e3      	b.n	8000cca <__aeabi_dadd+0x5be>
 8000902:	4649      	mov	r1, r9
 8000904:	0758      	lsls	r0, r3, #29
 8000906:	08c9      	lsrs	r1, r1, #3
 8000908:	4301      	orrs	r1, r0
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	e026      	b.n	800095c <__aeabi_dadd+0x250>
 800090e:	0029      	movs	r1, r5
 8000910:	4339      	orrs	r1, r7
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x20a>
 8000914:	e091      	b.n	8000a3a <__aeabi_dadd+0x32e>
 8000916:	1e51      	subs	r1, r2, #1
 8000918:	2a01      	cmp	r2, #1
 800091a:	d005      	beq.n	8000928 <__aeabi_dadd+0x21c>
 800091c:	4858      	ldr	r0, [pc, #352]	; (8000a80 <__aeabi_dadd+0x374>)
 800091e:	4282      	cmp	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x218>
 8000922:	e18f      	b.n	8000c44 <__aeabi_dadd+0x538>
 8000924:	000a      	movs	r2, r1
 8000926:	e7b8      	b.n	800089a <__aeabi_dadd+0x18e>
 8000928:	003d      	movs	r5, r7
 800092a:	444d      	add	r5, r9
 800092c:	454d      	cmp	r5, r9
 800092e:	4189      	sbcs	r1, r1
 8000930:	4463      	add	r3, ip
 8000932:	4698      	mov	r8, r3
 8000934:	4249      	negs	r1, r1
 8000936:	4488      	add	r8, r1
 8000938:	4643      	mov	r3, r8
 800093a:	2602      	movs	r6, #2
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	d500      	bpl.n	8000942 <__aeabi_dadd+0x236>
 8000940:	e0eb      	b.n	8000b1a <__aeabi_dadd+0x40e>
 8000942:	3e01      	subs	r6, #1
 8000944:	076b      	lsls	r3, r5, #29
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x23e>
 8000948:	e75c      	b.n	8000804 <__aeabi_dadd+0xf8>
 800094a:	4643      	mov	r3, r8
 800094c:	08e9      	lsrs	r1, r5, #3
 800094e:	075a      	lsls	r2, r3, #29
 8000950:	4311      	orrs	r1, r2
 8000952:	0032      	movs	r2, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	484a      	ldr	r0, [pc, #296]	; (8000a80 <__aeabi_dadd+0x374>)
 8000958:	4282      	cmp	r2, r0
 800095a:	d021      	beq.n	80009a0 <__aeabi_dadd+0x294>
 800095c:	031b      	lsls	r3, r3, #12
 800095e:	0552      	lsls	r2, r2, #21
 8000960:	0b1b      	lsrs	r3, r3, #12
 8000962:	0d52      	lsrs	r2, r2, #21
 8000964:	e76c      	b.n	8000840 <__aeabi_dadd+0x134>
 8000966:	2300      	movs	r3, #0
 8000968:	2100      	movs	r1, #0
 800096a:	e769      	b.n	8000840 <__aeabi_dadd+0x134>
 800096c:	002a      	movs	r2, r5
 800096e:	433a      	orrs	r2, r7
 8000970:	d069      	beq.n	8000a46 <__aeabi_dadd+0x33a>
 8000972:	464a      	mov	r2, r9
 8000974:	0758      	lsls	r0, r3, #29
 8000976:	08d1      	lsrs	r1, r2, #3
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	031b      	lsls	r3, r3, #12
 800097e:	4308      	orrs	r0, r1
 8000980:	421a      	tst	r2, r3
 8000982:	d007      	beq.n	8000994 <__aeabi_dadd+0x288>
 8000984:	0029      	movs	r1, r5
 8000986:	08ed      	lsrs	r5, r5, #3
 8000988:	421d      	tst	r5, r3
 800098a:	d103      	bne.n	8000994 <__aeabi_dadd+0x288>
 800098c:	002a      	movs	r2, r5
 800098e:	08ff      	lsrs	r7, r7, #3
 8000990:	0748      	lsls	r0, r1, #29
 8000992:	4338      	orrs	r0, r7
 8000994:	0f43      	lsrs	r3, r0, #29
 8000996:	00c1      	lsls	r1, r0, #3
 8000998:	075b      	lsls	r3, r3, #29
 800099a:	08c9      	lsrs	r1, r1, #3
 800099c:	4319      	orrs	r1, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	000a      	movs	r2, r1
 80009a2:	431a      	orrs	r2, r3
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x29c>
 80009a6:	e213      	b.n	8000dd0 <__aeabi_dadd+0x6c4>
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	0312      	lsls	r2, r2, #12
 80009ac:	4313      	orrs	r3, r2
 80009ae:	031b      	lsls	r3, r3, #12
 80009b0:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <__aeabi_dadd+0x374>)
 80009b2:	0b1b      	lsrs	r3, r3, #12
 80009b4:	e744      	b.n	8000840 <__aeabi_dadd+0x134>
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d04b      	beq.n	8000a52 <__aeabi_dadd+0x346>
 80009ba:	1b8a      	subs	r2, r1, r6
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2b6>
 80009c0:	e0e7      	b.n	8000b92 <__aeabi_dadd+0x486>
 80009c2:	482f      	ldr	r0, [pc, #188]	; (8000a80 <__aeabi_dadd+0x374>)
 80009c4:	4281      	cmp	r1, r0
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x2be>
 80009c8:	e195      	b.n	8000cf6 <__aeabi_dadd+0x5ea>
 80009ca:	2080      	movs	r0, #128	; 0x80
 80009cc:	0400      	lsls	r0, r0, #16
 80009ce:	4303      	orrs	r3, r0
 80009d0:	2a38      	cmp	r2, #56	; 0x38
 80009d2:	dd00      	ble.n	80009d6 <__aeabi_dadd+0x2ca>
 80009d4:	e143      	b.n	8000c5e <__aeabi_dadd+0x552>
 80009d6:	2a1f      	cmp	r2, #31
 80009d8:	dd00      	ble.n	80009dc <__aeabi_dadd+0x2d0>
 80009da:	e1db      	b.n	8000d94 <__aeabi_dadd+0x688>
 80009dc:	2020      	movs	r0, #32
 80009de:	001d      	movs	r5, r3
 80009e0:	464e      	mov	r6, r9
 80009e2:	1a80      	subs	r0, r0, r2
 80009e4:	4085      	lsls	r5, r0
 80009e6:	40d6      	lsrs	r6, r2
 80009e8:	4335      	orrs	r5, r6
 80009ea:	464e      	mov	r6, r9
 80009ec:	4086      	lsls	r6, r0
 80009ee:	0030      	movs	r0, r6
 80009f0:	40d3      	lsrs	r3, r2
 80009f2:	1e46      	subs	r6, r0, #1
 80009f4:	41b0      	sbcs	r0, r6
 80009f6:	449c      	add	ip, r3
 80009f8:	4305      	orrs	r5, r0
 80009fa:	19ed      	adds	r5, r5, r7
 80009fc:	42bd      	cmp	r5, r7
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	425b      	negs	r3, r3
 8000a02:	4463      	add	r3, ip
 8000a04:	4698      	mov	r8, r3
 8000a06:	000e      	movs	r6, r1
 8000a08:	e07f      	b.n	8000b0a <__aeabi_dadd+0x3fe>
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <__aeabi_dadd+0x378>)
 8000a0c:	1a76      	subs	r6, r6, r1
 8000a0e:	4013      	ands	r3, r2
 8000a10:	4698      	mov	r8, r3
 8000a12:	e6f5      	b.n	8000800 <__aeabi_dadd+0xf4>
 8000a14:	0028      	movs	r0, r5
 8000a16:	f001 fc91 	bl	800233c <__clzsi2>
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	3118      	adds	r1, #24
 8000a1e:	291f      	cmp	r1, #31
 8000a20:	dc00      	bgt.n	8000a24 <__aeabi_dadd+0x318>
 8000a22:	e6cf      	b.n	80007c4 <__aeabi_dadd+0xb8>
 8000a24:	002b      	movs	r3, r5
 8000a26:	3808      	subs	r0, #8
 8000a28:	4083      	lsls	r3, r0
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	e6d2      	b.n	80007d4 <__aeabi_dadd+0xc8>
 8000a2e:	4662      	mov	r2, ip
 8000a30:	433a      	orrs	r2, r7
 8000a32:	0011      	movs	r1, r2
 8000a34:	1e4f      	subs	r7, r1, #1
 8000a36:	41b9      	sbcs	r1, r7
 8000a38:	e6ac      	b.n	8000794 <__aeabi_dadd+0x88>
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	0758      	lsls	r0, r3, #29
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	4301      	orrs	r1, r0
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	e787      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000a46:	4649      	mov	r1, r9
 8000a48:	075a      	lsls	r2, r3, #29
 8000a4a:	08c9      	lsrs	r1, r1, #3
 8000a4c:	4311      	orrs	r1, r2
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e7a6      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <__aeabi_dadd+0x37c>)
 8000a54:	1c70      	adds	r0, r6, #1
 8000a56:	4208      	tst	r0, r1
 8000a58:	d000      	beq.n	8000a5c <__aeabi_dadd+0x350>
 8000a5a:	e0bb      	b.n	8000bd4 <__aeabi_dadd+0x4c8>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_dadd+0x356>
 8000a60:	e114      	b.n	8000c8c <__aeabi_dadd+0x580>
 8000a62:	4649      	mov	r1, r9
 8000a64:	4319      	orrs	r1, r3
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x35e>
 8000a68:	e175      	b.n	8000d56 <__aeabi_dadd+0x64a>
 8000a6a:	0029      	movs	r1, r5
 8000a6c:	4339      	orrs	r1, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x366>
 8000a70:	e17e      	b.n	8000d70 <__aeabi_dadd+0x664>
 8000a72:	4649      	mov	r1, r9
 8000a74:	0758      	lsls	r0, r3, #29
 8000a76:	08c9      	lsrs	r1, r1, #3
 8000a78:	4301      	orrs	r1, r0
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	e76e      	b.n	800095c <__aeabi_dadd+0x250>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	1bcd      	subs	r5, r1, r7
 8000a90:	4661      	mov	r1, ip
 8000a92:	1a58      	subs	r0, r3, r1
 8000a94:	45a9      	cmp	r9, r5
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	4249      	negs	r1, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	0001      	movs	r1, r0
 8000a9e:	4640      	mov	r0, r8
 8000aa0:	1a09      	subs	r1, r1, r0
 8000aa2:	4688      	mov	r8, r1
 8000aa4:	0209      	lsls	r1, r1, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x39e>
 8000aa8:	e0a6      	b.n	8000bf8 <__aeabi_dadd+0x4ec>
 8000aaa:	4641      	mov	r1, r8
 8000aac:	4329      	orrs	r1, r5
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x3a6>
 8000ab0:	e67f      	b.n	80007b2 <__aeabi_dadd+0xa6>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	e751      	b.n	800095c <__aeabi_dadd+0x250>
 8000ab8:	4cc7      	ldr	r4, [pc, #796]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x3b4>
 8000abe:	e0c7      	b.n	8000c50 <__aeabi_dadd+0x544>
 8000ac0:	2480      	movs	r4, #128	; 0x80
 8000ac2:	0424      	lsls	r4, r4, #16
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	2a38      	cmp	r2, #56	; 0x38
 8000ac8:	dc54      	bgt.n	8000b74 <__aeabi_dadd+0x468>
 8000aca:	2a1f      	cmp	r2, #31
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_dadd+0x3c4>
 8000ace:	e0cc      	b.n	8000c6a <__aeabi_dadd+0x55e>
 8000ad0:	2420      	movs	r4, #32
 8000ad2:	4648      	mov	r0, r9
 8000ad4:	1aa4      	subs	r4, r4, r2
 8000ad6:	001d      	movs	r5, r3
 8000ad8:	464e      	mov	r6, r9
 8000ada:	40a0      	lsls	r0, r4
 8000adc:	40d6      	lsrs	r6, r2
 8000ade:	40a5      	lsls	r5, r4
 8000ae0:	0004      	movs	r4, r0
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	4335      	orrs	r5, r6
 8000ae8:	1e66      	subs	r6, r4, #1
 8000aea:	41b4      	sbcs	r4, r6
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	469c      	mov	ip, r3
 8000af0:	4325      	orrs	r5, r4
 8000af2:	e044      	b.n	8000b7e <__aeabi_dadd+0x472>
 8000af4:	4662      	mov	r2, ip
 8000af6:	433a      	orrs	r2, r7
 8000af8:	0015      	movs	r5, r2
 8000afa:	1e6f      	subs	r7, r5, #1
 8000afc:	41bd      	sbcs	r5, r7
 8000afe:	444d      	add	r5, r9
 8000b00:	454d      	cmp	r5, r9
 8000b02:	4189      	sbcs	r1, r1
 8000b04:	4249      	negs	r1, r1
 8000b06:	4688      	mov	r8, r1
 8000b08:	4498      	add	r8, r3
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	d400      	bmi.n	8000b12 <__aeabi_dadd+0x406>
 8000b10:	e718      	b.n	8000944 <__aeabi_dadd+0x238>
 8000b12:	4bb1      	ldr	r3, [pc, #708]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000b14:	3601      	adds	r6, #1
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d049      	beq.n	8000bae <__aeabi_dadd+0x4a2>
 8000b1a:	4642      	mov	r2, r8
 8000b1c:	4baf      	ldr	r3, [pc, #700]	; (8000ddc <__aeabi_dadd+0x6d0>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	401a      	ands	r2, r3
 8000b22:	0013      	movs	r3, r2
 8000b24:	086a      	lsrs	r2, r5, #1
 8000b26:	400d      	ands	r5, r1
 8000b28:	4315      	orrs	r5, r2
 8000b2a:	07d9      	lsls	r1, r3, #31
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	4698      	mov	r8, r3
 8000b30:	430d      	orrs	r5, r1
 8000b32:	e665      	b.n	8000800 <__aeabi_dadd+0xf4>
 8000b34:	0018      	movs	r0, r3
 8000b36:	3e1f      	subs	r6, #31
 8000b38:	40f0      	lsrs	r0, r6
 8000b3a:	2a20      	cmp	r2, #32
 8000b3c:	d003      	beq.n	8000b46 <__aeabi_dadd+0x43a>
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	1a8a      	subs	r2, r1, r2
 8000b42:	4093      	lsls	r3, r2
 8000b44:	431d      	orrs	r5, r3
 8000b46:	1e69      	subs	r1, r5, #1
 8000b48:	418d      	sbcs	r5, r1
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4305      	orrs	r5, r0
 8000b52:	e6f7      	b.n	8000944 <__aeabi_dadd+0x238>
 8000b54:	0011      	movs	r1, r2
 8000b56:	4665      	mov	r5, ip
 8000b58:	3920      	subs	r1, #32
 8000b5a:	40cd      	lsrs	r5, r1
 8000b5c:	2a20      	cmp	r2, #32
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_dadd+0x45e>
 8000b60:	2040      	movs	r0, #64	; 0x40
 8000b62:	4661      	mov	r1, ip
 8000b64:	1a82      	subs	r2, r0, r2
 8000b66:	4091      	lsls	r1, r2
 8000b68:	430f      	orrs	r7, r1
 8000b6a:	0039      	movs	r1, r7
 8000b6c:	1e4f      	subs	r7, r1, #1
 8000b6e:	41b9      	sbcs	r1, r7
 8000b70:	4329      	orrs	r1, r5
 8000b72:	e60f      	b.n	8000794 <__aeabi_dadd+0x88>
 8000b74:	464a      	mov	r2, r9
 8000b76:	4313      	orrs	r3, r2
 8000b78:	001d      	movs	r5, r3
 8000b7a:	1e6b      	subs	r3, r5, #1
 8000b7c:	419d      	sbcs	r5, r3
 8000b7e:	1b7d      	subs	r5, r7, r5
 8000b80:	42af      	cmp	r7, r5
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	4662      	mov	r2, ip
 8000b86:	425b      	negs	r3, r3
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	4698      	mov	r8, r3
 8000b8c:	4654      	mov	r4, sl
 8000b8e:	000e      	movs	r6, r1
 8000b90:	e607      	b.n	80007a2 <__aeabi_dadd+0x96>
 8000b92:	4648      	mov	r0, r9
 8000b94:	4318      	orrs	r0, r3
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x48e>
 8000b98:	e0b3      	b.n	8000d02 <__aeabi_dadd+0x5f6>
 8000b9a:	1e50      	subs	r0, r2, #1
 8000b9c:	2a01      	cmp	r2, #1
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x496>
 8000ba0:	e10d      	b.n	8000dbe <__aeabi_dadd+0x6b2>
 8000ba2:	4d8d      	ldr	r5, [pc, #564]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000ba4:	42aa      	cmp	r2, r5
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0x49e>
 8000ba8:	e0a5      	b.n	8000cf6 <__aeabi_dadd+0x5ea>
 8000baa:	0002      	movs	r2, r0
 8000bac:	e710      	b.n	80009d0 <__aeabi_dadd+0x2c4>
 8000bae:	0032      	movs	r2, r6
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	e644      	b.n	8000840 <__aeabi_dadd+0x134>
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	0038      	movs	r0, r7
 8000bba:	1a89      	subs	r1, r1, r2
 8000bbc:	4665      	mov	r5, ip
 8000bbe:	408f      	lsls	r7, r1
 8000bc0:	408d      	lsls	r5, r1
 8000bc2:	40d0      	lsrs	r0, r2
 8000bc4:	1e79      	subs	r1, r7, #1
 8000bc6:	418f      	sbcs	r7, r1
 8000bc8:	4305      	orrs	r5, r0
 8000bca:	433d      	orrs	r5, r7
 8000bcc:	4667      	mov	r7, ip
 8000bce:	40d7      	lsrs	r7, r2
 8000bd0:	19db      	adds	r3, r3, r7
 8000bd2:	e794      	b.n	8000afe <__aeabi_dadd+0x3f2>
 8000bd4:	4a80      	ldr	r2, [pc, #512]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dadd+0x4d0>
 8000bda:	e0ec      	b.n	8000db6 <__aeabi_dadd+0x6aa>
 8000bdc:	0039      	movs	r1, r7
 8000bde:	4449      	add	r1, r9
 8000be0:	4549      	cmp	r1, r9
 8000be2:	4192      	sbcs	r2, r2
 8000be4:	4463      	add	r3, ip
 8000be6:	4252      	negs	r2, r2
 8000be8:	189b      	adds	r3, r3, r2
 8000bea:	07dd      	lsls	r5, r3, #31
 8000bec:	0849      	lsrs	r1, r1, #1
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	0006      	movs	r6, r0
 8000bf4:	430d      	orrs	r5, r1
 8000bf6:	e6a5      	b.n	8000944 <__aeabi_dadd+0x238>
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	1abd      	subs	r5, r7, r2
 8000bfc:	42af      	cmp	r7, r5
 8000bfe:	4189      	sbcs	r1, r1
 8000c00:	4662      	mov	r2, ip
 8000c02:	4249      	negs	r1, r1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	1a5b      	subs	r3, r3, r1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	4654      	mov	r4, sl
 8000c0c:	e5d1      	b.n	80007b2 <__aeabi_dadd+0xa6>
 8000c0e:	076c      	lsls	r4, r5, #29
 8000c10:	08f9      	lsrs	r1, r7, #3
 8000c12:	4321      	orrs	r1, r4
 8000c14:	08eb      	lsrs	r3, r5, #3
 8000c16:	0004      	movs	r4, r0
 8000c18:	e69d      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	d175      	bne.n	8000d0c <__aeabi_dadd+0x600>
 8000c20:	4661      	mov	r1, ip
 8000c22:	4339      	orrs	r1, r7
 8000c24:	d114      	bne.n	8000c50 <__aeabi_dadd+0x544>
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	2400      	movs	r4, #0
 8000c2a:	031b      	lsls	r3, r3, #12
 8000c2c:	e6bc      	b.n	80009a8 <__aeabi_dadd+0x29c>
 8000c2e:	464a      	mov	r2, r9
 8000c30:	1bd5      	subs	r5, r2, r7
 8000c32:	45a9      	cmp	r9, r5
 8000c34:	4189      	sbcs	r1, r1
 8000c36:	4662      	mov	r2, ip
 8000c38:	4249      	negs	r1, r1
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	4698      	mov	r8, r3
 8000c40:	2601      	movs	r6, #1
 8000c42:	e5ae      	b.n	80007a2 <__aeabi_dadd+0x96>
 8000c44:	464a      	mov	r2, r9
 8000c46:	08d1      	lsrs	r1, r2, #3
 8000c48:	075a      	lsls	r2, r3, #29
 8000c4a:	4311      	orrs	r1, r2
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	e6a7      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000c50:	4663      	mov	r3, ip
 8000c52:	08f9      	lsrs	r1, r7, #3
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	4654      	mov	r4, sl
 8000c58:	4311      	orrs	r1, r2
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	e6a0      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000c5e:	464a      	mov	r2, r9
 8000c60:	4313      	orrs	r3, r2
 8000c62:	001d      	movs	r5, r3
 8000c64:	1e6b      	subs	r3, r5, #1
 8000c66:	419d      	sbcs	r5, r3
 8000c68:	e6c7      	b.n	80009fa <__aeabi_dadd+0x2ee>
 8000c6a:	0014      	movs	r4, r2
 8000c6c:	001e      	movs	r6, r3
 8000c6e:	3c20      	subs	r4, #32
 8000c70:	40e6      	lsrs	r6, r4
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d005      	beq.n	8000c82 <__aeabi_dadd+0x576>
 8000c76:	2440      	movs	r4, #64	; 0x40
 8000c78:	1aa2      	subs	r2, r4, r2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	4691      	mov	r9, r2
 8000c82:	464d      	mov	r5, r9
 8000c84:	1e6b      	subs	r3, r5, #1
 8000c86:	419d      	sbcs	r5, r3
 8000c88:	4335      	orrs	r5, r6
 8000c8a:	e778      	b.n	8000b7e <__aeabi_dadd+0x472>
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	d000      	beq.n	8000c94 <__aeabi_dadd+0x588>
 8000c92:	e66b      	b.n	800096c <__aeabi_dadd+0x260>
 8000c94:	076b      	lsls	r3, r5, #29
 8000c96:	08f9      	lsrs	r1, r7, #3
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	08eb      	lsrs	r3, r5, #3
 8000c9c:	e680      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000c9e:	4661      	mov	r1, ip
 8000ca0:	4339      	orrs	r1, r7
 8000ca2:	d054      	beq.n	8000d4e <__aeabi_dadd+0x642>
 8000ca4:	4663      	mov	r3, ip
 8000ca6:	08f9      	lsrs	r1, r7, #3
 8000ca8:	075c      	lsls	r4, r3, #29
 8000caa:	4321      	orrs	r1, r4
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	0004      	movs	r4, r0
 8000cb0:	e654      	b.n	800095c <__aeabi_dadd+0x250>
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	1abd      	subs	r5, r7, r2
 8000cb6:	42af      	cmp	r7, r5
 8000cb8:	4189      	sbcs	r1, r1
 8000cba:	4662      	mov	r2, ip
 8000cbc:	4249      	negs	r1, r1
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	4698      	mov	r8, r3
 8000cc4:	0004      	movs	r4, r0
 8000cc6:	2601      	movs	r6, #1
 8000cc8:	e56b      	b.n	80007a2 <__aeabi_dadd+0x96>
 8000cca:	464a      	mov	r2, r9
 8000ccc:	1bd5      	subs	r5, r2, r7
 8000cce:	45a9      	cmp	r9, r5
 8000cd0:	4189      	sbcs	r1, r1
 8000cd2:	4662      	mov	r2, ip
 8000cd4:	4249      	negs	r1, r1
 8000cd6:	1a9a      	subs	r2, r3, r2
 8000cd8:	1a52      	subs	r2, r2, r1
 8000cda:	4690      	mov	r8, r2
 8000cdc:	0212      	lsls	r2, r2, #8
 8000cde:	d532      	bpl.n	8000d46 <__aeabi_dadd+0x63a>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1abd      	subs	r5, r7, r2
 8000ce4:	42af      	cmp	r7, r5
 8000ce6:	4189      	sbcs	r1, r1
 8000ce8:	4662      	mov	r2, ip
 8000cea:	4249      	negs	r1, r1
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	1a5b      	subs	r3, r3, r1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	0004      	movs	r4, r0
 8000cf4:	e584      	b.n	8000800 <__aeabi_dadd+0xf4>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	08f9      	lsrs	r1, r7, #3
 8000cfa:	075a      	lsls	r2, r3, #29
 8000cfc:	4311      	orrs	r1, r2
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	e64e      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000d02:	08f9      	lsrs	r1, r7, #3
 8000d04:	0768      	lsls	r0, r5, #29
 8000d06:	4301      	orrs	r1, r0
 8000d08:	08eb      	lsrs	r3, r5, #3
 8000d0a:	e624      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	433a      	orrs	r2, r7
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x608>
 8000d12:	e698      	b.n	8000a46 <__aeabi_dadd+0x33a>
 8000d14:	464a      	mov	r2, r9
 8000d16:	08d1      	lsrs	r1, r2, #3
 8000d18:	075a      	lsls	r2, r3, #29
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	031b      	lsls	r3, r3, #12
 8000d22:	421a      	tst	r2, r3
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x62c>
 8000d26:	4660      	mov	r0, ip
 8000d28:	08c5      	lsrs	r5, r0, #3
 8000d2a:	421d      	tst	r5, r3
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x62c>
 8000d2e:	4654      	mov	r4, sl
 8000d30:	002a      	movs	r2, r5
 8000d32:	08f9      	lsrs	r1, r7, #3
 8000d34:	0743      	lsls	r3, r0, #29
 8000d36:	4319      	orrs	r1, r3
 8000d38:	0f4b      	lsrs	r3, r1, #29
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	075b      	lsls	r3, r3, #29
 8000d3e:	08c9      	lsrs	r1, r1, #3
 8000d40:	4319      	orrs	r1, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	e62c      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000d46:	4641      	mov	r1, r8
 8000d48:	4329      	orrs	r1, r5
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dadd+0x642>
 8000d4c:	e5fa      	b.n	8000944 <__aeabi_dadd+0x238>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	000a      	movs	r2, r1
 8000d52:	2400      	movs	r4, #0
 8000d54:	e602      	b.n	800095c <__aeabi_dadd+0x250>
 8000d56:	076b      	lsls	r3, r5, #29
 8000d58:	08f9      	lsrs	r1, r7, #3
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	08eb      	lsrs	r3, r5, #3
 8000d5e:	e5fd      	b.n	800095c <__aeabi_dadd+0x250>
 8000d60:	4663      	mov	r3, ip
 8000d62:	08f9      	lsrs	r1, r7, #3
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	4319      	orrs	r1, r3
 8000d68:	4663      	mov	r3, ip
 8000d6a:	0004      	movs	r4, r0
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	e617      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000d70:	003d      	movs	r5, r7
 8000d72:	444d      	add	r5, r9
 8000d74:	4463      	add	r3, ip
 8000d76:	454d      	cmp	r5, r9
 8000d78:	4189      	sbcs	r1, r1
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	4249      	negs	r1, r1
 8000d7e:	4488      	add	r8, r1
 8000d80:	4643      	mov	r3, r8
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_dadd+0x67c>
 8000d86:	e5dd      	b.n	8000944 <__aeabi_dadd+0x238>
 8000d88:	4642      	mov	r2, r8
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <__aeabi_dadd+0x6d0>)
 8000d8c:	2601      	movs	r6, #1
 8000d8e:	401a      	ands	r2, r3
 8000d90:	4690      	mov	r8, r2
 8000d92:	e5d7      	b.n	8000944 <__aeabi_dadd+0x238>
 8000d94:	0010      	movs	r0, r2
 8000d96:	001e      	movs	r6, r3
 8000d98:	3820      	subs	r0, #32
 8000d9a:	40c6      	lsrs	r6, r0
 8000d9c:	2a20      	cmp	r2, #32
 8000d9e:	d005      	beq.n	8000dac <__aeabi_dadd+0x6a0>
 8000da0:	2040      	movs	r0, #64	; 0x40
 8000da2:	1a82      	subs	r2, r0, r2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	464a      	mov	r2, r9
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	464d      	mov	r5, r9
 8000dae:	1e6b      	subs	r3, r5, #1
 8000db0:	419d      	sbcs	r5, r3
 8000db2:	4335      	orrs	r5, r6
 8000db4:	e621      	b.n	80009fa <__aeabi_dadd+0x2ee>
 8000db6:	0002      	movs	r2, r0
 8000db8:	2300      	movs	r3, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e540      	b.n	8000840 <__aeabi_dadd+0x134>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	19d5      	adds	r5, r2, r7
 8000dc2:	42bd      	cmp	r5, r7
 8000dc4:	4189      	sbcs	r1, r1
 8000dc6:	4463      	add	r3, ip
 8000dc8:	4698      	mov	r8, r3
 8000dca:	4249      	negs	r1, r1
 8000dcc:	4488      	add	r8, r1
 8000dce:	e5b3      	b.n	8000938 <__aeabi_dadd+0x22c>
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4a01      	ldr	r2, [pc, #4]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000dd4:	000b      	movs	r3, r1
 8000dd6:	e533      	b.n	8000840 <__aeabi_dadd+0x134>
 8000dd8:	000007ff 	.word	0x000007ff
 8000ddc:	ff7fffff 	.word	0xff7fffff

08000de0 <__aeabi_ddiv>:
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	4657      	mov	r7, sl
 8000de4:	464e      	mov	r6, r9
 8000de6:	4645      	mov	r5, r8
 8000de8:	46de      	mov	lr, fp
 8000dea:	b5e0      	push	{r5, r6, r7, lr}
 8000dec:	4681      	mov	r9, r0
 8000dee:	0005      	movs	r5, r0
 8000df0:	030c      	lsls	r4, r1, #12
 8000df2:	0048      	lsls	r0, r1, #1
 8000df4:	4692      	mov	sl, r2
 8000df6:	001f      	movs	r7, r3
 8000df8:	b085      	sub	sp, #20
 8000dfa:	0b24      	lsrs	r4, r4, #12
 8000dfc:	0d40      	lsrs	r0, r0, #21
 8000dfe:	0fce      	lsrs	r6, r1, #31
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d059      	beq.n	8000eb8 <__aeabi_ddiv+0xd8>
 8000e04:	4b87      	ldr	r3, [pc, #540]	; (8001024 <__aeabi_ddiv+0x244>)
 8000e06:	4298      	cmp	r0, r3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x2c>
 8000e0a:	e098      	b.n	8000f3e <__aeabi_ddiv+0x15e>
 8000e0c:	0f6b      	lsrs	r3, r5, #29
 8000e0e:	00e4      	lsls	r4, r4, #3
 8000e10:	431c      	orrs	r4, r3
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4323      	orrs	r3, r4
 8000e18:	4698      	mov	r8, r3
 8000e1a:	4b83      	ldr	r3, [pc, #524]	; (8001028 <__aeabi_ddiv+0x248>)
 8000e1c:	00ed      	lsls	r5, r5, #3
 8000e1e:	469b      	mov	fp, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	4699      	mov	r9, r3
 8000e24:	4483      	add	fp, r0
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	033c      	lsls	r4, r7, #12
 8000e2a:	007b      	lsls	r3, r7, #1
 8000e2c:	4650      	mov	r0, sl
 8000e2e:	0b24      	lsrs	r4, r4, #12
 8000e30:	0d5b      	lsrs	r3, r3, #21
 8000e32:	0fff      	lsrs	r7, r7, #31
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d067      	beq.n	8000f08 <__aeabi_ddiv+0x128>
 8000e38:	4a7a      	ldr	r2, [pc, #488]	; (8001024 <__aeabi_ddiv+0x244>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d018      	beq.n	8000e70 <__aeabi_ddiv+0x90>
 8000e3e:	497a      	ldr	r1, [pc, #488]	; (8001028 <__aeabi_ddiv+0x248>)
 8000e40:	0f42      	lsrs	r2, r0, #29
 8000e42:	468c      	mov	ip, r1
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	4659      	mov	r1, fp
 8000e48:	4314      	orrs	r4, r2
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	4463      	add	r3, ip
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	4314      	orrs	r4, r2
 8000e54:	469b      	mov	fp, r3
 8000e56:	00c2      	lsls	r2, r0, #3
 8000e58:	2000      	movs	r0, #0
 8000e5a:	0033      	movs	r3, r6
 8000e5c:	407b      	eors	r3, r7
 8000e5e:	469a      	mov	sl, r3
 8000e60:	464b      	mov	r3, r9
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d900      	bls.n	8000e68 <__aeabi_ddiv+0x88>
 8000e66:	e0ef      	b.n	8001048 <__aeabi_ddiv+0x268>
 8000e68:	4970      	ldr	r1, [pc, #448]	; (800102c <__aeabi_ddiv+0x24c>)
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	58cb      	ldr	r3, [r1, r3]
 8000e6e:	469f      	mov	pc, r3
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <__aeabi_ddiv+0x250>)
 8000e72:	4652      	mov	r2, sl
 8000e74:	469c      	mov	ip, r3
 8000e76:	4322      	orrs	r2, r4
 8000e78:	44e3      	add	fp, ip
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_ddiv+0xa0>
 8000e7e:	e095      	b.n	8000fac <__aeabi_ddiv+0x1cc>
 8000e80:	4649      	mov	r1, r9
 8000e82:	2302      	movs	r3, #2
 8000e84:	4319      	orrs	r1, r3
 8000e86:	4689      	mov	r9, r1
 8000e88:	2400      	movs	r4, #0
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	e7e5      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2400      	movs	r4, #0
 8000e92:	2500      	movs	r5, #0
 8000e94:	4652      	mov	r2, sl
 8000e96:	051b      	lsls	r3, r3, #20
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	07d2      	lsls	r2, r2, #31
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	b005      	add	sp, #20
 8000ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea6:	46bb      	mov	fp, r7
 8000ea8:	46b2      	mov	sl, r6
 8000eaa:	46a9      	mov	r9, r5
 8000eac:	46a0      	mov	r8, r4
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <__aeabi_ddiv+0x244>)
 8000eb6:	e7ed      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8000eb8:	464b      	mov	r3, r9
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_ddiv+0xe2>
 8000ec0:	e089      	b.n	8000fd6 <__aeabi_ddiv+0x1f6>
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_ddiv+0xe8>
 8000ec6:	e1e0      	b.n	800128a <__aeabi_ddiv+0x4aa>
 8000ec8:	0020      	movs	r0, r4
 8000eca:	f001 fa37 	bl	800233c <__clzsi2>
 8000ece:	0001      	movs	r1, r0
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	390b      	subs	r1, #11
 8000ed4:	231d      	movs	r3, #29
 8000ed6:	1a5b      	subs	r3, r3, r1
 8000ed8:	4649      	mov	r1, r9
 8000eda:	0010      	movs	r0, r2
 8000edc:	40d9      	lsrs	r1, r3
 8000ede:	3808      	subs	r0, #8
 8000ee0:	4084      	lsls	r4, r0
 8000ee2:	000b      	movs	r3, r1
 8000ee4:	464d      	mov	r5, r9
 8000ee6:	4323      	orrs	r3, r4
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4085      	lsls	r5, r0
 8000eec:	4851      	ldr	r0, [pc, #324]	; (8001034 <__aeabi_ddiv+0x254>)
 8000eee:	033c      	lsls	r4, r7, #12
 8000ef0:	1a83      	subs	r3, r0, r2
 8000ef2:	469b      	mov	fp, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	007b      	lsls	r3, r7, #1
 8000efc:	4650      	mov	r0, sl
 8000efe:	0b24      	lsrs	r4, r4, #12
 8000f00:	0d5b      	lsrs	r3, r3, #21
 8000f02:	0fff      	lsrs	r7, r7, #31
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d197      	bne.n	8000e38 <__aeabi_ddiv+0x58>
 8000f08:	4652      	mov	r2, sl
 8000f0a:	4322      	orrs	r2, r4
 8000f0c:	d055      	beq.n	8000fba <__aeabi_ddiv+0x1da>
 8000f0e:	2c00      	cmp	r4, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x134>
 8000f12:	e1ca      	b.n	80012aa <__aeabi_ddiv+0x4ca>
 8000f14:	0020      	movs	r0, r4
 8000f16:	f001 fa11 	bl	800233c <__clzsi2>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	3a0b      	subs	r2, #11
 8000f1e:	231d      	movs	r3, #29
 8000f20:	0001      	movs	r1, r0
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	4652      	mov	r2, sl
 8000f26:	3908      	subs	r1, #8
 8000f28:	40da      	lsrs	r2, r3
 8000f2a:	408c      	lsls	r4, r1
 8000f2c:	4314      	orrs	r4, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	408a      	lsls	r2, r1
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <__aeabi_ddiv+0x258>)
 8000f34:	4458      	add	r0, fp
 8000f36:	469b      	mov	fp, r3
 8000f38:	4483      	add	fp, r0
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	e78d      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000f3e:	464b      	mov	r3, r9
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4698      	mov	r8, r3
 8000f44:	d140      	bne.n	8000fc8 <__aeabi_ddiv+0x1e8>
 8000f46:	2308      	movs	r3, #8
 8000f48:	4699      	mov	r9, r3
 8000f4a:	3b06      	subs	r3, #6
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	4683      	mov	fp, r0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	e769      	b.n	8000e28 <__aeabi_ddiv+0x48>
 8000f54:	46b2      	mov	sl, r6
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d0a9      	beq.n	8000eb0 <__aeabi_ddiv+0xd0>
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x182>
 8000f60:	e211      	b.n	8001386 <__aeabi_ddiv+0x5a6>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d093      	beq.n	8000e8e <__aeabi_ddiv+0xae>
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <__aeabi_ddiv+0x25c>)
 8000f68:	445a      	add	r2, fp
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	dc00      	bgt.n	8000f70 <__aeabi_ddiv+0x190>
 8000f6e:	e13c      	b.n	80011ea <__aeabi_ddiv+0x40a>
 8000f70:	076b      	lsls	r3, r5, #29
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x196>
 8000f74:	e1a7      	b.n	80012c6 <__aeabi_ddiv+0x4e6>
 8000f76:	08ed      	lsrs	r5, r5, #3
 8000f78:	4643      	mov	r3, r8
 8000f7a:	01db      	lsls	r3, r3, #7
 8000f7c:	d506      	bpl.n	8000f8c <__aeabi_ddiv+0x1ac>
 8000f7e:	4642      	mov	r2, r8
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <__aeabi_ddiv+0x260>)
 8000f82:	401a      	ands	r2, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	445a      	add	r2, fp
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <__aeabi_ddiv+0x264>)
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dc8e      	bgt.n	8000eb0 <__aeabi_ddiv+0xd0>
 8000f92:	4643      	mov	r3, r8
 8000f94:	0552      	lsls	r2, r2, #21
 8000f96:	0758      	lsls	r0, r3, #29
 8000f98:	025c      	lsls	r4, r3, #9
 8000f9a:	4305      	orrs	r5, r0
 8000f9c:	0b24      	lsrs	r4, r4, #12
 8000f9e:	0d53      	lsrs	r3, r2, #21
 8000fa0:	e778      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8000fa2:	46ba      	mov	sl, r7
 8000fa4:	46a0      	mov	r8, r4
 8000fa6:	0015      	movs	r5, r2
 8000fa8:	9000      	str	r0, [sp, #0]
 8000faa:	e7d4      	b.n	8000f56 <__aeabi_ddiv+0x176>
 8000fac:	464a      	mov	r2, r9
 8000fae:	2303      	movs	r3, #3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	4652      	mov	r2, sl
 8000fb8:	e74f      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000fba:	4649      	mov	r1, r9
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4319      	orrs	r1, r3
 8000fc0:	4689      	mov	r9, r1
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	e748      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	4699      	mov	r9, r3
 8000fcc:	3b09      	subs	r3, #9
 8000fce:	46a0      	mov	r8, r4
 8000fd0:	4683      	mov	fp, r0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	e728      	b.n	8000e28 <__aeabi_ddiv+0x48>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	4699      	mov	r9, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	469b      	mov	fp, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	e720      	b.n	8000e28 <__aeabi_ddiv+0x48>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2480      	movs	r4, #128	; 0x80
 8000fea:	469a      	mov	sl, r3
 8000fec:	2500      	movs	r5, #0
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <__aeabi_ddiv+0x244>)
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	e74f      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	4641      	mov	r1, r8
 8000ff8:	031b      	lsls	r3, r3, #12
 8000ffa:	4219      	tst	r1, r3
 8000ffc:	d008      	beq.n	8001010 <__aeabi_ddiv+0x230>
 8000ffe:	421c      	tst	r4, r3
 8001000:	d106      	bne.n	8001010 <__aeabi_ddiv+0x230>
 8001002:	431c      	orrs	r4, r3
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	46ba      	mov	sl, r7
 8001008:	0015      	movs	r5, r2
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <__aeabi_ddiv+0x244>)
 800100c:	0b24      	lsrs	r4, r4, #12
 800100e:	e741      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001010:	2480      	movs	r4, #128	; 0x80
 8001012:	4643      	mov	r3, r8
 8001014:	0324      	lsls	r4, r4, #12
 8001016:	431c      	orrs	r4, r3
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	46b2      	mov	sl, r6
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <__aeabi_ddiv+0x244>)
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	e738      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	000007ff 	.word	0x000007ff
 8001028:	fffffc01 	.word	0xfffffc01
 800102c:	0800b210 	.word	0x0800b210
 8001030:	fffff801 	.word	0xfffff801
 8001034:	fffffc0d 	.word	0xfffffc0d
 8001038:	000003f3 	.word	0x000003f3
 800103c:	000003ff 	.word	0x000003ff
 8001040:	feffffff 	.word	0xfeffffff
 8001044:	000007fe 	.word	0x000007fe
 8001048:	4544      	cmp	r4, r8
 800104a:	d200      	bcs.n	800104e <__aeabi_ddiv+0x26e>
 800104c:	e116      	b.n	800127c <__aeabi_ddiv+0x49c>
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x272>
 8001050:	e111      	b.n	8001276 <__aeabi_ddiv+0x496>
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	469c      	mov	ip, r3
 8001058:	002e      	movs	r6, r5
 800105a:	4640      	mov	r0, r8
 800105c:	2500      	movs	r5, #0
 800105e:	44e3      	add	fp, ip
 8001060:	0223      	lsls	r3, r4, #8
 8001062:	0e14      	lsrs	r4, r2, #24
 8001064:	431c      	orrs	r4, r3
 8001066:	0c1b      	lsrs	r3, r3, #16
 8001068:	4699      	mov	r9, r3
 800106a:	0423      	lsls	r3, r4, #16
 800106c:	0c1f      	lsrs	r7, r3, #16
 800106e:	0212      	lsls	r2, r2, #8
 8001070:	4649      	mov	r1, r9
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	9701      	str	r7, [sp, #4]
 8001076:	f7ff f8e9 	bl	800024c <__aeabi_uidivmod>
 800107a:	0002      	movs	r2, r0
 800107c:	437a      	muls	r2, r7
 800107e:	040b      	lsls	r3, r1, #16
 8001080:	0c31      	lsrs	r1, r6, #16
 8001082:	4680      	mov	r8, r0
 8001084:	4319      	orrs	r1, r3
 8001086:	428a      	cmp	r2, r1
 8001088:	d90b      	bls.n	80010a2 <__aeabi_ddiv+0x2c2>
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	469c      	mov	ip, r3
 8001090:	1909      	adds	r1, r1, r4
 8001092:	44e0      	add	r8, ip
 8001094:	428c      	cmp	r4, r1
 8001096:	d804      	bhi.n	80010a2 <__aeabi_ddiv+0x2c2>
 8001098:	428a      	cmp	r2, r1
 800109a:	d902      	bls.n	80010a2 <__aeabi_ddiv+0x2c2>
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	4698      	mov	r8, r3
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1a88      	subs	r0, r1, r2
 80010a4:	4649      	mov	r1, r9
 80010a6:	f7ff f8d1 	bl	800024c <__aeabi_uidivmod>
 80010aa:	0409      	lsls	r1, r1, #16
 80010ac:	468c      	mov	ip, r1
 80010ae:	0431      	lsls	r1, r6, #16
 80010b0:	4666      	mov	r6, ip
 80010b2:	9a01      	ldr	r2, [sp, #4]
 80010b4:	0c09      	lsrs	r1, r1, #16
 80010b6:	4342      	muls	r2, r0
 80010b8:	0003      	movs	r3, r0
 80010ba:	4331      	orrs	r1, r6
 80010bc:	428a      	cmp	r2, r1
 80010be:	d904      	bls.n	80010ca <__aeabi_ddiv+0x2ea>
 80010c0:	1909      	adds	r1, r1, r4
 80010c2:	3b01      	subs	r3, #1
 80010c4:	428c      	cmp	r4, r1
 80010c6:	d800      	bhi.n	80010ca <__aeabi_ddiv+0x2ea>
 80010c8:	e111      	b.n	80012ee <__aeabi_ddiv+0x50e>
 80010ca:	1a89      	subs	r1, r1, r2
 80010cc:	4642      	mov	r2, r8
 80010ce:	9e00      	ldr	r6, [sp, #0]
 80010d0:	0412      	lsls	r2, r2, #16
 80010d2:	431a      	orrs	r2, r3
 80010d4:	0c33      	lsrs	r3, r6, #16
 80010d6:	001f      	movs	r7, r3
 80010d8:	0c10      	lsrs	r0, r2, #16
 80010da:	4690      	mov	r8, r2
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	0413      	lsls	r3, r2, #16
 80010e0:	0432      	lsls	r2, r6, #16
 80010e2:	0c16      	lsrs	r6, r2, #16
 80010e4:	0032      	movs	r2, r6
 80010e6:	0c1b      	lsrs	r3, r3, #16
 80010e8:	435a      	muls	r2, r3
 80010ea:	9603      	str	r6, [sp, #12]
 80010ec:	437b      	muls	r3, r7
 80010ee:	4346      	muls	r6, r0
 80010f0:	4378      	muls	r0, r7
 80010f2:	0c17      	lsrs	r7, r2, #16
 80010f4:	46bc      	mov	ip, r7
 80010f6:	199b      	adds	r3, r3, r6
 80010f8:	4463      	add	r3, ip
 80010fa:	429e      	cmp	r6, r3
 80010fc:	d903      	bls.n	8001106 <__aeabi_ddiv+0x326>
 80010fe:	2680      	movs	r6, #128	; 0x80
 8001100:	0276      	lsls	r6, r6, #9
 8001102:	46b4      	mov	ip, r6
 8001104:	4460      	add	r0, ip
 8001106:	0c1e      	lsrs	r6, r3, #16
 8001108:	1830      	adds	r0, r6, r0
 800110a:	0416      	lsls	r6, r2, #16
 800110c:	041b      	lsls	r3, r3, #16
 800110e:	0c36      	lsrs	r6, r6, #16
 8001110:	199e      	adds	r6, r3, r6
 8001112:	4281      	cmp	r1, r0
 8001114:	d200      	bcs.n	8001118 <__aeabi_ddiv+0x338>
 8001116:	e09c      	b.n	8001252 <__aeabi_ddiv+0x472>
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x33c>
 800111a:	e097      	b.n	800124c <__aeabi_ddiv+0x46c>
 800111c:	1bae      	subs	r6, r5, r6
 800111e:	1a09      	subs	r1, r1, r0
 8001120:	42b5      	cmp	r5, r6
 8001122:	4180      	sbcs	r0, r0
 8001124:	4240      	negs	r0, r0
 8001126:	1a08      	subs	r0, r1, r0
 8001128:	4284      	cmp	r4, r0
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0x34e>
 800112c:	e111      	b.n	8001352 <__aeabi_ddiv+0x572>
 800112e:	4649      	mov	r1, r9
 8001130:	f7ff f88c 	bl	800024c <__aeabi_uidivmod>
 8001134:	9a01      	ldr	r2, [sp, #4]
 8001136:	040b      	lsls	r3, r1, #16
 8001138:	4342      	muls	r2, r0
 800113a:	0c31      	lsrs	r1, r6, #16
 800113c:	0005      	movs	r5, r0
 800113e:	4319      	orrs	r1, r3
 8001140:	428a      	cmp	r2, r1
 8001142:	d907      	bls.n	8001154 <__aeabi_ddiv+0x374>
 8001144:	1909      	adds	r1, r1, r4
 8001146:	3d01      	subs	r5, #1
 8001148:	428c      	cmp	r4, r1
 800114a:	d803      	bhi.n	8001154 <__aeabi_ddiv+0x374>
 800114c:	428a      	cmp	r2, r1
 800114e:	d901      	bls.n	8001154 <__aeabi_ddiv+0x374>
 8001150:	1e85      	subs	r5, r0, #2
 8001152:	1909      	adds	r1, r1, r4
 8001154:	1a88      	subs	r0, r1, r2
 8001156:	4649      	mov	r1, r9
 8001158:	f7ff f878 	bl	800024c <__aeabi_uidivmod>
 800115c:	0409      	lsls	r1, r1, #16
 800115e:	468c      	mov	ip, r1
 8001160:	0431      	lsls	r1, r6, #16
 8001162:	4666      	mov	r6, ip
 8001164:	9a01      	ldr	r2, [sp, #4]
 8001166:	0c09      	lsrs	r1, r1, #16
 8001168:	4342      	muls	r2, r0
 800116a:	0003      	movs	r3, r0
 800116c:	4331      	orrs	r1, r6
 800116e:	428a      	cmp	r2, r1
 8001170:	d907      	bls.n	8001182 <__aeabi_ddiv+0x3a2>
 8001172:	1909      	adds	r1, r1, r4
 8001174:	3b01      	subs	r3, #1
 8001176:	428c      	cmp	r4, r1
 8001178:	d803      	bhi.n	8001182 <__aeabi_ddiv+0x3a2>
 800117a:	428a      	cmp	r2, r1
 800117c:	d901      	bls.n	8001182 <__aeabi_ddiv+0x3a2>
 800117e:	1e83      	subs	r3, r0, #2
 8001180:	1909      	adds	r1, r1, r4
 8001182:	9e03      	ldr	r6, [sp, #12]
 8001184:	1a89      	subs	r1, r1, r2
 8001186:	0032      	movs	r2, r6
 8001188:	042d      	lsls	r5, r5, #16
 800118a:	431d      	orrs	r5, r3
 800118c:	9f02      	ldr	r7, [sp, #8]
 800118e:	042b      	lsls	r3, r5, #16
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	435a      	muls	r2, r3
 8001194:	437b      	muls	r3, r7
 8001196:	469c      	mov	ip, r3
 8001198:	0c28      	lsrs	r0, r5, #16
 800119a:	4346      	muls	r6, r0
 800119c:	0c13      	lsrs	r3, r2, #16
 800119e:	44b4      	add	ip, r6
 80011a0:	4463      	add	r3, ip
 80011a2:	4378      	muls	r0, r7
 80011a4:	429e      	cmp	r6, r3
 80011a6:	d903      	bls.n	80011b0 <__aeabi_ddiv+0x3d0>
 80011a8:	2680      	movs	r6, #128	; 0x80
 80011aa:	0276      	lsls	r6, r6, #9
 80011ac:	46b4      	mov	ip, r6
 80011ae:	4460      	add	r0, ip
 80011b0:	0c1e      	lsrs	r6, r3, #16
 80011b2:	0412      	lsls	r2, r2, #16
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	1830      	adds	r0, r6, r0
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	4281      	cmp	r1, r0
 80011be:	d306      	bcc.n	80011ce <__aeabi_ddiv+0x3ee>
 80011c0:	d002      	beq.n	80011c8 <__aeabi_ddiv+0x3e8>
 80011c2:	2301      	movs	r3, #1
 80011c4:	431d      	orrs	r5, r3
 80011c6:	e6ce      	b.n	8000f66 <__aeabi_ddiv+0x186>
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x3ee>
 80011cc:	e6cb      	b.n	8000f66 <__aeabi_ddiv+0x186>
 80011ce:	1861      	adds	r1, r4, r1
 80011d0:	1e6e      	subs	r6, r5, #1
 80011d2:	42a1      	cmp	r1, r4
 80011d4:	d200      	bcs.n	80011d8 <__aeabi_ddiv+0x3f8>
 80011d6:	e0a4      	b.n	8001322 <__aeabi_ddiv+0x542>
 80011d8:	4281      	cmp	r1, r0
 80011da:	d200      	bcs.n	80011de <__aeabi_ddiv+0x3fe>
 80011dc:	e0c9      	b.n	8001372 <__aeabi_ddiv+0x592>
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x402>
 80011e0:	e0d9      	b.n	8001396 <__aeabi_ddiv+0x5b6>
 80011e2:	0035      	movs	r5, r6
 80011e4:	e7ed      	b.n	80011c2 <__aeabi_ddiv+0x3e2>
 80011e6:	2501      	movs	r5, #1
 80011e8:	426d      	negs	r5, r5
 80011ea:	2101      	movs	r1, #1
 80011ec:	1a89      	subs	r1, r1, r2
 80011ee:	2938      	cmp	r1, #56	; 0x38
 80011f0:	dd00      	ble.n	80011f4 <__aeabi_ddiv+0x414>
 80011f2:	e64c      	b.n	8000e8e <__aeabi_ddiv+0xae>
 80011f4:	291f      	cmp	r1, #31
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_ddiv+0x41a>
 80011f8:	e07f      	b.n	80012fa <__aeabi_ddiv+0x51a>
 80011fa:	231f      	movs	r3, #31
 80011fc:	425b      	negs	r3, r3
 80011fe:	1a9a      	subs	r2, r3, r2
 8001200:	4643      	mov	r3, r8
 8001202:	40d3      	lsrs	r3, r2
 8001204:	2920      	cmp	r1, #32
 8001206:	d004      	beq.n	8001212 <__aeabi_ddiv+0x432>
 8001208:	4644      	mov	r4, r8
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <__aeabi_ddiv+0x5c0>)
 800120c:	445a      	add	r2, fp
 800120e:	4094      	lsls	r4, r2
 8001210:	4325      	orrs	r5, r4
 8001212:	1e6a      	subs	r2, r5, #1
 8001214:	4195      	sbcs	r5, r2
 8001216:	2207      	movs	r2, #7
 8001218:	432b      	orrs	r3, r5
 800121a:	0015      	movs	r5, r2
 800121c:	2400      	movs	r4, #0
 800121e:	401d      	ands	r5, r3
 8001220:	421a      	tst	r2, r3
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x446>
 8001224:	e0a1      	b.n	800136a <__aeabi_ddiv+0x58a>
 8001226:	220f      	movs	r2, #15
 8001228:	2400      	movs	r4, #0
 800122a:	401a      	ands	r2, r3
 800122c:	2a04      	cmp	r2, #4
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x452>
 8001230:	e098      	b.n	8001364 <__aeabi_ddiv+0x584>
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	429a      	cmp	r2, r3
 8001236:	419b      	sbcs	r3, r3
 8001238:	425b      	negs	r3, r3
 800123a:	18e4      	adds	r4, r4, r3
 800123c:	0013      	movs	r3, r2
 800123e:	0222      	lsls	r2, r4, #8
 8001240:	d400      	bmi.n	8001244 <__aeabi_ddiv+0x464>
 8001242:	e08f      	b.n	8001364 <__aeabi_ddiv+0x584>
 8001244:	2301      	movs	r3, #1
 8001246:	2400      	movs	r4, #0
 8001248:	2500      	movs	r5, #0
 800124a:	e623      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 800124c:	42b5      	cmp	r5, r6
 800124e:	d300      	bcc.n	8001252 <__aeabi_ddiv+0x472>
 8001250:	e764      	b.n	800111c <__aeabi_ddiv+0x33c>
 8001252:	4643      	mov	r3, r8
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	9b00      	ldr	r3, [sp, #0]
 8001258:	469c      	mov	ip, r3
 800125a:	4465      	add	r5, ip
 800125c:	001f      	movs	r7, r3
 800125e:	429d      	cmp	r5, r3
 8001260:	419b      	sbcs	r3, r3
 8001262:	425b      	negs	r3, r3
 8001264:	191b      	adds	r3, r3, r4
 8001266:	18c9      	adds	r1, r1, r3
 8001268:	428c      	cmp	r4, r1
 800126a:	d23a      	bcs.n	80012e2 <__aeabi_ddiv+0x502>
 800126c:	4288      	cmp	r0, r1
 800126e:	d863      	bhi.n	8001338 <__aeabi_ddiv+0x558>
 8001270:	d060      	beq.n	8001334 <__aeabi_ddiv+0x554>
 8001272:	4690      	mov	r8, r2
 8001274:	e752      	b.n	800111c <__aeabi_ddiv+0x33c>
 8001276:	42aa      	cmp	r2, r5
 8001278:	d900      	bls.n	800127c <__aeabi_ddiv+0x49c>
 800127a:	e6ea      	b.n	8001052 <__aeabi_ddiv+0x272>
 800127c:	4643      	mov	r3, r8
 800127e:	07de      	lsls	r6, r3, #31
 8001280:	0858      	lsrs	r0, r3, #1
 8001282:	086b      	lsrs	r3, r5, #1
 8001284:	431e      	orrs	r6, r3
 8001286:	07ed      	lsls	r5, r5, #31
 8001288:	e6ea      	b.n	8001060 <__aeabi_ddiv+0x280>
 800128a:	4648      	mov	r0, r9
 800128c:	f001 f856 	bl	800233c <__clzsi2>
 8001290:	0001      	movs	r1, r0
 8001292:	0002      	movs	r2, r0
 8001294:	3115      	adds	r1, #21
 8001296:	3220      	adds	r2, #32
 8001298:	291c      	cmp	r1, #28
 800129a:	dc00      	bgt.n	800129e <__aeabi_ddiv+0x4be>
 800129c:	e61a      	b.n	8000ed4 <__aeabi_ddiv+0xf4>
 800129e:	464b      	mov	r3, r9
 80012a0:	3808      	subs	r0, #8
 80012a2:	4083      	lsls	r3, r0
 80012a4:	2500      	movs	r5, #0
 80012a6:	4698      	mov	r8, r3
 80012a8:	e620      	b.n	8000eec <__aeabi_ddiv+0x10c>
 80012aa:	f001 f847 	bl	800233c <__clzsi2>
 80012ae:	0003      	movs	r3, r0
 80012b0:	001a      	movs	r2, r3
 80012b2:	3215      	adds	r2, #21
 80012b4:	3020      	adds	r0, #32
 80012b6:	2a1c      	cmp	r2, #28
 80012b8:	dc00      	bgt.n	80012bc <__aeabi_ddiv+0x4dc>
 80012ba:	e630      	b.n	8000f1e <__aeabi_ddiv+0x13e>
 80012bc:	4654      	mov	r4, sl
 80012be:	3b08      	subs	r3, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	409c      	lsls	r4, r3
 80012c4:	e635      	b.n	8000f32 <__aeabi_ddiv+0x152>
 80012c6:	230f      	movs	r3, #15
 80012c8:	402b      	ands	r3, r5
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d100      	bne.n	80012d0 <__aeabi_ddiv+0x4f0>
 80012ce:	e652      	b.n	8000f76 <__aeabi_ddiv+0x196>
 80012d0:	2305      	movs	r3, #5
 80012d2:	425b      	negs	r3, r3
 80012d4:	42ab      	cmp	r3, r5
 80012d6:	419b      	sbcs	r3, r3
 80012d8:	3504      	adds	r5, #4
 80012da:	425b      	negs	r3, r3
 80012dc:	08ed      	lsrs	r5, r5, #3
 80012de:	4498      	add	r8, r3
 80012e0:	e64a      	b.n	8000f78 <__aeabi_ddiv+0x198>
 80012e2:	428c      	cmp	r4, r1
 80012e4:	d1c5      	bne.n	8001272 <__aeabi_ddiv+0x492>
 80012e6:	42af      	cmp	r7, r5
 80012e8:	d9c0      	bls.n	800126c <__aeabi_ddiv+0x48c>
 80012ea:	4690      	mov	r8, r2
 80012ec:	e716      	b.n	800111c <__aeabi_ddiv+0x33c>
 80012ee:	428a      	cmp	r2, r1
 80012f0:	d800      	bhi.n	80012f4 <__aeabi_ddiv+0x514>
 80012f2:	e6ea      	b.n	80010ca <__aeabi_ddiv+0x2ea>
 80012f4:	1e83      	subs	r3, r0, #2
 80012f6:	1909      	adds	r1, r1, r4
 80012f8:	e6e7      	b.n	80010ca <__aeabi_ddiv+0x2ea>
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <__aeabi_ddiv+0x5c4>)
 80012fc:	0028      	movs	r0, r5
 80012fe:	445a      	add	r2, fp
 8001300:	4643      	mov	r3, r8
 8001302:	4095      	lsls	r5, r2
 8001304:	4093      	lsls	r3, r2
 8001306:	40c8      	lsrs	r0, r1
 8001308:	1e6a      	subs	r2, r5, #1
 800130a:	4195      	sbcs	r5, r2
 800130c:	4644      	mov	r4, r8
 800130e:	4303      	orrs	r3, r0
 8001310:	432b      	orrs	r3, r5
 8001312:	40cc      	lsrs	r4, r1
 8001314:	075a      	lsls	r2, r3, #29
 8001316:	d092      	beq.n	800123e <__aeabi_ddiv+0x45e>
 8001318:	220f      	movs	r2, #15
 800131a:	401a      	ands	r2, r3
 800131c:	2a04      	cmp	r2, #4
 800131e:	d188      	bne.n	8001232 <__aeabi_ddiv+0x452>
 8001320:	e78d      	b.n	800123e <__aeabi_ddiv+0x45e>
 8001322:	0035      	movs	r5, r6
 8001324:	4281      	cmp	r1, r0
 8001326:	d000      	beq.n	800132a <__aeabi_ddiv+0x54a>
 8001328:	e74b      	b.n	80011c2 <__aeabi_ddiv+0x3e2>
 800132a:	9a00      	ldr	r2, [sp, #0]
 800132c:	4293      	cmp	r3, r2
 800132e:	d000      	beq.n	8001332 <__aeabi_ddiv+0x552>
 8001330:	e747      	b.n	80011c2 <__aeabi_ddiv+0x3e2>
 8001332:	e618      	b.n	8000f66 <__aeabi_ddiv+0x186>
 8001334:	42ae      	cmp	r6, r5
 8001336:	d99c      	bls.n	8001272 <__aeabi_ddiv+0x492>
 8001338:	2302      	movs	r3, #2
 800133a:	425b      	negs	r3, r3
 800133c:	469c      	mov	ip, r3
 800133e:	9b00      	ldr	r3, [sp, #0]
 8001340:	44e0      	add	r8, ip
 8001342:	469c      	mov	ip, r3
 8001344:	4465      	add	r5, ip
 8001346:	429d      	cmp	r5, r3
 8001348:	419b      	sbcs	r3, r3
 800134a:	425b      	negs	r3, r3
 800134c:	191b      	adds	r3, r3, r4
 800134e:	18c9      	adds	r1, r1, r3
 8001350:	e6e4      	b.n	800111c <__aeabi_ddiv+0x33c>
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <__aeabi_ddiv+0x5c8>)
 8001354:	445a      	add	r2, fp
 8001356:	2a00      	cmp	r2, #0
 8001358:	dc00      	bgt.n	800135c <__aeabi_ddiv+0x57c>
 800135a:	e744      	b.n	80011e6 <__aeabi_ddiv+0x406>
 800135c:	2301      	movs	r3, #1
 800135e:	2500      	movs	r5, #0
 8001360:	4498      	add	r8, r3
 8001362:	e609      	b.n	8000f78 <__aeabi_ddiv+0x198>
 8001364:	0765      	lsls	r5, r4, #29
 8001366:	0264      	lsls	r4, r4, #9
 8001368:	0b24      	lsrs	r4, r4, #12
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	431d      	orrs	r5, r3
 800136e:	2300      	movs	r3, #0
 8001370:	e590      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001372:	9e00      	ldr	r6, [sp, #0]
 8001374:	3d02      	subs	r5, #2
 8001376:	0072      	lsls	r2, r6, #1
 8001378:	42b2      	cmp	r2, r6
 800137a:	41bf      	sbcs	r7, r7
 800137c:	427f      	negs	r7, r7
 800137e:	193c      	adds	r4, r7, r4
 8001380:	1909      	adds	r1, r1, r4
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	e7ce      	b.n	8001324 <__aeabi_ddiv+0x544>
 8001386:	2480      	movs	r4, #128	; 0x80
 8001388:	4643      	mov	r3, r8
 800138a:	0324      	lsls	r4, r4, #12
 800138c:	431c      	orrs	r4, r3
 800138e:	0324      	lsls	r4, r4, #12
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <__aeabi_ddiv+0x5cc>)
 8001392:	0b24      	lsrs	r4, r4, #12
 8001394:	e57e      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001396:	9a00      	ldr	r2, [sp, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d3ea      	bcc.n	8001372 <__aeabi_ddiv+0x592>
 800139c:	0035      	movs	r5, r6
 800139e:	e7c4      	b.n	800132a <__aeabi_ddiv+0x54a>
 80013a0:	0000043e 	.word	0x0000043e
 80013a4:	0000041e 	.word	0x0000041e
 80013a8:	000003ff 	.word	0x000003ff
 80013ac:	000007ff 	.word	0x000007ff

080013b0 <__eqdf2>:
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	464f      	mov	r7, r9
 80013b4:	4646      	mov	r6, r8
 80013b6:	46d6      	mov	lr, sl
 80013b8:	4694      	mov	ip, r2
 80013ba:	4691      	mov	r9, r2
 80013bc:	031a      	lsls	r2, r3, #12
 80013be:	0b12      	lsrs	r2, r2, #12
 80013c0:	4d18      	ldr	r5, [pc, #96]	; (8001424 <__eqdf2+0x74>)
 80013c2:	b5c0      	push	{r6, r7, lr}
 80013c4:	004c      	lsls	r4, r1, #1
 80013c6:	030f      	lsls	r7, r1, #12
 80013c8:	4692      	mov	sl, r2
 80013ca:	005a      	lsls	r2, r3, #1
 80013cc:	0006      	movs	r6, r0
 80013ce:	4680      	mov	r8, r0
 80013d0:	0b3f      	lsrs	r7, r7, #12
 80013d2:	2001      	movs	r0, #1
 80013d4:	0d64      	lsrs	r4, r4, #21
 80013d6:	0fc9      	lsrs	r1, r1, #31
 80013d8:	0d52      	lsrs	r2, r2, #21
 80013da:	0fdb      	lsrs	r3, r3, #31
 80013dc:	42ac      	cmp	r4, r5
 80013de:	d00a      	beq.n	80013f6 <__eqdf2+0x46>
 80013e0:	42aa      	cmp	r2, r5
 80013e2:	d003      	beq.n	80013ec <__eqdf2+0x3c>
 80013e4:	4294      	cmp	r4, r2
 80013e6:	d101      	bne.n	80013ec <__eqdf2+0x3c>
 80013e8:	4557      	cmp	r7, sl
 80013ea:	d00d      	beq.n	8001408 <__eqdf2+0x58>
 80013ec:	bce0      	pop	{r5, r6, r7}
 80013ee:	46ba      	mov	sl, r7
 80013f0:	46b1      	mov	r9, r6
 80013f2:	46a8      	mov	r8, r5
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	003d      	movs	r5, r7
 80013f8:	4335      	orrs	r5, r6
 80013fa:	d1f7      	bne.n	80013ec <__eqdf2+0x3c>
 80013fc:	42a2      	cmp	r2, r4
 80013fe:	d1f5      	bne.n	80013ec <__eqdf2+0x3c>
 8001400:	4652      	mov	r2, sl
 8001402:	4665      	mov	r5, ip
 8001404:	432a      	orrs	r2, r5
 8001406:	d1f1      	bne.n	80013ec <__eqdf2+0x3c>
 8001408:	2001      	movs	r0, #1
 800140a:	45c8      	cmp	r8, r9
 800140c:	d1ee      	bne.n	80013ec <__eqdf2+0x3c>
 800140e:	4299      	cmp	r1, r3
 8001410:	d006      	beq.n	8001420 <__eqdf2+0x70>
 8001412:	2c00      	cmp	r4, #0
 8001414:	d1ea      	bne.n	80013ec <__eqdf2+0x3c>
 8001416:	433e      	orrs	r6, r7
 8001418:	0030      	movs	r0, r6
 800141a:	1e46      	subs	r6, r0, #1
 800141c:	41b0      	sbcs	r0, r6
 800141e:	e7e5      	b.n	80013ec <__eqdf2+0x3c>
 8001420:	2000      	movs	r0, #0
 8001422:	e7e3      	b.n	80013ec <__eqdf2+0x3c>
 8001424:	000007ff 	.word	0x000007ff

08001428 <__gedf2>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	464e      	mov	r6, r9
 800142c:	4645      	mov	r5, r8
 800142e:	4657      	mov	r7, sl
 8001430:	46de      	mov	lr, fp
 8001432:	0004      	movs	r4, r0
 8001434:	0018      	movs	r0, r3
 8001436:	b5e0      	push	{r5, r6, r7, lr}
 8001438:	0016      	movs	r6, r2
 800143a:	031b      	lsls	r3, r3, #12
 800143c:	0b1b      	lsrs	r3, r3, #12
 800143e:	4d32      	ldr	r5, [pc, #200]	; (8001508 <__gedf2+0xe0>)
 8001440:	030f      	lsls	r7, r1, #12
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	0043      	lsls	r3, r0, #1
 8001448:	46a4      	mov	ip, r4
 800144a:	46b0      	mov	r8, r6
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	0fc9      	lsrs	r1, r1, #31
 8001452:	0d5b      	lsrs	r3, r3, #21
 8001454:	0fc0      	lsrs	r0, r0, #31
 8001456:	42aa      	cmp	r2, r5
 8001458:	d029      	beq.n	80014ae <__gedf2+0x86>
 800145a:	42ab      	cmp	r3, r5
 800145c:	d018      	beq.n	8001490 <__gedf2+0x68>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d12a      	bne.n	80014b8 <__gedf2+0x90>
 8001462:	433c      	orrs	r4, r7
 8001464:	46a3      	mov	fp, r4
 8001466:	4265      	negs	r5, r4
 8001468:	4165      	adcs	r5, r4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <__gedf2+0x4c>
 800146e:	464c      	mov	r4, r9
 8001470:	4326      	orrs	r6, r4
 8001472:	d027      	beq.n	80014c4 <__gedf2+0x9c>
 8001474:	2d00      	cmp	r5, #0
 8001476:	d115      	bne.n	80014a4 <__gedf2+0x7c>
 8001478:	4281      	cmp	r1, r0
 800147a:	d028      	beq.n	80014ce <__gedf2+0xa6>
 800147c:	2002      	movs	r0, #2
 800147e:	3901      	subs	r1, #1
 8001480:	4008      	ands	r0, r1
 8001482:	3801      	subs	r0, #1
 8001484:	bcf0      	pop	{r4, r5, r6, r7}
 8001486:	46bb      	mov	fp, r7
 8001488:	46b2      	mov	sl, r6
 800148a:	46a9      	mov	r9, r5
 800148c:	46a0      	mov	r8, r4
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	464d      	mov	r5, r9
 8001492:	432e      	orrs	r6, r5
 8001494:	d12f      	bne.n	80014f6 <__gedf2+0xce>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d1ee      	bne.n	8001478 <__gedf2+0x50>
 800149a:	433c      	orrs	r4, r7
 800149c:	4265      	negs	r5, r4
 800149e:	4165      	adcs	r5, r4
 80014a0:	2d00      	cmp	r5, #0
 80014a2:	d0e9      	beq.n	8001478 <__gedf2+0x50>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1ed      	bne.n	8001484 <__gedf2+0x5c>
 80014a8:	2001      	movs	r0, #1
 80014aa:	4240      	negs	r0, r0
 80014ac:	e7ea      	b.n	8001484 <__gedf2+0x5c>
 80014ae:	003d      	movs	r5, r7
 80014b0:	4325      	orrs	r5, r4
 80014b2:	d120      	bne.n	80014f6 <__gedf2+0xce>
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d0eb      	beq.n	8001490 <__gedf2+0x68>
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1dd      	bne.n	8001478 <__gedf2+0x50>
 80014bc:	464c      	mov	r4, r9
 80014be:	4326      	orrs	r6, r4
 80014c0:	d1da      	bne.n	8001478 <__gedf2+0x50>
 80014c2:	e7db      	b.n	800147c <__gedf2+0x54>
 80014c4:	465b      	mov	r3, fp
 80014c6:	2000      	movs	r0, #0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0db      	beq.n	8001484 <__gedf2+0x5c>
 80014cc:	e7d6      	b.n	800147c <__gedf2+0x54>
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dc0a      	bgt.n	80014e8 <__gedf2+0xc0>
 80014d2:	dbe7      	blt.n	80014a4 <__gedf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8d1      	bhi.n	800147c <__gedf2+0x54>
 80014d8:	d010      	beq.n	80014fc <__gedf2+0xd4>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2d1      	bcs.n	8001484 <__gedf2+0x5c>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e1      	beq.n	80014a8 <__gedf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7cd      	b.n	8001484 <__gedf2+0x5c>
 80014e8:	4243      	negs	r3, r0
 80014ea:	4158      	adcs	r0, r3
 80014ec:	2302      	movs	r3, #2
 80014ee:	4240      	negs	r0, r0
 80014f0:	4018      	ands	r0, r3
 80014f2:	3801      	subs	r0, #1
 80014f4:	e7c6      	b.n	8001484 <__gedf2+0x5c>
 80014f6:	2002      	movs	r0, #2
 80014f8:	4240      	negs	r0, r0
 80014fa:	e7c3      	b.n	8001484 <__gedf2+0x5c>
 80014fc:	45c4      	cmp	ip, r8
 80014fe:	d8bd      	bhi.n	800147c <__gedf2+0x54>
 8001500:	2000      	movs	r0, #0
 8001502:	45c4      	cmp	ip, r8
 8001504:	d2be      	bcs.n	8001484 <__gedf2+0x5c>
 8001506:	e7eb      	b.n	80014e0 <__gedf2+0xb8>
 8001508:	000007ff 	.word	0x000007ff

0800150c <__ledf2>:
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	4657      	mov	r7, sl
 8001514:	46de      	mov	lr, fp
 8001516:	0004      	movs	r4, r0
 8001518:	0018      	movs	r0, r3
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	0016      	movs	r6, r2
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	0b1b      	lsrs	r3, r3, #12
 8001522:	4d31      	ldr	r5, [pc, #196]	; (80015e8 <__ledf2+0xdc>)
 8001524:	030f      	lsls	r7, r1, #12
 8001526:	004a      	lsls	r2, r1, #1
 8001528:	4699      	mov	r9, r3
 800152a:	0043      	lsls	r3, r0, #1
 800152c:	46a4      	mov	ip, r4
 800152e:	46b0      	mov	r8, r6
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0d52      	lsrs	r2, r2, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	0fc0      	lsrs	r0, r0, #31
 800153a:	42aa      	cmp	r2, r5
 800153c:	d011      	beq.n	8001562 <__ledf2+0x56>
 800153e:	42ab      	cmp	r3, r5
 8001540:	d014      	beq.n	800156c <__ledf2+0x60>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d12f      	bne.n	80015a6 <__ledf2+0x9a>
 8001546:	433c      	orrs	r4, r7
 8001548:	46a3      	mov	fp, r4
 800154a:	4265      	negs	r5, r4
 800154c:	4165      	adcs	r5, r4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d114      	bne.n	800157c <__ledf2+0x70>
 8001552:	464c      	mov	r4, r9
 8001554:	4326      	orrs	r6, r4
 8001556:	d111      	bne.n	800157c <__ledf2+0x70>
 8001558:	465b      	mov	r3, fp
 800155a:	2000      	movs	r0, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d017      	beq.n	8001590 <__ledf2+0x84>
 8001560:	e010      	b.n	8001584 <__ledf2+0x78>
 8001562:	003d      	movs	r5, r7
 8001564:	4325      	orrs	r5, r4
 8001566:	d112      	bne.n	800158e <__ledf2+0x82>
 8001568:	4293      	cmp	r3, r2
 800156a:	d11c      	bne.n	80015a6 <__ledf2+0x9a>
 800156c:	464d      	mov	r5, r9
 800156e:	432e      	orrs	r6, r5
 8001570:	d10d      	bne.n	800158e <__ledf2+0x82>
 8001572:	2a00      	cmp	r2, #0
 8001574:	d104      	bne.n	8001580 <__ledf2+0x74>
 8001576:	433c      	orrs	r4, r7
 8001578:	4265      	negs	r5, r4
 800157a:	4165      	adcs	r5, r4
 800157c:	2d00      	cmp	r5, #0
 800157e:	d10d      	bne.n	800159c <__ledf2+0x90>
 8001580:	4281      	cmp	r1, r0
 8001582:	d016      	beq.n	80015b2 <__ledf2+0xa6>
 8001584:	2002      	movs	r0, #2
 8001586:	3901      	subs	r1, #1
 8001588:	4008      	ands	r0, r1
 800158a:	3801      	subs	r0, #1
 800158c:	e000      	b.n	8001590 <__ledf2+0x84>
 800158e:	2002      	movs	r0, #2
 8001590:	bcf0      	pop	{r4, r5, r6, r7}
 8001592:	46bb      	mov	fp, r7
 8001594:	46b2      	mov	sl, r6
 8001596:	46a9      	mov	r9, r5
 8001598:	46a0      	mov	r8, r4
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159c:	2800      	cmp	r0, #0
 800159e:	d1f7      	bne.n	8001590 <__ledf2+0x84>
 80015a0:	2001      	movs	r0, #1
 80015a2:	4240      	negs	r0, r0
 80015a4:	e7f4      	b.n	8001590 <__ledf2+0x84>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ea      	bne.n	8001580 <__ledf2+0x74>
 80015aa:	464c      	mov	r4, r9
 80015ac:	4326      	orrs	r6, r4
 80015ae:	d1e7      	bne.n	8001580 <__ledf2+0x74>
 80015b0:	e7e8      	b.n	8001584 <__ledf2+0x78>
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dd06      	ble.n	80015c4 <__ledf2+0xb8>
 80015b6:	4243      	negs	r3, r0
 80015b8:	4158      	adcs	r0, r3
 80015ba:	2302      	movs	r3, #2
 80015bc:	4240      	negs	r0, r0
 80015be:	4018      	ands	r0, r3
 80015c0:	3801      	subs	r0, #1
 80015c2:	e7e5      	b.n	8001590 <__ledf2+0x84>
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbe9      	blt.n	800159c <__ledf2+0x90>
 80015c8:	454f      	cmp	r7, r9
 80015ca:	d8db      	bhi.n	8001584 <__ledf2+0x78>
 80015cc:	d006      	beq.n	80015dc <__ledf2+0xd0>
 80015ce:	2000      	movs	r0, #0
 80015d0:	454f      	cmp	r7, r9
 80015d2:	d2dd      	bcs.n	8001590 <__ledf2+0x84>
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d0e3      	beq.n	80015a0 <__ledf2+0x94>
 80015d8:	0008      	movs	r0, r1
 80015da:	e7d9      	b.n	8001590 <__ledf2+0x84>
 80015dc:	45c4      	cmp	ip, r8
 80015de:	d8d1      	bhi.n	8001584 <__ledf2+0x78>
 80015e0:	2000      	movs	r0, #0
 80015e2:	45c4      	cmp	ip, r8
 80015e4:	d2d4      	bcs.n	8001590 <__ledf2+0x84>
 80015e6:	e7f5      	b.n	80015d4 <__ledf2+0xc8>
 80015e8:	000007ff 	.word	0x000007ff

080015ec <__aeabi_dmul>:
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	4657      	mov	r7, sl
 80015f0:	464e      	mov	r6, r9
 80015f2:	4645      	mov	r5, r8
 80015f4:	46de      	mov	lr, fp
 80015f6:	b5e0      	push	{r5, r6, r7, lr}
 80015f8:	4698      	mov	r8, r3
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004b      	lsls	r3, r1, #1
 80015fe:	0006      	movs	r6, r0
 8001600:	4692      	mov	sl, r2
 8001602:	b087      	sub	sp, #28
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	0d5b      	lsrs	r3, r3, #21
 8001608:	0fcf      	lsrs	r7, r1, #31
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <__aeabi_dmul+0xfc>
 800160e:	4add      	ldr	r2, [pc, #884]	; (8001984 <__aeabi_dmul+0x398>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d100      	bne.n	8001616 <__aeabi_dmul+0x2a>
 8001614:	e086      	b.n	8001724 <__aeabi_dmul+0x138>
 8001616:	0f42      	lsrs	r2, r0, #29
 8001618:	00e4      	lsls	r4, r4, #3
 800161a:	4314      	orrs	r4, r2
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0412      	lsls	r2, r2, #16
 8001620:	4314      	orrs	r4, r2
 8001622:	4ad9      	ldr	r2, [pc, #868]	; (8001988 <__aeabi_dmul+0x39c>)
 8001624:	00c5      	lsls	r5, r0, #3
 8001626:	4694      	mov	ip, r2
 8001628:	4463      	add	r3, ip
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	4699      	mov	r9, r3
 8001630:	469b      	mov	fp, r3
 8001632:	4643      	mov	r3, r8
 8001634:	4642      	mov	r2, r8
 8001636:	031e      	lsls	r6, r3, #12
 8001638:	0fd2      	lsrs	r2, r2, #31
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4650      	mov	r0, sl
 800163e:	4690      	mov	r8, r2
 8001640:	0b36      	lsrs	r6, r6, #12
 8001642:	0d5b      	lsrs	r3, r3, #21
 8001644:	d100      	bne.n	8001648 <__aeabi_dmul+0x5c>
 8001646:	e078      	b.n	800173a <__aeabi_dmul+0x14e>
 8001648:	4ace      	ldr	r2, [pc, #824]	; (8001984 <__aeabi_dmul+0x398>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d01d      	beq.n	800168a <__aeabi_dmul+0x9e>
 800164e:	49ce      	ldr	r1, [pc, #824]	; (8001988 <__aeabi_dmul+0x39c>)
 8001650:	0f42      	lsrs	r2, r0, #29
 8001652:	468c      	mov	ip, r1
 8001654:	9900      	ldr	r1, [sp, #0]
 8001656:	4463      	add	r3, ip
 8001658:	00f6      	lsls	r6, r6, #3
 800165a:	468c      	mov	ip, r1
 800165c:	4316      	orrs	r6, r2
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	449c      	add	ip, r3
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	4663      	mov	r3, ip
 8001666:	4316      	orrs	r6, r2
 8001668:	00c2      	lsls	r2, r0, #3
 800166a:	2000      	movs	r0, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	9900      	ldr	r1, [sp, #0]
 8001670:	4643      	mov	r3, r8
 8001672:	3101      	adds	r1, #1
 8001674:	468c      	mov	ip, r1
 8001676:	4649      	mov	r1, r9
 8001678:	407b      	eors	r3, r7
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	290f      	cmp	r1, #15
 800167e:	d900      	bls.n	8001682 <__aeabi_dmul+0x96>
 8001680:	e07e      	b.n	8001780 <__aeabi_dmul+0x194>
 8001682:	4bc2      	ldr	r3, [pc, #776]	; (800198c <__aeabi_dmul+0x3a0>)
 8001684:	0089      	lsls	r1, r1, #2
 8001686:	5859      	ldr	r1, [r3, r1]
 8001688:	468f      	mov	pc, r1
 800168a:	4652      	mov	r2, sl
 800168c:	9b00      	ldr	r3, [sp, #0]
 800168e:	4332      	orrs	r2, r6
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0xa8>
 8001692:	e156      	b.n	8001942 <__aeabi_dmul+0x356>
 8001694:	49bb      	ldr	r1, [pc, #748]	; (8001984 <__aeabi_dmul+0x398>)
 8001696:	2600      	movs	r6, #0
 8001698:	468c      	mov	ip, r1
 800169a:	4463      	add	r3, ip
 800169c:	4649      	mov	r1, r9
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	4319      	orrs	r1, r3
 80016a4:	4689      	mov	r9, r1
 80016a6:	2002      	movs	r0, #2
 80016a8:	e7e1      	b.n	800166e <__aeabi_dmul+0x82>
 80016aa:	4643      	mov	r3, r8
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	0034      	movs	r4, r6
 80016b0:	0015      	movs	r5, r2
 80016b2:	4683      	mov	fp, r0
 80016b4:	465b      	mov	r3, fp
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d05e      	beq.n	8001778 <__aeabi_dmul+0x18c>
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dmul+0xd4>
 80016be:	e1f3      	b.n	8001aa8 <__aeabi_dmul+0x4bc>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d000      	beq.n	80016c6 <__aeabi_dmul+0xda>
 80016c4:	e118      	b.n	80018f8 <__aeabi_dmul+0x30c>
 80016c6:	2200      	movs	r2, #0
 80016c8:	2400      	movs	r4, #0
 80016ca:	2500      	movs	r5, #0
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	0512      	lsls	r2, r2, #20
 80016d0:	4322      	orrs	r2, r4
 80016d2:	07db      	lsls	r3, r3, #31
 80016d4:	431a      	orrs	r2, r3
 80016d6:	0028      	movs	r0, r5
 80016d8:	0011      	movs	r1, r2
 80016da:	b007      	add	sp, #28
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	46bb      	mov	fp, r7
 80016e0:	46b2      	mov	sl, r6
 80016e2:	46a9      	mov	r9, r5
 80016e4:	46a0      	mov	r8, r4
 80016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e8:	0025      	movs	r5, r4
 80016ea:	4305      	orrs	r5, r0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dmul+0x104>
 80016ee:	e141      	b.n	8001974 <__aeabi_dmul+0x388>
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0x10a>
 80016f4:	e1ad      	b.n	8001a52 <__aeabi_dmul+0x466>
 80016f6:	0020      	movs	r0, r4
 80016f8:	f000 fe20 	bl	800233c <__clzsi2>
 80016fc:	0001      	movs	r1, r0
 80016fe:	0002      	movs	r2, r0
 8001700:	390b      	subs	r1, #11
 8001702:	231d      	movs	r3, #29
 8001704:	0010      	movs	r0, r2
 8001706:	1a5b      	subs	r3, r3, r1
 8001708:	0031      	movs	r1, r6
 800170a:	0035      	movs	r5, r6
 800170c:	3808      	subs	r0, #8
 800170e:	4084      	lsls	r4, r0
 8001710:	40d9      	lsrs	r1, r3
 8001712:	4085      	lsls	r5, r0
 8001714:	430c      	orrs	r4, r1
 8001716:	489e      	ldr	r0, [pc, #632]	; (8001990 <__aeabi_dmul+0x3a4>)
 8001718:	1a83      	subs	r3, r0, r2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2300      	movs	r3, #0
 800171e:	4699      	mov	r9, r3
 8001720:	469b      	mov	fp, r3
 8001722:	e786      	b.n	8001632 <__aeabi_dmul+0x46>
 8001724:	0005      	movs	r5, r0
 8001726:	4325      	orrs	r5, r4
 8001728:	d000      	beq.n	800172c <__aeabi_dmul+0x140>
 800172a:	e11c      	b.n	8001966 <__aeabi_dmul+0x37a>
 800172c:	2208      	movs	r2, #8
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2302      	movs	r3, #2
 8001732:	2400      	movs	r4, #0
 8001734:	4691      	mov	r9, r2
 8001736:	469b      	mov	fp, r3
 8001738:	e77b      	b.n	8001632 <__aeabi_dmul+0x46>
 800173a:	4652      	mov	r2, sl
 800173c:	4332      	orrs	r2, r6
 800173e:	d100      	bne.n	8001742 <__aeabi_dmul+0x156>
 8001740:	e10a      	b.n	8001958 <__aeabi_dmul+0x36c>
 8001742:	2e00      	cmp	r6, #0
 8001744:	d100      	bne.n	8001748 <__aeabi_dmul+0x15c>
 8001746:	e176      	b.n	8001a36 <__aeabi_dmul+0x44a>
 8001748:	0030      	movs	r0, r6
 800174a:	f000 fdf7 	bl	800233c <__clzsi2>
 800174e:	0002      	movs	r2, r0
 8001750:	3a0b      	subs	r2, #11
 8001752:	231d      	movs	r3, #29
 8001754:	0001      	movs	r1, r0
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	4652      	mov	r2, sl
 800175a:	3908      	subs	r1, #8
 800175c:	40da      	lsrs	r2, r3
 800175e:	408e      	lsls	r6, r1
 8001760:	4316      	orrs	r6, r2
 8001762:	4652      	mov	r2, sl
 8001764:	408a      	lsls	r2, r1
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	4989      	ldr	r1, [pc, #548]	; (8001990 <__aeabi_dmul+0x3a4>)
 800176a:	1a18      	subs	r0, r3, r0
 800176c:	0003      	movs	r3, r0
 800176e:	468c      	mov	ip, r1
 8001770:	4463      	add	r3, ip
 8001772:	2000      	movs	r0, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	e77a      	b.n	800166e <__aeabi_dmul+0x82>
 8001778:	2400      	movs	r4, #0
 800177a:	2500      	movs	r5, #0
 800177c:	4a81      	ldr	r2, [pc, #516]	; (8001984 <__aeabi_dmul+0x398>)
 800177e:	e7a5      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001780:	0c2f      	lsrs	r7, r5, #16
 8001782:	042d      	lsls	r5, r5, #16
 8001784:	0c2d      	lsrs	r5, r5, #16
 8001786:	002b      	movs	r3, r5
 8001788:	0c11      	lsrs	r1, r2, #16
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	0c12      	lsrs	r2, r2, #16
 800178e:	4353      	muls	r3, r2
 8001790:	4698      	mov	r8, r3
 8001792:	0013      	movs	r3, r2
 8001794:	0028      	movs	r0, r5
 8001796:	437b      	muls	r3, r7
 8001798:	4699      	mov	r9, r3
 800179a:	4348      	muls	r0, r1
 800179c:	4448      	add	r0, r9
 800179e:	4683      	mov	fp, r0
 80017a0:	4640      	mov	r0, r8
 80017a2:	000b      	movs	r3, r1
 80017a4:	0c00      	lsrs	r0, r0, #16
 80017a6:	4682      	mov	sl, r0
 80017a8:	4658      	mov	r0, fp
 80017aa:	437b      	muls	r3, r7
 80017ac:	4450      	add	r0, sl
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	4581      	cmp	r9, r0
 80017b2:	d906      	bls.n	80017c2 <__aeabi_dmul+0x1d6>
 80017b4:	469a      	mov	sl, r3
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	4699      	mov	r9, r3
 80017bc:	44ca      	add	sl, r9
 80017be:	4653      	mov	r3, sl
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	0c03      	lsrs	r3, r0, #16
 80017c4:	469b      	mov	fp, r3
 80017c6:	4643      	mov	r3, r8
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	0400      	lsls	r0, r0, #16
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	4698      	mov	r8, r3
 80017d0:	0003      	movs	r3, r0
 80017d2:	4443      	add	r3, r8
 80017d4:	9304      	str	r3, [sp, #16]
 80017d6:	0c33      	lsrs	r3, r6, #16
 80017d8:	4699      	mov	r9, r3
 80017da:	002b      	movs	r3, r5
 80017dc:	0436      	lsls	r6, r6, #16
 80017de:	0c36      	lsrs	r6, r6, #16
 80017e0:	4373      	muls	r3, r6
 80017e2:	4698      	mov	r8, r3
 80017e4:	0033      	movs	r3, r6
 80017e6:	437b      	muls	r3, r7
 80017e8:	469a      	mov	sl, r3
 80017ea:	464b      	mov	r3, r9
 80017ec:	435d      	muls	r5, r3
 80017ee:	435f      	muls	r7, r3
 80017f0:	4643      	mov	r3, r8
 80017f2:	4455      	add	r5, sl
 80017f4:	0c18      	lsrs	r0, r3, #16
 80017f6:	1940      	adds	r0, r0, r5
 80017f8:	4582      	cmp	sl, r0
 80017fa:	d903      	bls.n	8001804 <__aeabi_dmul+0x218>
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	469a      	mov	sl, r3
 8001802:	4457      	add	r7, sl
 8001804:	0c05      	lsrs	r5, r0, #16
 8001806:	19eb      	adds	r3, r5, r7
 8001808:	9305      	str	r3, [sp, #20]
 800180a:	4643      	mov	r3, r8
 800180c:	041d      	lsls	r5, r3, #16
 800180e:	0c2d      	lsrs	r5, r5, #16
 8001810:	0400      	lsls	r0, r0, #16
 8001812:	1940      	adds	r0, r0, r5
 8001814:	0c25      	lsrs	r5, r4, #16
 8001816:	0424      	lsls	r4, r4, #16
 8001818:	0c24      	lsrs	r4, r4, #16
 800181a:	0027      	movs	r7, r4
 800181c:	4357      	muls	r7, r2
 800181e:	436a      	muls	r2, r5
 8001820:	4690      	mov	r8, r2
 8001822:	002a      	movs	r2, r5
 8001824:	0c3b      	lsrs	r3, r7, #16
 8001826:	469a      	mov	sl, r3
 8001828:	434a      	muls	r2, r1
 800182a:	4361      	muls	r1, r4
 800182c:	4441      	add	r1, r8
 800182e:	4451      	add	r1, sl
 8001830:	4483      	add	fp, r0
 8001832:	4588      	cmp	r8, r1
 8001834:	d903      	bls.n	800183e <__aeabi_dmul+0x252>
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	4698      	mov	r8, r3
 800183c:	4442      	add	r2, r8
 800183e:	043f      	lsls	r7, r7, #16
 8001840:	0c0b      	lsrs	r3, r1, #16
 8001842:	0c3f      	lsrs	r7, r7, #16
 8001844:	0409      	lsls	r1, r1, #16
 8001846:	19c9      	adds	r1, r1, r7
 8001848:	0027      	movs	r7, r4
 800184a:	4698      	mov	r8, r3
 800184c:	464b      	mov	r3, r9
 800184e:	4377      	muls	r7, r6
 8001850:	435c      	muls	r4, r3
 8001852:	436e      	muls	r6, r5
 8001854:	435d      	muls	r5, r3
 8001856:	0c3b      	lsrs	r3, r7, #16
 8001858:	4699      	mov	r9, r3
 800185a:	19a4      	adds	r4, r4, r6
 800185c:	444c      	add	r4, r9
 800185e:	4442      	add	r2, r8
 8001860:	9503      	str	r5, [sp, #12]
 8001862:	42a6      	cmp	r6, r4
 8001864:	d904      	bls.n	8001870 <__aeabi_dmul+0x284>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4698      	mov	r8, r3
 800186c:	4445      	add	r5, r8
 800186e:	9503      	str	r5, [sp, #12]
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	043f      	lsls	r7, r7, #16
 8001874:	445b      	add	r3, fp
 8001876:	001e      	movs	r6, r3
 8001878:	4283      	cmp	r3, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	0423      	lsls	r3, r4, #16
 800187e:	4698      	mov	r8, r3
 8001880:	9b05      	ldr	r3, [sp, #20]
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	4447      	add	r7, r8
 8001886:	4698      	mov	r8, r3
 8001888:	1876      	adds	r6, r6, r1
 800188a:	428e      	cmp	r6, r1
 800188c:	4189      	sbcs	r1, r1
 800188e:	4447      	add	r7, r8
 8001890:	4240      	negs	r0, r0
 8001892:	183d      	adds	r5, r7, r0
 8001894:	46a8      	mov	r8, r5
 8001896:	4693      	mov	fp, r2
 8001898:	4249      	negs	r1, r1
 800189a:	468a      	mov	sl, r1
 800189c:	44c3      	add	fp, r8
 800189e:	429f      	cmp	r7, r3
 80018a0:	41bf      	sbcs	r7, r7
 80018a2:	4580      	cmp	r8, r0
 80018a4:	4180      	sbcs	r0, r0
 80018a6:	9b03      	ldr	r3, [sp, #12]
 80018a8:	44da      	add	sl, fp
 80018aa:	4698      	mov	r8, r3
 80018ac:	4653      	mov	r3, sl
 80018ae:	4240      	negs	r0, r0
 80018b0:	427f      	negs	r7, r7
 80018b2:	4307      	orrs	r7, r0
 80018b4:	0c24      	lsrs	r4, r4, #16
 80018b6:	4593      	cmp	fp, r2
 80018b8:	4192      	sbcs	r2, r2
 80018ba:	458a      	cmp	sl, r1
 80018bc:	4189      	sbcs	r1, r1
 80018be:	193f      	adds	r7, r7, r4
 80018c0:	0ddc      	lsrs	r4, r3, #23
 80018c2:	9b04      	ldr	r3, [sp, #16]
 80018c4:	0275      	lsls	r5, r6, #9
 80018c6:	431d      	orrs	r5, r3
 80018c8:	1e68      	subs	r0, r5, #1
 80018ca:	4185      	sbcs	r5, r0
 80018cc:	4653      	mov	r3, sl
 80018ce:	4252      	negs	r2, r2
 80018d0:	4249      	negs	r1, r1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	18bf      	adds	r7, r7, r2
 80018d6:	4447      	add	r7, r8
 80018d8:	0df6      	lsrs	r6, r6, #23
 80018da:	027f      	lsls	r7, r7, #9
 80018dc:	4335      	orrs	r5, r6
 80018de:	025a      	lsls	r2, r3, #9
 80018e0:	433c      	orrs	r4, r7
 80018e2:	4315      	orrs	r5, r2
 80018e4:	01fb      	lsls	r3, r7, #7
 80018e6:	d400      	bmi.n	80018ea <__aeabi_dmul+0x2fe>
 80018e8:	e0c1      	b.n	8001a6e <__aeabi_dmul+0x482>
 80018ea:	2101      	movs	r1, #1
 80018ec:	086a      	lsrs	r2, r5, #1
 80018ee:	400d      	ands	r5, r1
 80018f0:	4315      	orrs	r5, r2
 80018f2:	07e2      	lsls	r2, r4, #31
 80018f4:	4315      	orrs	r5, r2
 80018f6:	0864      	lsrs	r4, r4, #1
 80018f8:	4926      	ldr	r1, [pc, #152]	; (8001994 <__aeabi_dmul+0x3a8>)
 80018fa:	4461      	add	r1, ip
 80018fc:	2900      	cmp	r1, #0
 80018fe:	dd56      	ble.n	80019ae <__aeabi_dmul+0x3c2>
 8001900:	076b      	lsls	r3, r5, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dmul+0x32c>
 8001904:	220f      	movs	r2, #15
 8001906:	402a      	ands	r2, r5
 8001908:	2a04      	cmp	r2, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dmul+0x32c>
 800190c:	1d2a      	adds	r2, r5, #4
 800190e:	42aa      	cmp	r2, r5
 8001910:	41ad      	sbcs	r5, r5
 8001912:	426d      	negs	r5, r5
 8001914:	1964      	adds	r4, r4, r5
 8001916:	0015      	movs	r5, r2
 8001918:	01e3      	lsls	r3, r4, #7
 800191a:	d504      	bpl.n	8001926 <__aeabi_dmul+0x33a>
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <__aeabi_dmul+0x3ac>)
 8001920:	00c9      	lsls	r1, r1, #3
 8001922:	4014      	ands	r4, r2
 8001924:	4461      	add	r1, ip
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <__aeabi_dmul+0x3b0>)
 8001928:	4291      	cmp	r1, r2
 800192a:	dd00      	ble.n	800192e <__aeabi_dmul+0x342>
 800192c:	e724      	b.n	8001778 <__aeabi_dmul+0x18c>
 800192e:	0762      	lsls	r2, r4, #29
 8001930:	08ed      	lsrs	r5, r5, #3
 8001932:	0264      	lsls	r4, r4, #9
 8001934:	0549      	lsls	r1, r1, #21
 8001936:	4315      	orrs	r5, r2
 8001938:	0b24      	lsrs	r4, r4, #12
 800193a:	0d4a      	lsrs	r2, r1, #21
 800193c:	e6c6      	b.n	80016cc <__aeabi_dmul+0xe0>
 800193e:	9701      	str	r7, [sp, #4]
 8001940:	e6b8      	b.n	80016b4 <__aeabi_dmul+0xc8>
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <__aeabi_dmul+0x398>)
 8001944:	2003      	movs	r0, #3
 8001946:	4694      	mov	ip, r2
 8001948:	4463      	add	r3, ip
 800194a:	464a      	mov	r2, r9
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2303      	movs	r3, #3
 8001950:	431a      	orrs	r2, r3
 8001952:	4691      	mov	r9, r2
 8001954:	4652      	mov	r2, sl
 8001956:	e68a      	b.n	800166e <__aeabi_dmul+0x82>
 8001958:	4649      	mov	r1, r9
 800195a:	2301      	movs	r3, #1
 800195c:	4319      	orrs	r1, r3
 800195e:	4689      	mov	r9, r1
 8001960:	2600      	movs	r6, #0
 8001962:	2001      	movs	r0, #1
 8001964:	e683      	b.n	800166e <__aeabi_dmul+0x82>
 8001966:	220c      	movs	r2, #12
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2303      	movs	r3, #3
 800196c:	0005      	movs	r5, r0
 800196e:	4691      	mov	r9, r2
 8001970:	469b      	mov	fp, r3
 8001972:	e65e      	b.n	8001632 <__aeabi_dmul+0x46>
 8001974:	2304      	movs	r3, #4
 8001976:	4699      	mov	r9, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	2400      	movs	r4, #0
 8001980:	469b      	mov	fp, r3
 8001982:	e656      	b.n	8001632 <__aeabi_dmul+0x46>
 8001984:	000007ff 	.word	0x000007ff
 8001988:	fffffc01 	.word	0xfffffc01
 800198c:	0800b250 	.word	0x0800b250
 8001990:	fffffc0d 	.word	0xfffffc0d
 8001994:	000003ff 	.word	0x000003ff
 8001998:	feffffff 	.word	0xfeffffff
 800199c:	000007fe 	.word	0x000007fe
 80019a0:	2300      	movs	r3, #0
 80019a2:	2480      	movs	r4, #128	; 0x80
 80019a4:	2500      	movs	r5, #0
 80019a6:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	0324      	lsls	r4, r4, #12
 80019ac:	e68e      	b.n	80016cc <__aeabi_dmul+0xe0>
 80019ae:	2001      	movs	r0, #1
 80019b0:	1a40      	subs	r0, r0, r1
 80019b2:	2838      	cmp	r0, #56	; 0x38
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dmul+0x3cc>
 80019b6:	e686      	b.n	80016c6 <__aeabi_dmul+0xda>
 80019b8:	281f      	cmp	r0, #31
 80019ba:	dd5b      	ble.n	8001a74 <__aeabi_dmul+0x488>
 80019bc:	221f      	movs	r2, #31
 80019be:	0023      	movs	r3, r4
 80019c0:	4252      	negs	r2, r2
 80019c2:	1a51      	subs	r1, r2, r1
 80019c4:	40cb      	lsrs	r3, r1
 80019c6:	0019      	movs	r1, r3
 80019c8:	2820      	cmp	r0, #32
 80019ca:	d003      	beq.n	80019d4 <__aeabi_dmul+0x3e8>
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <__aeabi_dmul+0x4d0>)
 80019ce:	4462      	add	r2, ip
 80019d0:	4094      	lsls	r4, r2
 80019d2:	4325      	orrs	r5, r4
 80019d4:	1e6a      	subs	r2, r5, #1
 80019d6:	4195      	sbcs	r5, r2
 80019d8:	002a      	movs	r2, r5
 80019da:	430a      	orrs	r2, r1
 80019dc:	2107      	movs	r1, #7
 80019de:	000d      	movs	r5, r1
 80019e0:	2400      	movs	r4, #0
 80019e2:	4015      	ands	r5, r2
 80019e4:	4211      	tst	r1, r2
 80019e6:	d05b      	beq.n	8001aa0 <__aeabi_dmul+0x4b4>
 80019e8:	210f      	movs	r1, #15
 80019ea:	2400      	movs	r4, #0
 80019ec:	4011      	ands	r1, r2
 80019ee:	2904      	cmp	r1, #4
 80019f0:	d053      	beq.n	8001a9a <__aeabi_dmul+0x4ae>
 80019f2:	1d11      	adds	r1, r2, #4
 80019f4:	4291      	cmp	r1, r2
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	18a4      	adds	r4, r4, r2
 80019fc:	000a      	movs	r2, r1
 80019fe:	0223      	lsls	r3, r4, #8
 8001a00:	d54b      	bpl.n	8001a9a <__aeabi_dmul+0x4ae>
 8001a02:	2201      	movs	r2, #1
 8001a04:	2400      	movs	r4, #0
 8001a06:	2500      	movs	r5, #0
 8001a08:	e660      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	031b      	lsls	r3, r3, #12
 8001a0e:	421c      	tst	r4, r3
 8001a10:	d009      	beq.n	8001a26 <__aeabi_dmul+0x43a>
 8001a12:	421e      	tst	r6, r3
 8001a14:	d107      	bne.n	8001a26 <__aeabi_dmul+0x43a>
 8001a16:	4333      	orrs	r3, r6
 8001a18:	031c      	lsls	r4, r3, #12
 8001a1a:	4643      	mov	r3, r8
 8001a1c:	0015      	movs	r5, r2
 8001a1e:	0b24      	lsrs	r4, r4, #12
 8001a20:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	e652      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	0312      	lsls	r2, r2, #12
 8001a2a:	4314      	orrs	r4, r2
 8001a2c:	0324      	lsls	r4, r4, #12
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	9701      	str	r7, [sp, #4]
 8001a34:	e64a      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001a36:	f000 fc81 	bl	800233c <__clzsi2>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	3215      	adds	r2, #21
 8001a40:	3020      	adds	r0, #32
 8001a42:	2a1c      	cmp	r2, #28
 8001a44:	dc00      	bgt.n	8001a48 <__aeabi_dmul+0x45c>
 8001a46:	e684      	b.n	8001752 <__aeabi_dmul+0x166>
 8001a48:	4656      	mov	r6, sl
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	409e      	lsls	r6, r3
 8001a50:	e689      	b.n	8001766 <__aeabi_dmul+0x17a>
 8001a52:	f000 fc73 	bl	800233c <__clzsi2>
 8001a56:	0001      	movs	r1, r0
 8001a58:	0002      	movs	r2, r0
 8001a5a:	3115      	adds	r1, #21
 8001a5c:	3220      	adds	r2, #32
 8001a5e:	291c      	cmp	r1, #28
 8001a60:	dc00      	bgt.n	8001a64 <__aeabi_dmul+0x478>
 8001a62:	e64e      	b.n	8001702 <__aeabi_dmul+0x116>
 8001a64:	0034      	movs	r4, r6
 8001a66:	3808      	subs	r0, #8
 8001a68:	2500      	movs	r5, #0
 8001a6a:	4084      	lsls	r4, r0
 8001a6c:	e653      	b.n	8001716 <__aeabi_dmul+0x12a>
 8001a6e:	9b00      	ldr	r3, [sp, #0]
 8001a70:	469c      	mov	ip, r3
 8001a72:	e741      	b.n	80018f8 <__aeabi_dmul+0x30c>
 8001a74:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <__aeabi_dmul+0x4d4>)
 8001a76:	0022      	movs	r2, r4
 8001a78:	4461      	add	r1, ip
 8001a7a:	002e      	movs	r6, r5
 8001a7c:	408d      	lsls	r5, r1
 8001a7e:	408a      	lsls	r2, r1
 8001a80:	40c6      	lsrs	r6, r0
 8001a82:	1e69      	subs	r1, r5, #1
 8001a84:	418d      	sbcs	r5, r1
 8001a86:	4332      	orrs	r2, r6
 8001a88:	432a      	orrs	r2, r5
 8001a8a:	40c4      	lsrs	r4, r0
 8001a8c:	0753      	lsls	r3, r2, #29
 8001a8e:	d0b6      	beq.n	80019fe <__aeabi_dmul+0x412>
 8001a90:	210f      	movs	r1, #15
 8001a92:	4011      	ands	r1, r2
 8001a94:	2904      	cmp	r1, #4
 8001a96:	d1ac      	bne.n	80019f2 <__aeabi_dmul+0x406>
 8001a98:	e7b1      	b.n	80019fe <__aeabi_dmul+0x412>
 8001a9a:	0765      	lsls	r5, r4, #29
 8001a9c:	0264      	lsls	r4, r4, #9
 8001a9e:	0b24      	lsrs	r4, r4, #12
 8001aa0:	08d2      	lsrs	r2, r2, #3
 8001aa2:	4315      	orrs	r5, r2
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	e611      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0312      	lsls	r2, r2, #12
 8001aac:	4314      	orrs	r4, r2
 8001aae:	0324      	lsls	r4, r4, #12
 8001ab0:	4a01      	ldr	r2, [pc, #4]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 8001ab2:	0b24      	lsrs	r4, r4, #12
 8001ab4:	e60a      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	000007ff 	.word	0x000007ff
 8001abc:	0000043e 	.word	0x0000043e
 8001ac0:	0000041e 	.word	0x0000041e

08001ac4 <__aeabi_dsub>:
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac6:	4657      	mov	r7, sl
 8001ac8:	464e      	mov	r6, r9
 8001aca:	4645      	mov	r5, r8
 8001acc:	46de      	mov	lr, fp
 8001ace:	0004      	movs	r4, r0
 8001ad0:	b5e0      	push	{r5, r6, r7, lr}
 8001ad2:	001f      	movs	r7, r3
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	030b      	lsls	r3, r1, #12
 8001ad8:	0f62      	lsrs	r2, r4, #29
 8001ada:	004e      	lsls	r6, r1, #1
 8001adc:	0fcd      	lsrs	r5, r1, #31
 8001ade:	0a5b      	lsrs	r3, r3, #9
 8001ae0:	0339      	lsls	r1, r7, #12
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	0a49      	lsrs	r1, r1, #9
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	0f44      	lsrs	r4, r0, #29
 8001aea:	4321      	orrs	r1, r4
 8001aec:	4cc2      	ldr	r4, [pc, #776]	; (8001df8 <__aeabi_dsub+0x334>)
 8001aee:	4691      	mov	r9, r2
 8001af0:	4692      	mov	sl, r2
 8001af2:	00c0      	lsls	r0, r0, #3
 8001af4:	007a      	lsls	r2, r7, #1
 8001af6:	4680      	mov	r8, r0
 8001af8:	0d76      	lsrs	r6, r6, #21
 8001afa:	0d52      	lsrs	r2, r2, #21
 8001afc:	0fff      	lsrs	r7, r7, #31
 8001afe:	42a2      	cmp	r2, r4
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x40>
 8001b02:	e0b4      	b.n	8001c6e <__aeabi_dsub+0x1aa>
 8001b04:	2401      	movs	r4, #1
 8001b06:	4067      	eors	r7, r4
 8001b08:	46bb      	mov	fp, r7
 8001b0a:	42bd      	cmp	r5, r7
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x4c>
 8001b0e:	e088      	b.n	8001c22 <__aeabi_dsub+0x15e>
 8001b10:	1ab4      	subs	r4, r6, r2
 8001b12:	46a4      	mov	ip, r4
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_dsub+0x56>
 8001b18:	e0b2      	b.n	8001c80 <__aeabi_dsub+0x1bc>
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x5c>
 8001b1e:	e0c5      	b.n	8001cac <__aeabi_dsub+0x1e8>
 8001b20:	4ab5      	ldr	r2, [pc, #724]	; (8001df8 <__aeabi_dsub+0x334>)
 8001b22:	4296      	cmp	r6, r2
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x64>
 8001b26:	e28b      	b.n	8002040 <__aeabi_dsub+0x57c>
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0412      	lsls	r2, r2, #16
 8001b2c:	4311      	orrs	r1, r2
 8001b2e:	4662      	mov	r2, ip
 8001b30:	2a38      	cmp	r2, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x72>
 8001b34:	e1a1      	b.n	8001e7a <__aeabi_dsub+0x3b6>
 8001b36:	2a1f      	cmp	r2, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x78>
 8001b3a:	e216      	b.n	8001f6a <__aeabi_dsub+0x4a6>
 8001b3c:	2720      	movs	r7, #32
 8001b3e:	000c      	movs	r4, r1
 8001b40:	1abf      	subs	r7, r7, r2
 8001b42:	40bc      	lsls	r4, r7
 8001b44:	0002      	movs	r2, r0
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40b8      	lsls	r0, r7
 8001b4c:	40e2      	lsrs	r2, r4
 8001b4e:	4644      	mov	r4, r8
 8001b50:	4314      	orrs	r4, r2
 8001b52:	0002      	movs	r2, r0
 8001b54:	1e50      	subs	r0, r2, #1
 8001b56:	4182      	sbcs	r2, r0
 8001b58:	4660      	mov	r0, ip
 8001b5a:	40c1      	lsrs	r1, r0
 8001b5c:	4322      	orrs	r2, r4
 8001b5e:	1a5b      	subs	r3, r3, r1
 8001b60:	4649      	mov	r1, r9
 8001b62:	1a8c      	subs	r4, r1, r2
 8001b64:	45a1      	cmp	r9, r4
 8001b66:	4192      	sbcs	r2, r2
 8001b68:	4252      	negs	r2, r2
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	4698      	mov	r8, r3
 8001b6e:	4643      	mov	r3, r8
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	d400      	bmi.n	8001b76 <__aeabi_dsub+0xb2>
 8001b74:	e117      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 8001b76:	4643      	mov	r3, r8
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	0a5b      	lsrs	r3, r3, #9
 8001b7c:	4698      	mov	r8, r3
 8001b7e:	4643      	mov	r3, r8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0xc2>
 8001b84:	e16c      	b.n	8001e60 <__aeabi_dsub+0x39c>
 8001b86:	4640      	mov	r0, r8
 8001b88:	f000 fbd8 	bl	800233c <__clzsi2>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	3a08      	subs	r2, #8
 8001b90:	2120      	movs	r1, #32
 8001b92:	0020      	movs	r0, r4
 8001b94:	4643      	mov	r3, r8
 8001b96:	1a89      	subs	r1, r1, r2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	40c8      	lsrs	r0, r1
 8001b9c:	4094      	lsls	r4, r2
 8001b9e:	4303      	orrs	r3, r0
 8001ba0:	4296      	cmp	r6, r2
 8001ba2:	dd00      	ble.n	8001ba6 <__aeabi_dsub+0xe2>
 8001ba4:	e157      	b.n	8001e56 <__aeabi_dsub+0x392>
 8001ba6:	1b96      	subs	r6, r2, r6
 8001ba8:	1c71      	adds	r1, r6, #1
 8001baa:	291f      	cmp	r1, #31
 8001bac:	dd00      	ble.n	8001bb0 <__aeabi_dsub+0xec>
 8001bae:	e1cb      	b.n	8001f48 <__aeabi_dsub+0x484>
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	0026      	movs	r6, r4
 8001bb6:	1a52      	subs	r2, r2, r1
 8001bb8:	4094      	lsls	r4, r2
 8001bba:	4090      	lsls	r0, r2
 8001bbc:	40ce      	lsrs	r6, r1
 8001bbe:	40cb      	lsrs	r3, r1
 8001bc0:	1e62      	subs	r2, r4, #1
 8001bc2:	4194      	sbcs	r4, r2
 8001bc4:	4330      	orrs	r0, r6
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	2600      	movs	r6, #0
 8001bca:	4304      	orrs	r4, r0
 8001bcc:	0763      	lsls	r3, r4, #29
 8001bce:	d009      	beq.n	8001be4 <__aeabi_dsub+0x120>
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	4023      	ands	r3, r4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d005      	beq.n	8001be4 <__aeabi_dsub+0x120>
 8001bd8:	1d23      	adds	r3, r4, #4
 8001bda:	42a3      	cmp	r3, r4
 8001bdc:	41a4      	sbcs	r4, r4
 8001bde:	4264      	negs	r4, r4
 8001be0:	44a0      	add	r8, r4
 8001be2:	001c      	movs	r4, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	d400      	bmi.n	8001bec <__aeabi_dsub+0x128>
 8001bea:	e0df      	b.n	8001dac <__aeabi_dsub+0x2e8>
 8001bec:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <__aeabi_dsub+0x334>)
 8001bee:	3601      	adds	r6, #1
 8001bf0:	429e      	cmp	r6, r3
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x132>
 8001bf4:	e0fb      	b.n	8001dee <__aeabi_dsub+0x32a>
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <__aeabi_dsub+0x338>)
 8001bfa:	08e4      	lsrs	r4, r4, #3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	0571      	lsls	r1, r6, #21
 8001c02:	0752      	lsls	r2, r2, #29
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	4322      	orrs	r2, r4
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	0d49      	lsrs	r1, r1, #21
 8001c0c:	0509      	lsls	r1, r1, #20
 8001c0e:	07ed      	lsls	r5, r5, #31
 8001c10:	4319      	orrs	r1, r3
 8001c12:	4329      	orrs	r1, r5
 8001c14:	0010      	movs	r0, r2
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd58      	ble.n	8001cdc <__aeabi_dsub+0x218>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x16c>
 8001c2e:	e09e      	b.n	8001d6e <__aeabi_dsub+0x2aa>
 8001c30:	4a71      	ldr	r2, [pc, #452]	; (8001df8 <__aeabi_dsub+0x334>)
 8001c32:	4296      	cmp	r6, r2
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x174>
 8001c36:	e13b      	b.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0412      	lsls	r2, r2, #16
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	4662      	mov	r2, ip
 8001c40:	2a38      	cmp	r2, #56	; 0x38
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dsub+0x182>
 8001c44:	e0c1      	b.n	8001dca <__aeabi_dsub+0x306>
 8001c46:	2a1f      	cmp	r2, #31
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x188>
 8001c4a:	e1bb      	b.n	8001fc4 <__aeabi_dsub+0x500>
 8001c4c:	000c      	movs	r4, r1
 8001c4e:	3a20      	subs	r2, #32
 8001c50:	40d4      	lsrs	r4, r2
 8001c52:	0022      	movs	r2, r4
 8001c54:	4664      	mov	r4, ip
 8001c56:	2c20      	cmp	r4, #32
 8001c58:	d004      	beq.n	8001c64 <__aeabi_dsub+0x1a0>
 8001c5a:	2740      	movs	r7, #64	; 0x40
 8001c5c:	1b3f      	subs	r7, r7, r4
 8001c5e:	40b9      	lsls	r1, r7
 8001c60:	4308      	orrs	r0, r1
 8001c62:	4680      	mov	r8, r0
 8001c64:	4644      	mov	r4, r8
 8001c66:	1e61      	subs	r1, r4, #1
 8001c68:	418c      	sbcs	r4, r1
 8001c6a:	4314      	orrs	r4, r2
 8001c6c:	e0b1      	b.n	8001dd2 <__aeabi_dsub+0x30e>
 8001c6e:	000c      	movs	r4, r1
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02a      	beq.n	8001cca <__aeabi_dsub+0x206>
 8001c74:	46bb      	mov	fp, r7
 8001c76:	42bd      	cmp	r5, r7
 8001c78:	d02d      	beq.n	8001cd6 <__aeabi_dsub+0x212>
 8001c7a:	4c61      	ldr	r4, [pc, #388]	; (8001e00 <__aeabi_dsub+0x33c>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05c      	beq.n	8001d40 <__aeabi_dsub+0x27c>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1cc>
 8001c8e:	e115      	b.n	8001ebc <__aeabi_dsub+0x3f8>
 8001c90:	464d      	mov	r5, r9
 8001c92:	431d      	orrs	r5, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1d4>
 8001c96:	e1c3      	b.n	8002020 <__aeabi_dsub+0x55c>
 8001c98:	1e65      	subs	r5, r4, #1
 8001c9a:	2c01      	cmp	r4, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1dc>
 8001c9e:	e20c      	b.n	80020ba <__aeabi_dsub+0x5f6>
 8001ca0:	4e55      	ldr	r6, [pc, #340]	; (8001df8 <__aeabi_dsub+0x334>)
 8001ca2:	42b4      	cmp	r4, r6
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1e4>
 8001ca6:	e1f8      	b.n	800209a <__aeabi_dsub+0x5d6>
 8001ca8:	46ac      	mov	ip, r5
 8001caa:	e10e      	b.n	8001eca <__aeabi_dsub+0x406>
 8001cac:	000a      	movs	r2, r1
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x1f0>
 8001cb2:	e136      	b.n	8001f22 <__aeabi_dsub+0x45e>
 8001cb4:	0022      	movs	r2, r4
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	2c01      	cmp	r4, #1
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x1fa>
 8001cbc:	e1c6      	b.n	800204c <__aeabi_dsub+0x588>
 8001cbe:	4c4e      	ldr	r4, [pc, #312]	; (8001df8 <__aeabi_dsub+0x334>)
 8001cc0:	45a4      	cmp	ip, r4
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x202>
 8001cc4:	e0f4      	b.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	e731      	b.n	8001b2e <__aeabi_dsub+0x6a>
 8001cca:	2401      	movs	r4, #1
 8001ccc:	4067      	eors	r7, r4
 8001cce:	46bb      	mov	fp, r7
 8001cd0:	42bd      	cmp	r5, r7
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x212>
 8001cd4:	e71c      	b.n	8001b10 <__aeabi_dsub+0x4c>
 8001cd6:	4c4a      	ldr	r4, [pc, #296]	; (8001e00 <__aeabi_dsub+0x33c>)
 8001cd8:	46a4      	mov	ip, r4
 8001cda:	44b4      	add	ip, r6
 8001cdc:	4664      	mov	r4, ip
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x220>
 8001ce2:	e0cf      	b.n	8001e84 <__aeabi_dsub+0x3c0>
 8001ce4:	1b94      	subs	r4, r2, r6
 8001ce6:	46a4      	mov	ip, r4
 8001ce8:	2e00      	cmp	r6, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x22a>
 8001cec:	e15c      	b.n	8001fa8 <__aeabi_dsub+0x4e4>
 8001cee:	4e42      	ldr	r6, [pc, #264]	; (8001df8 <__aeabi_dsub+0x334>)
 8001cf0:	42b2      	cmp	r2, r6
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x232>
 8001cf4:	e1ec      	b.n	80020d0 <__aeabi_dsub+0x60c>
 8001cf6:	2680      	movs	r6, #128	; 0x80
 8001cf8:	0436      	lsls	r6, r6, #16
 8001cfa:	4333      	orrs	r3, r6
 8001cfc:	4664      	mov	r4, ip
 8001cfe:	2c38      	cmp	r4, #56	; 0x38
 8001d00:	dd00      	ble.n	8001d04 <__aeabi_dsub+0x240>
 8001d02:	e1b3      	b.n	800206c <__aeabi_dsub+0x5a8>
 8001d04:	2c1f      	cmp	r4, #31
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x246>
 8001d08:	e238      	b.n	800217c <__aeabi_dsub+0x6b8>
 8001d0a:	2620      	movs	r6, #32
 8001d0c:	1b36      	subs	r6, r6, r4
 8001d0e:	001c      	movs	r4, r3
 8001d10:	40b4      	lsls	r4, r6
 8001d12:	464f      	mov	r7, r9
 8001d14:	46a0      	mov	r8, r4
 8001d16:	4664      	mov	r4, ip
 8001d18:	40e7      	lsrs	r7, r4
 8001d1a:	4644      	mov	r4, r8
 8001d1c:	433c      	orrs	r4, r7
 8001d1e:	464f      	mov	r7, r9
 8001d20:	40b7      	lsls	r7, r6
 8001d22:	003e      	movs	r6, r7
 8001d24:	1e77      	subs	r7, r6, #1
 8001d26:	41be      	sbcs	r6, r7
 8001d28:	4334      	orrs	r4, r6
 8001d2a:	4666      	mov	r6, ip
 8001d2c:	40f3      	lsrs	r3, r6
 8001d2e:	18c9      	adds	r1, r1, r3
 8001d30:	1824      	adds	r4, r4, r0
 8001d32:	4284      	cmp	r4, r0
 8001d34:	419b      	sbcs	r3, r3
 8001d36:	425b      	negs	r3, r3
 8001d38:	4698      	mov	r8, r3
 8001d3a:	0016      	movs	r6, r2
 8001d3c:	4488      	add	r8, r1
 8001d3e:	e04e      	b.n	8001dde <__aeabi_dsub+0x31a>
 8001d40:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <__aeabi_dsub+0x340>)
 8001d42:	1c74      	adds	r4, r6, #1
 8001d44:	4214      	tst	r4, r2
 8001d46:	d000      	beq.n	8001d4a <__aeabi_dsub+0x286>
 8001d48:	e0d6      	b.n	8001ef8 <__aeabi_dsub+0x434>
 8001d4a:	464a      	mov	r2, r9
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	2e00      	cmp	r6, #0
 8001d50:	d000      	beq.n	8001d54 <__aeabi_dsub+0x290>
 8001d52:	e15b      	b.n	800200c <__aeabi_dsub+0x548>
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x296>
 8001d58:	e1a5      	b.n	80020a6 <__aeabi_dsub+0x5e2>
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x29e>
 8001d60:	e1bb      	b.n	80020da <__aeabi_dsub+0x616>
 8001d62:	464a      	mov	r2, r9
 8001d64:	0759      	lsls	r1, r3, #29
 8001d66:	08d2      	lsrs	r2, r2, #3
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	08db      	lsrs	r3, r3, #3
 8001d6c:	e027      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8001d6e:	000a      	movs	r2, r1
 8001d70:	4302      	orrs	r2, r0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x2b2>
 8001d74:	e174      	b.n	8002060 <__aeabi_dsub+0x59c>
 8001d76:	0022      	movs	r2, r4
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	2c01      	cmp	r4, #1
 8001d7c:	d005      	beq.n	8001d8a <__aeabi_dsub+0x2c6>
 8001d7e:	4c1e      	ldr	r4, [pc, #120]	; (8001df8 <__aeabi_dsub+0x334>)
 8001d80:	45a4      	cmp	ip, r4
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x2c2>
 8001d84:	e094      	b.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001d86:	4694      	mov	ip, r2
 8001d88:	e759      	b.n	8001c3e <__aeabi_dsub+0x17a>
 8001d8a:	4448      	add	r0, r9
 8001d8c:	4548      	cmp	r0, r9
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4698      	mov	r8, r3
 8001d94:	0004      	movs	r4, r0
 8001d96:	4252      	negs	r2, r2
 8001d98:	4490      	add	r8, r2
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	2602      	movs	r6, #2
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	d500      	bpl.n	8001da4 <__aeabi_dsub+0x2e0>
 8001da2:	e0c4      	b.n	8001f2e <__aeabi_dsub+0x46a>
 8001da4:	3e01      	subs	r6, #1
 8001da6:	0763      	lsls	r3, r4, #29
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x2e8>
 8001daa:	e711      	b.n	8001bd0 <__aeabi_dsub+0x10c>
 8001dac:	4643      	mov	r3, r8
 8001dae:	46b4      	mov	ip, r6
 8001db0:	0759      	lsls	r1, r3, #29
 8001db2:	08e2      	lsrs	r2, r4, #3
 8001db4:	430a      	orrs	r2, r1
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	490f      	ldr	r1, [pc, #60]	; (8001df8 <__aeabi_dsub+0x334>)
 8001dba:	458c      	cmp	ip, r1
 8001dbc:	d040      	beq.n	8001e40 <__aeabi_dsub+0x37c>
 8001dbe:	4661      	mov	r1, ip
 8001dc0:	031b      	lsls	r3, r3, #12
 8001dc2:	0549      	lsls	r1, r1, #21
 8001dc4:	0b1b      	lsrs	r3, r3, #12
 8001dc6:	0d49      	lsrs	r1, r1, #21
 8001dc8:	e720      	b.n	8001c0c <__aeabi_dsub+0x148>
 8001dca:	4301      	orrs	r1, r0
 8001dcc:	000c      	movs	r4, r1
 8001dce:	1e61      	subs	r1, r4, #1
 8001dd0:	418c      	sbcs	r4, r1
 8001dd2:	444c      	add	r4, r9
 8001dd4:	454c      	cmp	r4, r9
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	4252      	negs	r2, r2
 8001dda:	4690      	mov	r8, r2
 8001ddc:	4498      	add	r8, r3
 8001dde:	4643      	mov	r3, r8
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	d5e0      	bpl.n	8001da6 <__aeabi_dsub+0x2e2>
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__aeabi_dsub+0x334>)
 8001de6:	3601      	adds	r6, #1
 8001de8:	429e      	cmp	r6, r3
 8001dea:	d000      	beq.n	8001dee <__aeabi_dsub+0x32a>
 8001dec:	e09f      	b.n	8001f2e <__aeabi_dsub+0x46a>
 8001dee:	0031      	movs	r1, r6
 8001df0:	2300      	movs	r3, #0
 8001df2:	2200      	movs	r2, #0
 8001df4:	e70a      	b.n	8001c0c <__aeabi_dsub+0x148>
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	000007ff 	.word	0x000007ff
 8001dfc:	ff7fffff 	.word	0xff7fffff
 8001e00:	fffff801 	.word	0xfffff801
 8001e04:	000007fe 	.word	0x000007fe
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x34a>
 8001e0c:	e160      	b.n	80020d0 <__aeabi_dsub+0x60c>
 8001e0e:	000a      	movs	r2, r1
 8001e10:	4302      	orrs	r2, r0
 8001e12:	d04d      	beq.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001e14:	464a      	mov	r2, r9
 8001e16:	075c      	lsls	r4, r3, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	4322      	orrs	r2, r4
 8001e1c:	2480      	movs	r4, #128	; 0x80
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	0324      	lsls	r4, r4, #12
 8001e22:	4223      	tst	r3, r4
 8001e24:	d007      	beq.n	8001e36 <__aeabi_dsub+0x372>
 8001e26:	08ce      	lsrs	r6, r1, #3
 8001e28:	4226      	tst	r6, r4
 8001e2a:	d104      	bne.n	8001e36 <__aeabi_dsub+0x372>
 8001e2c:	465d      	mov	r5, fp
 8001e2e:	0033      	movs	r3, r6
 8001e30:	08c2      	lsrs	r2, r0, #3
 8001e32:	0749      	lsls	r1, r1, #29
 8001e34:	430a      	orrs	r2, r1
 8001e36:	0f51      	lsrs	r1, r2, #29
 8001e38:	00d2      	lsls	r2, r2, #3
 8001e3a:	08d2      	lsrs	r2, r2, #3
 8001e3c:	0749      	lsls	r1, r1, #29
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	0011      	movs	r1, r2
 8001e42:	4319      	orrs	r1, r3
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x384>
 8001e46:	e1c8      	b.n	80021da <__aeabi_dsub+0x716>
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0309      	lsls	r1, r1, #12
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	031b      	lsls	r3, r3, #12
 8001e50:	49d5      	ldr	r1, [pc, #852]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001e52:	0b1b      	lsrs	r3, r3, #12
 8001e54:	e6da      	b.n	8001c0c <__aeabi_dsub+0x148>
 8001e56:	49d5      	ldr	r1, [pc, #852]	; (80021ac <__aeabi_dsub+0x6e8>)
 8001e58:	1ab6      	subs	r6, r6, r2
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	4698      	mov	r8, r3
 8001e5e:	e6b5      	b.n	8001bcc <__aeabi_dsub+0x108>
 8001e60:	0020      	movs	r0, r4
 8001e62:	f000 fa6b 	bl	800233c <__clzsi2>
 8001e66:	0002      	movs	r2, r0
 8001e68:	3218      	adds	r2, #24
 8001e6a:	2a1f      	cmp	r2, #31
 8001e6c:	dc00      	bgt.n	8001e70 <__aeabi_dsub+0x3ac>
 8001e6e:	e68f      	b.n	8001b90 <__aeabi_dsub+0xcc>
 8001e70:	0023      	movs	r3, r4
 8001e72:	3808      	subs	r0, #8
 8001e74:	4083      	lsls	r3, r0
 8001e76:	2400      	movs	r4, #0
 8001e78:	e692      	b.n	8001ba0 <__aeabi_dsub+0xdc>
 8001e7a:	4308      	orrs	r0, r1
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	1e50      	subs	r0, r2, #1
 8001e80:	4182      	sbcs	r2, r0
 8001e82:	e66d      	b.n	8001b60 <__aeabi_dsub+0x9c>
 8001e84:	4cca      	ldr	r4, [pc, #808]	; (80021b0 <__aeabi_dsub+0x6ec>)
 8001e86:	1c72      	adds	r2, r6, #1
 8001e88:	4222      	tst	r2, r4
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x3ca>
 8001e8c:	e0ad      	b.n	8001fea <__aeabi_dsub+0x526>
 8001e8e:	464a      	mov	r2, r9
 8001e90:	431a      	orrs	r2, r3
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	d1b8      	bne.n	8001e08 <__aeabi_dsub+0x344>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x3d8>
 8001e9a:	e158      	b.n	800214e <__aeabi_dsub+0x68a>
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x3e0>
 8001ea2:	e159      	b.n	8002158 <__aeabi_dsub+0x694>
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	0759      	lsls	r1, r3, #29
 8001ea8:	08d2      	lsrs	r2, r2, #3
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	e786      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	0759      	lsls	r1, r3, #29
 8001eb4:	08d2      	lsrs	r2, r2, #3
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	e7c1      	b.n	8001e40 <__aeabi_dsub+0x37c>
 8001ebc:	4dba      	ldr	r5, [pc, #744]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001ebe:	42aa      	cmp	r2, r5
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x400>
 8001ec2:	e11e      	b.n	8002102 <__aeabi_dsub+0x63e>
 8001ec4:	2580      	movs	r5, #128	; 0x80
 8001ec6:	042d      	lsls	r5, r5, #16
 8001ec8:	432b      	orrs	r3, r5
 8001eca:	4664      	mov	r4, ip
 8001ecc:	2c38      	cmp	r4, #56	; 0x38
 8001ece:	dc5d      	bgt.n	8001f8c <__aeabi_dsub+0x4c8>
 8001ed0:	2c1f      	cmp	r4, #31
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x412>
 8001ed4:	e0d0      	b.n	8002078 <__aeabi_dsub+0x5b4>
 8001ed6:	2520      	movs	r5, #32
 8001ed8:	4667      	mov	r7, ip
 8001eda:	1b2d      	subs	r5, r5, r4
 8001edc:	464e      	mov	r6, r9
 8001ede:	001c      	movs	r4, r3
 8001ee0:	40fe      	lsrs	r6, r7
 8001ee2:	40ac      	lsls	r4, r5
 8001ee4:	4334      	orrs	r4, r6
 8001ee6:	464e      	mov	r6, r9
 8001ee8:	40ae      	lsls	r6, r5
 8001eea:	0035      	movs	r5, r6
 8001eec:	40fb      	lsrs	r3, r7
 8001eee:	1e6e      	subs	r6, r5, #1
 8001ef0:	41b5      	sbcs	r5, r6
 8001ef2:	1ac9      	subs	r1, r1, r3
 8001ef4:	432c      	orrs	r4, r5
 8001ef6:	e04e      	b.n	8001f96 <__aeabi_dsub+0x4d2>
 8001ef8:	464a      	mov	r2, r9
 8001efa:	1a14      	subs	r4, r2, r0
 8001efc:	45a1      	cmp	r9, r4
 8001efe:	4192      	sbcs	r2, r2
 8001f00:	4252      	negs	r2, r2
 8001f02:	4690      	mov	r8, r2
 8001f04:	1a5f      	subs	r7, r3, r1
 8001f06:	003a      	movs	r2, r7
 8001f08:	4647      	mov	r7, r8
 8001f0a:	1bd2      	subs	r2, r2, r7
 8001f0c:	4690      	mov	r8, r2
 8001f0e:	0212      	lsls	r2, r2, #8
 8001f10:	d500      	bpl.n	8001f14 <__aeabi_dsub+0x450>
 8001f12:	e08b      	b.n	800202c <__aeabi_dsub+0x568>
 8001f14:	4642      	mov	r2, r8
 8001f16:	4322      	orrs	r2, r4
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x458>
 8001f1a:	e630      	b.n	8001b7e <__aeabi_dsub+0xba>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2500      	movs	r5, #0
 8001f20:	e74d      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8001f22:	464a      	mov	r2, r9
 8001f24:	0759      	lsls	r1, r3, #29
 8001f26:	08d2      	lsrs	r2, r2, #3
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	08db      	lsrs	r3, r3, #3
 8001f2c:	e744      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 8001f2e:	4642      	mov	r2, r8
 8001f30:	4b9e      	ldr	r3, [pc, #632]	; (80021ac <__aeabi_dsub+0x6e8>)
 8001f32:	0861      	lsrs	r1, r4, #1
 8001f34:	401a      	ands	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4014      	ands	r4, r2
 8001f3c:	430c      	orrs	r4, r1
 8001f3e:	07da      	lsls	r2, r3, #31
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	4698      	mov	r8, r3
 8001f44:	4314      	orrs	r4, r2
 8001f46:	e641      	b.n	8001bcc <__aeabi_dsub+0x108>
 8001f48:	001a      	movs	r2, r3
 8001f4a:	3e1f      	subs	r6, #31
 8001f4c:	40f2      	lsrs	r2, r6
 8001f4e:	0016      	movs	r6, r2
 8001f50:	2920      	cmp	r1, #32
 8001f52:	d003      	beq.n	8001f5c <__aeabi_dsub+0x498>
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	1a51      	subs	r1, r2, r1
 8001f58:	408b      	lsls	r3, r1
 8001f5a:	431c      	orrs	r4, r3
 8001f5c:	1e62      	subs	r2, r4, #1
 8001f5e:	4194      	sbcs	r4, r2
 8001f60:	2300      	movs	r3, #0
 8001f62:	4334      	orrs	r4, r6
 8001f64:	4698      	mov	r8, r3
 8001f66:	2600      	movs	r6, #0
 8001f68:	e71d      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 8001f6a:	000c      	movs	r4, r1
 8001f6c:	3a20      	subs	r2, #32
 8001f6e:	40d4      	lsrs	r4, r2
 8001f70:	0022      	movs	r2, r4
 8001f72:	4664      	mov	r4, ip
 8001f74:	2c20      	cmp	r4, #32
 8001f76:	d004      	beq.n	8001f82 <__aeabi_dsub+0x4be>
 8001f78:	2740      	movs	r7, #64	; 0x40
 8001f7a:	1b3f      	subs	r7, r7, r4
 8001f7c:	40b9      	lsls	r1, r7
 8001f7e:	4308      	orrs	r0, r1
 8001f80:	4680      	mov	r8, r0
 8001f82:	4644      	mov	r4, r8
 8001f84:	1e61      	subs	r1, r4, #1
 8001f86:	418c      	sbcs	r4, r1
 8001f88:	4322      	orrs	r2, r4
 8001f8a:	e5e9      	b.n	8001b60 <__aeabi_dsub+0x9c>
 8001f8c:	464c      	mov	r4, r9
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	001c      	movs	r4, r3
 8001f92:	1e63      	subs	r3, r4, #1
 8001f94:	419c      	sbcs	r4, r3
 8001f96:	1b04      	subs	r4, r0, r4
 8001f98:	42a0      	cmp	r0, r4
 8001f9a:	419b      	sbcs	r3, r3
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1acb      	subs	r3, r1, r3
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	465d      	mov	r5, fp
 8001fa4:	0016      	movs	r6, r2
 8001fa6:	e5e2      	b.n	8001b6e <__aeabi_dsub+0xaa>
 8001fa8:	464e      	mov	r6, r9
 8001faa:	431e      	orrs	r6, r3
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4ec>
 8001fae:	e0ae      	b.n	800210e <__aeabi_dsub+0x64a>
 8001fb0:	1e66      	subs	r6, r4, #1
 8001fb2:	2c01      	cmp	r4, #1
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x4f4>
 8001fb6:	e0fd      	b.n	80021b4 <__aeabi_dsub+0x6f0>
 8001fb8:	4f7b      	ldr	r7, [pc, #492]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001fba:	42bc      	cmp	r4, r7
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x4fc>
 8001fbe:	e107      	b.n	80021d0 <__aeabi_dsub+0x70c>
 8001fc0:	46b4      	mov	ip, r6
 8001fc2:	e69b      	b.n	8001cfc <__aeabi_dsub+0x238>
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	1b12      	subs	r2, r2, r4
 8001fca:	000c      	movs	r4, r1
 8001fcc:	4094      	lsls	r4, r2
 8001fce:	0007      	movs	r7, r0
 8001fd0:	4090      	lsls	r0, r2
 8001fd2:	46a0      	mov	r8, r4
 8001fd4:	4664      	mov	r4, ip
 8001fd6:	1e42      	subs	r2, r0, #1
 8001fd8:	4190      	sbcs	r0, r2
 8001fda:	4662      	mov	r2, ip
 8001fdc:	40e7      	lsrs	r7, r4
 8001fde:	4644      	mov	r4, r8
 8001fe0:	40d1      	lsrs	r1, r2
 8001fe2:	433c      	orrs	r4, r7
 8001fe4:	4304      	orrs	r4, r0
 8001fe6:	185b      	adds	r3, r3, r1
 8001fe8:	e6f3      	b.n	8001dd2 <__aeabi_dsub+0x30e>
 8001fea:	4c6f      	ldr	r4, [pc, #444]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x52e>
 8001ff0:	e0d5      	b.n	800219e <__aeabi_dsub+0x6da>
 8001ff2:	4448      	add	r0, r9
 8001ff4:	185b      	adds	r3, r3, r1
 8001ff6:	4548      	cmp	r0, r9
 8001ff8:	4189      	sbcs	r1, r1
 8001ffa:	4249      	negs	r1, r1
 8001ffc:	185b      	adds	r3, r3, r1
 8001ffe:	07dc      	lsls	r4, r3, #31
 8002000:	0840      	lsrs	r0, r0, #1
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	4698      	mov	r8, r3
 8002006:	0016      	movs	r6, r2
 8002008:	4304      	orrs	r4, r0
 800200a:	e6cc      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 800200c:	2a00      	cmp	r2, #0
 800200e:	d000      	beq.n	8002012 <__aeabi_dsub+0x54e>
 8002010:	e082      	b.n	8002118 <__aeabi_dsub+0x654>
 8002012:	000a      	movs	r2, r1
 8002014:	4302      	orrs	r2, r0
 8002016:	d140      	bne.n	800209a <__aeabi_dsub+0x5d6>
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	2500      	movs	r5, #0
 800201c:	031b      	lsls	r3, r3, #12
 800201e:	e713      	b.n	8001e48 <__aeabi_dsub+0x384>
 8002020:	074b      	lsls	r3, r1, #29
 8002022:	08c2      	lsrs	r2, r0, #3
 8002024:	431a      	orrs	r2, r3
 8002026:	465d      	mov	r5, fp
 8002028:	08cb      	lsrs	r3, r1, #3
 800202a:	e6c5      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 800202c:	464a      	mov	r2, r9
 800202e:	1a84      	subs	r4, r0, r2
 8002030:	42a0      	cmp	r0, r4
 8002032:	4192      	sbcs	r2, r2
 8002034:	1acb      	subs	r3, r1, r3
 8002036:	4252      	negs	r2, r2
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	4698      	mov	r8, r3
 800203c:	465d      	mov	r5, fp
 800203e:	e59e      	b.n	8001b7e <__aeabi_dsub+0xba>
 8002040:	464a      	mov	r2, r9
 8002042:	0759      	lsls	r1, r3, #29
 8002044:	08d2      	lsrs	r2, r2, #3
 8002046:	430a      	orrs	r2, r1
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	e6f9      	b.n	8001e40 <__aeabi_dsub+0x37c>
 800204c:	464a      	mov	r2, r9
 800204e:	1a14      	subs	r4, r2, r0
 8002050:	45a1      	cmp	r9, r4
 8002052:	4192      	sbcs	r2, r2
 8002054:	1a5b      	subs	r3, r3, r1
 8002056:	4252      	negs	r2, r2
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	4698      	mov	r8, r3
 800205c:	2601      	movs	r6, #1
 800205e:	e586      	b.n	8001b6e <__aeabi_dsub+0xaa>
 8002060:	464a      	mov	r2, r9
 8002062:	0759      	lsls	r1, r3, #29
 8002064:	08d2      	lsrs	r2, r2, #3
 8002066:	430a      	orrs	r2, r1
 8002068:	08db      	lsrs	r3, r3, #3
 800206a:	e6a5      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 800206c:	464c      	mov	r4, r9
 800206e:	4323      	orrs	r3, r4
 8002070:	001c      	movs	r4, r3
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	e65b      	b.n	8001d30 <__aeabi_dsub+0x26c>
 8002078:	4665      	mov	r5, ip
 800207a:	001e      	movs	r6, r3
 800207c:	3d20      	subs	r5, #32
 800207e:	40ee      	lsrs	r6, r5
 8002080:	2c20      	cmp	r4, #32
 8002082:	d005      	beq.n	8002090 <__aeabi_dsub+0x5cc>
 8002084:	2540      	movs	r5, #64	; 0x40
 8002086:	1b2d      	subs	r5, r5, r4
 8002088:	40ab      	lsls	r3, r5
 800208a:	464c      	mov	r4, r9
 800208c:	431c      	orrs	r4, r3
 800208e:	46a2      	mov	sl, r4
 8002090:	4654      	mov	r4, sl
 8002092:	1e63      	subs	r3, r4, #1
 8002094:	419c      	sbcs	r4, r3
 8002096:	4334      	orrs	r4, r6
 8002098:	e77d      	b.n	8001f96 <__aeabi_dsub+0x4d2>
 800209a:	074b      	lsls	r3, r1, #29
 800209c:	08c2      	lsrs	r2, r0, #3
 800209e:	431a      	orrs	r2, r3
 80020a0:	465d      	mov	r5, fp
 80020a2:	08cb      	lsrs	r3, r1, #3
 80020a4:	e6cc      	b.n	8001e40 <__aeabi_dsub+0x37c>
 80020a6:	000a      	movs	r2, r1
 80020a8:	4302      	orrs	r2, r0
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x5ea>
 80020ac:	e736      	b.n	8001f1c <__aeabi_dsub+0x458>
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	08c2      	lsrs	r2, r0, #3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	465d      	mov	r5, fp
 80020b6:	08cb      	lsrs	r3, r1, #3
 80020b8:	e681      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 80020ba:	464a      	mov	r2, r9
 80020bc:	1a84      	subs	r4, r0, r2
 80020be:	42a0      	cmp	r0, r4
 80020c0:	4192      	sbcs	r2, r2
 80020c2:	1acb      	subs	r3, r1, r3
 80020c4:	4252      	negs	r2, r2
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	4698      	mov	r8, r3
 80020ca:	465d      	mov	r5, fp
 80020cc:	2601      	movs	r6, #1
 80020ce:	e54e      	b.n	8001b6e <__aeabi_dsub+0xaa>
 80020d0:	074b      	lsls	r3, r1, #29
 80020d2:	08c2      	lsrs	r2, r0, #3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	08cb      	lsrs	r3, r1, #3
 80020d8:	e6b2      	b.n	8001e40 <__aeabi_dsub+0x37c>
 80020da:	464a      	mov	r2, r9
 80020dc:	1a14      	subs	r4, r2, r0
 80020de:	45a1      	cmp	r9, r4
 80020e0:	4192      	sbcs	r2, r2
 80020e2:	1a5f      	subs	r7, r3, r1
 80020e4:	4252      	negs	r2, r2
 80020e6:	1aba      	subs	r2, r7, r2
 80020e8:	4690      	mov	r8, r2
 80020ea:	0212      	lsls	r2, r2, #8
 80020ec:	d56b      	bpl.n	80021c6 <__aeabi_dsub+0x702>
 80020ee:	464a      	mov	r2, r9
 80020f0:	1a84      	subs	r4, r0, r2
 80020f2:	42a0      	cmp	r0, r4
 80020f4:	4192      	sbcs	r2, r2
 80020f6:	1acb      	subs	r3, r1, r3
 80020f8:	4252      	negs	r2, r2
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	4698      	mov	r8, r3
 80020fe:	465d      	mov	r5, fp
 8002100:	e564      	b.n	8001bcc <__aeabi_dsub+0x108>
 8002102:	074b      	lsls	r3, r1, #29
 8002104:	08c2      	lsrs	r2, r0, #3
 8002106:	431a      	orrs	r2, r3
 8002108:	465d      	mov	r5, fp
 800210a:	08cb      	lsrs	r3, r1, #3
 800210c:	e698      	b.n	8001e40 <__aeabi_dsub+0x37c>
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	08c2      	lsrs	r2, r0, #3
 8002112:	431a      	orrs	r2, r3
 8002114:	08cb      	lsrs	r3, r1, #3
 8002116:	e64f      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 8002118:	000a      	movs	r2, r1
 800211a:	4302      	orrs	r2, r0
 800211c:	d090      	beq.n	8002040 <__aeabi_dsub+0x57c>
 800211e:	464a      	mov	r2, r9
 8002120:	075c      	lsls	r4, r3, #29
 8002122:	08d2      	lsrs	r2, r2, #3
 8002124:	4314      	orrs	r4, r2
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	0312      	lsls	r2, r2, #12
 800212c:	4213      	tst	r3, r2
 800212e:	d008      	beq.n	8002142 <__aeabi_dsub+0x67e>
 8002130:	08ce      	lsrs	r6, r1, #3
 8002132:	4216      	tst	r6, r2
 8002134:	d105      	bne.n	8002142 <__aeabi_dsub+0x67e>
 8002136:	08c0      	lsrs	r0, r0, #3
 8002138:	0749      	lsls	r1, r1, #29
 800213a:	4308      	orrs	r0, r1
 800213c:	0004      	movs	r4, r0
 800213e:	465d      	mov	r5, fp
 8002140:	0033      	movs	r3, r6
 8002142:	0f61      	lsrs	r1, r4, #29
 8002144:	00e2      	lsls	r2, r4, #3
 8002146:	0749      	lsls	r1, r1, #29
 8002148:	08d2      	lsrs	r2, r2, #3
 800214a:	430a      	orrs	r2, r1
 800214c:	e678      	b.n	8001e40 <__aeabi_dsub+0x37c>
 800214e:	074b      	lsls	r3, r1, #29
 8002150:	08c2      	lsrs	r2, r0, #3
 8002152:	431a      	orrs	r2, r3
 8002154:	08cb      	lsrs	r3, r1, #3
 8002156:	e632      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8002158:	4448      	add	r0, r9
 800215a:	185b      	adds	r3, r3, r1
 800215c:	4548      	cmp	r0, r9
 800215e:	4192      	sbcs	r2, r2
 8002160:	4698      	mov	r8, r3
 8002162:	4252      	negs	r2, r2
 8002164:	4490      	add	r8, r2
 8002166:	4643      	mov	r3, r8
 8002168:	0004      	movs	r4, r0
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	d400      	bmi.n	8002170 <__aeabi_dsub+0x6ac>
 800216e:	e61a      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 8002170:	4642      	mov	r2, r8
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <__aeabi_dsub+0x6e8>)
 8002174:	2601      	movs	r6, #1
 8002176:	401a      	ands	r2, r3
 8002178:	4690      	mov	r8, r2
 800217a:	e614      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 800217c:	4666      	mov	r6, ip
 800217e:	001f      	movs	r7, r3
 8002180:	3e20      	subs	r6, #32
 8002182:	40f7      	lsrs	r7, r6
 8002184:	2c20      	cmp	r4, #32
 8002186:	d005      	beq.n	8002194 <__aeabi_dsub+0x6d0>
 8002188:	2640      	movs	r6, #64	; 0x40
 800218a:	1b36      	subs	r6, r6, r4
 800218c:	40b3      	lsls	r3, r6
 800218e:	464c      	mov	r4, r9
 8002190:	431c      	orrs	r4, r3
 8002192:	46a2      	mov	sl, r4
 8002194:	4654      	mov	r4, sl
 8002196:	1e63      	subs	r3, r4, #1
 8002198:	419c      	sbcs	r4, r3
 800219a:	433c      	orrs	r4, r7
 800219c:	e5c8      	b.n	8001d30 <__aeabi_dsub+0x26c>
 800219e:	0011      	movs	r1, r2
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	e532      	b.n	8001c0c <__aeabi_dsub+0x148>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	000007ff 	.word	0x000007ff
 80021ac:	ff7fffff 	.word	0xff7fffff
 80021b0:	000007fe 	.word	0x000007fe
 80021b4:	464a      	mov	r2, r9
 80021b6:	1814      	adds	r4, r2, r0
 80021b8:	4284      	cmp	r4, r0
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	185b      	adds	r3, r3, r1
 80021be:	4698      	mov	r8, r3
 80021c0:	4252      	negs	r2, r2
 80021c2:	4490      	add	r8, r2
 80021c4:	e5e9      	b.n	8001d9a <__aeabi_dsub+0x2d6>
 80021c6:	4642      	mov	r2, r8
 80021c8:	4322      	orrs	r2, r4
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x70a>
 80021cc:	e6a6      	b.n	8001f1c <__aeabi_dsub+0x458>
 80021ce:	e5ea      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 80021d0:	074b      	lsls	r3, r1, #29
 80021d2:	08c2      	lsrs	r2, r0, #3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	08cb      	lsrs	r3, r1, #3
 80021d8:	e632      	b.n	8001e40 <__aeabi_dsub+0x37c>
 80021da:	2200      	movs	r2, #0
 80021dc:	4901      	ldr	r1, [pc, #4]	; (80021e4 <__aeabi_dsub+0x720>)
 80021de:	0013      	movs	r3, r2
 80021e0:	e514      	b.n	8001c0c <__aeabi_dsub+0x148>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__aeabi_dcmpun>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	0005      	movs	r5, r0
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <__aeabi_dcmpun+0x38>)
 80021ee:	030c      	lsls	r4, r1, #12
 80021f0:	0016      	movs	r6, r2
 80021f2:	0049      	lsls	r1, r1, #1
 80021f4:	031a      	lsls	r2, r3, #12
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	0b24      	lsrs	r4, r4, #12
 80021fa:	0d49      	lsrs	r1, r1, #21
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	0d5b      	lsrs	r3, r3, #21
 8002200:	4281      	cmp	r1, r0
 8002202:	d008      	beq.n	8002216 <__aeabi_dcmpun+0x2e>
 8002204:	4906      	ldr	r1, [pc, #24]	; (8002220 <__aeabi_dcmpun+0x38>)
 8002206:	2000      	movs	r0, #0
 8002208:	428b      	cmp	r3, r1
 800220a:	d103      	bne.n	8002214 <__aeabi_dcmpun+0x2c>
 800220c:	4332      	orrs	r2, r6
 800220e:	0010      	movs	r0, r2
 8002210:	1e42      	subs	r2, r0, #1
 8002212:	4190      	sbcs	r0, r2
 8002214:	bd70      	pop	{r4, r5, r6, pc}
 8002216:	2001      	movs	r0, #1
 8002218:	432c      	orrs	r4, r5
 800221a:	d1fb      	bne.n	8002214 <__aeabi_dcmpun+0x2c>
 800221c:	e7f2      	b.n	8002204 <__aeabi_dcmpun+0x1c>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff

08002224 <__aeabi_d2iz>:
 8002224:	000a      	movs	r2, r1
 8002226:	b530      	push	{r4, r5, lr}
 8002228:	4c13      	ldr	r4, [pc, #76]	; (8002278 <__aeabi_d2iz+0x54>)
 800222a:	0053      	lsls	r3, r2, #1
 800222c:	0309      	lsls	r1, r1, #12
 800222e:	0005      	movs	r5, r0
 8002230:	0b09      	lsrs	r1, r1, #12
 8002232:	2000      	movs	r0, #0
 8002234:	0d5b      	lsrs	r3, r3, #21
 8002236:	0fd2      	lsrs	r2, r2, #31
 8002238:	42a3      	cmp	r3, r4
 800223a:	dd04      	ble.n	8002246 <__aeabi_d2iz+0x22>
 800223c:	480f      	ldr	r0, [pc, #60]	; (800227c <__aeabi_d2iz+0x58>)
 800223e:	4283      	cmp	r3, r0
 8002240:	dd02      	ble.n	8002248 <__aeabi_d2iz+0x24>
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <__aeabi_d2iz+0x5c>)
 8002244:	18d0      	adds	r0, r2, r3
 8002246:	bd30      	pop	{r4, r5, pc}
 8002248:	2080      	movs	r0, #128	; 0x80
 800224a:	0340      	lsls	r0, r0, #13
 800224c:	4301      	orrs	r1, r0
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <__aeabi_d2iz+0x60>)
 8002250:	1ac0      	subs	r0, r0, r3
 8002252:	281f      	cmp	r0, #31
 8002254:	dd08      	ble.n	8002268 <__aeabi_d2iz+0x44>
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <__aeabi_d2iz+0x64>)
 8002258:	1ac3      	subs	r3, r0, r3
 800225a:	40d9      	lsrs	r1, r3
 800225c:	000b      	movs	r3, r1
 800225e:	4258      	negs	r0, r3
 8002260:	2a00      	cmp	r2, #0
 8002262:	d1f0      	bne.n	8002246 <__aeabi_d2iz+0x22>
 8002264:	0018      	movs	r0, r3
 8002266:	e7ee      	b.n	8002246 <__aeabi_d2iz+0x22>
 8002268:	4c08      	ldr	r4, [pc, #32]	; (800228c <__aeabi_d2iz+0x68>)
 800226a:	40c5      	lsrs	r5, r0
 800226c:	46a4      	mov	ip, r4
 800226e:	4463      	add	r3, ip
 8002270:	4099      	lsls	r1, r3
 8002272:	000b      	movs	r3, r1
 8002274:	432b      	orrs	r3, r5
 8002276:	e7f2      	b.n	800225e <__aeabi_d2iz+0x3a>
 8002278:	000003fe 	.word	0x000003fe
 800227c:	0000041d 	.word	0x0000041d
 8002280:	7fffffff 	.word	0x7fffffff
 8002284:	00000433 	.word	0x00000433
 8002288:	00000413 	.word	0x00000413
 800228c:	fffffbed 	.word	0xfffffbed

08002290 <__aeabi_i2d>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	2800      	cmp	r0, #0
 8002294:	d016      	beq.n	80022c4 <__aeabi_i2d+0x34>
 8002296:	17c3      	asrs	r3, r0, #31
 8002298:	18c5      	adds	r5, r0, r3
 800229a:	405d      	eors	r5, r3
 800229c:	0fc4      	lsrs	r4, r0, #31
 800229e:	0028      	movs	r0, r5
 80022a0:	f000 f84c 	bl	800233c <__clzsi2>
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <__aeabi_i2d+0x5c>)
 80022a6:	1a12      	subs	r2, r2, r0
 80022a8:	280a      	cmp	r0, #10
 80022aa:	dc16      	bgt.n	80022da <__aeabi_i2d+0x4a>
 80022ac:	0003      	movs	r3, r0
 80022ae:	002e      	movs	r6, r5
 80022b0:	3315      	adds	r3, #21
 80022b2:	409e      	lsls	r6, r3
 80022b4:	230b      	movs	r3, #11
 80022b6:	1a18      	subs	r0, r3, r0
 80022b8:	40c5      	lsrs	r5, r0
 80022ba:	0553      	lsls	r3, r2, #21
 80022bc:	032d      	lsls	r5, r5, #12
 80022be:	0b2d      	lsrs	r5, r5, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e003      	b.n	80022cc <__aeabi_i2d+0x3c>
 80022c4:	2400      	movs	r4, #0
 80022c6:	2300      	movs	r3, #0
 80022c8:	2500      	movs	r5, #0
 80022ca:	2600      	movs	r6, #0
 80022cc:	051b      	lsls	r3, r3, #20
 80022ce:	432b      	orrs	r3, r5
 80022d0:	07e4      	lsls	r4, r4, #31
 80022d2:	4323      	orrs	r3, r4
 80022d4:	0030      	movs	r0, r6
 80022d6:	0019      	movs	r1, r3
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	380b      	subs	r0, #11
 80022dc:	4085      	lsls	r5, r0
 80022de:	0553      	lsls	r3, r2, #21
 80022e0:	032d      	lsls	r5, r5, #12
 80022e2:	2600      	movs	r6, #0
 80022e4:	0b2d      	lsrs	r5, r5, #12
 80022e6:	0d5b      	lsrs	r3, r3, #21
 80022e8:	e7f0      	b.n	80022cc <__aeabi_i2d+0x3c>
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	0000041e 	.word	0x0000041e

080022f0 <__aeabi_ui2d>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	1e04      	subs	r4, r0, #0
 80022f4:	d010      	beq.n	8002318 <__aeabi_ui2d+0x28>
 80022f6:	f000 f821 	bl	800233c <__clzsi2>
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <__aeabi_ui2d+0x48>)
 80022fc:	1a1b      	subs	r3, r3, r0
 80022fe:	280a      	cmp	r0, #10
 8002300:	dc11      	bgt.n	8002326 <__aeabi_ui2d+0x36>
 8002302:	220b      	movs	r2, #11
 8002304:	0021      	movs	r1, r4
 8002306:	1a12      	subs	r2, r2, r0
 8002308:	40d1      	lsrs	r1, r2
 800230a:	3015      	adds	r0, #21
 800230c:	030a      	lsls	r2, r1, #12
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	4084      	lsls	r4, r0
 8002312:	0b12      	lsrs	r2, r2, #12
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	e001      	b.n	800231c <__aeabi_ui2d+0x2c>
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	4313      	orrs	r3, r2
 8002320:	0020      	movs	r0, r4
 8002322:	0019      	movs	r1, r3
 8002324:	bd10      	pop	{r4, pc}
 8002326:	0022      	movs	r2, r4
 8002328:	380b      	subs	r0, #11
 800232a:	4082      	lsls	r2, r0
 800232c:	055b      	lsls	r3, r3, #21
 800232e:	0312      	lsls	r2, r2, #12
 8002330:	2400      	movs	r4, #0
 8002332:	0b12      	lsrs	r2, r2, #12
 8002334:	0d5b      	lsrs	r3, r3, #21
 8002336:	e7f1      	b.n	800231c <__aeabi_ui2d+0x2c>
 8002338:	0000041e 	.word	0x0000041e

0800233c <__clzsi2>:
 800233c:	211c      	movs	r1, #28
 800233e:	2301      	movs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	4298      	cmp	r0, r3
 8002344:	d301      	bcc.n	800234a <__clzsi2+0xe>
 8002346:	0c00      	lsrs	r0, r0, #16
 8002348:	3910      	subs	r1, #16
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	4298      	cmp	r0, r3
 800234e:	d301      	bcc.n	8002354 <__clzsi2+0x18>
 8002350:	0a00      	lsrs	r0, r0, #8
 8002352:	3908      	subs	r1, #8
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	4298      	cmp	r0, r3
 8002358:	d301      	bcc.n	800235e <__clzsi2+0x22>
 800235a:	0900      	lsrs	r0, r0, #4
 800235c:	3904      	subs	r1, #4
 800235e:	a202      	add	r2, pc, #8	; (adr r2, 8002368 <__clzsi2+0x2c>)
 8002360:	5c10      	ldrb	r0, [r2, r0]
 8002362:	1840      	adds	r0, r0, r1
 8002364:	4770      	bx	lr
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	02020304 	.word	0x02020304
 800236c:	01010101 	.word	0x01010101
	...

08002378 <__clzdi2>:
 8002378:	b510      	push	{r4, lr}
 800237a:	2900      	cmp	r1, #0
 800237c:	d103      	bne.n	8002386 <__clzdi2+0xe>
 800237e:	f7ff ffdd 	bl	800233c <__clzsi2>
 8002382:	3020      	adds	r0, #32
 8002384:	e002      	b.n	800238c <__clzdi2+0x14>
 8002386:	1c08      	adds	r0, r1, #0
 8002388:	f7ff ffd8 	bl	800233c <__clzsi2>
 800238c:	bd10      	pop	{r4, pc}
 800238e:	46c0      	nop			; (mov r8, r8)

08002390 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002396:	003b      	movs	r3, r7
 8002398:	0018      	movs	r0, r3
 800239a:	2308      	movs	r3, #8
 800239c:	001a      	movs	r2, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	f006 f91d 	bl	80085de <memset>

  /* USER CODE BEGIN ADC_Init 1 */
  hadc.State = HAL_ADC_STATE_RESET;
 80023a4:	4b36      	ldr	r3, [pc, #216]	; (8002480 <MX_ADC_Init+0xf0>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80023aa:	4b35      	ldr	r3, [pc, #212]	; (8002480 <MX_ADC_Init+0xf0>)
 80023ac:	4a35      	ldr	r2, [pc, #212]	; (8002484 <MX_ADC_Init+0xf4>)
 80023ae:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <MX_ADC_Init+0xf0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <MX_ADC_Init+0xf0>)
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	05d2      	lsls	r2, r2, #23
 80023bc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <MX_ADC_Init+0xf0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <MX_ADC_Init+0xf0>)
 80023c6:	2202      	movs	r2, #2
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <MX_ADC_Init+0xf0>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <MX_ADC_Init+0xf0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <MX_ADC_Init+0xf0>)
 80023d8:	2220      	movs	r2, #32
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <MX_ADC_Init+0xf0>)
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <MX_ADC_Init+0xf0>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <MX_ADC_Init+0xf0>)
 80023ee:	22c2      	movs	r2, #194	; 0xc2
 80023f0:	32ff      	adds	r2, #255	; 0xff
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <MX_ADC_Init+0xf0>)
 80023f6:	222c      	movs	r2, #44	; 0x2c
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <MX_ADC_Init+0xf0>)
 80023fe:	2208      	movs	r2, #8
 8002400:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_ADC_Init+0xf0>)
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <MX_ADC_Init+0xf0>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_ADC_Init+0xf0>)
 8002410:	2200      	movs	r2, #0
 8002412:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_ADC_Init+0xf0>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <MX_ADC_Init+0xf0>)
 800241c:	0018      	movs	r0, r3
 800241e:	f001 fc11 	bl	8003c44 <HAL_ADC_Init>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d001      	beq.n	800242a <MX_ADC_Init+0x9a>
  {
    Error_Handler();
 8002426:	f000 f9fd 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800242a:	003b      	movs	r3, r7
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002430:	003b      	movs	r3, r7
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	0152      	lsls	r2, r2, #5
 8002436:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002438:	003a      	movs	r2, r7
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_ADC_Init+0xf0>)
 800243c:	0011      	movs	r1, r2
 800243e:	0018      	movs	r0, r3
 8002440:	f001 ff40 	bl	80042c4 <HAL_ADC_ConfigChannel>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8002448:	f000 f9ec 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800244c:	003b      	movs	r3, r7
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <MX_ADC_Init+0xf8>)
 8002450:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002452:	003a      	movs	r2, r7
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_ADC_Init+0xf0>)
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f001 ff33 	bl	80042c4 <HAL_ADC_ConfigChannel>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_ADC_Init+0xd6>
  {
    Error_Handler();
 8002462:	f000 f9df 	bl	8002824 <Error_Handler>
	   	   ADC_CalibrateStimulator(&hadc, &hdac);
	#endif

	   /* Reinitialize using DMA*/

	   if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_ADC_Init+0xf0>)
 8002468:	0018      	movs	r0, r3
 800246a:	f001 fbeb 	bl	8003c44 <HAL_ADC_Init>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <MX_ADC_Init+0xe6>
	   {
	      Error_Handler();
 8002472:	f000 f9d7 	bl	8002824 <Error_Handler>
	   }
  /* USER CODE END ADC_Init 2 */

}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	20000250 	.word	0x20000250
 8002484:	40012400 	.word	0x40012400
 8002488:	04000002 	.word	0x04000002

0800248c <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac_ch1;


void MX_DAC_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002492:	003b      	movs	r3, r7
 8002494:	0018      	movs	r0, r3
 8002496:	2308      	movs	r3, #8
 8002498:	001a      	movs	r2, r3
 800249a:	2100      	movs	r1, #0
 800249c:	f006 f89f 	bl	80085de <memset>

  /* USER CODE BEGIN DAC_Init 1 */
  hdac.Instance = DAC;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_DAC_Init+0x60>)
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <MX_DAC_Init+0x64>)
 80024a4:	601a      	str	r2, [r3, #0]
  DAC->CR = DAC_CR_EN1 | DAC_CR_TEN1 | DAC_CR_BOFF1;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_DAC_Init+0x64>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_DAC_Init+0x60>)
 80024ae:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <MX_DAC_Init+0x64>)
 80024b0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_DAC_Init+0x60>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f002 fa2d 	bl	8004914 <HAL_DAC_Init>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d001      	beq.n	80024c2 <MX_DAC_Init+0x36>
  {
    Error_Handler();
 80024be:	f000 f9b1 	bl	8002824 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T21_TRGO;
 80024c2:	003b      	movs	r3, r7
 80024c4:	221c      	movs	r2, #28
 80024c6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80024c8:	003b      	movs	r3, r7
 80024ca:	2200      	movs	r2, #0
 80024cc:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80024ce:	0039      	movs	r1, r7
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_DAC_Init+0x60>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	0018      	movs	r0, r3
 80024d6:	f002 fa59 	bl	800498c <HAL_DAC_ConfigChannel>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d001      	beq.n	80024e2 <MX_DAC_Init+0x56>
  {
    Error_Handler();
 80024de:	f000 f9a1 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	200002f4 	.word	0x200002f4
 80024f0:	40007400 	.word	0x40007400

080024f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b08b      	sub	sp, #44	; 0x2c
 80024f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	2414      	movs	r4, #20
 80024fc:	193b      	adds	r3, r7, r4
 80024fe:	0018      	movs	r0, r3
 8002500:	2314      	movs	r3, #20
 8002502:	001a      	movs	r2, r3
 8002504:	2100      	movs	r1, #0
 8002506:	f006 f86a 	bl	80085de <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <MX_GPIO_Init+0xd4>)
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002510:	2104      	movs	r1, #4
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	2204      	movs	r2, #4
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002528:	2180      	movs	r1, #128	; 0x80
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <MX_GPIO_Init+0xd4>)
 800253c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002558:	2102      	movs	r1, #2
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <MX_GPIO_Init+0xd4>)
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_PIN_GPIO_Port, GREEN_LED_PIN_Pin, GPIO_PIN_RESET);
 800256a:	23a0      	movs	r3, #160	; 0xa0
 800256c:	05db      	lsls	r3, r3, #23
 800256e:	2200      	movs	r2, #0
 8002570:	2120      	movs	r1, #32
 8002572:	0018      	movs	r0, r3
 8002574:	f002 fec6 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002578:	193b      	adds	r3, r7, r4
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	0192      	lsls	r2, r2, #6
 800257e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002580:	193b      	adds	r3, r7, r4
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <MX_GPIO_Init+0xd8>)
 8002584:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	193b      	adds	r3, r7, r4
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800258c:	193b      	adds	r3, r7, r4
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <MX_GPIO_Init+0xdc>)
 8002590:	0019      	movs	r1, r3
 8002592:	0010      	movs	r0, r2
 8002594:	f002 fd40 	bl	8005018 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_PIN_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_PIN_Pin;
 8002598:	0021      	movs	r1, r4
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2220      	movs	r2, #32
 800259e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2201      	movs	r2, #1
 80025a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80025b2:	187a      	adds	r2, r7, r1
 80025b4:	23a0      	movs	r3, #160	; 0xa0
 80025b6:	05db      	lsls	r3, r3, #23
 80025b8:	0011      	movs	r1, r2
 80025ba:	0018      	movs	r0, r3
 80025bc:	f002 fd2c 	bl	8005018 <HAL_GPIO_Init>

}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b00b      	add	sp, #44	; 0x2c
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	10210000 	.word	0x10210000
 80025d0:	50000800 	.word	0x50000800

080025d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <MX_I2C2_Init+0x78>)
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <MX_I2C2_Init+0x7c>)
 80025dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_I2C2_Init+0x78>)
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <MX_I2C2_Init+0x80>)
 80025e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 100;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <MX_I2C2_Init+0x78>)
 80025e6:	2264      	movs	r2, #100	; 0x64
 80025e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <MX_I2C2_Init+0x78>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <MX_I2C2_Init+0x78>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <MX_I2C2_Init+0x78>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <MX_I2C2_Init+0x78>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <MX_I2C2_Init+0x78>)
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0312      	lsls	r2, r2, #12
 8002608:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_I2C2_Init+0x78>)
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0292      	lsls	r2, r2, #10
 8002610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_I2C2_Init+0x78>)
 8002614:	0018      	movs	r0, r3
 8002616:	f002 fe93 	bl	8005340 <HAL_I2C_Init>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d001      	beq.n	8002622 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 800261e:	f000 f901 	bl	8002824 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <MX_I2C2_Init+0x78>)
 8002624:	2100      	movs	r1, #0
 8002626:	0018      	movs	r0, r3
 8002628:	f002 ff20 	bl	800546c <HAL_I2CEx_ConfigAnalogFilter>
 800262c:	1e03      	subs	r3, r0, #0
 800262e:	d001      	beq.n	8002634 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 8002630:	f000 f8f8 	bl	8002824 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <MX_I2C2_Init+0x78>)
 8002636:	2100      	movs	r1, #0
 8002638:	0018      	movs	r0, r3
 800263a:	f002 ff63 	bl	8005504 <HAL_I2CEx_ConfigDigitalFilter>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d001      	beq.n	8002646 <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 8002642:	f000 f8ef 	bl	8002824 <Error_Handler>

  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000304 	.word	0x20000304
 8002650:	40005800 	.word	0x40005800
 8002654:	00707cbb 	.word	0x00707cbb

08002658 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	b08f      	sub	sp, #60	; 0x3c
 800265c:	af04      	add	r7, sp, #16
 800265e:	6078      	str	r0, [r7, #4]
	__HAL_DAC_ENABLE((&my_sys) -> stimulator -> hdac, DAC_CHANNEL_1);
	HAL_DAC_SetValue((&my_sys) -> stimulator -> hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT_ZERO_MA);
#endif
	/* Push XFER_CPLT Event onto event queue */
	event_t event;
	event.name = XFER_CPLT;
 8002660:	240c      	movs	r4, #12
 8002662:	193b      	adds	r3, r7, r4
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
	memset(event.data, 0, sizeof(event.data[0]) * EVENT_DATA_SIZE);
 8002668:	193b      	adds	r3, r7, r4
 800266a:	3302      	adds	r3, #2
 800266c:	2214      	movs	r2, #20
 800266e:	2100      	movs	r1, #0
 8002670:	0018      	movs	r0, r3
 8002672:	f005 ffb4 	bl	80085de <memset>
	event.data_size = sizeof(event.data[0]) * EVENT_DATA_SIZE;
 8002676:	193b      	adds	r3, r7, r4
 8002678:	2214      	movs	r2, #20
 800267a:	619a      	str	r2, [r3, #24]
	ring_buffer_queue(&((&my_sys) -> stimulator.event_queue), event);
 800267c:	193b      	adds	r3, r7, r4
 800267e:	4809      	ldr	r0, [pc, #36]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002680:	466a      	mov	r2, sp
 8002682:	0011      	movs	r1, r2
 8002684:	001a      	movs	r2, r3
 8002686:	320c      	adds	r2, #12
 8002688:	ca70      	ldmia	r2!, {r4, r5, r6}
 800268a:	c170      	stmia	r1!, {r4, r5, r6}
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	600a      	str	r2, [r1, #0]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f000 f8df 	bl	8002858 <ring_buffer_queue>
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b00b      	add	sp, #44	; 0x2c
 80026a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	200003dc 	.word	0x200003dc

080026a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026ac:	f001 fa36 	bl	8003b1c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b0:	f000 f81c 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026b4:	f7ff ff1e 	bl	80024f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80026b8:	f000 f88e 	bl	80027d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026bc:	f001 f9d0 	bl	8003a60 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80026c0:	f7ff fee4 	bl	800248c <MX_DAC_Init>
  MX_ADC_Init();
 80026c4:	f7ff fe64 	bl	8002390 <MX_ADC_Init>
  MX_TIM21_Init();
 80026c8:	f001 f93a 	bl	8003940 <MX_TIM21_Init>
  MX_I2C2_Init();
 80026cc:	f7ff ff82 	bl	80025d4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80026d0:	f000 f9c2 	bl	8002a58 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  module_system_init(&my_sys);
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <main+0x40>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f005 fc96 	bl	8008008 <module_system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     state_machine(&my_sys);
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <main+0x40>)
 80026de:	0018      	movs	r0, r3
 80026e0:	f005 fcd0 	bl	8008084 <state_machine>
 80026e4:	e7fa      	b.n	80026dc <main+0x34>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	200003a8 	.word	0x200003a8

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b09d      	sub	sp, #116	; 0x74
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	2438      	movs	r4, #56	; 0x38
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	0018      	movs	r0, r3
 80026f8:	2338      	movs	r3, #56	; 0x38
 80026fa:	001a      	movs	r2, r3
 80026fc:	2100      	movs	r1, #0
 80026fe:	f005 ff6e 	bl	80085de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002702:	2324      	movs	r3, #36	; 0x24
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	0018      	movs	r0, r3
 8002708:	2314      	movs	r3, #20
 800270a:	001a      	movs	r2, r3
 800270c:	2100      	movs	r1, #0
 800270e:	f005 ff66 	bl	80085de <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002712:	003b      	movs	r3, r7
 8002714:	0018      	movs	r0, r3
 8002716:	2324      	movs	r3, #36	; 0x24
 8002718:	001a      	movs	r2, r3
 800271a:	2100      	movs	r1, #0
 800271c:	f005 ff5f 	bl	80085de <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <SystemClock_Config+0xe4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <SystemClock_Config+0xe8>)
 8002726:	401a      	ands	r2, r3
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <SystemClock_Config+0xe4>)
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	0109      	lsls	r1, r1, #4
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002732:	0021      	movs	r1, r4
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2201      	movs	r2, #1
 800273e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2210      	movs	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002746:	187b      	adds	r3, r7, r1
 8002748:	2202      	movs	r2, #2
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800274c:	187b      	adds	r3, r7, r1
 800274e:	2200      	movs	r2, #0
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002752:	187b      	adds	r3, r7, r1
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	02d2      	lsls	r2, r2, #11
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800275a:	187b      	adds	r3, r7, r1
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	03d2      	lsls	r2, r2, #15
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002762:	187b      	adds	r3, r7, r1
 8002764:	0018      	movs	r0, r3
 8002766:	f002 ff19 	bl	800559c <HAL_RCC_OscConfig>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800276e:	f000 f859 	bl	8002824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002772:	2124      	movs	r1, #36	; 0x24
 8002774:	187b      	adds	r3, r7, r1
 8002776:	220f      	movs	r2, #15
 8002778:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2203      	movs	r2, #3
 800277e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2101      	movs	r1, #1
 8002796:	0018      	movs	r0, r3
 8002798:	f003 fac4 	bl	8005d24 <HAL_RCC_ClockConfig>
 800279c:	1e03      	subs	r3, r0, #0
 800279e:	d001      	beq.n	80027a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80027a0:	f000 f840 	bl	8002824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80027a4:	003b      	movs	r3, r7
 80027a6:	220a      	movs	r2, #10
 80027a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027aa:	003b      	movs	r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027b0:	003b      	movs	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b6:	003b      	movs	r3, r7
 80027b8:	0018      	movs	r0, r3
 80027ba:	f003 fcf9 	bl	80061b0 <HAL_RCCEx_PeriphCLKConfig>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80027c2:	f000 f82f 	bl	8002824 <Error_Handler>
  }
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b01d      	add	sp, #116	; 0x74
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	40007000 	.word	0x40007000
 80027d4:	ffffe7ff 	.word	0xffffe7ff

080027d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <MX_DMA_Init+0x48>)
 80027e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <MX_DMA_Init+0x48>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <MX_DMA_Init+0x48>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	2201      	movs	r2, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2009      	movs	r0, #9
 80027fc:	f002 f858 	bl	80048b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002800:	2009      	movs	r0, #9
 8002802:	f002 f86a 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	200a      	movs	r0, #10
 800280c:	f002 f850 	bl	80048b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002810:	200a      	movs	r0, #10
 8002812:	f002 f862 	bl	80048da <HAL_NVIC_EnableIRQ>

}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	40021000 	.word	0x40021000

08002824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800282c:	e7fe      	b.n	800282c <Error_Handler+0x8>
	...

08002830 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(volatile ring_buffer_t *event_queue) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	event_queue->tail_index = 0;
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	23e0      	movs	r3, #224	; 0xe0
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	2100      	movs	r1, #0
 8002840:	54d1      	strb	r1, [r2, r3]
	event_queue->head_index = 0;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <ring_buffer_init+0x24>)
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	00000381 	.word	0x00000381

08002858 <ring_buffer_queue>:

void ring_buffer_queue(volatile ring_buffer_t *buffer, event_t event) {
 8002858:	b084      	sub	sp, #16
 800285a:	b590      	push	{r4, r7, lr}
 800285c:	46c6      	mov	lr, r8
 800285e:	b500      	push	{lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	2004      	movs	r0, #4
 8002868:	2410      	movs	r4, #16
 800286a:	46a4      	mov	ip, r4
 800286c:	2408      	movs	r4, #8
 800286e:	46a0      	mov	r8, r4
 8002870:	44b8      	add	r8, r7
 8002872:	44c4      	add	ip, r8
 8002874:	4460      	add	r0, ip
 8002876:	6001      	str	r1, [r0, #0]
 8002878:	6042      	str	r2, [r0, #4]
 800287a:	6083      	str	r3, [r0, #8]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 f8ce 	bl	8002a20 <ring_buffer_is_full>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d00d      	beq.n	80028a4 <ring_buffer_queue+0x4c>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	23e0      	movs	r3, #224	; 0xe0
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	221f      	movs	r2, #31
 8002898:	4013      	ands	r3, r2
 800289a:	b2d9      	uxtb	r1, r3
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	23e0      	movs	r3, #224	; 0xe0
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	54d1      	strb	r1, [r2, r3]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = event;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <ring_buffer_queue+0xac>)
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	0019      	movs	r1, r3
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	000b      	movs	r3, r1
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	1a5b      	subs	r3, r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	2104      	movs	r1, #4
 80028ba:	2010      	movs	r0, #16
 80028bc:	4684      	mov	ip, r0
 80028be:	2008      	movs	r0, #8
 80028c0:	4680      	mov	r8, r0
 80028c2:	44b8      	add	r8, r7
 80028c4:	44c4      	add	ip, r8
 80028c6:	4461      	add	r1, ip
 80028c8:	18d3      	adds	r3, r2, r3
 80028ca:	000a      	movs	r2, r1
 80028cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ce:	c313      	stmia	r3!, {r0, r1, r4}
 80028d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028d2:	c313      	stmia	r3!, {r0, r1, r4}
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	601a      	str	r2, [r3, #0]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <ring_buffer_queue+0xac>)
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3301      	adds	r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	221f      	movs	r2, #31
 80028e6:	4013      	ands	r3, r2
 80028e8:	b2d9      	uxtb	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a05      	ldr	r2, [pc, #20]	; (8002904 <ring_buffer_queue+0xac>)
 80028ee:	5499      	strb	r1, [r3, r2]
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bc80      	pop	{r7}
 80028f8:	46b8      	mov	r8, r7
 80028fa:	bc90      	pop	{r4, r7}
 80028fc:	bc08      	pop	{r3}
 80028fe:	b004      	add	sp, #16
 8002900:	4718      	bx	r3
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	00000381 	.word	0x00000381

08002908 <push_event>:

void push_event(volatile ring_buffer_t *eq, event_t event)
{
 8002908:	b084      	sub	sp, #16
 800290a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290c:	46c6      	mov	lr, r8
 800290e:	b500      	push	{lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af04      	add	r7, sp, #16
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	2004      	movs	r0, #4
 8002918:	2410      	movs	r4, #16
 800291a:	46a4      	mov	ip, r4
 800291c:	2410      	movs	r4, #16
 800291e:	46a0      	mov	r8, r4
 8002920:	44b8      	add	r8, r7
 8002922:	44c4      	add	ip, r8
 8002924:	4460      	add	r0, ip
 8002926:	6001      	str	r1, [r0, #0]
 8002928:	6042      	str	r2, [r0, #4]
 800292a:	6083      	str	r3, [r0, #8]
	ring_buffer_queue(eq, event);
 800292c:	2304      	movs	r3, #4
 800292e:	2210      	movs	r2, #16
 8002930:	4694      	mov	ip, r2
 8002932:	2210      	movs	r2, #16
 8002934:	4690      	mov	r8, r2
 8002936:	44b8      	add	r8, r7
 8002938:	44c4      	add	ip, r8
 800293a:	4463      	add	r3, ip
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	466a      	mov	r2, sp
 8002940:	0011      	movs	r1, r2
 8002942:	001a      	movs	r2, r3
 8002944:	320c      	adds	r2, #12
 8002946:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002948:	c170      	stmia	r1!, {r4, r5, r6}
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	600a      	str	r2, [r1, #0]
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f7ff ff80 	bl	8002858 <ring_buffer_queue>
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bc80      	pop	{r7}
 8002960:	46b8      	mov	r8, r7
 8002962:	bcf0      	pop	{r4, r5, r6, r7}
 8002964:	bc08      	pop	{r3}
 8002966:	b004      	add	sp, #16
 8002968:	4718      	bx	r3

0800296a <ring_buffer_dequeue>:
  for(i = 0; i < size; i++) {
    ring_buffer_queue(buffer, pEvent[i]);
  }
}

ring_buffer_size_t ring_buffer_dequeue(volatile ring_buffer_t *buffer, event_t *pEvent) {
 800296a:	b590      	push	{r4, r7, lr}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	0018      	movs	r0, r3
 8002978:	f000 f83a 	bl	80029f0 <ring_buffer_is_empty>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 8002980:	2300      	movs	r3, #0
 8002982:	e022      	b.n	80029ca <ring_buffer_dequeue+0x60>
  }

  *pEvent = buffer->buffer[buffer->tail_index];
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	23e0      	movs	r3, #224	; 0xe0
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	001a      	movs	r2, r3
 8002990:	6838      	ldr	r0, [r7, #0]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	0013      	movs	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	0002      	movs	r2, r0
 800299e:	18cb      	adds	r3, r1, r3
 80029a0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80029a2:	c213      	stmia	r2!, {r0, r1, r4}
 80029a4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80029a6:	c213      	stmia	r2!, {r0, r1, r4}
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6013      	str	r3, [r2, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	23e0      	movs	r3, #224	; 0xe0
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	221f      	movs	r2, #31
 80029bc:	4013      	ands	r3, r2
 80029be:	b2d9      	uxtb	r1, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	23e0      	movs	r3, #224	; 0xe0
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	54d1      	strb	r1, [r2, r3]
  return 1;
 80029c8:	2301      	movs	r3, #1
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b003      	add	sp, #12
 80029d0:	bd90      	pop	{r4, r7, pc}

080029d2 <pop_event>:

void pop_event(volatile ring_buffer_t *buffer, event_t *pEvent)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
	ring_buffer_dequeue(buffer, pEvent);
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0011      	movs	r1, r2
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff ffc1 	bl	800296a <ring_buffer_dequeue>
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
unsigned char ring_buffer_is_empty(volatile ring_buffer_t *buffer) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <ring_buffer_is_empty+0x2c>)
 80029fc:	5c9b      	ldrb	r3, [r3, r2]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	23e0      	movs	r3, #224	; 0xe0
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	425a      	negs	r2, r3
 8002a0e:	4153      	adcs	r3, r2
 8002a10:	b2db      	uxtb	r3, r3
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	00000381 	.word	0x00000381

08002a20 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
unsigned char ring_buffer_is_full(volatile ring_buffer_t *buffer) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <ring_buffer_is_full+0x34>)
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	23e0      	movs	r3, #224	; 0xe0
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	001a      	movs	r2, r3
 8002a40:	231f      	movs	r3, #31
 8002a42:	4013      	ands	r3, r2
 8002a44:	3b1f      	subs	r3, #31
 8002a46:	425a      	negs	r2, r3
 8002a48:	4153      	adcs	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00000381 	.word	0x00000381

08002a58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a5e:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <MX_SPI1_Init+0x6c>)
 8002a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a64:	2282      	movs	r2, #130	; 0x82
 8002a66:	0052      	lsls	r2, r2, #1
 8002a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a78:	2202      	movs	r2, #2
 8002a7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	0092      	lsls	r2, r2, #2
 8002a88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <MX_SPI1_Init+0x68>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f003 fce4 	bl	8006478 <HAL_SPI_Init>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ab4:	f7ff feb6 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	20001070 	.word	0x20001070
 8002ac4:	40013000 	.word	0x40013000

08002ac8 <BIT_SET>:

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */
static inline uint16_t BIT_SET(uint16_t bits, uint16_t bit){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	0002      	movs	r2, r0
 8002ad0:	1dbb      	adds	r3, r7, #6
 8002ad2:	801a      	strh	r2, [r3, #0]
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	1c0a      	adds	r2, r1, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
	bits = bits | bit;
 8002ada:	1dbb      	adds	r3, r7, #6
 8002adc:	1db9      	adds	r1, r7, #6
 8002ade:	1d3a      	adds	r2, r7, #4
 8002ae0:	8809      	ldrh	r1, [r1, #0]
 8002ae2:	8812      	ldrh	r2, [r2, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	801a      	strh	r2, [r3, #0]
	return bits;
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	881b      	ldrh	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <BIT_CLR>:

static inline uint16_t BIT_CLR(uint16_t bits, uint16_t bit){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	0002      	movs	r2, r0
 8002afc:	1dbb      	adds	r3, r7, #6
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	1c0a      	adds	r2, r1, #0
 8002b04:	801a      	strh	r2, [r3, #0]
	bits = bits & !bit;
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	425a      	negs	r2, r3
 8002b0c:	4153      	adcs	r3, r2
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	b21b      	sxth	r3, r3
 8002b12:	1dba      	adds	r2, r7, #6
 8002b14:	2100      	movs	r1, #0
 8002b16:	5e52      	ldrsh	r2, [r2, r1]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b21a      	sxth	r2, r3
 8002b1c:	1dbb      	adds	r3, r7, #6
 8002b1e:	801a      	strh	r2, [r3, #0]
	return bits;
 8002b20:	1dbb      	adds	r3, r7, #6
 8002b22:	881b      	ldrh	r3, [r3, #0]
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <stimulator_create>:
#include "math.h"
#include "string.h"
#include "tim.h"

Stimulator_t stimulator_create(DAC_HandleTypeDef *hdac, ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	4c46      	ldr	r4, [pc, #280]	; (8002c48 <stimulator_create+0x11c>)
 8002b30:	44a5      	add	sp, r4
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
	Stimulator_t stim;

	ring_buffer_init(&(stim.event_queue));
 8002b3c:	2418      	movs	r4, #24
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	331c      	adds	r3, #28
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff fe74 	bl	8002830 <ring_buffer_init>

	stim.hadc = hadc;
 8002b48:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <stimulator_create+0x120>)
 8002b4a:	22c7      	movs	r2, #199	; 0xc7
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	4694      	mov	ip, r2
 8002b50:	44bc      	add	ip, r7
 8002b52:	4463      	add	r3, ip
 8002b54:	493e      	ldr	r1, [pc, #248]	; (8002c50 <stimulator_create+0x124>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	505a      	str	r2, [r3, r1]
	stim.hdac = hdac;
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <stimulator_create+0x120>)
 8002b5c:	22c7      	movs	r2, #199	; 0xc7
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	4694      	mov	ip, r2
 8002b62:	44bc      	add	ip, r7
 8002b64:	4463      	add	r3, ip
 8002b66:	493b      	ldr	r1, [pc, #236]	; (8002c54 <stimulator_create+0x128>)
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	505a      	str	r2, [r3, r1]
	stim.htim = htim;
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <stimulator_create+0x120>)
 8002b6e:	22c7      	movs	r2, #199	; 0xc7
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	4694      	mov	ip, r2
 8002b74:	44bc      	add	ip, r7
 8002b76:	4463      	add	r3, ip
 8002b78:	4937      	ldr	r1, [pc, #220]	; (8002c58 <stimulator_create+0x12c>)
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	505a      	str	r2, [r3, r1]
	stim.state_current = STIM_STOPPED;
 8002b7e:	4b33      	ldr	r3, [pc, #204]	; (8002c4c <stimulator_create+0x120>)
 8002b80:	22c7      	movs	r2, #199	; 0xc7
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	4694      	mov	ip, r2
 8002b86:	44bc      	add	ip, r7
 8002b88:	4463      	add	r3, ip
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	709a      	strb	r2, [r3, #2]
	stim.state_prev = STIM_STOPPED;
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <stimulator_create+0x120>)
 8002b90:	22c7      	movs	r2, #199	; 0xc7
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	4694      	mov	ip, r2
 8002b96:	44bc      	add	ip, r7
 8002b98:	4463      	add	r3, ip
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	70da      	strb	r2, [r3, #3]
	stim.flags = STIM_READY_FLAG;
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <stimulator_create+0x120>)
 8002ba0:	22c7      	movs	r2, #199	; 0xc7
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	44bc      	add	ip, r7
 8002ba8:	4463      	add	r3, ip
 8002baa:	2204      	movs	r2, #4
 8002bac:	801a      	strh	r2, [r3, #0]
	stim.n_elem_val_time_arr = 2;
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <stimulator_create+0x120>)
 8002bb0:	22c7      	movs	r2, #199	; 0xc7
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	4694      	mov	ip, r2
 8002bb6:	44bc      	add	ip, r7
 8002bb8:	4463      	add	r3, ip
 8002bba:	2202      	movs	r2, #2
 8002bbc:	831a      	strh	r2, [r3, #24]
	stim.dac_tim_lut[0] = 0;
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <stimulator_create+0x120>)
 8002bc0:	20c7      	movs	r0, #199	; 0xc7
 8002bc2:	0100      	lsls	r0, r0, #4
 8002bc4:	183a      	adds	r2, r7, r0
 8002bc6:	18d2      	adds	r2, r2, r3
 8002bc8:	23fc      	movs	r3, #252	; 0xfc
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	2100      	movs	r1, #0
 8002bce:	52d1      	strh	r1, [r2, r3]
	stim.dac_lut[0] = 0;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <stimulator_create+0x120>)
 8002bd2:	183a      	adds	r2, r7, r0
 8002bd4:	18d2      	adds	r2, r2, r3
 8002bd6:	23e8      	movs	r3, #232	; 0xe8
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	2100      	movs	r1, #0
 8002bdc:	52d1      	strh	r1, [r2, r3]
	int16_t cmd_arr[2] = {  STIM_DAC_OUT_ZERO_MA, TIM21_MAX_PERIOD_CNTS };
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <stimulator_create+0x130>)
 8002be0:	22c7      	movs	r2, #199	; 0xc7
 8002be2:	0112      	lsls	r2, r2, #4
 8002be4:	4694      	mov	ip, r2
 8002be6:	44bc      	add	ip, r7
 8002be8:	4463      	add	r3, ip
 8002bea:	2200      	movs	r2, #0
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <stimulator_create+0x130>)
 8002bf0:	22c7      	movs	r2, #199	; 0xc7
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	4694      	mov	ip, r2
 8002bf6:	44bc      	add	ip, r7
 8002bf8:	4463      	add	r3, ip
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	805a      	strh	r2, [r3, #2]
	memcpy(stim.val_time_arr, cmd_arr, sizeof(cmd_arr));
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <stimulator_create+0x120>)
 8002c02:	22c7      	movs	r2, #199	; 0xc7
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	4694      	mov	ip, r2
 8002c08:	44bc      	add	ip, r7
 8002c0a:	4463      	add	r3, ip
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <stimulator_create+0x130>)
 8002c0e:	21c7      	movs	r1, #199	; 0xc7
 8002c10:	0109      	lsls	r1, r1, #4
 8002c12:	468c      	mov	ip, r1
 8002c14:	44bc      	add	ip, r7
 8002c16:	4462      	add	r2, ip
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
	stimulator_generate_wave_lut(&stim);
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f000 f90c 	bl	8002e3c <stimulator_generate_wave_lut>

	return stim;
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <stimulator_create+0x120>)
 8002c28:	21c7      	movs	r1, #199	; 0xc7
 8002c2a:	0109      	lsls	r1, r1, #4
 8002c2c:	468c      	mov	ip, r1
 8002c2e:	44bc      	add	ip, r7
 8002c30:	4463      	add	r3, ip
 8002c32:	0010      	movs	r0, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <stimulator_create+0x134>)
 8002c38:	001a      	movs	r2, r3
 8002c3a:	f005 fcc7 	bl	80085cc <memcpy>
}
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	46bd      	mov	sp, r7
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <stimulator_create+0x138>)
 8002c44:	449d      	add	sp, r3
 8002c46:	bd90      	pop	{r4, r7, pc}
 8002c48:	fffff38c 	.word	0xfffff38c
 8002c4c:	fffff3a8 	.word	0xfffff3a8
 8002c50:	00000c4c 	.word	0x00000c4c
 8002c54:	00000444 	.word	0x00000444
 8002c58:	00000c54 	.word	0x00000c54
 8002c5c:	fffff3a4 	.word	0xfffff3a4
 8002c60:	00000c58 	.word	0x00000c58
 8002c64:	00000c74 	.word	0x00000c74

08002c68 <stimulator_state_machine>:
{

}

void stimulator_state_machine (Stimulator_t *stimulator)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08f      	sub	sp, #60	; 0x3c
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	6078      	str	r0, [r7, #4]

	    		 if (!ring_buffer_is_empty(&(stimulator->event_queue)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	331c      	adds	r3, #28
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff febb 	bl	80029f0 <ring_buffer_is_empty>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d000      	beq.n	8002c80 <stimulator_state_machine+0x18>
 8002c7e:	e0d1      	b.n	8002e24 <stimulator_state_machine+0x1bc>
	    		 {
	        		 event_t event;
	    			 pop_event(&(stimulator->event_queue), &event);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	331c      	adds	r3, #28
 8002c84:	240c      	movs	r4, #12
 8002c86:	193a      	adds	r2, r7, r4
 8002c88:	0011      	movs	r1, r2
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff fea1 	bl	80029d2 <pop_event>
	    			 switch (stimulator-> state_current)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d06b      	beq.n	8002d70 <stimulator_state_machine+0x108>
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d000      	beq.n	8002c9e <stimulator_state_machine+0x36>
 8002c9c:	e0c2      	b.n	8002e24 <stimulator_state_machine+0x1bc>
	    			 {
	    			 case STIM_STOPPED:
	    				 if ( event.name == STIM_RUN_CMD )
 8002c9e:	0022      	movs	r2, r4
 8002ca0:	18bb      	adds	r3, r7, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d000      	beq.n	8002caa <stimulator_state_machine+0x42>
 8002ca8:	e0b9      	b.n	8002e1e <stimulator_state_machine+0x1b6>
	    			 	 {
	    					 /* Copy data from popped event to Stimulator struct. Free event memory. */
	    					 if (event.data == NULL) { break; }
	    					 memcpy(stimulator->val_time_arr, event.data, event.data_size);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1d18      	adds	r0, r3, #4
 8002cae:	0014      	movs	r4, r2
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	0019      	movs	r1, r3
 8002cba:	f005 fc87 	bl	80085cc <memcpy>
	    					 stimulator->n_elem_val_time_arr = event.data_size / sizeof(event.data[0]);
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	831a      	strh	r2, [r3, #24]

							 #ifdef STIM_OUTPUT_ENABLE
	    			    	 /* Generate DAC look-up tables based on command array */
	    			    	 stimulator_generate_wave_lut(stimulator);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f000 f8b5 	bl	8002e3c <stimulator_generate_wave_lut>

	    			    	 /* Load the dac timer with first element of table generated in GenerateWaveLUT and start it. Then, start the DAC and DMA with LUT generated in same function */
	    			    	 LoadTimerDac(&htim21, stimulator->dac_tim_lut, stimulator->n_elem_lut);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	22fc      	movs	r2, #252	; 0xfc
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	1899      	adds	r1, r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	2388      	movs	r3, #136	; 0x88
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	5ad2      	ldrh	r2, [r2, r3]
 8002ce2:	4b52      	ldr	r3, [pc, #328]	; (8002e2c <stimulator_state_machine+0x1c4>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 fea7 	bl	8003a38 <LoadTimerDac>
	    			    	 HAL_TIM_Base_Start_IT(&htim21);
 8002cea:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <stimulator_state_machine+0x1c4>)
 8002cec:	0018      	movs	r0, r3
 8002cee:	f004 f87d 	bl	8006dec <HAL_TIM_Base_Start_IT>
	    			    	 HAL_DAC_Start_DMA(stimulator->hdac, DAC_CHANNEL_1, (uint32_t *)stimulator->dac_lut, stimulator->n_elem_lut, DAC_ALIGN_12B_R);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	; (8002e30 <stimulator_state_machine+0x1c8>)
 8002cf6:	5898      	ldr	r0, [r3, r2]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	22e8      	movs	r2, #232	; 0xe8
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	1899      	adds	r1, r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	2388      	movs	r3, #136	; 0x88
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	5ad3      	ldrh	r3, [r2, r3]
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	0013      	movs	r3, r2
 8002d10:	000a      	movs	r2, r1
 8002d12:	2100      	movs	r1, #0
 8002d14:	f001 fe86 	bl	8004a24 <HAL_DAC_Start_DMA>

	    			    	 /* TODO: In future, timer 21 CC module interrupt will trigger a conversion and DMA transfer every 100uS. */
	    			    	 HAL_ADC_Start_DMA(stimulator->hadc, (uint32_t *)stimulator-> data_buf, sizeof(stimulator-> data_buf[0]) * ADC_DMA_DATA_BUF_SIZE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <stimulator_state_machine+0x1cc>)
 8002d1c:	5898      	ldr	r0, [r3, r2]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a45      	ldr	r2, [pc, #276]	; (8002e38 <stimulator_state_machine+0x1d0>)
 8002d22:	4694      	mov	ip, r2
 8002d24:	4463      	add	r3, ip
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	f001 f8fe 	bl	8003f2c <HAL_ADC_Start_DMA>

	    			    	 /* Set state and flags */
	    			    	 stimulator->state_current = STIM_RUNNING;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	709a      	strb	r2, [r3, #2]
	    			    	 stimulator->state_prev = STIM_STOPPED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	70da      	strb	r2, [r3, #3]
	    			    	 uint16_t flags = stimulator->flags;
 8002d3c:	242e      	movs	r4, #46	; 0x2e
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	801a      	strh	r2, [r3, #0]
	    			    	 stimulator->flags = BIT_CLR(flags, STIM_READY_FLAG);
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff fed1 	bl	8002af4 <BIT_CLR>
 8002d52:	0003      	movs	r3, r0
 8002d54:	001a      	movs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	801a      	strh	r2, [r3, #0]
	    			    	 stimulator->flags = BIT_CLR(flags, NEW_DATA_READY_FLAG);
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	2102      	movs	r1, #2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7ff fec7 	bl	8002af4 <BIT_CLR>
 8002d66:	0003      	movs	r3, r0
 8002d68:	001a      	movs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	801a      	strh	r2, [r3, #0]
	    			    	 #endif

	    			     }
	    			     break;
 8002d6e:	e056      	b.n	8002e1e <stimulator_state_machine+0x1b6>
	    			 case STIM_RUNNING:
	    				 if ( event.name == XFER_CPLT )
 8002d70:	230c      	movs	r3, #12
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <stimulator_state_machine+0x13e>
	    			     {
						#ifndef STIM_CONTINUOUS_MODE_ENABLED
	    			    	 stimulator->state_current = STIM_STOPPED;
	    			    	 stimulator->state_prev = STIM_RUNNING;
						#else
	    			    	 stimulator->state_current = STIM_RUNNING;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	709a      	strb	r2, [r3, #2]
	    			         stimulator->state_prev = STIM_RUNNING;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	70da      	strb	r2, [r3, #3]
						#endif
	    			    	 uint16_t flags = stimulator->flags;
 8002d86:	212a      	movs	r1, #42	; 0x2a
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	801a      	strh	r2, [r3, #0]
	    			    	 stimulator->flags = BIT_SET(flags, NEW_DATA_READY_FLAG);
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	2102      	movs	r1, #2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff fe96 	bl	8002ac8 <BIT_SET>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	001a      	movs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	801a      	strh	r2, [r3, #0]
	    			    	 stimulator->state_current = STIM_STOPPED;
	    			    	 stimulator->state_prev = STIM_RUNNING;
	    			    	 uint16_t flags = stimulator->flags;
	    			    	 stimulator->flags = BIT_SET(flags, STIM_READY_FLAG);
	    			     }
	    			     break;
 8002da4:	e03d      	b.n	8002e22 <stimulator_state_machine+0x1ba>
	    			     else if ( event.name == STIM_STOP_CMD )
 8002da6:	230c      	movs	r3, #12
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d138      	bne.n	8002e22 <stimulator_state_machine+0x1ba>
	    			    	 HAL_ADC_Stop_DMA(stimulator->hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <stimulator_state_machine+0x1cc>)
 8002db4:	589b      	ldr	r3, [r3, r2]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f001 f93a 	bl	8004030 <HAL_ADC_Stop_DMA>
	    			    	 HAL_DAC_Stop_DMA(stimulator->hdac, DAC_CHANNEL_1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <stimulator_state_machine+0x1c8>)
 8002dc0:	589b      	ldr	r3, [r3, r2]
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f001 fe9d 	bl	8004b04 <HAL_DAC_Stop_DMA>
	    			    	 __HAL_DAC_ENABLE(stimulator->hdac, DAC_CHANNEL_1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <stimulator_state_machine+0x1c8>)
 8002dce:	589b      	ldr	r3, [r3, r2]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4916      	ldr	r1, [pc, #88]	; (8002e30 <stimulator_state_machine+0x1c8>)
 8002dd8:	585b      	ldr	r3, [r3, r1]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
	    			    	 HAL_DAC_SetValue(stimulator->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, STIM_DAC_OUT_ZERO_MA);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <stimulator_state_machine+0x1c8>)
 8002de6:	5898      	ldr	r0, [r3, r2]
 8002de8:	2300      	movs	r3, #0
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	f001 fec6 	bl	8004b7e <HAL_DAC_SetValue>
	    			    	 stimulator->state_current = STIM_STOPPED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	709a      	strb	r2, [r3, #2]
	    			    	 stimulator->state_prev = STIM_RUNNING;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	70da      	strb	r2, [r3, #3]
	    			    	 uint16_t flags = stimulator->flags;
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	801a      	strh	r2, [r3, #0]
	    			    	 stimulator->flags = BIT_SET(flags, STIM_READY_FLAG);
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff fe5a 	bl	8002ac8 <BIT_SET>
 8002e14:	0003      	movs	r3, r0
 8002e16:	001a      	movs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	801a      	strh	r2, [r3, #0]
	    			     break;
 8002e1c:	e001      	b.n	8002e22 <stimulator_state_machine+0x1ba>
	    			     break;
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	e000      	b.n	8002e24 <stimulator_state_machine+0x1bc>
	    			     break;
 8002e22:	46c0      	nop			; (mov r8, r8)
	    		 }
	    }
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b00d      	add	sp, #52	; 0x34
 8002e2a:	bd90      	pop	{r4, r7, pc}
 8002e2c:	2000114c 	.word	0x2000114c
 8002e30:	00000444 	.word	0x00000444
 8002e34:	00000c4c 	.word	0x00000c4c
 8002e38:	0000044c 	.word	0x0000044c

08002e3c <stimulator_generate_wave_lut>:
/*
 * GenerateWavePWL fills look-up tables for DAC and associated timer to create piecewise-linear waveform from a time, value pair array
 */

void stimulator_generate_wave_lut(Stimulator_t *pStim)
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	b093      	sub	sp, #76	; 0x4c
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	     50mA   |  1.65V  |   2.475
	     100mA  |  3.3V   |   3.3V

	 */

	uint16_t n_elem_vals_tims = pStim->n_elem_val_time_arr;
 8002e44:	2336      	movs	r3, #54	; 0x36
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	8b12      	ldrh	r2, [r2, #24]
 8002e4c:	801a      	strh	r2, [r3, #0]
	uint32_t f_clk = 32000000;
 8002e4e:	4bc7      	ldr	r3, [pc, #796]	; (800316c <stimulator_generate_wave_lut+0x330>)
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t n_tot_elem = 0;
 8002e52:	2346      	movs	r3, #70	; 0x46
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	801a      	strh	r2, [r3, #0]


	int i = 0 , j = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5e:	2300      	movs	r3, #0
 8002e60:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < n_elem_vals_tims; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	643b      	str	r3, [r7, #64]	; 0x40
 8002e66:	e04e      	b.n	8002f06 <stimulator_generate_wave_lut+0xca>
	{
		if (i%2 == 1)
 8002e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6a:	4ac1      	ldr	r2, [pc, #772]	; (8003170 <stimulator_generate_wave_lut+0x334>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d504      	bpl.n	8002e7a <stimulator_generate_wave_lut+0x3e>
 8002e70:	3b01      	subs	r3, #1
 8002e72:	2202      	movs	r2, #2
 8002e74:	4252      	negs	r2, r2
 8002e76:	4313      	orrs	r3, r2
 8002e78:	3301      	adds	r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d140      	bne.n	8002f00 <stimulator_generate_wave_lut+0xc4>
		{
			uint16_t period_uS = pStim->val_time_arr[i];
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	3304      	adds	r3, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	5e9a      	ldrsh	r2, [r3, r2]
 8002e8c:	260e      	movs	r6, #14
 8002e8e:	19bb      	adds	r3, r7, r6
 8002e90:	801a      	strh	r2, [r3, #0]
			uint32_t num_clk_cyc = (f_clk * ((double) period_uS / 1000000));
 8002e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e94:	f7ff fa2c 	bl	80022f0 <__aeabi_ui2d>
 8002e98:	0004      	movs	r4, r0
 8002e9a:	000d      	movs	r5, r1
 8002e9c:	19bb      	adds	r3, r7, r6
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff fa25 	bl	80022f0 <__aeabi_ui2d>
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4bb2      	ldr	r3, [pc, #712]	; (8003174 <stimulator_generate_wave_lut+0x338>)
 8002eaa:	f7fd ff99 	bl	8000de0 <__aeabi_ddiv>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	000b      	movs	r3, r1
 8002eb2:	0020      	movs	r0, r4
 8002eb4:	0029      	movs	r1, r5
 8002eb6:	f7fe fb99 	bl	80015ec <__aeabi_dmul>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	000b      	movs	r3, r1
 8002ebe:	0010      	movs	r0, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	f7fd fb39 	bl	8000538 <__aeabi_d2uiz>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	60bb      	str	r3, [r7, #8]
			n_tot_elem += (uint16_t) ceil((double) num_clk_cyc / 65535);
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	f7ff fa10 	bl	80022f0 <__aeabi_ui2d>
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4ba9      	ldr	r3, [pc, #676]	; (8003178 <stimulator_generate_wave_lut+0x33c>)
 8002ed4:	f7fd ff84 	bl	8000de0 <__aeabi_ddiv>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	000b      	movs	r3, r1
 8002edc:	0010      	movs	r0, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	f008 f8fa 	bl	800b0d8 <ceil>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	0010      	movs	r0, r2
 8002eea:	0019      	movs	r1, r3
 8002eec:	f7fd fb24 	bl	8000538 <__aeabi_d2uiz>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	b299      	uxth	r1, r3
 8002ef4:	2246      	movs	r2, #70	; 0x46
 8002ef6:	18bb      	adds	r3, r7, r2
 8002ef8:	18ba      	adds	r2, r7, r2
 8002efa:	8812      	ldrh	r2, [r2, #0]
 8002efc:	188a      	adds	r2, r1, r2
 8002efe:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_elem_vals_tims; i++)
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	3301      	adds	r3, #1
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
 8002f06:	2336      	movs	r3, #54	; 0x36
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbaa      	blt.n	8002e68 <stimulator_generate_wave_lut+0x2c>
		}
	}
	if (n_tot_elem > LUT_SIZE)
 8002f12:	2146      	movs	r1, #70	; 0x46
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	2b28      	cmp	r3, #40	; 0x28
 8002f1a:	d900      	bls.n	8002f1e <stimulator_generate_wave_lut+0xe2>
 8002f1c:	e120      	b.n	8003160 <stimulator_generate_wave_lut+0x324>
		return;

	pStim->n_elem_lut = n_tot_elem;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	1879      	adds	r1, r7, r1
 8002f22:	2388      	movs	r3, #136	; 0x88
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	8809      	ldrh	r1, [r1, #0]
 8002f28:	52d1      	strh	r1, [r2, r3]


	uint16_t idx = 0;
 8002f2a:	233a      	movs	r3, #58	; 0x3a
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	2200      	movs	r2, #0
 8002f30:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < n_elem_vals_tims; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	643b      	str	r3, [r7, #64]	; 0x40
 8002f36:	e10b      	b.n	8003150 <stimulator_generate_wave_lut+0x314>
	{
		/* Even indices correspond to DAC output values, odd indices correspond to time values */
		if (i%2 == 0)
 8002f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d000      	beq.n	8002f42 <stimulator_generate_wave_lut+0x106>
 8002f40:	e103      	b.n	800314a <stimulator_generate_wave_lut+0x30e>
		{
			// vals_tims is in format uS, 10uA
			int16_t amp_10uA = pStim->val_time_arr[i];
 8002f42:	202e      	movs	r0, #46	; 0x2e
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f4a:	0052      	lsls	r2, r2, #1
 8002f4c:	188a      	adds	r2, r1, r2
 8002f4e:	3204      	adds	r2, #4
 8002f50:	8812      	ldrh	r2, [r2, #0]
 8002f52:	801a      	strh	r2, [r3, #0]
			uint16_t period_uS = pStim->val_time_arr[i + 1];
 8002f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f56:	3301      	adds	r3, #1
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	18d3      	adds	r3, r2, r3
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2200      	movs	r2, #0
 8002f62:	5e9a      	ldrsh	r2, [r3, r2]
 8002f64:	262c      	movs	r6, #44	; 0x2c
 8002f66:	19bb      	adds	r3, r7, r6
 8002f68:	801a      	strh	r2, [r3, #0]
			if (period_uS > STIM_MAX_PERIOD_US || amp_10uA > STIM_MAX_CURRENT_10UA) { break; }
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f70:	4a82      	ldr	r2, [pc, #520]	; (800317c <stimulator_generate_wave_lut+0x340>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	dd00      	ble.n	8002f78 <stimulator_generate_wave_lut+0x13c>
 8002f76:	e0f5      	b.n	8003164 <stimulator_generate_wave_lut+0x328>
			double v_shunt = (double) amp_10uA * STIM_R_SHUNT_OHMS / 100000;
 8002f78:	183b      	adds	r3, r7, r0
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f7ff f986 	bl	8002290 <__aeabi_i2d>
 8002f84:	2200      	movs	r2, #0
 8002f86:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <stimulator_generate_wave_lut+0x344>)
 8002f88:	f7fe fb30 	bl	80015ec <__aeabi_dmul>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	000b      	movs	r3, r1
 8002f90:	0010      	movs	r0, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	4b7b      	ldr	r3, [pc, #492]	; (8003184 <stimulator_generate_wave_lut+0x348>)
 8002f98:	f7fd ff22 	bl	8000de0 <__aeabi_ddiv>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	623a      	str	r2, [r7, #32]
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
			double v_dac = (v_shunt / 2) + 1.65 ;
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	6a38      	ldr	r0, [r7, #32]
 8002fac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fae:	f7fd ff17 	bl	8000de0 <__aeabi_ddiv>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	000b      	movs	r3, r1
 8002fb6:	0010      	movs	r0, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	4a73      	ldr	r2, [pc, #460]	; (8003188 <stimulator_generate_wave_lut+0x34c>)
 8002fbc:	4b73      	ldr	r3, [pc, #460]	; (800318c <stimulator_generate_wave_lut+0x350>)
 8002fbe:	f7fd fba5 	bl	800070c <__aeabi_dadd>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	000b      	movs	r3, r1
 8002fc6:	61ba      	str	r2, [r7, #24]
 8002fc8:	61fb      	str	r3, [r7, #28]

			int16_t dac_amp = ((v_dac * 4096) / STIM_V_REF) - 2048; // Subtract 2048 since 0mA corresponds to middle of DAC range
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4b70      	ldr	r3, [pc, #448]	; (8003190 <stimulator_generate_wave_lut+0x354>)
 8002fce:	69b8      	ldr	r0, [r7, #24]
 8002fd0:	69f9      	ldr	r1, [r7, #28]
 8002fd2:	f7fe fb0b 	bl	80015ec <__aeabi_dmul>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	000b      	movs	r3, r1
 8002fda:	0010      	movs	r0, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	4a6a      	ldr	r2, [pc, #424]	; (8003188 <stimulator_generate_wave_lut+0x34c>)
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <stimulator_generate_wave_lut+0x358>)
 8002fe2:	f7fd fefd 	bl	8000de0 <__aeabi_ddiv>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	000b      	movs	r3, r1
 8002fea:	0010      	movs	r0, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4b69      	ldr	r3, [pc, #420]	; (8003198 <stimulator_generate_wave_lut+0x35c>)
 8002ff2:	f7fe fd67 	bl	8001ac4 <__aeabi_dsub>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	000b      	movs	r3, r1
 8002ffa:	2138      	movs	r1, #56	; 0x38
 8002ffc:	187c      	adds	r4, r7, r1
 8002ffe:	0010      	movs	r0, r2
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff f90f 	bl	8002224 <__aeabi_d2iz>
 8003006:	0003      	movs	r3, r0
 8003008:	8023      	strh	r3, [r4, #0]
			uint32_t num_clk_cyc = (f_clk * ((double) period_uS / 1000000));
 800300a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300c:	f7ff f970 	bl	80022f0 <__aeabi_ui2d>
 8003010:	0004      	movs	r4, r0
 8003012:	000d      	movs	r5, r1
 8003014:	19bb      	adds	r3, r7, r6
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff f969 	bl	80022f0 <__aeabi_ui2d>
 800301e:	2200      	movs	r2, #0
 8003020:	4b54      	ldr	r3, [pc, #336]	; (8003174 <stimulator_generate_wave_lut+0x338>)
 8003022:	f7fd fedd 	bl	8000de0 <__aeabi_ddiv>
 8003026:	0002      	movs	r2, r0
 8003028:	000b      	movs	r3, r1
 800302a:	0020      	movs	r0, r4
 800302c:	0029      	movs	r1, r5
 800302e:	f7fe fadd 	bl	80015ec <__aeabi_dmul>
 8003032:	0002      	movs	r2, r0
 8003034:	000b      	movs	r3, r1
 8003036:	0010      	movs	r0, r2
 8003038:	0019      	movs	r1, r3
 800303a:	f7fd fa7d 	bl	8000538 <__aeabi_d2uiz>
 800303e:	0003      	movs	r3, r0
 8003040:	617b      	str	r3, [r7, #20]
			uint16_t n_elem = (uint16_t) ceil((double) num_clk_cyc / 65535);
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff f954 	bl	80022f0 <__aeabi_ui2d>
 8003048:	2200      	movs	r2, #0
 800304a:	4b4b      	ldr	r3, [pc, #300]	; (8003178 <stimulator_generate_wave_lut+0x33c>)
 800304c:	f7fd fec8 	bl	8000de0 <__aeabi_ddiv>
 8003050:	0002      	movs	r2, r0
 8003052:	000b      	movs	r3, r1
 8003054:	0010      	movs	r0, r2
 8003056:	0019      	movs	r1, r3
 8003058:	f008 f83e 	bl	800b0d8 <ceil>
 800305c:	0002      	movs	r2, r0
 800305e:	000b      	movs	r3, r1
 8003060:	2112      	movs	r1, #18
 8003062:	187c      	adds	r4, r7, r1
 8003064:	0010      	movs	r0, r2
 8003066:	0019      	movs	r1, r3
 8003068:	f7fd fa66 	bl	8000538 <__aeabi_d2uiz>
 800306c:	0003      	movs	r3, r0
 800306e:	8023      	strh	r3, [r4, #0]

			for (j = 0; j < n_elem; j++)
 8003070:	2300      	movs	r3, #0
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	e063      	b.n	800313e <stimulator_generate_wave_lut+0x302>
			{
				dac_amp = dac_amp < -2047 ? -2047 : dac_amp;
 8003076:	2338      	movs	r3, #56	; 0x38
 8003078:	18fa      	adds	r2, r7, r3
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b219      	sxth	r1, r3
 8003080:	4846      	ldr	r0, [pc, #280]	; (800319c <stimulator_generate_wave_lut+0x360>)
 8003082:	4281      	cmp	r1, r0
 8003084:	da00      	bge.n	8003088 <stimulator_generate_wave_lut+0x24c>
 8003086:	4b45      	ldr	r3, [pc, #276]	; (800319c <stimulator_generate_wave_lut+0x360>)
 8003088:	8013      	strh	r3, [r2, #0]
				pStim->dac_lut[j + idx] = 2047 + dac_amp;
 800308a:	2338      	movs	r3, #56	; 0x38
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	203a      	movs	r0, #58	; 0x3a
 8003092:	183a      	adds	r2, r7, r0
 8003094:	8811      	ldrh	r1, [r2, #0]
 8003096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003098:	188a      	adds	r2, r1, r2
 800309a:	4941      	ldr	r1, [pc, #260]	; (80031a0 <stimulator_generate_wave_lut+0x364>)
 800309c:	468c      	mov	ip, r1
 800309e:	4463      	add	r3, ip
 80030a0:	b299      	uxth	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	32d1      	adds	r2, #209	; 0xd1
 80030a6:	32ff      	adds	r2, #255	; 0xff
 80030a8:	0052      	lsls	r2, r2, #1
 80030aa:	52d1      	strh	r1, [r2, r3]
				if (j < (n_elem) - 1)
 80030ac:	2312      	movs	r3, #18
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030b6:	429a      	cmp	r2, r3
 80030b8:	da0b      	bge.n	80030d2 <stimulator_generate_wave_lut+0x296>
				{
					pStim->dac_tim_lut[j + idx] = 65534;
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c0:	18d2      	adds	r2, r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	32f9      	adds	r2, #249	; 0xf9
 80030c6:	32ff      	adds	r2, #255	; 0xff
 80030c8:	0052      	lsls	r2, r2, #1
 80030ca:	2102      	movs	r1, #2
 80030cc:	4249      	negs	r1, r1
 80030ce:	52d1      	strh	r1, [r2, r3]
 80030d0:	e032      	b.n	8003138 <stimulator_generate_wave_lut+0x2fc>
				}
				else if (j == n_elem - 1)
 80030d2:	2112      	movs	r1, #18
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d12b      	bne.n	8003138 <stimulator_generate_wave_lut+0x2fc>
				{
					uint16_t rem_clk_cyc = num_clk_cyc - (65535 * (n_elem - 1));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	18d3      	adds	r3, r2, r3
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	2110      	movs	r1, #16
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	801a      	strh	r2, [r3, #0]
					pStim->dac_tim_lut[j + idx] = rem_clk_cyc == 0 ? 0 : (rem_clk_cyc + (TIM2 -> PSC)) - 1;
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <stimulator_generate_wave_lut+0x2d6>
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	05db      	lsls	r3, r3, #23
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	b29a      	uxth	r2, r3
 8003104:	187b      	adds	r3, r7, r1
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	18d3      	adds	r3, r2, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b299      	uxth	r1, r3
 8003110:	e000      	b.n	8003114 <stimulator_generate_wave_lut+0x2d8>
 8003112:	2100      	movs	r1, #0
 8003114:	203a      	movs	r0, #58	; 0x3a
 8003116:	183b      	adds	r3, r7, r0
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311c:	18d2      	adds	r2, r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	32f9      	adds	r2, #249	; 0xf9
 8003122:	32ff      	adds	r2, #255	; 0xff
 8003124:	0052      	lsls	r2, r2, #1
 8003126:	52d1      	strh	r1, [r2, r3]
					idx += n_elem;
 8003128:	183b      	adds	r3, r7, r0
 800312a:	1839      	adds	r1, r7, r0
 800312c:	2212      	movs	r2, #18
 800312e:	18ba      	adds	r2, r7, r2
 8003130:	8809      	ldrh	r1, [r1, #0]
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	188a      	adds	r2, r1, r2
 8003136:	801a      	strh	r2, [r3, #0]
			for (j = 0; j < n_elem; j++)
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	3301      	adds	r3, #1
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313e:	2312      	movs	r3, #18
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003146:	429a      	cmp	r2, r3
 8003148:	db95      	blt.n	8003076 <stimulator_generate_wave_lut+0x23a>
	for (i = 0; i < n_elem_vals_tims; i++)
 800314a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314c:	3301      	adds	r3, #1
 800314e:	643b      	str	r3, [r7, #64]	; 0x40
 8003150:	2336      	movs	r3, #54	; 0x36
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003158:	429a      	cmp	r2, r3
 800315a:	da00      	bge.n	800315e <stimulator_generate_wave_lut+0x322>
 800315c:	e6ec      	b.n	8002f38 <stimulator_generate_wave_lut+0xfc>
 800315e:	e002      	b.n	8003166 <stimulator_generate_wave_lut+0x32a>
		return;
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	e000      	b.n	8003166 <stimulator_generate_wave_lut+0x32a>
			if (period_uS > STIM_MAX_PERIOD_US || amp_10uA > STIM_MAX_CURRENT_10UA) { break; }
 8003164:	46c0      	nop			; (mov r8, r8)

			}
		}
	}

}
 8003166:	46bd      	mov	sp, r7
 8003168:	b013      	add	sp, #76	; 0x4c
 800316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316c:	01e84800 	.word	0x01e84800
 8003170:	80000001 	.word	0x80000001
 8003174:	412e8480 	.word	0x412e8480
 8003178:	40efffe0 	.word	0x40efffe0
 800317c:	00002710 	.word	0x00002710
 8003180:	40408000 	.word	0x40408000
 8003184:	40f86a00 	.word	0x40f86a00
 8003188:	66666666 	.word	0x66666666
 800318c:	3ffa6666 	.word	0x3ffa6666
 8003190:	40b00000 	.word	0x40b00000
 8003194:	400a6666 	.word	0x400a6666
 8003198:	40a00000 	.word	0x40a00000
 800319c:	fffff801 	.word	0xfffff801
 80031a0:	000007ff 	.word	0x000007ff

080031a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_MspInit+0x40>)
 80031aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_MspInit+0x40>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	430a      	orrs	r2, r1
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_MspInit+0x40>)
 80031b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_MspInit+0x40>)
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	0549      	lsls	r1, r1, #21
 80031be:	430a      	orrs	r2, r1
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 3, 0);
 80031c2:	2305      	movs	r3, #5
 80031c4:	425b      	negs	r3, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	2103      	movs	r1, #3
 80031ca:	0018      	movs	r0, r3
 80031cc:	f001 fb70 	bl	80048b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80031d0:	2302      	movs	r3, #2
 80031d2:	425b      	negs	r3, r3
 80031d4:	2200      	movs	r2, #0
 80031d6:	2103      	movs	r1, #3
 80031d8:	0018      	movs	r0, r3
 80031da:	f001 fb69 	bl	80048b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000

080031e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b08b      	sub	sp, #44	; 0x2c
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	2414      	movs	r4, #20
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	0018      	movs	r0, r3
 80031f6:	2314      	movs	r3, #20
 80031f8:	001a      	movs	r2, r3
 80031fa:	2100      	movs	r1, #0
 80031fc:	f005 f9ef 	bl	80085de <memset>
  if(hadc->Instance==ADC1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_ADC_MspInit+0x110>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d172      	bne.n	80032f0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800320a:	4b3c      	ldr	r3, [pc, #240]	; (80032fc <HAL_ADC_MspInit+0x114>)
 800320c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <HAL_ADC_MspInit+0x114>)
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	0089      	lsls	r1, r1, #2
 8003214:	430a      	orrs	r2, r1
 8003216:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_ADC_MspInit+0x114>)
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	4b37      	ldr	r3, [pc, #220]	; (80032fc <HAL_ADC_MspInit+0x114>)
 800321e:	2104      	movs	r1, #4
 8003220:	430a      	orrs	r2, r1
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
 8003224:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_ADC_MspInit+0x114>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	2204      	movs	r2, #4
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <HAL_ADC_MspInit+0x114>)
 8003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_ADC_MspInit+0x114>)
 8003236:	2101      	movs	r1, #1
 8003238:	430a      	orrs	r2, r1
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_ADC_MspInit+0x114>)
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003248:	193b      	adds	r3, r7, r4
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324e:	193b      	adds	r3, r7, r4
 8003250:	2203      	movs	r2, #3
 8003252:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	193b      	adds	r3, r7, r4
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325a:	193b      	adds	r3, r7, r4
 800325c:	4a28      	ldr	r2, [pc, #160]	; (8003300 <HAL_ADC_MspInit+0x118>)
 800325e:	0019      	movs	r1, r3
 8003260:	0010      	movs	r0, r2
 8003262:	f001 fed9 	bl	8005018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003266:	0021      	movs	r1, r4
 8003268:	187b      	adds	r3, r7, r1
 800326a:	2203      	movs	r2, #3
 800326c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2203      	movs	r2, #3
 8003272:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	187b      	adds	r3, r7, r1
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	187a      	adds	r2, r7, r1
 800327c:	23a0      	movs	r3, #160	; 0xa0
 800327e:	05db      	lsls	r3, r3, #23
 8003280:	0011      	movs	r1, r2
 8003282:	0018      	movs	r0, r3
 8003284:	f001 fec8 	bl	8005018 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003288:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_ADC_MspInit+0x120>)
 800328c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003294:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 800329c:	2200      	movs	r2, #0
 800329e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	0052      	lsls	r2, r2, #1
 80032ac:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032b8:	2220      	movs	r2, #32
 80032ba:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	0192      	lsls	r2, r2, #6
 80032c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032c6:	0018      	movs	r0, r3
 80032c8:	f001 fcac 	bl	8004c24 <HAL_DMA_Init>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 80032d0:	f7ff faa8 	bl	8002824 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_ADC_MspInit+0x11c>)
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	200c      	movs	r0, #12
 80032e6:	f001 fae3 	bl	80048b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80032ea:	200c      	movs	r0, #12
 80032ec:	f001 faf5 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b00b      	add	sp, #44	; 0x2c
 80032f6:	bd90      	pop	{r4, r7, pc}
 80032f8:	40012400 	.word	0x40012400
 80032fc:	40021000 	.word	0x40021000
 8003300:	50000800 	.word	0x50000800
 8003304:	20000208 	.word	0x20000208
 8003308:	40020008 	.word	0x40020008

0800330c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	240c      	movs	r4, #12
 8003316:	193b      	adds	r3, r7, r4
 8003318:	0018      	movs	r0, r3
 800331a:	2314      	movs	r3, #20
 800331c:	001a      	movs	r2, r3
 800331e:	2100      	movs	r1, #0
 8003320:	f005 f95d 	bl	80085de <memset>
  if(hdac->Instance==DAC)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_DAC_MspInit+0xc8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d14e      	bne.n	80033cc <HAL_DAC_MspInit+0xc0>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_DAC_MspInit+0xcc>)
 8003330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_DAC_MspInit+0xcc>)
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	0589      	lsls	r1, r1, #22
 8003338:	430a      	orrs	r2, r1
 800333a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_DAC_MspInit+0xcc>)
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_DAC_MspInit+0xcc>)
 8003342:	2101      	movs	r1, #1
 8003344:	430a      	orrs	r2, r1
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_DAC_MspInit+0xcc>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003354:	193b      	adds	r3, r7, r4
 8003356:	2210      	movs	r2, #16
 8003358:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335a:	193b      	adds	r3, r7, r4
 800335c:	2203      	movs	r2, #3
 800335e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	193b      	adds	r3, r7, r4
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	193a      	adds	r2, r7, r4
 8003368:	23a0      	movs	r3, #160	; 0xa0
 800336a:	05db      	lsls	r3, r3, #23
 800336c:	0011      	movs	r1, r2
 800336e:	0018      	movs	r0, r3
 8003370:	f001 fe52 	bl	8005018 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 8003376:	4a1a      	ldr	r2, [pc, #104]	; (80033e0 <HAL_DAC_MspInit+0xd4>)
 8003378:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_9;
 800337a:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 800337c:	2209      	movs	r2, #9
 800337e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003380:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 8003382:	2210      	movs	r2, #16
 8003384:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	0052      	lsls	r2, r2, #1
 8003398:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	00d2      	lsls	r2, r2, #3
 80033a0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 80033a4:	2220      	movs	r2, #32
 80033a6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	0192      	lsls	r2, r2, #6
 80033ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 80033b2:	0018      	movs	r0, r3
 80033b4:	f001 fc36 	bl	8004c24 <HAL_DMA_Init>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_DAC_MspInit+0xb4>
    {
      Error_Handler();
 80033bc:	f7ff fa32 	bl	8002824 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a06      	ldr	r2, [pc, #24]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_DAC_MspInit+0xd0>)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b009      	add	sp, #36	; 0x24
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	40007400 	.word	0x40007400
 80033d8:	40021000 	.word	0x40021000
 80033dc:	200002ac 	.word	0x200002ac
 80033e0:	4002001c 	.word	0x4002001c

080033e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b08b      	sub	sp, #44	; 0x2c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	2414      	movs	r4, #20
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	0018      	movs	r0, r3
 80033f2:	2314      	movs	r3, #20
 80033f4:	001a      	movs	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f005 f8f1 	bl	80085de <memset>
  if(hi2c->Instance==I2C1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <HAL_I2C_MspInit+0x11c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d129      	bne.n	800345a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	4b3f      	ldr	r3, [pc, #252]	; (8003504 <HAL_I2C_MspInit+0x120>)
 8003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340a:	4b3e      	ldr	r3, [pc, #248]	; (8003504 <HAL_I2C_MspInit+0x120>)
 800340c:	2102      	movs	r1, #2
 800340e:	430a      	orrs	r2, r1
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <HAL_I2C_MspInit+0x120>)
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	2202      	movs	r2, #2
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800341e:	0021      	movs	r1, r4
 8003420:	187b      	adds	r3, r7, r1
 8003422:	22c0      	movs	r2, #192	; 0xc0
 8003424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003426:	187b      	adds	r3, r7, r1
 8003428:	2212      	movs	r2, #18
 800342a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342c:	187b      	adds	r3, r7, r1
 800342e:	2201      	movs	r2, #1
 8003430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003432:	187b      	adds	r3, r7, r1
 8003434:	2203      	movs	r2, #3
 8003436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2201      	movs	r2, #1
 800343c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	187b      	adds	r3, r7, r1
 8003440:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_I2C_MspInit+0x124>)
 8003442:	0019      	movs	r1, r3
 8003444:	0010      	movs	r0, r2
 8003446:	f001 fde7 	bl	8005018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_I2C_MspInit+0x120>)
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <HAL_I2C_MspInit+0x120>)
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	0389      	lsls	r1, r1, #14
 8003454:	430a      	orrs	r2, r1
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003458:	e04e      	b.n	80034f8 <HAL_I2C_MspInit+0x114>
  else if(hi2c->Instance==I2C2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_I2C_MspInit+0x128>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d149      	bne.n	80034f8 <HAL_I2C_MspInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_I2C_MspInit+0x120>)
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_I2C_MspInit+0x120>)
 800346a:	2102      	movs	r1, #2
 800346c:	430a      	orrs	r2, r1
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003470:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_I2C_MspInit+0x120>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	2202      	movs	r2, #2
 8003476:	4013      	ands	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800347c:	2114      	movs	r1, #20
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2280      	movs	r2, #128	; 0x80
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003486:	000c      	movs	r4, r1
 8003488:	193b      	adds	r3, r7, r4
 800348a:	2212      	movs	r2, #18
 800348c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	2201      	movs	r2, #1
 8003492:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003494:	193b      	adds	r3, r7, r4
 8003496:	2203      	movs	r2, #3
 8003498:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800349a:	193b      	adds	r3, r7, r4
 800349c:	2206      	movs	r2, #6
 800349e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_I2C_MspInit+0x124>)
 80034a4:	0019      	movs	r1, r3
 80034a6:	0010      	movs	r0, r2
 80034a8:	f001 fdb6 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80034ac:	0021      	movs	r1, r4
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	0192      	lsls	r2, r2, #6
 80034b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2212      	movs	r2, #18
 80034ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2201      	movs	r2, #1
 80034c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	2203      	movs	r2, #3
 80034c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	2205      	movs	r2, #5
 80034cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <HAL_I2C_MspInit+0x124>)
 80034d2:	0019      	movs	r1, r3
 80034d4:	0010      	movs	r0, r2
 80034d6:	f001 fd9f 	bl	8005018 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_I2C_MspInit+0x120>)
 80034dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_I2C_MspInit+0x120>)
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	03c9      	lsls	r1, r1, #15
 80034e4:	430a      	orrs	r2, r1
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	2018      	movs	r0, #24
 80034ee:	f001 f9df 	bl	80048b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80034f2:	2018      	movs	r0, #24
 80034f4:	f001 f9f1 	bl	80048da <HAL_NVIC_EnableIRQ>
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b00b      	add	sp, #44	; 0x2c
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	40005400 	.word	0x40005400
 8003504:	40021000 	.word	0x40021000
 8003508:	50000400 	.word	0x50000400
 800350c:	40005800 	.word	0x40005800

08003510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b08d      	sub	sp, #52	; 0x34
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	241c      	movs	r4, #28
 800351a:	193b      	adds	r3, r7, r4
 800351c:	0018      	movs	r0, r3
 800351e:	2314      	movs	r3, #20
 8003520:	001a      	movs	r2, r3
 8003522:	2100      	movs	r1, #0
 8003524:	f005 f85b 	bl	80085de <memset>
  if(hspi->Instance==SPI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a51      	ldr	r2, [pc, #324]	; (8003674 <HAL_SPI_MspInit+0x164>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d14b      	bne.n	80035ca <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003532:	4b51      	ldr	r3, [pc, #324]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003536:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	0149      	lsls	r1, r1, #5
 800353c:	430a      	orrs	r2, r1
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003540:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003546:	2101      	movs	r1, #1
 8003548:	430a      	orrs	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
 800354c:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_SPI_MspInit+0x168>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003558:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_SPI_MspInit+0x168>)
 800355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355c:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_SPI_MspInit+0x168>)
 800355e:	2102      	movs	r1, #2
 8003560:	430a      	orrs	r2, r1
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c
 8003564:	4b44      	ldr	r3, [pc, #272]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003570:	193b      	adds	r3, r7, r4
 8003572:	22c0      	movs	r2, #192	; 0xc0
 8003574:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	193b      	adds	r3, r7, r4
 8003578:	2202      	movs	r2, #2
 800357a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	193b      	adds	r3, r7, r4
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	193b      	adds	r3, r7, r4
 8003584:	2203      	movs	r2, #3
 8003586:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003588:	193b      	adds	r3, r7, r4
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	193a      	adds	r2, r7, r4
 8003590:	23a0      	movs	r3, #160	; 0xa0
 8003592:	05db      	lsls	r3, r3, #23
 8003594:	0011      	movs	r1, r2
 8003596:	0018      	movs	r0, r3
 8003598:	f001 fd3e 	bl	8005018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800359c:	0021      	movs	r1, r4
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2208      	movs	r2, #8
 80035a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2202      	movs	r2, #2
 80035a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2203      	movs	r2, #3
 80035b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	4a2f      	ldr	r2, [pc, #188]	; (800367c <HAL_SPI_MspInit+0x16c>)
 80035c0:	0019      	movs	r1, r3
 80035c2:	0010      	movs	r0, r2
 80035c4:	f001 fd28 	bl	8005018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035c8:	e050      	b.n	800366c <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <HAL_SPI_MspInit+0x170>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d14b      	bne.n	800366c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035d4:	4b28      	ldr	r3, [pc, #160]	; (8003678 <HAL_SPI_MspInit+0x168>)
 80035d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_SPI_MspInit+0x168>)
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	01c9      	lsls	r1, r1, #7
 80035de:	430a      	orrs	r2, r1
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <HAL_SPI_MspInit+0x168>)
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_SPI_MspInit+0x168>)
 80035e8:	2104      	movs	r1, #4
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <HAL_SPI_MspInit+0x168>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	2204      	movs	r2, #4
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_SPI_MspInit+0x168>)
 80035fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003600:	2102      	movs	r1, #2
 8003602:	430a      	orrs	r2, r1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
 8003606:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_SPI_MspInit+0x168>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	2202      	movs	r2, #2
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003612:	241c      	movs	r4, #28
 8003614:	193b      	adds	r3, r7, r4
 8003616:	220c      	movs	r2, #12
 8003618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	193b      	adds	r3, r7, r4
 800361c:	2202      	movs	r2, #2
 800361e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	193b      	adds	r3, r7, r4
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	193b      	adds	r3, r7, r4
 8003628:	2203      	movs	r2, #3
 800362a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 800362c:	193b      	adds	r3, r7, r4
 800362e:	2202      	movs	r2, #2
 8003630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003632:	193b      	adds	r3, r7, r4
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <HAL_SPI_MspInit+0x174>)
 8003636:	0019      	movs	r1, r3
 8003638:	0010      	movs	r0, r2
 800363a:	f001 fced 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800363e:	0021      	movs	r1, r4
 8003640:	187b      	adds	r3, r7, r1
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	00d2      	lsls	r2, r2, #3
 8003646:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	187b      	adds	r3, r7, r1
 800364a:	2202      	movs	r2, #2
 800364c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	187b      	adds	r3, r7, r1
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2203      	movs	r2, #3
 8003658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800365a:	187b      	adds	r3, r7, r1
 800365c:	2205      	movs	r2, #5
 800365e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	187b      	adds	r3, r7, r1
 8003662:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_SPI_MspInit+0x16c>)
 8003664:	0019      	movs	r1, r3
 8003666:	0010      	movs	r0, r2
 8003668:	f001 fcd6 	bl	8005018 <HAL_GPIO_Init>
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b00d      	add	sp, #52	; 0x34
 8003672:	bd90      	pop	{r4, r7, pc}
 8003674:	40013000 	.word	0x40013000
 8003678:	40021000 	.word	0x40021000
 800367c:	50000400 	.word	0x50000400
 8003680:	40003800 	.word	0x40003800
 8003684:	50000800 	.word	0x50000800

08003688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <HAL_TIM_Base_MspInit+0x28>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d105      	bne.n	80036a6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_TIM_Base_MspInit+0x2c>)
 800369c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_TIM_Base_MspInit+0x2c>)
 80036a0:	2104      	movs	r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	40010800 	.word	0x40010800
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	240c      	movs	r4, #12
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	0018      	movs	r0, r3
 80036c6:	2314      	movs	r3, #20
 80036c8:	001a      	movs	r2, r3
 80036ca:	2100      	movs	r1, #0
 80036cc:	f004 ff87 	bl	80085de <memset>
  if(huart->Instance==USART2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_UART_MspInit+0x80>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d129      	bne.n	800372e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_UART_MspInit+0x84>)
 80036dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_UART_MspInit+0x84>)
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	0289      	lsls	r1, r1, #10
 80036e4:	430a      	orrs	r2, r1
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <HAL_UART_MspInit+0x84>)
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_UART_MspInit+0x84>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	430a      	orrs	r2, r1
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_UART_MspInit+0x84>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	2201      	movs	r2, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003700:	0021      	movs	r1, r4
 8003702:	187b      	adds	r3, r7, r1
 8003704:	220c      	movs	r2, #12
 8003706:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	187b      	adds	r3, r7, r1
 800370a:	2202      	movs	r2, #2
 800370c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	187b      	adds	r3, r7, r1
 8003716:	2203      	movs	r2, #3
 8003718:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800371a:	187b      	adds	r3, r7, r1
 800371c:	2204      	movs	r2, #4
 800371e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003720:	187a      	adds	r2, r7, r1
 8003722:	23a0      	movs	r3, #160	; 0xa0
 8003724:	05db      	lsls	r3, r3, #23
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f001 fc75 	bl	8005018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b009      	add	sp, #36	; 0x24
 8003734:	bd90      	pop	{r4, r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	40004400 	.word	0x40004400
 800373c:	40021000 	.word	0x40021000

08003740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003744:	e7fe      	b.n	8003744 <NMI_Handler+0x4>

08003746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800374a:	e7fe      	b.n	800374a <HardFault_Handler+0x4>

0800374c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003764:	f000 fa2e 	bl	8003bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <DMA1_Channel1_IRQHandler+0x14>)
 8003776:	0018      	movs	r0, r3
 8003778:	f001 fb72 	bl	8004e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	20000208 	.word	0x20000208

08003788 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <DMA1_Channel2_3_IRQHandler+0x14>)
 800378e:	0018      	movs	r0, r3
 8003790:	f001 fb66 	bl	8004e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	200002ac 	.word	0x200002ac

080037a0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <ADC1_COMP_IRQHandler+0x14>)
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 fcb8 	bl	800411c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	20000250 	.word	0x20000250

080037b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	return 1;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_kill>:

int _kill(int pid, int sig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037ce:	f004 fec9 	bl	8008564 <__errno>
 80037d2:	0003      	movs	r3, r0
 80037d4:	2216      	movs	r2, #22
 80037d6:	601a      	str	r2, [r3, #0]
	return -1;
 80037d8:	2301      	movs	r3, #1
 80037da:	425b      	negs	r3, r3
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_exit>:

void _exit (int status)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037ec:	2301      	movs	r3, #1
 80037ee:	425a      	negs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0011      	movs	r1, r2
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7ff ffe5 	bl	80037c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037fa:	e7fe      	b.n	80037fa <_exit+0x16>

080037fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e00a      	b.n	8003824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800380e:	e000      	b.n	8003812 <_read+0x16>
 8003810:	bf00      	nop
 8003812:	0001      	movs	r1, r0
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	60ba      	str	r2, [r7, #8]
 800381a:	b2ca      	uxtb	r2, r1
 800381c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3301      	adds	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	dbf0      	blt.n	800380e <_read+0x12>
	}

return len;
 800382c:	687b      	ldr	r3, [r7, #4]
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}

08003836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e009      	b.n	800385c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	60ba      	str	r2, [r7, #8]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	0018      	movs	r0, r3
 8003852:	e000      	b.n	8003856 <_write+0x20>
 8003854:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3301      	adds	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	dbf1      	blt.n	8003848 <_write+0x12>
	}
	return len;
 8003864:	687b      	ldr	r3, [r7, #4]
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b006      	add	sp, #24
 800386c:	bd80      	pop	{r7, pc}

0800386e <_close>:

int _close(int file)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
	return -1;
 8003876:	2301      	movs	r3, #1
 8003878:	425b      	negs	r3, r3
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}

08003882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	0192      	lsls	r2, r2, #6
 8003892:	605a      	str	r2, [r3, #4]
	return 0;
 8003894:	2300      	movs	r3, #0
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}

0800389e <_isatty>:

int _isatty(int file)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
	return 1;
 80038a6:	2301      	movs	r3, #1
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
	return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b004      	add	sp, #16
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <_sbrk+0x5c>)
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <_sbrk+0x60>)
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <_sbrk+0x64>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <_sbrk+0x64>)
 80038e6:	4a12      	ldr	r2, [pc, #72]	; (8003930 <_sbrk+0x68>)
 80038e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <_sbrk+0x64>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	18d3      	adds	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d207      	bcs.n	8003908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f8:	f004 fe34 	bl	8008564 <__errno>
 80038fc:	0003      	movs	r3, r0
 80038fe:	220c      	movs	r2, #12
 8003900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003902:	2301      	movs	r3, #1
 8003904:	425b      	negs	r3, r3
 8003906:	e009      	b.n	800391c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <_sbrk+0x64>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	18d2      	adds	r2, r2, r3
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <_sbrk+0x64>)
 8003918:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800391a:	68fb      	ldr	r3, [r7, #12]
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20002000 	.word	0x20002000
 8003928:	00000400 	.word	0x00000400
 800392c:	200001f8 	.word	0x200001f8
 8003930:	200011a0 	.word	0x200011a0

08003934 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM21_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003946:	2308      	movs	r3, #8
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	0018      	movs	r0, r3
 800394c:	2310      	movs	r3, #16
 800394e:	001a      	movs	r2, r3
 8003950:	2100      	movs	r1, #0
 8003952:	f004 fe44 	bl	80085de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003956:	003b      	movs	r3, r7
 8003958:	0018      	movs	r0, r3
 800395a:	2308      	movs	r3, #8
 800395c:	001a      	movs	r2, r3
 800395e:	2100      	movs	r1, #0
 8003960:	f004 fe3d 	bl	80085de <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <MX_TIM21_Init+0xa0>)
 8003966:	4a1f      	ldr	r2, [pc, #124]	; (80039e4 <MX_TIM21_Init+0xa4>)
 8003968:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800396a:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <MX_TIM21_Init+0xa0>)
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <MX_TIM21_Init+0xa0>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <MX_TIM21_Init+0xa0>)
 8003978:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <MX_TIM21_Init+0xa8>)
 800397a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397c:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <MX_TIM21_Init+0xa0>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <MX_TIM21_Init+0xa0>)
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <MX_TIM21_Init+0xa0>)
 800398a:	0018      	movs	r0, r3
 800398c:	f003 f9ee 	bl	8006d6c <HAL_TIM_Base_Init>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8003994:	f7fe ff46 	bl	8002824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003998:	2108      	movs	r1, #8
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	0152      	lsls	r2, r2, #5
 80039a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80039a2:	187a      	adds	r2, r7, r1
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_TIM21_Init+0xa0>)
 80039a6:	0011      	movs	r1, r2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f003 fa6b 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 80039b2:	f7fe ff37 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039b6:	003b      	movs	r3, r7
 80039b8:	2220      	movs	r2, #32
 80039ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039bc:	003b      	movs	r3, r7
 80039be:	2200      	movs	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80039c2:	003a      	movs	r2, r7
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_TIM21_Init+0xa0>)
 80039c6:	0011      	movs	r1, r2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f003 fc13 	bl	80071f4 <HAL_TIMEx_MasterConfigSynchronization>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80039d2:	f7fe ff27 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b006      	add	sp, #24
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	2000114c 	.word	0x2000114c
 80039e4:	40010800 	.word	0x40010800
 80039e8:	0000ffff 	.word	0x0000ffff

080039ec <SetTimerPeriod>:
		return HAL_RCC_GetPCLK2Freq();
	}
}

void SetTimerPeriod(TIM_HandleTypeDef *htim, uint16_t *tim_arr, size_t n, uint8_t *index)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
	TIM_TypeDef *TIM = htim -> Instance;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	617b      	str	r3, [r7, #20]
	TIM -> PSC = 0;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
    TIM -> ARR = tim_arr[*(index)];
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	18d3      	adds	r3, r2, r3
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	001a      	movs	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
	*(index) = ((*index) + 1)%n;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7fc fc13 	bl	800024c <__aeabi_uidivmod>
 8003a26:	000b      	movs	r3, r1
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	701a      	strb	r2, [r3, #0]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b006      	add	sp, #24
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <LoadTimerDac>:

void LoadTimerDac(TIM_HandleTypeDef* htim, uint16_t *dac_tim_lut, uint16_t n_elem_lut)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	1dbb      	adds	r3, r7, #6
 8003a44:	801a      	strh	r2, [r3, #0]
	  static uint8_t index = 0;
	  SetTimerPeriod(htim, dac_tim_lut, n_elem_lut, &index); // Set the new ARR values for next portion of DAC waveform in advance
 8003a46:	1dbb      	adds	r3, r7, #6
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <LoadTimerDac+0x24>)
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff ffcc 	bl	80039ec <SetTimerPeriod>
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200001fc 	.word	0x200001fc

08003a60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a64:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <MX_USART2_UART_Init+0x64>)
 8003a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a6c:	22e1      	movs	r2, #225	; 0xe1
 8003a6e:	0252      	lsls	r2, r2, #9
 8003a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a86:	2208      	movs	r2, #8
 8003a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	0192      	lsls	r2, r2, #6
 8003aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <MX_USART2_UART_Init+0x60>)
 8003aac:	0018      	movs	r0, r3
 8003aae:	f003 fbf9 	bl	80072a4 <HAL_HalfDuplex_Init>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d001      	beq.n	8003aba <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003ab6:	f7fe feb5 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200010c8 	.word	0x200010c8
 8003ac4:	40004400 	.word	0x40004400

08003ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003ac8:	480d      	ldr	r0, [pc, #52]	; (8003b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003acc:	480d      	ldr	r0, [pc, #52]	; (8003b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ace:	490e      	ldr	r1, [pc, #56]	; (8003b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ad0:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <LoopForever+0xe>)
  movs r3, #0
 8003ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad4:	e002      	b.n	8003adc <LoopCopyDataInit>

08003ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ada:	3304      	adds	r3, #4

08003adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae0:	d3f9      	bcc.n	8003ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ae4:	4c0b      	ldr	r4, [pc, #44]	; (8003b14 <LoopForever+0x16>)
  movs r3, #0
 8003ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae8:	e001      	b.n	8003aee <LoopFillZerobss>

08003aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aec:	3204      	adds	r2, #4

08003aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af0:	d3fb      	bcc.n	8003aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003af2:	f7ff ff1f 	bl	8003934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003af6:	f004 fd3b 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afa:	f7fe fdd5 	bl	80026a8 <main>

08003afe <LoopForever>:

LoopForever:
    b LoopForever
 8003afe:	e7fe      	b.n	8003afe <LoopForever>
  ldr   r0, =_estack
 8003b00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b08:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003b0c:	0800b88c 	.word	0x0800b88c
  ldr r2, =_sbss
 8003b10:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003b14:	200011a0 	.word	0x200011a0

08003b18 <DMA1_Channel4_5_6_7_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b18:	e7fe      	b.n	8003b18 <DMA1_Channel4_5_6_7_IRQHandler>
	...

08003b1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_Init+0x3c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_Init+0x3c>)
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b34:	2003      	movs	r0, #3
 8003b36:	f000 f811 	bl	8003b5c <HAL_InitTick>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b3e:	1dfb      	adds	r3, r7, #7
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e001      	b.n	8003b4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b46:	f7ff fb2d 	bl	80031a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40022000 	.word	0x40022000

08003b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HAL_InitTick+0x5c>)
 8003b66:	681c      	ldr	r4, [r3, #0]
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <HAL_InitTick+0x60>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	23fa      	movs	r3, #250	; 0xfa
 8003b70:	0098      	lsls	r0, r3, #2
 8003b72:	f7fc fae5 	bl	8000140 <__udivsi3>
 8003b76:	0003      	movs	r3, r0
 8003b78:	0019      	movs	r1, r3
 8003b7a:	0020      	movs	r0, r4
 8003b7c:	f7fc fae0 	bl	8000140 <__udivsi3>
 8003b80:	0003      	movs	r3, r0
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 feb9 	bl	80048fa <HAL_SYSTICK_Config>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e00f      	b.n	8003bb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d80b      	bhi.n	8003bae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	425b      	negs	r3, r3
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fe86 	bl	80048b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_InitTick+0x64>)
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b003      	add	sp, #12
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000008 	.word	0x20000008
 8003bc0:	20000004 	.word	0x20000004

08003bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_IncTick+0x1c>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	001a      	movs	r2, r3
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <HAL_IncTick+0x20>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	18d2      	adds	r2, r2, r3
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_IncTick+0x20>)
 8003bd6:	601a      	str	r2, [r3, #0]
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	20000008 	.word	0x20000008
 8003be4:	2000118c 	.word	0x2000118c

08003be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  return uwTick;
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <HAL_GetTick+0x10>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	2000118c 	.word	0x2000118c

08003bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c04:	f7ff fff0 	bl	8003be8 <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
 8003c14:	d005      	beq.n	8003c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_Delay+0x44>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	f7ff ffe0 	bl	8003be8 <HAL_GetTick>
 8003c28:	0002      	movs	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d8f7      	bhi.n	8003c24 <HAL_Delay+0x28>
  {
  }
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000008 	.word	0x20000008

08003c44 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e159      	b.n	8003f0a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2250      	movs	r2, #80	; 0x50
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7ff faba 	bl	80031e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	2210      	movs	r2, #16
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d005      	beq.n	8003c8c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2204      	movs	r2, #4
 8003c88:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	2210      	movs	r2, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2250      	movs	r2, #80	; 0x50
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e132      	b.n	8003f0a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	4a9a      	ldr	r2, [pc, #616]	; (8003f14 <HAL_ADC_Init+0x2d0>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	2202      	movs	r2, #2
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d108      	bne.n	8003cd4 <HAL_ADC_Init+0x90>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_Init+0x90>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_ADC_Init+0x92>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d149      	bne.n	8003d6e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d00b      	beq.n	8003cfe <HAL_ADC_Init+0xba>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	05db      	lsls	r3, r3, #23
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d005      	beq.n	8003cfe <HAL_ADC_Init+0xba>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d111      	bne.n	8003d22 <HAL_ADC_Init+0xde>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	0892      	lsrs	r2, r2, #2
 8003d0c:	611a      	str	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6919      	ldr	r1, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	611a      	str	r2, [r3, #16]
 8003d20:	e014      	b.n	8003d4c <HAL_ADC_Init+0x108>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	0892      	lsrs	r2, r2, #2
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b78      	ldr	r3, [pc, #480]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d38:	4978      	ldr	r1, [pc, #480]	; (8003f1c <HAL_ADC_Init+0x2d8>)
 8003d3a:	400a      	ands	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	4b76      	ldr	r3, [pc, #472]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2118      	movs	r1, #24
 8003d58:	438a      	bics	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b69      	ldr	r3, [pc, #420]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d74:	496a      	ldr	r1, [pc, #424]	; (8003f20 <HAL_ADC_Init+0x2dc>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	065a      	lsls	r2, r3, #25
 8003d84:	4b64      	ldr	r3, [pc, #400]	; (8003f18 <HAL_ADC_Init+0x2d4>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	055b      	lsls	r3, r3, #21
 8003d94:	4013      	ands	r3, r2
 8003d96:	d108      	bne.n	8003daa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0549      	lsls	r1, r1, #21
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	495b      	ldr	r1, [pc, #364]	; (8003f24 <HAL_ADC_Init+0x2e0>)
 8003db6:	400a      	ands	r2, r1
 8003db8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68d9      	ldr	r1, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d101      	bne.n	8003dd0 <HAL_ADC_Init+0x18c>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	e000      	b.n	8003dd2 <HAL_ADC_Init+0x18e>
 8003dd0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003dd2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2020      	movs	r0, #32
 8003dd8:	5c1b      	ldrb	r3, [r3, r0]
 8003dda:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003ddc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	202c      	movs	r0, #44	; 0x2c
 8003de2:	5c1b      	ldrb	r3, [r3, r0]
 8003de4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003de6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003dec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003df4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003dfc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0a:	23c2      	movs	r3, #194	; 0xc2
 8003e0c:	33ff      	adds	r3, #255	; 0xff
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d00b      	beq.n	8003e2a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2221      	movs	r2, #33	; 0x21
 8003e2e:	5c9b      	ldrb	r3, [r3, r2]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d11a      	bne.n	8003e6a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	5c9b      	ldrb	r3, [r3, r2]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0249      	lsls	r1, r1, #9
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	e00b      	b.n	8003e6a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	2220      	movs	r2, #32
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	2201      	movs	r2, #1
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d11f      	bne.n	8003eb2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	492a      	ldr	r1, [pc, #168]	; (8003f28 <HAL_ADC_Init+0x2e4>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6919      	ldr	r1, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003e90:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003e96:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	430a      	orrs	r2, r1
 8003eae:	611a      	str	r2, [r3, #16]
 8003eb0:	e00e      	b.n	8003ed0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	438a      	bics	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2107      	movs	r1, #7
 8003edc:	438a      	bics	r2, r1
 8003ede:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6959      	ldr	r1, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	2203      	movs	r2, #3
 8003efe:	4393      	bics	r3, r2
 8003f00:	2201      	movs	r2, #1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	fffffefd 	.word	0xfffffefd
 8003f18:	40012708 	.word	0x40012708
 8003f1c:	ffc3ffff 	.word	0xffc3ffff
 8003f20:	fdffffff 	.word	0xfdffffff
 8003f24:	fffe0219 	.word	0xfffe0219
 8003f28:	fffffc03 	.word	0xfffffc03

08003f2c <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f38:	2317      	movs	r3, #23
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2204      	movs	r2, #4
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d15e      	bne.n	800400a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2250      	movs	r2, #80	; 0x50
 8003f50:	5c9b      	ldrb	r3, [r3, r2]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_Start_DMA+0x2e>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e05e      	b.n	8004018 <HAL_ADC_Start_DMA+0xec>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2250      	movs	r2, #80	; 0x50
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d007      	beq.n	8003f8a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003f7a:	2317      	movs	r3, #23
 8003f7c:	18fc      	adds	r4, r7, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 fa3f 	bl	8004404 <ADC_Enable>
 8003f86:	0003      	movs	r3, r0
 8003f88:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f8a:	2317      	movs	r3, #23
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d13e      	bne.n	8004012 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	4a21      	ldr	r2, [pc, #132]	; (8004020 <HAL_ADC_Start_DMA+0xf4>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2280      	movs	r2, #128	; 0x80
 8003f9e:	0052      	lsls	r2, r2, #1
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2250      	movs	r2, #80	; 0x50
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_ADC_Start_DMA+0xf8>)
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_ADC_Start_DMA+0xfc>)
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	4a18      	ldr	r2, [pc, #96]	; (800402c <HAL_ADC_Start_DMA+0x100>)
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	221c      	movs	r2, #28
 8003fd2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2110      	movs	r1, #16
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3340      	adds	r3, #64	; 0x40
 8003fee:	0019      	movs	r1, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f000 fe8e 	bl	8004d14 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2104      	movs	r1, #4
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e003      	b.n	8004012 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800400a:	2317      	movs	r3, #23
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004012:	2317      	movs	r3, #23
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	781b      	ldrb	r3, [r3, #0]
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b007      	add	sp, #28
 800401e:	bd90      	pop	{r4, r7, pc}
 8004020:	fffff0fe 	.word	0xfffff0fe
 8004024:	08004611 	.word	0x08004611
 8004028:	080046c5 	.word	0x080046c5
 800402c:	080046e3 	.word	0x080046e3

08004030 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004038:	230f      	movs	r3, #15
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2250      	movs	r2, #80	; 0x50
 8004044:	5c9b      	ldrb	r3, [r3, r2]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADC_Stop_DMA+0x1e>
 800404a:	2302      	movs	r3, #2
 800404c:	e05f      	b.n	800410e <HAL_ADC_Stop_DMA+0xde>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2250      	movs	r2, #80	; 0x50
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004056:	250f      	movs	r5, #15
 8004058:	197c      	adds	r4, r7, r5
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 fa91 	bl	8004584 <ADC_ConversionStop>
 8004062:	0003      	movs	r3, r0
 8004064:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004066:	0028      	movs	r0, r5
 8004068:	183b      	adds	r3, r7, r0
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d147      	bne.n	8004100 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2101      	movs	r1, #1
 800407c:	438a      	bics	r2, r1
 800407e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004084:	2225      	movs	r2, #37	; 0x25
 8004086:	5c9b      	ldrb	r3, [r3, r2]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d112      	bne.n	80040b4 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004092:	0005      	movs	r5, r0
 8004094:	183c      	adds	r4, r7, r0
 8004096:	0018      	movs	r0, r3
 8004098:	f000 fea2 	bl	8004de0 <HAL_DMA_Abort>
 800409c:	0003      	movs	r3, r0
 800409e:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80040a0:	197b      	adds	r3, r7, r5
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2110      	movs	r1, #16
 80040c0:	438a      	bics	r2, r1
 80040c2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80040c4:	220f      	movs	r2, #15
 80040c6:	18bb      	adds	r3, r7, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80040ce:	18bc      	adds	r4, r7, r2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f9f6 	bl	80044c4 <ADC_Disable>
 80040d8:	0003      	movs	r3, r0
 80040da:	7023      	strb	r3, [r4, #0]
 80040dc:	e003      	b.n	80040e6 <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 f9ef 	bl	80044c4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040e6:	230f      	movs	r3, #15
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	4a08      	ldr	r2, [pc, #32]	; (8004118 <HAL_ADC_Stop_DMA+0xe8>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	2201      	movs	r2, #1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2250      	movs	r2, #80	; 0x50
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004108:	230f      	movs	r3, #15
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	781b      	ldrb	r3, [r3, #0]
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b004      	add	sp, #16
 8004114:	bdb0      	pop	{r4, r5, r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	fffffefe 	.word	0xfffffefe

0800411c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2204      	movs	r2, #4
 800412c:	4013      	ands	r3, r2
 800412e:	2b04      	cmp	r3, #4
 8004130:	d106      	bne.n	8004140 <HAL_ADC_IRQHandler+0x24>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2204      	movs	r2, #4
 800413a:	4013      	ands	r3, r2
 800413c:	2b04      	cmp	r3, #4
 800413e:	d00d      	beq.n	800415c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2208      	movs	r2, #8
 8004148:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800414a:	2b08      	cmp	r3, #8
 800414c:	d154      	bne.n	80041f8 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2208      	movs	r2, #8
 8004156:	4013      	ands	r3, r2
 8004158:	2b08      	cmp	r3, #8
 800415a:	d14d      	bne.n	80041f8 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	2210      	movs	r2, #16
 8004162:	4013      	ands	r3, r2
 8004164:	d106      	bne.n	8004174 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	23c0      	movs	r3, #192	; 0xc0
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4013      	ands	r3, r2
 8004180:	d12e      	bne.n	80041e0 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004188:	2b00      	cmp	r3, #0
 800418a:	d129      	bne.n	80041e0 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2208      	movs	r2, #8
 8004194:	4013      	ands	r3, r2
 8004196:	2b08      	cmp	r3, #8
 8004198:	d122      	bne.n	80041e0 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2204      	movs	r2, #4
 80041a2:	4013      	ands	r3, r2
 80041a4:	d110      	bne.n	80041c8 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	210c      	movs	r1, #12
 80041b2:	438a      	bics	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	4a35      	ldr	r2, [pc, #212]	; (8004290 <HAL_ADC_IRQHandler+0x174>)
 80041bc:	4013      	ands	r3, r2
 80041be:	2201      	movs	r2, #1
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
 80041c6:	e00b      	b.n	80041e0 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	2220      	movs	r2, #32
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	2201      	movs	r2, #1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7fe fa38 	bl	8002658 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d003      	beq.n	80041f8 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	220c      	movs	r2, #12
 80041f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	4013      	ands	r3, r2
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d115      	bne.n	8004232 <HAL_ADC_IRQHandler+0x116>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	4013      	ands	r3, r2
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d10e      	bne.n	8004232 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0252      	lsls	r2, r2, #9
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0018      	movs	r0, r3
 8004226:	f000 f83d 	bl	80042a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2210      	movs	r2, #16
 800423a:	4013      	ands	r3, r2
 800423c:	2b10      	cmp	r3, #16
 800423e:	d123      	bne.n	8004288 <HAL_ADC_IRQHandler+0x16c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2210      	movs	r2, #16
 8004248:	4013      	ands	r3, r2
 800424a:	2b10      	cmp	r3, #16
 800424c:	d11c      	bne.n	8004288 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10d      	bne.n	8004280 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	2202      	movs	r2, #2
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2210      	movs	r2, #16
 8004276:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	0018      	movs	r0, r3
 800427c:	f000 f81a 	bl	80042b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	601a      	str	r2, [r3, #0]
  }
  
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}
 8004290:	fffffefe 	.word	0xfffffefe

08004294 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b002      	add	sp, #8
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2250      	movs	r2, #80	; 0x50
 80042d2:	5c9b      	ldrb	r3, [r3, r2]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e085      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x124>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2250      	movs	r2, #80	; 0x50
 80042e0:	2101      	movs	r1, #1
 80042e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2204      	movs	r2, #4
 80042ec:	4013      	ands	r3, r2
 80042ee:	d00b      	beq.n	8004308 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	2220      	movs	r2, #32
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2250      	movs	r2, #80	; 0x50
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e06f      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_ADC_ConfigChannel+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d035      	beq.n	800437e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	035b      	lsls	r3, r3, #13
 800431e:	0b5a      	lsrs	r2, r3, #13
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	02db      	lsls	r3, r3, #11
 8004330:	4013      	ands	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	0409      	lsls	r1, r1, #16
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004342:	200a      	movs	r0, #10
 8004344:	f000 f9e8 	bl	8004718 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	029b      	lsls	r3, r3, #10
 8004350:	4013      	ands	r3, r2
 8004352:	d006      	beq.n	8004362 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 800435a:	2180      	movs	r1, #128	; 0x80
 800435c:	03c9      	lsls	r1, r1, #15
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	025b      	lsls	r3, r3, #9
 800436a:	4013      	ands	r3, r2
 800436c:	d037      	beq.n	80043de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800436e:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	0449      	lsls	r1, r1, #17
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	e02f      	b.n	80043de <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	035b      	lsls	r3, r3, #13
 800438a:	0b5b      	lsrs	r3, r3, #13
 800438c:	43d9      	mvns	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	400a      	ands	r2, r1
 8004394:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	02db      	lsls	r3, r3, #11
 800439e:	4013      	ands	r3, r2
 80043a0:	d005      	beq.n	80043ae <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 80043a8:	4913      	ldr	r1, [pc, #76]	; (80043f8 <HAL_ADC_ConfigChannel+0x134>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	029b      	lsls	r3, r3, #10
 80043b6:	4013      	ands	r3, r2
 80043b8:	d005      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 80043c0:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_ADC_ConfigChannel+0x138>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	025b      	lsls	r3, r3, #9
 80043ce:	4013      	ands	r3, r2
 80043d0:	d005      	beq.n	80043de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <HAL_ADC_ConfigChannel+0x130>)
 80043d8:	4909      	ldr	r1, [pc, #36]	; (8004400 <HAL_ADC_ConfigChannel+0x13c>)
 80043da:	400a      	ands	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2250      	movs	r2, #80	; 0x50
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00001001 	.word	0x00001001
 80043f4:	40012708 	.word	0x40012708
 80043f8:	ff7fffff 	.word	0xff7fffff
 80043fc:	ffbfffff 	.word	0xffbfffff
 8004400:	feffffff 	.word	0xfeffffff

08004404 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2203      	movs	r2, #3
 8004418:	4013      	ands	r3, r2
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <ADC_Enable+0x2c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2201      	movs	r2, #1
 8004426:	4013      	ands	r3, r2
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <ADC_Enable+0x2c>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <ADC_Enable+0x2e>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d13f      	bne.n	80044b6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <ADC_Enable+0xbc>)
 800443e:	4013      	ands	r3, r2
 8004440:	d00d      	beq.n	800445e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	2210      	movs	r2, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	2201      	movs	r2, #1
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02c      	b.n	80044b8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2101      	movs	r1, #1
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800446e:	2001      	movs	r0, #1
 8004470:	f000 f952 	bl	8004718 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004474:	f7ff fbb8 	bl	8003be8 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800447c:	e014      	b.n	80044a8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800447e:	f7ff fbb3 	bl	8003be8 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b0a      	cmp	r3, #10
 800448a:	d90d      	bls.n	80044a8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	2210      	movs	r2, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	2201      	movs	r2, #1
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e007      	b.n	80044b8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d1e3      	bne.n	800447e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	80000017 	.word	0x80000017

080044c4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2203      	movs	r2, #3
 80044d8:	4013      	ands	r3, r2
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d108      	bne.n	80044f0 <ADC_Disable+0x2c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2201      	movs	r2, #1
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <ADC_Disable+0x2c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <ADC_Disable+0x2e>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d041      	beq.n	800457a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2205      	movs	r2, #5
 80044fe:	4013      	ands	r3, r2
 8004500:	2b01      	cmp	r3, #1
 8004502:	d110      	bne.n	8004526 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2102      	movs	r1, #2
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2203      	movs	r2, #3
 800451a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800451c:	f7ff fb64 	bl	8003be8 <HAL_GetTick>
 8004520:	0003      	movs	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004524:	e022      	b.n	800456c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	2210      	movs	r2, #16
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	2201      	movs	r2, #1
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e01c      	b.n	800457c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004542:	f7ff fb51 	bl	8003be8 <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b0a      	cmp	r3, #10
 800454e:	d90d      	bls.n	800456c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	2210      	movs	r2, #16
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	2201      	movs	r2, #1
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	2b01      	cmp	r3, #1
 8004578:	d0e3      	beq.n	8004542 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}

08004584 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2204      	movs	r2, #4
 8004598:	4013      	ands	r3, r2
 800459a:	d034      	beq.n	8004606 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2204      	movs	r2, #4
 80045a4:	4013      	ands	r3, r2
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d10d      	bne.n	80045c6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80045b4:	d107      	bne.n	80045c6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2110      	movs	r1, #16
 80045c2:	430a      	orrs	r2, r1
 80045c4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045c6:	f7ff fb0f 	bl	8003be8 <HAL_GetTick>
 80045ca:	0003      	movs	r3, r0
 80045cc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80045ce:	e014      	b.n	80045fa <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80045d0:	f7ff fb0a 	bl	8003be8 <HAL_GetTick>
 80045d4:	0002      	movs	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b0a      	cmp	r3, #10
 80045dc:	d90d      	bls.n	80045fa <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	2210      	movs	r2, #16
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	2201      	movs	r2, #1
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e006      	b.n	8004608 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2204      	movs	r2, #4
 8004602:	4013      	ands	r3, r2
 8004604:	d1e4      	bne.n	80045d0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bd80      	pop	{r7, pc}

08004610 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	2250      	movs	r2, #80	; 0x50
 8004624:	4013      	ands	r3, r2
 8004626:	d141      	bne.n	80046ac <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	23c0      	movs	r3, #192	; 0xc0
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	4013      	ands	r3, r2
 8004642:	d12e      	bne.n	80046a2 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800464a:	2b00      	cmp	r3, #0
 800464c:	d129      	bne.n	80046a2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	4013      	ands	r3, r2
 8004658:	2b08      	cmp	r3, #8
 800465a:	d122      	bne.n	80046a2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2204      	movs	r2, #4
 8004664:	4013      	ands	r3, r2
 8004666:	d110      	bne.n	800468a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	210c      	movs	r1, #12
 8004674:	438a      	bics	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <ADC_DMAConvCplt+0xb0>)
 800467e:	4013      	ands	r3, r2
 8004680:	2201      	movs	r2, #1
 8004682:	431a      	orrs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
 8004688:	e00b      	b.n	80046a2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	2220      	movs	r2, #32
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	2201      	movs	r2, #1
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fd ffd7 	bl	8002658 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80046aa:	e005      	b.n	80046b8 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	0010      	movs	r0, r2
 80046b6:	4798      	blx	r3
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b004      	add	sp, #16
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	fffffefe 	.word	0xfffffefe

080046c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7ff fddd 	bl	8004294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b004      	add	sp, #16
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	431a      	orrs	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	2204      	movs	r2, #4
 8004702:	431a      	orrs	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff fdd2 	bl	80042b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b004      	add	sp, #16
 8004716:	bd80      	pop	{r7, pc}

08004718 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <ADC_DelayMicroSecond+0x38>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	490b      	ldr	r1, [pc, #44]	; (8004754 <ADC_DelayMicroSecond+0x3c>)
 8004726:	0018      	movs	r0, r3
 8004728:	f7fb fd0a 	bl	8000140 <__udivsi3>
 800472c:	0003      	movs	r3, r0
 800472e:	001a      	movs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4353      	muls	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004736:	e002      	b.n	800473e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f9      	bne.n	8004738 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	b004      	add	sp, #16
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	20000000 	.word	0x20000000
 8004754:	000f4240 	.word	0x000f4240

08004758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	0002      	movs	r2, r0
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004764:	1dfb      	adds	r3, r7, #7
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b7f      	cmp	r3, #127	; 0x7f
 800476a:	d809      	bhi.n	8004780 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800476c:	1dfb      	adds	r3, r7, #7
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	001a      	movs	r2, r3
 8004772:	231f      	movs	r3, #31
 8004774:	401a      	ands	r2, r3
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <__NVIC_EnableIRQ+0x30>)
 8004778:	2101      	movs	r1, #1
 800477a:	4091      	lsls	r1, r2
 800477c:	000a      	movs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
  }
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e000e100 	.word	0xe000e100

0800478c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	0002      	movs	r2, r0
 8004794:	6039      	str	r1, [r7, #0]
 8004796:	1dfb      	adds	r3, r7, #7
 8004798:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800479a:	1dfb      	adds	r3, r7, #7
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b7f      	cmp	r3, #127	; 0x7f
 80047a0:	d828      	bhi.n	80047f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047a2:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <__NVIC_SetPriority+0xd4>)
 80047a4:	1dfb      	adds	r3, r7, #7
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	b25b      	sxtb	r3, r3
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	33c0      	adds	r3, #192	; 0xc0
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	589b      	ldr	r3, [r3, r2]
 80047b2:	1dfa      	adds	r2, r7, #7
 80047b4:	7812      	ldrb	r2, [r2, #0]
 80047b6:	0011      	movs	r1, r2
 80047b8:	2203      	movs	r2, #3
 80047ba:	400a      	ands	r2, r1
 80047bc:	00d2      	lsls	r2, r2, #3
 80047be:	21ff      	movs	r1, #255	; 0xff
 80047c0:	4091      	lsls	r1, r2
 80047c2:	000a      	movs	r2, r1
 80047c4:	43d2      	mvns	r2, r2
 80047c6:	401a      	ands	r2, r3
 80047c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	22ff      	movs	r2, #255	; 0xff
 80047d0:	401a      	ands	r2, r3
 80047d2:	1dfb      	adds	r3, r7, #7
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	0018      	movs	r0, r3
 80047d8:	2303      	movs	r3, #3
 80047da:	4003      	ands	r3, r0
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047e0:	481f      	ldr	r0, [pc, #124]	; (8004860 <__NVIC_SetPriority+0xd4>)
 80047e2:	1dfb      	adds	r3, r7, #7
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	430a      	orrs	r2, r1
 80047ec:	33c0      	adds	r3, #192	; 0xc0
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80047f2:	e031      	b.n	8004858 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047f4:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <__NVIC_SetPriority+0xd8>)
 80047f6:	1dfb      	adds	r3, r7, #7
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	0019      	movs	r1, r3
 80047fc:	230f      	movs	r3, #15
 80047fe:	400b      	ands	r3, r1
 8004800:	3b08      	subs	r3, #8
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	3306      	adds	r3, #6
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	3304      	adds	r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1dfa      	adds	r2, r7, #7
 8004810:	7812      	ldrb	r2, [r2, #0]
 8004812:	0011      	movs	r1, r2
 8004814:	2203      	movs	r2, #3
 8004816:	400a      	ands	r2, r1
 8004818:	00d2      	lsls	r2, r2, #3
 800481a:	21ff      	movs	r1, #255	; 0xff
 800481c:	4091      	lsls	r1, r2
 800481e:	000a      	movs	r2, r1
 8004820:	43d2      	mvns	r2, r2
 8004822:	401a      	ands	r2, r3
 8004824:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	22ff      	movs	r2, #255	; 0xff
 800482c:	401a      	ands	r2, r3
 800482e:	1dfb      	adds	r3, r7, #7
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	0018      	movs	r0, r3
 8004834:	2303      	movs	r3, #3
 8004836:	4003      	ands	r3, r0
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800483c:	4809      	ldr	r0, [pc, #36]	; (8004864 <__NVIC_SetPriority+0xd8>)
 800483e:	1dfb      	adds	r3, r7, #7
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	001c      	movs	r4, r3
 8004844:	230f      	movs	r3, #15
 8004846:	4023      	ands	r3, r4
 8004848:	3b08      	subs	r3, #8
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	430a      	orrs	r2, r1
 800484e:	3306      	adds	r3, #6
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	18c3      	adds	r3, r0, r3
 8004854:	3304      	adds	r3, #4
 8004856:	601a      	str	r2, [r3, #0]
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b003      	add	sp, #12
 800485e:	bd90      	pop	{r4, r7, pc}
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	045b      	lsls	r3, r3, #17
 8004878:	429a      	cmp	r2, r3
 800487a:	d301      	bcc.n	8004880 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800487c:	2301      	movs	r3, #1
 800487e:	e010      	b.n	80048a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <SysTick_Config+0x44>)
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	3a01      	subs	r2, #1
 8004886:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004888:	2301      	movs	r3, #1
 800488a:	425b      	negs	r3, r3
 800488c:	2103      	movs	r1, #3
 800488e:	0018      	movs	r0, r3
 8004890:	f7ff ff7c 	bl	800478c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <SysTick_Config+0x44>)
 8004896:	2200      	movs	r2, #0
 8004898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800489a:	4b04      	ldr	r3, [pc, #16]	; (80048ac <SysTick_Config+0x44>)
 800489c:	2207      	movs	r2, #7
 800489e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	0018      	movs	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b002      	add	sp, #8
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	e000e010 	.word	0xe000e010

080048b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	210f      	movs	r1, #15
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	1c02      	adds	r2, r0, #0
 80048c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	187b      	adds	r3, r7, r1
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b25b      	sxtb	r3, r3
 80048ca:	0011      	movs	r1, r2
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7ff ff5d 	bl	800478c <__NVIC_SetPriority>
}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	0002      	movs	r2, r0
 80048e2:	1dfb      	adds	r3, r7, #7
 80048e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048e6:	1dfb      	adds	r3, r7, #7
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7ff ff33 	bl	8004758 <__NVIC_EnableIRQ>
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b002      	add	sp, #8
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f7ff ffaf 	bl	8004868 <SysTick_Config>
 800490a:	0003      	movs	r3, r0
}
 800490c:	0018      	movs	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	b002      	add	sp, #8
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e015      	b.n	8004952 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	791b      	ldrb	r3, [r3, #4]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fe fce7 	bl	800330c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b002      	add	sp, #8
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	b002      	add	sp, #8
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	795b      	ldrb	r3, [r3, #5]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_DAC_ConfigChannel+0x20>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e035      	b.n	8004a18 <HAL_DAC_ConfigChannel+0x8c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_DAC_ConfigChannel+0x94>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	409a      	lsls	r2, r3
 80049c6:	0013      	movs	r3, r2
 80049c8:	43da      	mvns	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	4013      	ands	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	409a      	lsls	r2, r3
 80049e2:	0013      	movs	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	21c0      	movs	r1, #192	; 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4099      	lsls	r1, r3
 80049fe:	000b      	movs	r3, r1
 8004a00:	43d9      	mvns	r1, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	400a      	ands	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b006      	add	sp, #24
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	00000ffe 	.word	0x00000ffe

08004a24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	795b      	ldrb	r3, [r3, #5]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_DAC_Start_DMA+0x1e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e055      	b.n	8004aee <HAL_DAC_Start_DMA+0xca>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <HAL_DAC_Start_DMA+0xd4>)
 8004a54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a28      	ldr	r2, [pc, #160]	; (8004afc <HAL_DAC_Start_DMA+0xd8>)
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4a27      	ldr	r2, [pc, #156]	; (8004b00 <HAL_DAC_Start_DMA+0xdc>)
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	0149      	lsls	r1, r1, #5
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
     
  /* Case of use of channel 1 */
  switch(Alignment)
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d013      	beq.n	8004aa6 <HAL_DAC_Start_DMA+0x82>
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d815      	bhi.n	8004ab0 <HAL_DAC_Start_DMA+0x8c>
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_DAC_Start_DMA+0x6e>
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d005      	beq.n	8004a9c <HAL_DAC_Start_DMA+0x78>
    case DAC_ALIGN_8B_R:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
      break;
    default:
      break;
 8004a90:	e00e      	b.n	8004ab0 <HAL_DAC_Start_DMA+0x8c>
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3308      	adds	r3, #8
 8004a98:	617b      	str	r3, [r7, #20]
      break;
 8004a9a:	e00a      	b.n	8004ab2 <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	617b      	str	r3, [r7, #20]
      break;
 8004aa4:	e005      	b.n	8004ab2 <HAL_DAC_Start_DMA+0x8e>
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3310      	adds	r3, #16
 8004aac:	617b      	str	r3, [r7, #20]
      break;
 8004aae:	e000      	b.n	8004ab2 <HAL_DAC_Start_DMA+0x8e>
      break;
 8004ab0:	46c0      	nop			; (mov r8, r8)
  }
  UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
  
  /* Enable the DMA Stream */
  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2180      	movs	r1, #128	; 0x80
 8004abe:	0189      	lsls	r1, r1, #6
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6898      	ldr	r0, [r3, #8]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	f000 f921 	bl	8004d14 <HAL_DMA_Start_IT>
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	409a      	lsls	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b006      	add	sp, #24
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	08004bb1 	.word	0x08004bb1
 8004afc:	08004bd5 	.word	0x08004bd5
 8004b00:	08004bf3 	.word	0x08004bf3

08004b04 <HAL_DAC_Stop_DMA>:
  *          This parameter can be one of the following values:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	200f      	movs	r0, #15
 8004b10:	183b      	adds	r3, r7, r0
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_DMAEN1 << Channel));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	0159      	lsls	r1, r3, #5
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4099      	lsls	r1, r3
 8004b24:	000b      	movs	r3, r1
 8004b26:	43d9      	mvns	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripharal */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4099      	lsls	r1, r3
 8004b3c:	000b      	movs	r3, r1
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	400a      	ands	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Channel */
  status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	0005      	movs	r5, r0
 8004b4e:	183c      	adds	r4, r7, r0
 8004b50:	0018      	movs	r0, r3
 8004b52:	f000 f945 	bl	8004de0 <HAL_DMA_Abort>
 8004b56:	0003      	movs	r3, r0
 8004b58:	7023      	strb	r3, [r4, #0]

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8004b5a:	197b      	adds	r3, r7, r5
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2204      	movs	r2, #4
 8004b66:	711a      	strb	r2, [r3, #4]
 8004b68:	e002      	b.n	8004b70 <HAL_DAC_Stop_DMA+0x6c>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004b70:	230f      	movs	r3, #15
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	781b      	ldrb	r3, [r3, #0]
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b004      	add	sp, #16
 8004b7c:	bdb0      	pop	{r4, r5, r7, pc}

08004b7e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	617b      	str	r3, [r7, #20]
  tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	18d3      	adds	r3, r2, r3
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b006      	add	sp, #24
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7ff feca 	bl	800495a <HAL_DAC_ConvCpltCallbackCh1>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	711a      	strb	r2, [r3, #4]
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b004      	add	sp, #16
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff fec0 	bl	800496a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2204      	movs	r2, #4
 8004c06:	431a      	orrs	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	60da      	str	r2, [r3, #12]

  HAL_DAC_ErrorCallbackCh1(hdac);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7ff feb3 	bl	800497a <HAL_DAC_ErrorCallbackCh1>

  hdac->State= HAL_DAC_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	711a      	strb	r2, [r3, #4]
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e061      	b.n	8004cfa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a32      	ldr	r2, [pc, #200]	; (8004d04 <HAL_DMA_Init+0xe0>)
 8004c3c:	4694      	mov	ip, r2
 8004c3e:	4463      	add	r3, ip
 8004c40:	2114      	movs	r1, #20
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7fb fa7c 	bl	8000140 <__udivsi3>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	009a      	lsls	r2, r3, #2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a2d      	ldr	r2, [pc, #180]	; (8004d08 <HAL_DMA_Init+0xe4>)
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2225      	movs	r2, #37	; 0x25
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <HAL_DMA_Init+0xe8>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	01db      	lsls	r3, r3, #7
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d018      	beq.n	8004ce2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004cb0:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_DMA_Init+0xec>)
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	211c      	movs	r1, #28
 8004cba:	400b      	ands	r3, r1
 8004cbc:	210f      	movs	r1, #15
 8004cbe:	4099      	lsls	r1, r3
 8004cc0:	000b      	movs	r3, r1
 8004cc2:	43d9      	mvns	r1, r3
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_DMA_Init+0xec>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HAL_DMA_Init+0xec>)
 8004ccc:	6819      	ldr	r1, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	201c      	movs	r0, #28
 8004cd8:	4003      	ands	r3, r0
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <HAL_DMA_Init+0xec>)
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2225      	movs	r2, #37	; 0x25
 8004cec:	2101      	movs	r1, #1
 8004cee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2224      	movs	r2, #36	; 0x24
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	bffdfff8 	.word	0xbffdfff8
 8004d08:	40020000 	.word	0x40020000
 8004d0c:	ffff800f 	.word	0xffff800f
 8004d10:	400200a8 	.word	0x400200a8

08004d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2317      	movs	r3, #23
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2224      	movs	r2, #36	; 0x24
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_DMA_Start_IT+0x24>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e04f      	b.n	8004dd8 <HAL_DMA_Start_IT+0xc4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2224      	movs	r2, #36	; 0x24
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2225      	movs	r2, #37	; 0x25
 8004d44:	5c9b      	ldrb	r3, [r3, r2]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d13a      	bne.n	8004dc2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2225      	movs	r2, #37	; 0x25
 8004d50:	2102      	movs	r1, #2
 8004d52:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2101      	movs	r1, #1
 8004d66:	438a      	bics	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f923 	bl	8004fbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	210e      	movs	r1, #14
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e00f      	b.n	8004db0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	210a      	movs	r1, #10
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e007      	b.n	8004dd2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2224      	movs	r2, #36	; 0x24
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004dca:	2317      	movs	r3, #23
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2202      	movs	r2, #2
 8004dd0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004dd2:	2317      	movs	r3, #23
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b006      	add	sp, #24
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	230f      	movs	r3, #15
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2225      	movs	r2, #37	; 0x25
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d008      	beq.n	8004e0e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2224      	movs	r2, #36	; 0x24
 8004e06:	2100      	movs	r1, #0
 8004e08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e024      	b.n	8004e58 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	210e      	movs	r1, #14
 8004e1a:	438a      	bics	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	438a      	bics	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	221c      	movs	r2, #28
 8004e34:	401a      	ands	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4091      	lsls	r1, r2
 8004e3e:	000a      	movs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2225      	movs	r2, #37	; 0x25
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2224      	movs	r2, #36	; 0x24
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5499      	strb	r1, [r3, r2]

    return status;
 8004e52:	230f      	movs	r3, #15
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b004      	add	sp, #16
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7c:	221c      	movs	r2, #28
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2204      	movs	r2, #4
 8004e82:	409a      	lsls	r2, r3
 8004e84:	0013      	movs	r3, r2
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d026      	beq.n	8004eda <HAL_DMA_IRQHandler+0x7a>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	4013      	ands	r3, r2
 8004e92:	d022      	beq.n	8004eda <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d107      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2104      	movs	r1, #4
 8004eac:	438a      	bics	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	221c      	movs	r2, #28
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2104      	movs	r1, #4
 8004ebe:	4091      	lsls	r1, r2
 8004ec0:	000a      	movs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d100      	bne.n	8004ece <HAL_DMA_IRQHandler+0x6e>
 8004ecc:	e071      	b.n	8004fb2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004ed8:	e06b      	b.n	8004fb2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	221c      	movs	r2, #28
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	d02d      	beq.n	8004f4a <HAL_DMA_IRQHandler+0xea>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d029      	beq.n	8004f4a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2220      	movs	r2, #32
 8004efe:	4013      	ands	r3, r2
 8004f00:	d10b      	bne.n	8004f1a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	210a      	movs	r1, #10
 8004f0e:	438a      	bics	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2225      	movs	r2, #37	; 0x25
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	221c      	movs	r2, #28
 8004f20:	401a      	ands	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2102      	movs	r1, #2
 8004f28:	4091      	lsls	r1, r2
 8004f2a:	000a      	movs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2224      	movs	r2, #36	; 0x24
 8004f32:	2100      	movs	r1, #0
 8004f34:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d039      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	0010      	movs	r0, r2
 8004f46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f48:	e033      	b.n	8004fb2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	221c      	movs	r2, #28
 8004f50:	4013      	ands	r3, r2
 8004f52:	2208      	movs	r2, #8
 8004f54:	409a      	lsls	r2, r3
 8004f56:	0013      	movs	r3, r2
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d02a      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x154>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2208      	movs	r2, #8
 8004f62:	4013      	ands	r3, r2
 8004f64:	d026      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	210e      	movs	r1, #14
 8004f72:	438a      	bics	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	221c      	movs	r2, #28
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	2101      	movs	r1, #1
 8004f84:	4091      	lsls	r1, r2
 8004f86:	000a      	movs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2225      	movs	r2, #37	; 0x25
 8004f94:	2101      	movs	r1, #1
 8004f96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	0010      	movs	r0, r2
 8004fb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	46c0      	nop			; (mov r8, r8)
}
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b004      	add	sp, #16
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	221c      	movs	r2, #28
 8004fd0:	401a      	ands	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	4091      	lsls	r1, r2
 8004fda:	000a      	movs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d108      	bne.n	8005000 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ffe:	e007      	b.n	8005010 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	60da      	str	r2, [r3, #12]
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b004      	add	sp, #16
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800502e:	e14f      	b.n	80052d0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4091      	lsls	r1, r2
 800503a:	000a      	movs	r2, r1
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d100      	bne.n	8005048 <HAL_GPIO_Init+0x30>
 8005046:	e140      	b.n	80052ca <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d00b      	beq.n	8005068 <HAL_GPIO_Init+0x50>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d007      	beq.n	8005068 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800505c:	2b11      	cmp	r3, #17
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b12      	cmp	r3, #18
 8005066:	d130      	bne.n	80050ca <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	2203      	movs	r2, #3
 8005074:	409a      	lsls	r2, r3
 8005076:	0013      	movs	r3, r2
 8005078:	43da      	mvns	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4013      	ands	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	409a      	lsls	r2, r3
 800508a:	0013      	movs	r3, r2
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800509e:	2201      	movs	r2, #1
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	409a      	lsls	r2, r3
 80050a4:	0013      	movs	r3, r2
 80050a6:	43da      	mvns	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	2201      	movs	r2, #1
 80050b6:	401a      	ands	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	409a      	lsls	r2, r3
 80050bc:	0013      	movs	r3, r2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	2203      	movs	r2, #3
 80050d6:	409a      	lsls	r2, r3
 80050d8:	0013      	movs	r3, r2
 80050da:	43da      	mvns	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	0013      	movs	r3, r2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0xf2>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b12      	cmp	r3, #18
 8005108:	d123      	bne.n	8005152 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	08da      	lsrs	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	0092      	lsls	r2, r2, #2
 8005114:	58d3      	ldr	r3, [r2, r3]
 8005116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2207      	movs	r2, #7
 800511c:	4013      	ands	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	220f      	movs	r2, #15
 8005122:	409a      	lsls	r2, r3
 8005124:	0013      	movs	r3, r2
 8005126:	43da      	mvns	r2, r3
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2107      	movs	r1, #7
 8005136:	400b      	ands	r3, r1
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	409a      	lsls	r2, r3
 800513c:	0013      	movs	r3, r2
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	08da      	lsrs	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3208      	adds	r2, #8
 800514c:	0092      	lsls	r2, r2, #2
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	409a      	lsls	r2, r3
 8005160:	0013      	movs	r3, r2
 8005162:	43da      	mvns	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4013      	ands	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2203      	movs	r2, #3
 8005170:	401a      	ands	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	0013      	movs	r3, r2
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	055b      	lsls	r3, r3, #21
 800518e:	4013      	ands	r3, r2
 8005190:	d100      	bne.n	8005194 <HAL_GPIO_Init+0x17c>
 8005192:	e09a      	b.n	80052ca <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005194:	4b54      	ldr	r3, [pc, #336]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_GPIO_Init+0x2d0>)
 800519a:	2101      	movs	r1, #1
 800519c:	430a      	orrs	r2, r1
 800519e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80051a0:	4a52      	ldr	r2, [pc, #328]	; (80052ec <HAL_GPIO_Init+0x2d4>)
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	089b      	lsrs	r3, r3, #2
 80051a6:	3302      	adds	r3, #2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	589b      	ldr	r3, [r3, r2]
 80051ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2203      	movs	r2, #3
 80051b2:	4013      	ands	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	220f      	movs	r2, #15
 80051b8:	409a      	lsls	r2, r3
 80051ba:	0013      	movs	r3, r2
 80051bc:	43da      	mvns	r2, r3
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4013      	ands	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	23a0      	movs	r3, #160	; 0xa0
 80051c8:	05db      	lsls	r3, r3, #23
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d019      	beq.n	8005202 <HAL_GPIO_Init+0x1ea>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a47      	ldr	r2, [pc, #284]	; (80052f0 <HAL_GPIO_Init+0x2d8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_GPIO_Init+0x1e6>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a46      	ldr	r2, [pc, #280]	; (80052f4 <HAL_GPIO_Init+0x2dc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00d      	beq.n	80051fa <HAL_GPIO_Init+0x1e2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a45      	ldr	r2, [pc, #276]	; (80052f8 <HAL_GPIO_Init+0x2e0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <HAL_GPIO_Init+0x1de>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a44      	ldr	r2, [pc, #272]	; (80052fc <HAL_GPIO_Init+0x2e4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d101      	bne.n	80051f2 <HAL_GPIO_Init+0x1da>
 80051ee:	2305      	movs	r3, #5
 80051f0:	e008      	b.n	8005204 <HAL_GPIO_Init+0x1ec>
 80051f2:	2306      	movs	r3, #6
 80051f4:	e006      	b.n	8005204 <HAL_GPIO_Init+0x1ec>
 80051f6:	2303      	movs	r3, #3
 80051f8:	e004      	b.n	8005204 <HAL_GPIO_Init+0x1ec>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e002      	b.n	8005204 <HAL_GPIO_Init+0x1ec>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_GPIO_Init+0x1ec>
 8005202:	2300      	movs	r3, #0
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	2103      	movs	r1, #3
 8005208:	400a      	ands	r2, r1
 800520a:	0092      	lsls	r2, r2, #2
 800520c:	4093      	lsls	r3, r2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005214:	4935      	ldr	r1, [pc, #212]	; (80052ec <HAL_GPIO_Init+0x2d4>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	3302      	adds	r3, #2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005222:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	43da      	mvns	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	025b      	lsls	r3, r3, #9
 800523a:	4013      	ands	r3, r2
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005246:	4b2e      	ldr	r3, [pc, #184]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800524c:	4b2c      	ldr	r3, [pc, #176]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	43da      	mvns	r2, r3
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4013      	ands	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	4013      	ands	r3, r2
 8005266:	d003      	beq.n	8005270 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005270:	4b23      	ldr	r3, [pc, #140]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005276:	4b22      	ldr	r3, [pc, #136]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	43da      	mvns	r2, r3
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4013      	ands	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	035b      	lsls	r3, r3, #13
 800528e:	4013      	ands	r3, r2
 8005290:	d003      	beq.n	800529a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800529a:	4b19      	ldr	r3, [pc, #100]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	43da      	mvns	r2, r3
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	2380      	movs	r3, #128	; 0x80
 80052b6:	039b      	lsls	r3, r3, #14
 80052b8:	4013      	ands	r3, r2
 80052ba:	d003      	beq.n	80052c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052c4:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	3301      	adds	r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	40da      	lsrs	r2, r3
 80052d8:	1e13      	subs	r3, r2, #0
 80052da:	d000      	beq.n	80052de <HAL_GPIO_Init+0x2c6>
 80052dc:	e6a8      	b.n	8005030 <HAL_GPIO_Init+0x18>
  }
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	46c0      	nop			; (mov r8, r8)
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b006      	add	sp, #24
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40010000 	.word	0x40010000
 80052f0:	50000400 	.word	0x50000400
 80052f4:	50000800 	.word	0x50000800
 80052f8:	50000c00 	.word	0x50000c00
 80052fc:	50001c00 	.word	0x50001c00
 8005300:	40010400 	.word	0x40010400

08005304 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	0008      	movs	r0, r1
 800530e:	0011      	movs	r1, r2
 8005310:	1cbb      	adds	r3, r7, #2
 8005312:	1c02      	adds	r2, r0, #0
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	1c7b      	adds	r3, r7, #1
 8005318:	1c0a      	adds	r2, r1, #0
 800531a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800531c:	1c7b      	adds	r3, r7, #1
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005324:	1cbb      	adds	r3, r7, #2
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800532c:	e003      	b.n	8005336 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800532e:	1cbb      	adds	r3, r7, #2
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e082      	b.n	8005458 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2241      	movs	r2, #65	; 0x41
 8005356:	5c9b      	ldrb	r3, [r3, r2]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2240      	movs	r2, #64	; 0x40
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0018      	movs	r0, r3
 800536a:	f7fe f83b 	bl	80033e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2241      	movs	r2, #65	; 0x41
 8005372:	2124      	movs	r1, #36	; 0x24
 8005374:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2101      	movs	r1, #1
 8005382:	438a      	bics	r2, r1
 8005384:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4934      	ldr	r1, [pc, #208]	; (8005460 <HAL_I2C_Init+0x120>)
 8005390:	400a      	ands	r2, r1
 8005392:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4931      	ldr	r1, [pc, #196]	; (8005464 <HAL_I2C_Init+0x124>)
 80053a0:	400a      	ands	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d108      	bne.n	80053be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2180      	movs	r1, #128	; 0x80
 80053b6:	0209      	lsls	r1, r1, #8
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	e007      	b.n	80053ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2184      	movs	r1, #132	; 0x84
 80053c8:	0209      	lsls	r1, r1, #8
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d104      	bne.n	80053e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2280      	movs	r2, #128	; 0x80
 80053dc:	0112      	lsls	r2, r2, #4
 80053de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	491f      	ldr	r1, [pc, #124]	; (8005468 <HAL_I2C_Init+0x128>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	491a      	ldr	r1, [pc, #104]	; (8005464 <HAL_I2C_Init+0x124>)
 80053fc:	400a      	ands	r2, r1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	431a      	orrs	r2, r3
 800540a:	0011      	movs	r1, r2
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	021a      	lsls	r2, r3, #8
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69d9      	ldr	r1, [r3, #28]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1a      	ldr	r2, [r3, #32]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2101      	movs	r1, #1
 8005436:	430a      	orrs	r2, r1
 8005438:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2241      	movs	r2, #65	; 0x41
 8005444:	2120      	movs	r1, #32
 8005446:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2242      	movs	r2, #66	; 0x42
 8005452:	2100      	movs	r1, #0
 8005454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}
 8005460:	f0ffffff 	.word	0xf0ffffff
 8005464:	ffff7fff 	.word	0xffff7fff
 8005468:	02008000 	.word	0x02008000

0800546c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2241      	movs	r2, #65	; 0x41
 800547a:	5c9b      	ldrb	r3, [r3, r2]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b20      	cmp	r3, #32
 8005480:	d138      	bne.n	80054f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2240      	movs	r2, #64	; 0x40
 8005486:	5c9b      	ldrb	r3, [r3, r2]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800548c:	2302      	movs	r3, #2
 800548e:	e032      	b.n	80054f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2240      	movs	r2, #64	; 0x40
 8005494:	2101      	movs	r1, #1
 8005496:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2241      	movs	r2, #65	; 0x41
 800549c:	2124      	movs	r1, #36	; 0x24
 800549e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2101      	movs	r1, #1
 80054ac:	438a      	bics	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4911      	ldr	r1, [pc, #68]	; (8005500 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80054bc:	400a      	ands	r2, r1
 80054be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2101      	movs	r1, #1
 80054dc:	430a      	orrs	r2, r1
 80054de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2241      	movs	r2, #65	; 0x41
 80054e4:	2120      	movs	r1, #32
 80054e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	2100      	movs	r1, #0
 80054ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b002      	add	sp, #8
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	ffffefff 	.word	0xffffefff

08005504 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2241      	movs	r2, #65	; 0x41
 8005512:	5c9b      	ldrb	r3, [r3, r2]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	d139      	bne.n	800558e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2240      	movs	r2, #64	; 0x40
 800551e:	5c9b      	ldrb	r3, [r3, r2]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005524:	2302      	movs	r3, #2
 8005526:	e033      	b.n	8005590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	2101      	movs	r1, #1
 800552e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2241      	movs	r2, #65	; 0x41
 8005534:	2124      	movs	r1, #36	; 0x24
 8005536:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2101      	movs	r1, #1
 8005544:	438a      	bics	r2, r1
 8005546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4a11      	ldr	r2, [pc, #68]	; (8005598 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005554:	4013      	ands	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2101      	movs	r1, #1
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2241      	movs	r2, #65	; 0x41
 800557e:	2120      	movs	r1, #32
 8005580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2240      	movs	r2, #64	; 0x40
 8005586:	2100      	movs	r1, #0
 8005588:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	e000      	b.n	8005590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
  }
}
 8005590:	0018      	movs	r0, r3
 8005592:	46bd      	mov	sp, r7
 8005594:	b004      	add	sp, #16
 8005596:	bd80      	pop	{r7, pc}
 8005598:	fffff0ff 	.word	0xfffff0ff

0800559c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800559c:	b5b0      	push	{r4, r5, r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f000 fbaf 	bl	8005d0e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b0:	4bcf      	ldr	r3, [pc, #828]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	220c      	movs	r2, #12
 80055b6:	4013      	ands	r3, r2
 80055b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ba:	4bcd      	ldr	r3, [pc, #820]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	025b      	lsls	r3, r3, #9
 80055c2:	4013      	ands	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	4013      	ands	r3, r2
 80055ce:	d100      	bne.n	80055d2 <HAL_RCC_OscConfig+0x36>
 80055d0:	e07e      	b.n	80056d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d007      	beq.n	80055e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d112      	bne.n	8005604 <HAL_RCC_OscConfig+0x68>
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	025b      	lsls	r3, r3, #9
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d10d      	bne.n	8005604 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e8:	4bc1      	ldr	r3, [pc, #772]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	029b      	lsls	r3, r3, #10
 80055f0:	4013      	ands	r3, r2
 80055f2:	d100      	bne.n	80055f6 <HAL_RCC_OscConfig+0x5a>
 80055f4:	e06b      	b.n	80056ce <HAL_RCC_OscConfig+0x132>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d167      	bne.n	80056ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f000 fb85 	bl	8005d0e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	2380      	movs	r3, #128	; 0x80
 800560a:	025b      	lsls	r3, r3, #9
 800560c:	429a      	cmp	r2, r3
 800560e:	d107      	bne.n	8005620 <HAL_RCC_OscConfig+0x84>
 8005610:	4bb7      	ldr	r3, [pc, #732]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4bb6      	ldr	r3, [pc, #728]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	0249      	lsls	r1, r1, #9
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e027      	b.n	8005670 <HAL_RCC_OscConfig+0xd4>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	23a0      	movs	r3, #160	; 0xa0
 8005626:	02db      	lsls	r3, r3, #11
 8005628:	429a      	cmp	r2, r3
 800562a:	d10e      	bne.n	800564a <HAL_RCC_OscConfig+0xae>
 800562c:	4bb0      	ldr	r3, [pc, #704]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4baf      	ldr	r3, [pc, #700]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	02c9      	lsls	r1, r1, #11
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	4bad      	ldr	r3, [pc, #692]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4bac      	ldr	r3, [pc, #688]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	0249      	lsls	r1, r1, #9
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e012      	b.n	8005670 <HAL_RCC_OscConfig+0xd4>
 800564a:	4ba9      	ldr	r3, [pc, #676]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4ba8      	ldr	r3, [pc, #672]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005650:	49a8      	ldr	r1, [pc, #672]	; (80058f4 <HAL_RCC_OscConfig+0x358>)
 8005652:	400a      	ands	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	4ba6      	ldr	r3, [pc, #664]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	2380      	movs	r3, #128	; 0x80
 800565c:	025b      	lsls	r3, r3, #9
 800565e:	4013      	ands	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4ba2      	ldr	r3, [pc, #648]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4ba1      	ldr	r3, [pc, #644]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800566a:	49a3      	ldr	r1, [pc, #652]	; (80058f8 <HAL_RCC_OscConfig+0x35c>)
 800566c:	400a      	ands	r2, r1
 800566e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005678:	f7fe fab6 	bl	8003be8 <HAL_GetTick>
 800567c:	0003      	movs	r3, r0
 800567e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005680:	e009      	b.n	8005696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005682:	f7fe fab1 	bl	8003be8 <HAL_GetTick>
 8005686:	0002      	movs	r2, r0
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b64      	cmp	r3, #100	; 0x64
 800568e:	d902      	bls.n	8005696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	f000 fb3c 	bl	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005696:	4b96      	ldr	r3, [pc, #600]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	4013      	ands	r3, r2
 80056a0:	d0ef      	beq.n	8005682 <HAL_RCC_OscConfig+0xe6>
 80056a2:	e015      	b.n	80056d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fe faa0 	bl	8003be8 <HAL_GetTick>
 80056a8:	0003      	movs	r3, r0
 80056aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ae:	f7fe fa9b 	bl	8003be8 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b64      	cmp	r3, #100	; 0x64
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e326      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056c0:	4b8b      	ldr	r3, [pc, #556]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	2380      	movs	r3, #128	; 0x80
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	4013      	ands	r3, r2
 80056ca:	d1f0      	bne.n	80056ae <HAL_RCC_OscConfig+0x112>
 80056cc:	e000      	b.n	80056d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2202      	movs	r2, #2
 80056d6:	4013      	ands	r3, r2
 80056d8:	d100      	bne.n	80056dc <HAL_RCC_OscConfig+0x140>
 80056da:	e08b      	b.n	80057f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d005      	beq.n	80056f4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d13e      	bne.n	800576c <HAL_RCC_OscConfig+0x1d0>
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d13b      	bne.n	800576c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80056f4:	4b7e      	ldr	r3, [pc, #504]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2204      	movs	r2, #4
 80056fa:	4013      	ands	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_RCC_OscConfig+0x16c>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e302      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005708:	4b79      	ldr	r3, [pc, #484]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4a7b      	ldr	r2, [pc, #492]	; (80058fc <HAL_RCC_OscConfig+0x360>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	4b75      	ldr	r3, [pc, #468]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800571e:	4b74      	ldr	r3, [pc, #464]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2209      	movs	r2, #9
 8005724:	4393      	bics	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	4b71      	ldr	r3, [pc, #452]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005730:	f000 fc40 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8005734:	0001      	movs	r1, r0
 8005736:	4b6e      	ldr	r3, [pc, #440]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	220f      	movs	r2, #15
 800573e:	4013      	ands	r3, r2
 8005740:	4a6f      	ldr	r2, [pc, #444]	; (8005900 <HAL_RCC_OscConfig+0x364>)
 8005742:	5cd3      	ldrb	r3, [r2, r3]
 8005744:	000a      	movs	r2, r1
 8005746:	40da      	lsrs	r2, r3
 8005748:	4b6e      	ldr	r3, [pc, #440]	; (8005904 <HAL_RCC_OscConfig+0x368>)
 800574a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800574c:	4b6e      	ldr	r3, [pc, #440]	; (8005908 <HAL_RCC_OscConfig+0x36c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2513      	movs	r5, #19
 8005752:	197c      	adds	r4, r7, r5
 8005754:	0018      	movs	r0, r3
 8005756:	f7fe fa01 	bl	8003b5c <HAL_InitTick>
 800575a:	0003      	movs	r3, r0
 800575c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800575e:	197b      	adds	r3, r7, r5
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d046      	beq.n	80057f4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005766:	197b      	adds	r3, r7, r5
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	e2d0      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d027      	beq.n	80057c2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005772:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2209      	movs	r2, #9
 8005778:	4393      	bics	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	4b5c      	ldr	r3, [pc, #368]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fe fa30 	bl	8003be8 <HAL_GetTick>
 8005788:	0003      	movs	r3, r0
 800578a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800578e:	f7fe fa2b 	bl	8003be8 <HAL_GetTick>
 8005792:	0002      	movs	r2, r0
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e2b6      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057a0:	4b53      	ldr	r3, [pc, #332]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2204      	movs	r2, #4
 80057a6:	4013      	ands	r3, r2
 80057a8:	d0f1      	beq.n	800578e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	4b51      	ldr	r3, [pc, #324]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4a53      	ldr	r2, [pc, #332]	; (80058fc <HAL_RCC_OscConfig+0x360>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	021a      	lsls	r2, r3, #8
 80057ba:	4b4d      	ldr	r3, [pc, #308]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	e018      	b.n	80057f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c2:	4b4b      	ldr	r3, [pc, #300]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b4a      	ldr	r3, [pc, #296]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80057c8:	2101      	movs	r1, #1
 80057ca:	438a      	bics	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fe fa0b 	bl	8003be8 <HAL_GetTick>
 80057d2:	0003      	movs	r3, r0
 80057d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d8:	f7fe fa06 	bl	8003be8 <HAL_GetTick>
 80057dc:	0002      	movs	r2, r0
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e291      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2204      	movs	r2, #4
 80057f0:	4013      	ands	r3, r2
 80057f2:	d1f1      	bne.n	80057d8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2210      	movs	r2, #16
 80057fa:	4013      	ands	r3, r2
 80057fc:	d100      	bne.n	8005800 <HAL_RCC_OscConfig+0x264>
 80057fe:	e0a1      	b.n	8005944 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d140      	bne.n	8005888 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005806:	4b3a      	ldr	r3, [pc, #232]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4013      	ands	r3, r2
 8005810:	d005      	beq.n	800581e <HAL_RCC_OscConfig+0x282>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e277      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581e:	4b34      	ldr	r3, [pc, #208]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4a3a      	ldr	r2, [pc, #232]	; (800590c <HAL_RCC_OscConfig+0x370>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800582c:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	0a19      	lsrs	r1, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	061a      	lsls	r2, r3, #24
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	0b5b      	lsrs	r3, r3, #13
 800584c:	3301      	adds	r3, #1
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	0212      	lsls	r2, r2, #8
 8005852:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005854:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	210f      	movs	r1, #15
 800585c:	400b      	ands	r3, r1
 800585e:	4928      	ldr	r1, [pc, #160]	; (8005900 <HAL_RCC_OscConfig+0x364>)
 8005860:	5ccb      	ldrb	r3, [r1, r3]
 8005862:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005864:	4b27      	ldr	r3, [pc, #156]	; (8005904 <HAL_RCC_OscConfig+0x368>)
 8005866:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005868:	4b27      	ldr	r3, [pc, #156]	; (8005908 <HAL_RCC_OscConfig+0x36c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2513      	movs	r5, #19
 800586e:	197c      	adds	r4, r7, r5
 8005870:	0018      	movs	r0, r3
 8005872:	f7fe f973 	bl	8003b5c <HAL_InitTick>
 8005876:	0003      	movs	r3, r0
 8005878:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800587a:	197b      	adds	r3, r7, r5
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d060      	beq.n	8005944 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005882:	197b      	adds	r3, r7, r5
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	e242      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d03f      	beq.n	8005910 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005890:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	0049      	lsls	r1, r1, #1
 800589a:	430a      	orrs	r2, r1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fe f9a3 	bl	8003be8 <HAL_GetTick>
 80058a2:	0003      	movs	r3, r0
 80058a4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058a8:	f7fe f99e 	bl	8003be8 <HAL_GetTick>
 80058ac:	0002      	movs	r2, r0
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e229      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058ba:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	2380      	movs	r3, #128	; 0x80
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4013      	ands	r3, r2
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a10      	ldr	r2, [pc, #64]	; (800590c <HAL_RCC_OscConfig+0x370>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	0a19      	lsrs	r1, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	061a      	lsls	r2, r3, #24
 80058e8:	4b01      	ldr	r3, [pc, #4]	; (80058f0 <HAL_RCC_OscConfig+0x354>)
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	e029      	b.n	8005944 <HAL_RCC_OscConfig+0x3a8>
 80058f0:	40021000 	.word	0x40021000
 80058f4:	fffeffff 	.word	0xfffeffff
 80058f8:	fffbffff 	.word	0xfffbffff
 80058fc:	ffffe0ff 	.word	0xffffe0ff
 8005900:	0800b290 	.word	0x0800b290
 8005904:	20000000 	.word	0x20000000
 8005908:	20000004 	.word	0x20000004
 800590c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005910:	4bbd      	ldr	r3, [pc, #756]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4bbc      	ldr	r3, [pc, #752]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005916:	49bd      	ldr	r1, [pc, #756]	; (8005c0c <HAL_RCC_OscConfig+0x670>)
 8005918:	400a      	ands	r2, r1
 800591a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fe f964 	bl	8003be8 <HAL_GetTick>
 8005920:	0003      	movs	r3, r0
 8005922:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005926:	f7fe f95f 	bl	8003be8 <HAL_GetTick>
 800592a:	0002      	movs	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e1ea      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005938:	4bb3      	ldr	r3, [pc, #716]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4013      	ands	r3, r2
 8005942:	d1f0      	bne.n	8005926 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2208      	movs	r2, #8
 800594a:	4013      	ands	r3, r2
 800594c:	d036      	beq.n	80059bc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d019      	beq.n	800598a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005956:	4bac      	ldr	r3, [pc, #688]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800595a:	4bab      	ldr	r3, [pc, #684]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 800595c:	2101      	movs	r1, #1
 800595e:	430a      	orrs	r2, r1
 8005960:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005962:	f7fe f941 	bl	8003be8 <HAL_GetTick>
 8005966:	0003      	movs	r3, r0
 8005968:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800596c:	f7fe f93c 	bl	8003be8 <HAL_GetTick>
 8005970:	0002      	movs	r2, r0
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e1c7      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800597e:	4ba2      	ldr	r3, [pc, #648]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005982:	2202      	movs	r2, #2
 8005984:	4013      	ands	r3, r2
 8005986:	d0f1      	beq.n	800596c <HAL_RCC_OscConfig+0x3d0>
 8005988:	e018      	b.n	80059bc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598a:	4b9f      	ldr	r3, [pc, #636]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 800598c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800598e:	4b9e      	ldr	r3, [pc, #632]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005990:	2101      	movs	r1, #1
 8005992:	438a      	bics	r2, r1
 8005994:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005996:	f7fe f927 	bl	8003be8 <HAL_GetTick>
 800599a:	0003      	movs	r3, r0
 800599c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059a0:	f7fe f922 	bl	8003be8 <HAL_GetTick>
 80059a4:	0002      	movs	r2, r0
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e1ad      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059b2:	4b95      	ldr	r3, [pc, #596]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 80059b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b6:	2202      	movs	r2, #2
 80059b8:	4013      	ands	r3, r2
 80059ba:	d1f1      	bne.n	80059a0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2204      	movs	r2, #4
 80059c2:	4013      	ands	r3, r2
 80059c4:	d100      	bne.n	80059c8 <HAL_RCC_OscConfig+0x42c>
 80059c6:	e0ae      	b.n	8005b26 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c8:	2027      	movs	r0, #39	; 0x27
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059d0:	4b8d      	ldr	r3, [pc, #564]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 80059d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	055b      	lsls	r3, r3, #21
 80059d8:	4013      	ands	r3, r2
 80059da:	d109      	bne.n	80059f0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059dc:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 80059de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e0:	4b89      	ldr	r3, [pc, #548]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	0549      	lsls	r1, r1, #21
 80059e6:	430a      	orrs	r2, r1
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80059ea:	183b      	adds	r3, r7, r0
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f0:	4b87      	ldr	r3, [pc, #540]	; (8005c10 <HAL_RCC_OscConfig+0x674>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	4013      	ands	r3, r2
 80059fa:	d11a      	bne.n	8005a32 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fc:	4b84      	ldr	r3, [pc, #528]	; (8005c10 <HAL_RCC_OscConfig+0x674>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b83      	ldr	r3, [pc, #524]	; (8005c10 <HAL_RCC_OscConfig+0x674>)
 8005a02:	2180      	movs	r1, #128	; 0x80
 8005a04:	0049      	lsls	r1, r1, #1
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a0a:	f7fe f8ed 	bl	8003be8 <HAL_GetTick>
 8005a0e:	0003      	movs	r3, r0
 8005a10:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a14:	f7fe f8e8 	bl	8003be8 <HAL_GetTick>
 8005a18:	0002      	movs	r2, r0
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e173      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a26:	4b7a      	ldr	r3, [pc, #488]	; (8005c10 <HAL_RCC_OscConfig+0x674>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	2380      	movs	r3, #128	; 0x80
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_OscConfig+0x4b2>
 8005a3e:	4b72      	ldr	r3, [pc, #456]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a42:	4b71      	ldr	r3, [pc, #452]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	0049      	lsls	r1, r1, #1
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8005a4c:	e031      	b.n	8005ab2 <HAL_RCC_OscConfig+0x516>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x4d4>
 8005a56:	4b6c      	ldr	r3, [pc, #432]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a5a:	4b6b      	ldr	r3, [pc, #428]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a5c:	496b      	ldr	r1, [pc, #428]	; (8005c0c <HAL_RCC_OscConfig+0x670>)
 8005a5e:	400a      	ands	r2, r1
 8005a60:	651a      	str	r2, [r3, #80]	; 0x50
 8005a62:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a66:	4b68      	ldr	r3, [pc, #416]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a68:	496a      	ldr	r1, [pc, #424]	; (8005c14 <HAL_RCC_OscConfig+0x678>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	651a      	str	r2, [r3, #80]	; 0x50
 8005a6e:	e020      	b.n	8005ab2 <HAL_RCC_OscConfig+0x516>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	23a0      	movs	r3, #160	; 0xa0
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10e      	bne.n	8005a9a <HAL_RCC_OscConfig+0x4fe>
 8005a7c:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a80:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	00c9      	lsls	r1, r1, #3
 8005a86:	430a      	orrs	r2, r1
 8005a88:	651a      	str	r2, [r3, #80]	; 0x50
 8005a8a:	4b5f      	ldr	r3, [pc, #380]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a8e:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	0049      	lsls	r1, r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCC_OscConfig+0x516>
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a9e:	4b5a      	ldr	r3, [pc, #360]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005aa0:	495a      	ldr	r1, [pc, #360]	; (8005c0c <HAL_RCC_OscConfig+0x670>)
 8005aa2:	400a      	ands	r2, r1
 8005aa4:	651a      	str	r2, [r3, #80]	; 0x50
 8005aa6:	4b58      	ldr	r3, [pc, #352]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aaa:	4b57      	ldr	r3, [pc, #348]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005aac:	4959      	ldr	r1, [pc, #356]	; (8005c14 <HAL_RCC_OscConfig+0x678>)
 8005aae:	400a      	ands	r2, r1
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aba:	f7fe f895 	bl	8003be8 <HAL_GetTick>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ac2:	e009      	b.n	8005ad8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac4:	f7fe f890 	bl	8003be8 <HAL_GetTick>
 8005ac8:	0002      	movs	r2, r0
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	4a52      	ldr	r2, [pc, #328]	; (8005c18 <HAL_RCC_OscConfig+0x67c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e11a      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad8:	4b4b      	ldr	r3, [pc, #300]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d0ef      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x528>
 8005ae4:	e014      	b.n	8005b10 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae6:	f7fe f87f 	bl	8003be8 <HAL_GetTick>
 8005aea:	0003      	movs	r3, r0
 8005aec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005aee:	e009      	b.n	8005b04 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005af0:	f7fe f87a 	bl	8003be8 <HAL_GetTick>
 8005af4:	0002      	movs	r2, r0
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	4a47      	ldr	r2, [pc, #284]	; (8005c18 <HAL_RCC_OscConfig+0x67c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e104      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b04:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d1ef      	bne.n	8005af0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b10:	2327      	movs	r3, #39	; 0x27
 8005b12:	18fb      	adds	r3, r7, r3
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d105      	bne.n	8005b26 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b1a:	4b3b      	ldr	r3, [pc, #236]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b20:	493e      	ldr	r1, [pc, #248]	; (8005c1c <HAL_RCC_OscConfig+0x680>)
 8005b22:	400a      	ands	r2, r1
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d049      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d026      	beq.n	8005b86 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005b38:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b3e:	2101      	movs	r1, #1
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	4b30      	ldr	r3, [pc, #192]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b48:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8005b50:	4b33      	ldr	r3, [pc, #204]	; (8005c20 <HAL_RCC_OscConfig+0x684>)
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <HAL_RCC_OscConfig+0x684>)
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	0189      	lsls	r1, r1, #6
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5e:	f7fe f843 	bl	8003be8 <HAL_GetTick>
 8005b62:	0003      	movs	r3, r0
 8005b64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b68:	f7fe f83e 	bl	8003be8 <HAL_GetTick>
 8005b6c:	0002      	movs	r2, r0
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0c9      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b7a:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	4013      	ands	r3, r2
 8005b82:	d0f1      	beq.n	8005b68 <HAL_RCC_OscConfig+0x5cc>
 8005b84:	e01e      	b.n	8005bc4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	438a      	bics	r2, r1
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <HAL_RCC_OscConfig+0x684>)
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_RCC_OscConfig+0x684>)
 8005b98:	4922      	ldr	r1, [pc, #136]	; (8005c24 <HAL_RCC_OscConfig+0x688>)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7fe f823 	bl	8003be8 <HAL_GetTick>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ba8:	f7fe f81e 	bl	8003be8 <HAL_GetTick>
 8005bac:	0002      	movs	r2, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e0a9      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bba:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d1f1      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d100      	bne.n	8005bce <HAL_RCC_OscConfig+0x632>
 8005bcc:	e09e      	b.n	8005d0c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	d100      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x63a>
 8005bd4:	e077      	b.n	8005cc6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d158      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bde:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_OscConfig+0x66c>)
 8005be4:	4910      	ldr	r1, [pc, #64]	; (8005c28 <HAL_RCC_OscConfig+0x68c>)
 8005be6:	400a      	ands	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bea:	f7fd fffd 	bl	8003be8 <HAL_GetTick>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005bf2:	e01b      	b.n	8005c2c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fd fff8 	bl	8003be8 <HAL_GetTick>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d914      	bls.n	8005c2c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e083      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	fffffeff 	.word	0xfffffeff
 8005c10:	40007000 	.word	0x40007000
 8005c14:	fffffbff 	.word	0xfffffbff
 8005c18:	00001388 	.word	0x00001388
 8005c1c:	efffffff 	.word	0xefffffff
 8005c20:	40010000 	.word	0x40010000
 8005c24:	ffffdfff 	.word	0xffffdfff
 8005c28:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005c2c:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	049b      	lsls	r3, r3, #18
 8005c34:	4013      	ands	r3, r2
 8005c36:	d1dd      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c38:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <HAL_RCC_OscConfig+0x780>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	0019      	movs	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	431a      	orrs	r2, r3
 8005c52:	4b31      	ldr	r3, [pc, #196]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c54:	430a      	orrs	r2, r1
 8005c56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c58:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	0449      	lsls	r1, r1, #17
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c66:	f7fd ffbf 	bl	8003be8 <HAL_GetTick>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fd ffba 	bl	8003be8 <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e045      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005c82:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	049b      	lsls	r3, r3, #18
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x6d4>
 8005c8e:	e03d      	b.n	8005d0c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c90:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005c96:	4922      	ldr	r1, [pc, #136]	; (8005d20 <HAL_RCC_OscConfig+0x784>)
 8005c98:	400a      	ands	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fd ffa4 	bl	8003be8 <HAL_GetTick>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca6:	f7fd ff9f 	bl	8003be8 <HAL_GetTick>
 8005caa:	0002      	movs	r2, r0
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e02a      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005cb8:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	049b      	lsls	r3, r3, #18
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d1f0      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x70a>
 8005cc4:	e022      	b.n	8005d0c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e01d      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cd2:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <HAL_RCC_OscConfig+0x77c>)
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	025b      	lsls	r3, r3, #9
 8005cde:	401a      	ands	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d10f      	bne.n	8005d08 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	23f0      	movs	r3, #240	; 0xf0
 8005cec:	039b      	lsls	r3, r3, #14
 8005cee:	401a      	ands	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	23c0      	movs	r3, #192	; 0xc0
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	401a      	ands	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	0018      	movs	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b00a      	add	sp, #40	; 0x28
 8005d14:	bdb0      	pop	{r4, r5, r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	ff02ffff 	.word	0xff02ffff
 8005d20:	feffffff 	.word	0xfeffffff

08005d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d24:	b5b0      	push	{r4, r5, r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e128      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d38:	4b96      	ldr	r3, [pc, #600]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4013      	ands	r3, r2
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d91e      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b93      	ldr	r3, [pc, #588]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	4b90      	ldr	r3, [pc, #576]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d58:	f7fd ff46 	bl	8003be8 <HAL_GetTick>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d60:	e009      	b.n	8005d76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d62:	f7fd ff41 	bl	8003be8 <HAL_GetTick>
 8005d66:	0002      	movs	r2, r0
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	4a8a      	ldr	r2, [pc, #552]	; (8005f98 <HAL_RCC_ClockConfig+0x274>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e109      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	4b87      	ldr	r3, [pc, #540]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d1ee      	bne.n	8005d62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8e:	4b83      	ldr	r3, [pc, #524]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	22f0      	movs	r2, #240	; 0xf0
 8005d94:	4393      	bics	r3, r2
 8005d96:	0019      	movs	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	4b7f      	ldr	r3, [pc, #508]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2201      	movs	r2, #1
 8005da8:	4013      	ands	r3, r2
 8005daa:	d100      	bne.n	8005dae <HAL_RCC_ClockConfig+0x8a>
 8005dac:	e089      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005db6:	4b79      	ldr	r3, [pc, #484]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d120      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0e1      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d107      	bne.n	8005dde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dce:	4b73      	ldr	r3, [pc, #460]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	049b      	lsls	r3, r3, #18
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d114      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e0d5      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d106      	bne.n	8005df4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de6:	4b6d      	ldr	r3, [pc, #436]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2204      	movs	r2, #4
 8005dec:	4013      	ands	r3, r2
 8005dee:	d109      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0ca      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005df4:	4b69      	ldr	r3, [pc, #420]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d101      	bne.n	8005e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0c2      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e04:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2203      	movs	r2, #3
 8005e0a:	4393      	bics	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005e14:	430a      	orrs	r2, r1
 8005e16:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e18:	f7fd fee6 	bl	8003be8 <HAL_GetTick>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d111      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e28:	e009      	b.n	8005e3e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e2a:	f7fd fedd 	bl	8003be8 <HAL_GetTick>
 8005e2e:	0002      	movs	r2, r0
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	4a58      	ldr	r2, [pc, #352]	; (8005f98 <HAL_RCC_ClockConfig+0x274>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e0a5      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e3e:	4b57      	ldr	r3, [pc, #348]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	220c      	movs	r2, #12
 8005e44:	4013      	ands	r3, r2
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d1ef      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x106>
 8005e4a:	e03a      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d111      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e54:	e009      	b.n	8005e6a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e56:	f7fd fec7 	bl	8003be8 <HAL_GetTick>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	4a4d      	ldr	r2, [pc, #308]	; (8005f98 <HAL_RCC_ClockConfig+0x274>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e08f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e6a:	4b4c      	ldr	r3, [pc, #304]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	220c      	movs	r2, #12
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b0c      	cmp	r3, #12
 8005e74:	d1ef      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x132>
 8005e76:	e024      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d11b      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e80:	e009      	b.n	8005e96 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e82:	f7fd feb1 	bl	8003be8 <HAL_GetTick>
 8005e86:	0002      	movs	r2, r0
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	4a42      	ldr	r2, [pc, #264]	; (8005f98 <HAL_RCC_ClockConfig+0x274>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e079      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e96:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	220c      	movs	r2, #12
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d1ef      	bne.n	8005e82 <HAL_RCC_ClockConfig+0x15e>
 8005ea2:	e00e      	b.n	8005ec2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea4:	f7fd fea0 	bl	8003be8 <HAL_GetTick>
 8005ea8:	0002      	movs	r2, r0
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	4a3a      	ldr	r2, [pc, #232]	; (8005f98 <HAL_RCC_ClockConfig+0x274>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e068      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005eb8:	4b38      	ldr	r3, [pc, #224]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	220c      	movs	r2, #12
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d1f0      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec2:	4b34      	ldr	r3, [pc, #208]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4013      	ands	r3, r2
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d21e      	bcs.n	8005f0e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed0:	4b30      	ldr	r3, [pc, #192]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	4393      	bics	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	4b2e      	ldr	r3, [pc, #184]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ee2:	f7fd fe81 	bl	8003be8 <HAL_GetTick>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	e009      	b.n	8005f00 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eec:	f7fd fe7c 	bl	8003be8 <HAL_GetTick>
 8005ef0:	0002      	movs	r2, r0
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	4a28      	ldr	r2, [pc, #160]	; (8005f98 <HAL_RCC_ClockConfig+0x274>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e044      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCC_ClockConfig+0x270>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	4013      	ands	r3, r2
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d1ee      	bne.n	8005eec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2204      	movs	r2, #4
 8005f14:	4013      	ands	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4a20      	ldr	r2, [pc, #128]	; (8005fa0 <HAL_RCC_ClockConfig+0x27c>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	0019      	movs	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2208      	movs	r2, #8
 8005f32:	4013      	ands	r3, r2
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <HAL_RCC_ClockConfig+0x280>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	0019      	movs	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	00da      	lsls	r2, r3, #3
 8005f46:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f4c:	f000 f832 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8005f50:	0001      	movs	r1, r0
 8005f52:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <HAL_RCC_ClockConfig+0x278>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	091b      	lsrs	r3, r3, #4
 8005f58:	220f      	movs	r2, #15
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_RCC_ClockConfig+0x284>)
 8005f5e:	5cd3      	ldrb	r3, [r2, r3]
 8005f60:	000a      	movs	r2, r1
 8005f62:	40da      	lsrs	r2, r3
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <HAL_RCC_ClockConfig+0x288>)
 8005f66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f68:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <HAL_RCC_ClockConfig+0x28c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	250b      	movs	r5, #11
 8005f6e:	197c      	adds	r4, r7, r5
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7fd fdf3 	bl	8003b5c <HAL_InitTick>
 8005f76:	0003      	movs	r3, r0
 8005f78:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005f7a:	197b      	adds	r3, r7, r5
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005f82:	197b      	adds	r3, r7, r5
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	e000      	b.n	8005f8a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b004      	add	sp, #16
 8005f90:	bdb0      	pop	{r4, r5, r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	40022000 	.word	0x40022000
 8005f98:	00001388 	.word	0x00001388
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	fffff8ff 	.word	0xfffff8ff
 8005fa4:	ffffc7ff 	.word	0xffffc7ff
 8005fa8:	0800b290 	.word	0x0800b290
 8005fac:	20000000 	.word	0x20000000
 8005fb0:	20000004 	.word	0x20000004

08005fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fb6:	b097      	sub	sp, #92	; 0x5c
 8005fb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005fba:	4b5d      	ldr	r3, [pc, #372]	; (8006130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fc2:	230c      	movs	r3, #12
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b0c      	cmp	r3, #12
 8005fc8:	d014      	beq.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fca:	d900      	bls.n	8005fce <HAL_RCC_GetSysClockFreq+0x1a>
 8005fcc:	e09d      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x156>
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x24>
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d00b      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0x3a>
 8005fd6:	e098      	b.n	800610a <HAL_RCC_GetSysClockFreq+0x156>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005fd8:	4b55      	ldr	r3, [pc, #340]	; (8006130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2210      	movs	r2, #16
 8005fde:	4013      	ands	r3, r2
 8005fe0:	d002      	beq.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005fe2:	4b54      	ldr	r3, [pc, #336]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fe4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005fe6:	e09e      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
        sysclockfreq =  HSI_VALUE;
 8005fe8:	4b53      	ldr	r3, [pc, #332]	; (8006138 <HAL_RCC_GetSysClockFreq+0x184>)
 8005fea:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8005fec:	e09b      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fee:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_RCC_GetSysClockFreq+0x188>)
 8005ff0:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8005ff2:	e098      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff6:	0c9a      	lsrs	r2, r3, #18
 8005ff8:	230f      	movs	r3, #15
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCC_GetSysClockFreq+0x18c>)
 8005ffe:	5c9b      	ldrb	r3, [r3, r2]
 8006000:	64bb      	str	r3, [r7, #72]	; 0x48
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006004:	0d9a      	lsrs	r2, r3, #22
 8006006:	2303      	movs	r3, #3
 8006008:	4013      	ands	r3, r2
 800600a:	3301      	adds	r3, #1
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800600e:	4b48      	ldr	r3, [pc, #288]	; (8006130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	025b      	lsls	r3, r3, #9
 8006016:	4013      	ands	r3, r2
 8006018:	d03a      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800601a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601c:	63bb      	str	r3, [r7, #56]	; 0x38
 800601e:	2300      	movs	r3, #0
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006026:	0ed4      	lsrs	r4, r2, #27
 8006028:	015e      	lsls	r6, r3, #5
 800602a:	4326      	orrs	r6, r4
 800602c:	0155      	lsls	r5, r2, #5
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8006032:	1aed      	subs	r5, r5, r3
 8006034:	41a6      	sbcs	r6, r4
 8006036:	002a      	movs	r2, r5
 8006038:	0033      	movs	r3, r6
 800603a:	0e94      	lsrs	r4, r2, #26
 800603c:	0199      	lsls	r1, r3, #6
 800603e:	4321      	orrs	r1, r4
 8006040:	0190      	lsls	r0, r2, #6
 8006042:	1a80      	subs	r0, r0, r2
 8006044:	4199      	sbcs	r1, r3
 8006046:	0f43      	lsrs	r3, r0, #29
 8006048:	00ca      	lsls	r2, r1, #3
 800604a:	637a      	str	r2, [r7, #52]	; 0x34
 800604c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800604e:	431a      	orrs	r2, r3
 8006050:	637a      	str	r2, [r7, #52]	; 0x34
 8006052:	00c3      	lsls	r3, r0, #3
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
 8006056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800605a:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 800605c:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800605e:	1940      	adds	r0, r0, r5
 8006060:	4171      	adcs	r1, r6
 8006062:	0d43      	lsrs	r3, r0, #21
 8006064:	02ca      	lsls	r2, r1, #11
 8006066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800606a:	431a      	orrs	r2, r3
 800606c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800606e:	02c3      	lsls	r3, r0, #11
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
 8006072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	2300      	movs	r3, #0
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	f7fa fa11 	bl	80004a8 <__aeabi_uldivmod>
 8006086:	0002      	movs	r2, r0
 8006088:	000b      	movs	r3, r1
 800608a:	0013      	movs	r3, r2
 800608c:	657b      	str	r3, [r7, #84]	; 0x54
 800608e:	e039      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2210      	movs	r2, #16
 8006096:	4013      	ands	r3, r2
 8006098:	d01a      	beq.n	80060d0 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	4a24      	ldr	r2, [pc, #144]	; (8006134 <HAL_RCC_GetSysClockFreq+0x180>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	69b8      	ldr	r0, [r7, #24]
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	f7fa fa1d 	bl	80004e8 <__aeabi_lmul>
 80060ae:	0002      	movs	r2, r0
 80060b0:	000b      	movs	r3, r1
 80060b2:	0010      	movs	r0, r2
 80060b4:	0019      	movs	r1, r3
 80060b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f7fa f9f1 	bl	80004a8 <__aeabi_uldivmod>
 80060c6:	0002      	movs	r2, r0
 80060c8:	000b      	movs	r3, r1
 80060ca:	0013      	movs	r3, r2
 80060cc:	657b      	str	r3, [r7, #84]	; 0x54
 80060ce:	e019      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x150>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80060d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <HAL_RCC_GetSysClockFreq+0x184>)
 80060da:	2300      	movs	r3, #0
 80060dc:	68b8      	ldr	r0, [r7, #8]
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	f7fa fa02 	bl	80004e8 <__aeabi_lmul>
 80060e4:	0002      	movs	r2, r0
 80060e6:	000b      	movs	r3, r1
 80060e8:	0010      	movs	r0, r2
 80060ea:	0019      	movs	r1, r3
 80060ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	2300      	movs	r3, #0
 80060f2:	607b      	str	r3, [r7, #4]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f7fa f9d6 	bl	80004a8 <__aeabi_uldivmod>
 80060fc:	0002      	movs	r2, r0
 80060fe:	000b      	movs	r3, r1
 8006100:	0013      	movs	r3, r2
 8006102:	657b      	str	r3, [r7, #84]	; 0x54
        }
      }
      sysclockfreq = pllvco;
 8006104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006106:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8006108:	e00d      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <HAL_RCC_GetSysClockFreq+0x17c>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	0b5b      	lsrs	r3, r3, #13
 8006110:	2207      	movs	r2, #7
 8006112:	4013      	ands	r3, r2
 8006114:	643b      	str	r3, [r7, #64]	; 0x40
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006118:	3301      	adds	r3, #1
 800611a:	2280      	movs	r2, #128	; 0x80
 800611c:	0212      	lsls	r2, r2, #8
 800611e:	409a      	lsls	r2, r3
 8006120:	0013      	movs	r3, r2
 8006122:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 8006124:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b017      	add	sp, #92	; 0x5c
 800612e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006130:	40021000 	.word	0x40021000
 8006134:	003d0900 	.word	0x003d0900
 8006138:	00f42400 	.word	0x00f42400
 800613c:	01e84800 	.word	0x01e84800
 8006140:	0800b2a8 	.word	0x0800b2a8

08006144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <HAL_RCC_GetHCLKFreq+0x10>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	20000000 	.word	0x20000000

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800615c:	f7ff fff2 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 8006160:	0001      	movs	r1, r0
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	2207      	movs	r2, #7
 800616a:	4013      	ands	r3, r2
 800616c:	4a04      	ldr	r2, [pc, #16]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800616e:	5cd3      	ldrb	r3, [r2, r3]
 8006170:	40d9      	lsrs	r1, r3
 8006172:	000b      	movs	r3, r1
}
 8006174:	0018      	movs	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	40021000 	.word	0x40021000
 8006180:	0800b2a0 	.word	0x0800b2a0

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006188:	f7ff ffdc 	bl	8006144 <HAL_RCC_GetHCLKFreq>
 800618c:	0001      	movs	r1, r0
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	0adb      	lsrs	r3, r3, #11
 8006194:	2207      	movs	r2, #7
 8006196:	4013      	ands	r3, r2
 8006198:	4a04      	ldr	r2, [pc, #16]	; (80061ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800619a:	5cd3      	ldrb	r3, [r2, r3]
 800619c:	40d9      	lsrs	r1, r3
 800619e:	000b      	movs	r3, r1
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	40021000 	.word	0x40021000
 80061ac:	0800b2a0 	.word	0x0800b2a0

080061b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80061b8:	2317      	movs	r3, #23
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2220      	movs	r2, #32
 80061c6:	4013      	ands	r3, r2
 80061c8:	d106      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	4013      	ands	r3, r2
 80061d4:	d100      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80061d6:	e0d9      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d8:	4b9c      	ldr	r3, [pc, #624]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	055b      	lsls	r3, r3, #21
 80061e0:	4013      	ands	r3, r2
 80061e2:	d10a      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e4:	4b99      	ldr	r3, [pc, #612]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e8:	4b98      	ldr	r3, [pc, #608]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80061ea:	2180      	movs	r1, #128	; 0x80
 80061ec:	0549      	lsls	r1, r1, #21
 80061ee:	430a      	orrs	r2, r1
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80061f2:	2317      	movs	r3, #23
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	2201      	movs	r2, #1
 80061f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fa:	4b95      	ldr	r3, [pc, #596]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	4013      	ands	r3, r2
 8006204:	d11a      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006206:	4b92      	ldr	r3, [pc, #584]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b91      	ldr	r3, [pc, #580]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800620c:	2180      	movs	r1, #128	; 0x80
 800620e:	0049      	lsls	r1, r1, #1
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006214:	f7fd fce8 	bl	8003be8 <HAL_GetTick>
 8006218:	0003      	movs	r3, r0
 800621a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621c:	e008      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621e:	f7fd fce3 	bl	8003be8 <HAL_GetTick>
 8006222:	0002      	movs	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b64      	cmp	r3, #100	; 0x64
 800622a:	d901      	bls.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e108      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	4b87      	ldr	r3, [pc, #540]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	4013      	ands	r3, r2
 800623a:	d0f0      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800623c:	4b83      	ldr	r3, [pc, #524]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	23c0      	movs	r3, #192	; 0xc0
 8006242:	039b      	lsls	r3, r3, #14
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	23c0      	movs	r3, #192	; 0xc0
 800624e:	039b      	lsls	r3, r3, #14
 8006250:	4013      	ands	r3, r2
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	429a      	cmp	r2, r3
 8006256:	d107      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	23c0      	movs	r3, #192	; 0xc0
 800625e:	039b      	lsls	r3, r3, #14
 8006260:	4013      	ands	r3, r2
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	429a      	cmp	r2, r3
 8006266:	d013      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	23c0      	movs	r3, #192	; 0xc0
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	401a      	ands	r2, r3
 8006272:	23c0      	movs	r3, #192	; 0xc0
 8006274:	029b      	lsls	r3, r3, #10
 8006276:	429a      	cmp	r2, r3
 8006278:	d10a      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800627a:	4b74      	ldr	r3, [pc, #464]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	401a      	ands	r2, r3
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	429a      	cmp	r2, r3
 800628a:	d101      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0d8      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006290:	4b6e      	ldr	r3, [pc, #440]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006294:	23c0      	movs	r3, #192	; 0xc0
 8006296:	029b      	lsls	r3, r3, #10
 8006298:	4013      	ands	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d049      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	23c0      	movs	r3, #192	; 0xc0
 80062a8:	029b      	lsls	r3, r3, #10
 80062aa:	4013      	ands	r3, r2
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d004      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2220      	movs	r2, #32
 80062b8:	4013      	ands	r3, r2
 80062ba:	d10d      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	23c0      	movs	r3, #192	; 0xc0
 80062c2:	029b      	lsls	r3, r3, #10
 80062c4:	4013      	ands	r3, r2
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d034      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	2380      	movs	r3, #128	; 0x80
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	4013      	ands	r3, r2
 80062d6:	d02e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80062d8:	4b5c      	ldr	r3, [pc, #368]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062dc:	4a5d      	ldr	r2, [pc, #372]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80062de:	4013      	ands	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062e2:	4b5a      	ldr	r3, [pc, #360]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062e6:	4b59      	ldr	r3, [pc, #356]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	0309      	lsls	r1, r1, #12
 80062ec:	430a      	orrs	r2, r1
 80062ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f0:	4b56      	ldr	r3, [pc, #344]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062f4:	4b55      	ldr	r3, [pc, #340]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062f6:	4958      	ldr	r1, [pc, #352]	; (8006458 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80062fc:	4b53      	ldr	r3, [pc, #332]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	4013      	ands	r3, r2
 800630a:	d014      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630c:	f7fd fc6c 	bl	8003be8 <HAL_GetTick>
 8006310:	0003      	movs	r3, r0
 8006312:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006314:	e009      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fd fc67 	bl	8003be8 <HAL_GetTick>
 800631a:	0002      	movs	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	4a4e      	ldr	r2, [pc, #312]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e08b      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800632a:	4b48      	ldr	r3, [pc, #288]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800632c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800632e:	2380      	movs	r3, #128	; 0x80
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4013      	ands	r3, r2
 8006334:	d0ef      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	23c0      	movs	r3, #192	; 0xc0
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	401a      	ands	r2, r3
 8006340:	23c0      	movs	r3, #192	; 0xc0
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	429a      	cmp	r2, r3
 8006346:	d10c      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006348:	4b40      	ldr	r3, [pc, #256]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a44      	ldr	r2, [pc, #272]	; (8006460 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800634e:	4013      	ands	r3, r2
 8006350:	0019      	movs	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	23c0      	movs	r3, #192	; 0xc0
 8006358:	039b      	lsls	r3, r3, #14
 800635a:	401a      	ands	r2, r3
 800635c:	4b3b      	ldr	r3, [pc, #236]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	4b3a      	ldr	r3, [pc, #232]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006364:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	23c0      	movs	r3, #192	; 0xc0
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	401a      	ands	r2, r3
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006372:	430a      	orrs	r2, r1
 8006374:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006376:	2317      	movs	r3, #23
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006380:	4b32      	ldr	r3, [pc, #200]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006384:	4b31      	ldr	r3, [pc, #196]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006386:	4937      	ldr	r1, [pc, #220]	; (8006464 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006388:	400a      	ands	r2, r1
 800638a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2201      	movs	r2, #1
 8006392:	4013      	ands	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006396:	4b2d      	ldr	r3, [pc, #180]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	2203      	movs	r2, #3
 800639c:	4393      	bics	r3, r2
 800639e:	0019      	movs	r1, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	4b29      	ldr	r3, [pc, #164]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80063a6:	430a      	orrs	r2, r1
 80063a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2202      	movs	r2, #2
 80063b0:	4013      	ands	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80063b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b8:	220c      	movs	r2, #12
 80063ba:	4393      	bics	r3, r2
 80063bc:	0019      	movs	r1, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	4b22      	ldr	r3, [pc, #136]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80063c4:	430a      	orrs	r2, r1
 80063c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2204      	movs	r2, #4
 80063ce:	4013      	ands	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063d2:	4b1e      	ldr	r3, [pc, #120]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d6:	4a24      	ldr	r2, [pc, #144]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80063d8:	4013      	ands	r3, r2
 80063da:	0019      	movs	r1, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	4b1a      	ldr	r3, [pc, #104]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80063e2:	430a      	orrs	r2, r1
 80063e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	4013      	ands	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063f0:	4b16      	ldr	r3, [pc, #88]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80063f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f4:	4a1d      	ldr	r2, [pc, #116]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	0019      	movs	r1, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006400:	430a      	orrs	r2, r1
 8006402:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2240      	movs	r2, #64	; 0x40
 800640a:	4013      	ands	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	4a17      	ldr	r2, [pc, #92]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006414:	4013      	ands	r3, r2
 8006416:	0019      	movs	r1, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1a      	ldr	r2, [r3, #32]
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800641e:	430a      	orrs	r2, r1
 8006420:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2280      	movs	r2, #128	; 0x80
 8006428:	4013      	ands	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	4a10      	ldr	r2, [pc, #64]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006432:	4013      	ands	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	4b04      	ldr	r3, [pc, #16]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800643c:	430a      	orrs	r2, r1
 800643e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	0018      	movs	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	b006      	add	sp, #24
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	40021000 	.word	0x40021000
 8006450:	40007000 	.word	0x40007000
 8006454:	fffcffff 	.word	0xfffcffff
 8006458:	fff7ffff 	.word	0xfff7ffff
 800645c:	00001388 	.word	0x00001388
 8006460:	ffcfffff 	.word	0xffcfffff
 8006464:	efffffff 	.word	0xefffffff
 8006468:	fffff3ff 	.word	0xfffff3ff
 800646c:	ffffcfff 	.word	0xffffcfff
 8006470:	fbffffff 	.word	0xfbffffff
 8006474:	fff3ffff 	.word	0xfff3ffff

08006478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e083      	b.n	8006592 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	2382      	movs	r3, #130	; 0x82
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	429a      	cmp	r2, r3
 800649c:	d009      	beq.n	80064b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	61da      	str	r2, [r3, #28]
 80064a4:	e005      	b.n	80064b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2251      	movs	r2, #81	; 0x51
 80064bc:	5c9b      	ldrb	r3, [r3, r2]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2250      	movs	r2, #80	; 0x50
 80064c8:	2100      	movs	r1, #0
 80064ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7fd f81e 	bl	8003510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2251      	movs	r2, #81	; 0x51
 80064d8:	2102      	movs	r1, #2
 80064da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2140      	movs	r1, #64	; 0x40
 80064e8:	438a      	bics	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	2382      	movs	r3, #130	; 0x82
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	401a      	ands	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6899      	ldr	r1, [r3, #8]
 80064fa:	2384      	movs	r3, #132	; 0x84
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	400b      	ands	r3, r1
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68d9      	ldr	r1, [r3, #12]
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	400b      	ands	r3, r1
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2102      	movs	r1, #2
 8006514:	400b      	ands	r3, r1
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	2101      	movs	r1, #1
 800651e:	400b      	ands	r3, r1
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6999      	ldr	r1, [r3, #24]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	400b      	ands	r3, r1
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2138      	movs	r1, #56	; 0x38
 8006534:	400b      	ands	r3, r1
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	400b      	ands	r3, r1
 8006540:	431a      	orrs	r2, r3
 8006542:	0011      	movs	r1, r2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006548:	2380      	movs	r3, #128	; 0x80
 800654a:	019b      	lsls	r3, r3, #6
 800654c:	401a      	ands	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	2204      	movs	r2, #4
 800655e:	4013      	ands	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2210      	movs	r2, #16
 8006568:	401a      	ands	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69da      	ldr	r2, [r3, #28]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4907      	ldr	r1, [pc, #28]	; (800659c <HAL_SPI_Init+0x124>)
 800657e:	400a      	ands	r2, r1
 8006580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2251      	movs	r2, #81	; 0x51
 800658c:	2101      	movs	r1, #1
 800658e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	0018      	movs	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	b002      	add	sp, #8
 8006598:	bd80      	pop	{r7, pc}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	fffff7ff 	.word	0xfffff7ff

080065a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	1dbb      	adds	r3, r7, #6
 80065ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065b0:	231f      	movs	r3, #31
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2250      	movs	r2, #80	; 0x50
 80065bc:	5c9b      	ldrb	r3, [r3, r2]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Transmit+0x26>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e13e      	b.n	8006844 <HAL_SPI_Transmit+0x2a4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2250      	movs	r2, #80	; 0x50
 80065ca:	2101      	movs	r1, #1
 80065cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ce:	f7fd fb0b 	bl	8003be8 <HAL_GetTick>
 80065d2:	0003      	movs	r3, r0
 80065d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80065d6:	2316      	movs	r3, #22
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	1dba      	adds	r2, r7, #6
 80065dc:	8812      	ldrh	r2, [r2, #0]
 80065de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2251      	movs	r2, #81	; 0x51
 80065e4:	5c9b      	ldrb	r3, [r3, r2]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d004      	beq.n	80065f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80065ec:	231f      	movs	r3, #31
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	2202      	movs	r2, #2
 80065f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80065f4:	e11b      	b.n	800682e <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_SPI_Transmit+0x64>
 80065fc:	1dbb      	adds	r3, r7, #6
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006604:	231f      	movs	r3, #31
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	2201      	movs	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]
    goto error;
 800660c:	e10f      	b.n	800682e <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2251      	movs	r2, #81	; 0x51
 8006612:	2103      	movs	r1, #3
 8006614:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1dba      	adds	r2, r7, #6
 8006626:	8812      	ldrh	r2, [r2, #0]
 8006628:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1dba      	adds	r2, r7, #6
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	429a      	cmp	r2, r3
 800665a:	d110      	bne.n	800667e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2140      	movs	r1, #64	; 0x40
 8006668:	438a      	bics	r2, r1
 800666a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2180      	movs	r1, #128	; 0x80
 8006678:	01c9      	lsls	r1, r1, #7
 800667a:	430a      	orrs	r2, r1
 800667c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2240      	movs	r2, #64	; 0x40
 8006686:	4013      	ands	r3, r2
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d007      	beq.n	800669c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2140      	movs	r1, #64	; 0x40
 8006698:	430a      	orrs	r2, r1
 800669a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	2380      	movs	r3, #128	; 0x80
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d14e      	bne.n	8006746 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <HAL_SPI_Transmit+0x11a>
 80066b0:	2316      	movs	r3, #22
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d13f      	bne.n	800673a <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	881a      	ldrh	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	1c9a      	adds	r2, r3, #2
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066de:	e02c      	b.n	800673a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2202      	movs	r2, #2
 80066e8:	4013      	ands	r3, r2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d112      	bne.n	8006714 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	881a      	ldrh	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	1c9a      	adds	r2, r3, #2
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	86da      	strh	r2, [r3, #54]	; 0x36
 8006712:	e012      	b.n	800673a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006714:	f7fd fa68 	bl	8003be8 <HAL_GetTick>
 8006718:	0002      	movs	r2, r0
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d802      	bhi.n	800672a <HAL_SPI_Transmit+0x18a>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	d102      	bne.n	8006730 <HAL_SPI_Transmit+0x190>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8006730:	231f      	movs	r3, #31
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	2203      	movs	r2, #3
 8006736:	701a      	strb	r2, [r3, #0]
          goto error;
 8006738:	e079      	b.n	800682e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1cd      	bne.n	80066e0 <HAL_SPI_Transmit+0x140>
 8006744:	e04f      	b.n	80067e6 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <HAL_SPI_Transmit+0x1b8>
 800674e:	2316      	movs	r3, #22
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d141      	bne.n	80067dc <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	330c      	adds	r3, #12
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800677e:	e02d      	b.n	80067dc <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	2202      	movs	r2, #2
 8006788:	4013      	ands	r3, r2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d113      	bne.n	80067b6 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80067b4:	e012      	b.n	80067dc <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b6:	f7fd fa17 	bl	8003be8 <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d802      	bhi.n	80067cc <HAL_SPI_Transmit+0x22c>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	d102      	bne.n	80067d2 <HAL_SPI_Transmit+0x232>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80067d2:	231f      	movs	r3, #31
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	2203      	movs	r2, #3
 80067d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80067da:	e028      	b.n	800682e <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1cc      	bne.n	8006780 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 fa77 	bl	8006ce0 <SPI_EndRxTxTransaction>
 80067f2:	1e03      	subs	r3, r0, #0
 80067f4:	d002      	beq.n	80067fc <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006804:	2300      	movs	r3, #0
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8006822:	231f      	movs	r3, #31
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e000      	b.n	800682e <HAL_SPI_Transmit+0x28e>
  }

error:
 800682c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2251      	movs	r2, #81	; 0x51
 8006832:	2101      	movs	r1, #1
 8006834:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2250      	movs	r2, #80	; 0x50
 800683a:	2100      	movs	r1, #0
 800683c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800683e:	231f      	movs	r3, #31
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	781b      	ldrb	r3, [r3, #0]
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b008      	add	sp, #32
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08c      	sub	sp, #48	; 0x30
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	001a      	movs	r2, r3
 800685a:	1cbb      	adds	r3, r7, #2
 800685c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800685e:	2301      	movs	r3, #1
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006862:	232b      	movs	r3, #43	; 0x2b
 8006864:	18fb      	adds	r3, r7, r3
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2250      	movs	r2, #80	; 0x50
 800686e:	5c9b      	ldrb	r3, [r3, r2]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x2c>
 8006874:	2302      	movs	r3, #2
 8006876:	e1a0      	b.n	8006bba <HAL_SPI_TransmitReceive+0x36e>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2250      	movs	r2, #80	; 0x50
 800687c:	2101      	movs	r1, #1
 800687e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006880:	f7fd f9b2 	bl	8003be8 <HAL_GetTick>
 8006884:	0003      	movs	r3, r0
 8006886:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006888:	2023      	movs	r0, #35	; 0x23
 800688a:	183b      	adds	r3, r7, r0
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	2151      	movs	r1, #81	; 0x51
 8006890:	5c52      	ldrb	r2, [r2, r1]
 8006892:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800689a:	231a      	movs	r3, #26
 800689c:	18fb      	adds	r3, r7, r3
 800689e:	1cba      	adds	r2, r7, #2
 80068a0:	8812      	ldrh	r2, [r2, #0]
 80068a2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068a4:	183b      	adds	r3, r7, r0
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d011      	beq.n	80068d0 <HAL_SPI_TransmitReceive+0x84>
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	2382      	movs	r3, #130	; 0x82
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d107      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <HAL_SPI_TransmitReceive+0x7a>
 80068be:	183b      	adds	r3, r7, r0
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d004      	beq.n	80068d0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80068c6:	232b      	movs	r3, #43	; 0x2b
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	2202      	movs	r2, #2
 80068cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80068ce:	e169      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x98>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x98>
 80068dc:	1cbb      	adds	r3, r7, #2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80068e4:	232b      	movs	r3, #43	; 0x2b
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80068ec:	e15a      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2251      	movs	r2, #81	; 0x51
 80068f2:	5c9b      	ldrb	r3, [r3, r2]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d003      	beq.n	8006902 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2251      	movs	r2, #81	; 0x51
 80068fe:	2105      	movs	r1, #5
 8006900:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1cba      	adds	r2, r7, #2
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1cba      	adds	r2, r7, #2
 800691a:	8812      	ldrh	r2, [r2, #0]
 800691c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1cba      	adds	r2, r7, #2
 8006928:	8812      	ldrh	r2, [r2, #0]
 800692a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1cba      	adds	r2, r7, #2
 8006930:	8812      	ldrh	r2, [r2, #0]
 8006932:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2240      	movs	r2, #64	; 0x40
 8006948:	4013      	ands	r3, r2
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d007      	beq.n	800695e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2140      	movs	r1, #64	; 0x40
 800695a:	430a      	orrs	r2, r1
 800695c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	2380      	movs	r3, #128	; 0x80
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	429a      	cmp	r2, r3
 8006968:	d000      	beq.n	800696c <HAL_SPI_TransmitReceive+0x120>
 800696a:	e07a      	b.n	8006a62 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <HAL_SPI_TransmitReceive+0x132>
 8006974:	231a      	movs	r3, #26
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d166      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	1c9a      	adds	r2, r3, #2
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069a2:	e053      	b.n	8006a4c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2202      	movs	r2, #2
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d11b      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x19e>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x19e>
 80069bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d113      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c6:	881a      	ldrh	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2201      	movs	r2, #1
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d119      	bne.n	8006a2c <HAL_SPI_TransmitReceive+0x1e0>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d014      	beq.n	8006a2c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	1c9a      	adds	r2, r3, #2
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a2c:	f7fd f8dc 	bl	8003be8 <HAL_GetTick>
 8006a30:	0002      	movs	r2, r0
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d807      	bhi.n	8006a4c <HAL_SPI_TransmitReceive+0x200>
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	3301      	adds	r3, #1
 8006a40:	d004      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8006a42:	232b      	movs	r3, #43	; 0x2b
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2203      	movs	r2, #3
 8006a48:	701a      	strb	r2, [r3, #0]
        goto error;
 8006a4a:	e0ab      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1a6      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x158>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1a1      	bne.n	80069a4 <HAL_SPI_TransmitReceive+0x158>
 8006a60:	e07f      	b.n	8006b62 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_SPI_TransmitReceive+0x22a>
 8006a6a:	231a      	movs	r3, #26
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d000      	beq.n	8006a76 <HAL_SPI_TransmitReceive+0x22a>
 8006a74:	e06b      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9c:	e057      	b.n	8006b4e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d11c      	bne.n	8006ae6 <HAL_SPI_TransmitReceive+0x29a>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d017      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x29a>
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d114      	bne.n	8006ae6 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2201      	movs	r2, #1
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d119      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x2dc>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d014      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b24:	2301      	movs	r3, #1
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b28:	f7fd f85e 	bl	8003be8 <HAL_GetTick>
 8006b2c:	0002      	movs	r2, r0
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d802      	bhi.n	8006b3e <HAL_SPI_TransmitReceive+0x2f2>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	d102      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x2f8>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8006b44:	232b      	movs	r3, #43	; 0x2b
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	2203      	movs	r2, #3
 8006b4a:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b4c:	e02a      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1a2      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x252>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d19d      	bne.n	8006a9e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f000 f8b9 	bl	8006ce0 <SPI_EndRxTxTransaction>
 8006b6e:	1e03      	subs	r3, r0, #0
 8006b70:	d007      	beq.n	8006b82 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8006b72:	232b      	movs	r3, #43	; 0x2b
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b80:	e010      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	e000      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8006ba2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2251      	movs	r2, #81	; 0x51
 8006ba8:	2101      	movs	r1, #1
 8006baa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2250      	movs	r2, #80	; 0x50
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006bb4:	232b      	movs	r3, #43	; 0x2b
 8006bb6:	18fb      	adds	r3, r7, r3
 8006bb8:	781b      	ldrb	r3, [r3, #0]
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b00c      	add	sp, #48	; 0x30
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	1dfb      	adds	r3, r7, #7
 8006bd2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bd4:	f7fd f808 	bl	8003be8 <HAL_GetTick>
 8006bd8:	0002      	movs	r2, r0
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	18d3      	adds	r3, r2, r3
 8006be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006be4:	f7fd f800 	bl	8003be8 <HAL_GetTick>
 8006be8:	0003      	movs	r3, r0
 8006bea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bec:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	015b      	lsls	r3, r3, #5
 8006bf2:	0d1b      	lsrs	r3, r3, #20
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	4353      	muls	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bfa:	e058      	b.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	d055      	beq.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c02:	f7fc fff1 	bl	8003be8 <HAL_GetTick>
 8006c06:	0002      	movs	r2, r0
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d902      	bls.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d142      	bne.n	8006c9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	21e0      	movs	r1, #224	; 0xe0
 8006c24:	438a      	bics	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	2382      	movs	r3, #130	; 0x82
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d113      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d005      	beq.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d107      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2140      	movs	r1, #64	; 0x40
 8006c58:	438a      	bics	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	019b      	lsls	r3, r3, #6
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d110      	bne.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	491a      	ldr	r1, [pc, #104]	; (8006cdc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006c74:	400a      	ands	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2180      	movs	r1, #128	; 0x80
 8006c84:	0189      	lsls	r1, r1, #6
 8006c86:	430a      	orrs	r2, r1
 8006c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2251      	movs	r2, #81	; 0x51
 8006c8e:	2101      	movs	r1, #1
 8006c90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2250      	movs	r2, #80	; 0x50
 8006c96:	2100      	movs	r1, #0
 8006c98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e017      	b.n	8006cce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	425a      	negs	r2, r3
 8006cbe:	4153      	adcs	r3, r2
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	1dfb      	adds	r3, r7, #7
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d197      	bne.n	8006bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b008      	add	sp, #32
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	20000000 	.word	0x20000000
 8006cdc:	ffffdfff 	.word	0xffffdfff

08006ce0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006cec:	4b1d      	ldr	r3, [pc, #116]	; (8006d64 <SPI_EndRxTxTransaction+0x84>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	491d      	ldr	r1, [pc, #116]	; (8006d68 <SPI_EndRxTxTransaction+0x88>)
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f7f9 fa24 	bl	8000140 <__udivsi3>
 8006cf8:	0003      	movs	r3, r0
 8006cfa:	001a      	movs	r2, r3
 8006cfc:	0013      	movs	r3, r2
 8006cfe:	015b      	lsls	r3, r3, #5
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	189b      	adds	r3, r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	2382      	movs	r3, #130	; 0x82
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d112      	bne.n	8006d3c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	0013      	movs	r3, r2
 8006d20:	2200      	movs	r2, #0
 8006d22:	2180      	movs	r1, #128	; 0x80
 8006d24:	f7ff ff4e 	bl	8006bc4 <SPI_WaitFlagStateUntilTimeout>
 8006d28:	1e03      	subs	r3, r0, #0
 8006d2a:	d016      	beq.n	8006d5a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	2220      	movs	r2, #32
 8006d32:	431a      	orrs	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e00f      	b.n	8006d5c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b80      	cmp	r3, #128	; 0x80
 8006d54:	d0f2      	beq.n	8006d3c <SPI_EndRxTxTransaction+0x5c>
 8006d56:	e000      	b.n	8006d5a <SPI_EndRxTxTransaction+0x7a>
        break;
 8006d58:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b006      	add	sp, #24
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000000 	.word	0x20000000
 8006d68:	016e3600 	.word	0x016e3600

08006d6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e032      	b.n	8006de4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2239      	movs	r2, #57	; 0x39
 8006d82:	5c9b      	ldrb	r3, [r3, r2]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2238      	movs	r2, #56	; 0x38
 8006d8e:	2100      	movs	r1, #0
 8006d90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7fc fc77 	bl	8003688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2239      	movs	r2, #57	; 0x39
 8006d9e:	2102      	movs	r1, #2
 8006da0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	0019      	movs	r1, r3
 8006dac:	0010      	movs	r0, r2
 8006dae:	f000 f933 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	223e      	movs	r2, #62	; 0x3e
 8006db6:	2101      	movs	r1, #1
 8006db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	223a      	movs	r2, #58	; 0x3a
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	5499      	strb	r1, [r3, r2]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	223b      	movs	r2, #59	; 0x3b
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	5499      	strb	r1, [r3, r2]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	223c      	movs	r2, #60	; 0x3c
 8006dce:	2101      	movs	r1, #1
 8006dd0:	5499      	strb	r1, [r3, r2]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	223d      	movs	r2, #61	; 0x3d
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2239      	movs	r2, #57	; 0x39
 8006dde:	2101      	movs	r1, #1
 8006de0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b002      	add	sp, #8
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2239      	movs	r2, #57	; 0x39
 8006df8:	5c9b      	ldrb	r3, [r3, r2]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d001      	beq.n	8006e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e036      	b.n	8006e72 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2239      	movs	r2, #57	; 0x39
 8006e08:	2102      	movs	r1, #2
 8006e0a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2101      	movs	r1, #1
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	2380      	movs	r3, #128	; 0x80
 8006e22:	05db      	lsls	r3, r3, #23
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d009      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x50>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <HAL_TIM_Base_Start_IT+0x90>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_TIM_Base_Start_IT+0x50>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <HAL_TIM_Base_Start_IT+0x94>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d111      	bne.n	8006e60 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2207      	movs	r2, #7
 8006e44:	4013      	ands	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b06      	cmp	r3, #6
 8006e4c:	d010      	beq.n	8006e70 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5e:	e007      	b.n	8006e70 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	0018      	movs	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	b004      	add	sp, #16
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	40010800 	.word	0x40010800
 8006e80:	40011400 	.word	0x40011400

08006e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2238      	movs	r2, #56	; 0x38
 8006e92:	5c9b      	ldrb	r3, [r3, r2]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIM_ConfigClockSource+0x18>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e0b7      	b.n	800700c <HAL_TIM_ConfigClockSource+0x188>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2238      	movs	r2, #56	; 0x38
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2239      	movs	r2, #57	; 0x39
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2277      	movs	r2, #119	; 0x77
 8006eb8:	4393      	bics	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a55      	ldr	r2, [pc, #340]	; (8007014 <HAL_TIM_ConfigClockSource+0x190>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2280      	movs	r2, #128	; 0x80
 8006ed2:	0192      	lsls	r2, r2, #6
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d040      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0xd6>
 8006ed8:	2280      	movs	r2, #128	; 0x80
 8006eda:	0192      	lsls	r2, r2, #6
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d900      	bls.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5e>
 8006ee0:	e088      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006ee2:	2280      	movs	r2, #128	; 0x80
 8006ee4:	0152      	lsls	r2, r2, #5
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d100      	bne.n	8006eec <HAL_TIM_ConfigClockSource+0x68>
 8006eea:	e085      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	0152      	lsls	r2, r2, #5
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d900      	bls.n	8006ef6 <HAL_TIM_ConfigClockSource+0x72>
 8006ef4:	e07e      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006ef6:	2b70      	cmp	r3, #112	; 0x70
 8006ef8:	d018      	beq.n	8006f2c <HAL_TIM_ConfigClockSource+0xa8>
 8006efa:	d900      	bls.n	8006efe <HAL_TIM_ConfigClockSource+0x7a>
 8006efc:	e07a      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006efe:	2b60      	cmp	r3, #96	; 0x60
 8006f00:	d04f      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x11e>
 8006f02:	d900      	bls.n	8006f06 <HAL_TIM_ConfigClockSource+0x82>
 8006f04:	e076      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006f06:	2b50      	cmp	r3, #80	; 0x50
 8006f08:	d03b      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0xfe>
 8006f0a:	d900      	bls.n	8006f0e <HAL_TIM_ConfigClockSource+0x8a>
 8006f0c:	e072      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d057      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x13e>
 8006f12:	d900      	bls.n	8006f16 <HAL_TIM_ConfigClockSource+0x92>
 8006f14:	e06e      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006f16:	2b30      	cmp	r3, #48	; 0x30
 8006f18:	d063      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8006f1a:	d86b      	bhi.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d060      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8006f20:	d868      	bhi.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d05d      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8006f26:	2b10      	cmp	r3, #16
 8006f28:	d05b      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f2a:	e063      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f000 f93a 	bl	80071b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2277      	movs	r2, #119	; 0x77
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	609a      	str	r2, [r3, #8]
      break;
 8006f58:	e04f      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6899      	ldr	r1, [r3, #8]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f000 f923 	bl	80071b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2180      	movs	r1, #128	; 0x80
 8006f7a:	01c9      	lsls	r1, r1, #7
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]
      break;
 8006f80:	e03b      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	6859      	ldr	r1, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	001a      	movs	r2, r3
 8006f90:	f000 f896 	bl	80070c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2150      	movs	r1, #80	; 0x50
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f000 f8f0 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006fa0:	e02b      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	001a      	movs	r2, r3
 8006fb0:	f000 f8b4 	bl	800711c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2160      	movs	r1, #96	; 0x60
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f000 f8e0 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e01b      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6859      	ldr	r1, [r3, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	001a      	movs	r2, r3
 8006fd0:	f000 f876 	bl	80070c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2140      	movs	r1, #64	; 0x40
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f000 f8d0 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006fe0:	e00b      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	0019      	movs	r1, r3
 8006fec:	0010      	movs	r0, r2
 8006fee:	f000 f8c7 	bl	8007180 <TIM_ITRx_SetConfig>
        break;
 8006ff2:	e002      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006ff8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2239      	movs	r2, #57	; 0x39
 8006ffe:	2101      	movs	r1, #1
 8007000:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2238      	movs	r2, #56	; 0x38
 8007006:	2100      	movs	r1, #0
 8007008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	0018      	movs	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	b004      	add	sp, #16
 8007012:	bd80      	pop	{r7, pc}
 8007014:	ffff00ff 	.word	0xffff00ff

08007018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	05db      	lsls	r3, r3, #23
 800702e:	429a      	cmp	r2, r3
 8007030:	d007      	beq.n	8007042 <TIM_Base_SetConfig+0x2a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <TIM_Base_SetConfig+0x9c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_Base_SetConfig+0x2a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a1e      	ldr	r2, [pc, #120]	; (80070b8 <TIM_Base_SetConfig+0xa0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d108      	bne.n	8007054 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2270      	movs	r2, #112	; 0x70
 8007046:	4393      	bics	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	05db      	lsls	r3, r3, #23
 800705a:	429a      	cmp	r2, r3
 800705c:	d007      	beq.n	800706e <TIM_Base_SetConfig+0x56>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_Base_SetConfig+0x9c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_Base_SetConfig+0x56>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <TIM_Base_SetConfig+0xa0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d108      	bne.n	8007080 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a12      	ldr	r2, [pc, #72]	; (80070bc <TIM_Base_SetConfig+0xa4>)
 8007072:	4013      	ands	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	4393      	bics	r3, r2
 8007086:	001a      	movs	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	615a      	str	r2, [r3, #20]
}
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b004      	add	sp, #16
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40010800 	.word	0x40010800
 80070b8:	40011400 	.word	0x40011400
 80070bc:	fffffcff 	.word	0xfffffcff

080070c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	2201      	movs	r2, #1
 80070d8:	4393      	bics	r3, r2
 80070da:	001a      	movs	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	22f0      	movs	r2, #240	; 0xf0
 80070ea:	4393      	bics	r3, r2
 80070ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	220a      	movs	r2, #10
 80070fc:	4393      	bics	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	46c0      	nop			; (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	b006      	add	sp, #24
 800711a:	bd80      	pop	{r7, pc}

0800711c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	2210      	movs	r2, #16
 800712e:	4393      	bics	r3, r2
 8007130:	001a      	movs	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <TIM_TI2_ConfigInputStage+0x60>)
 8007146:	4013      	ands	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	22a0      	movs	r2, #160	; 0xa0
 8007158:	4393      	bics	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	46bd      	mov	sp, r7
 8007176:	b006      	add	sp, #24
 8007178:	bd80      	pop	{r7, pc}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	ffff0fff 	.word	0xffff0fff

08007180 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2270      	movs	r2, #112	; 0x70
 8007194:	4393      	bics	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	2207      	movs	r2, #7
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	609a      	str	r2, [r3, #8]
}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	46bd      	mov	sp, r7
 80071ae:	b004      	add	sp, #16
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <TIM_ETR_SetConfig+0x3c>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	021a      	lsls	r2, r3, #8
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4313      	orrs	r3, r2
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	609a      	str	r2, [r3, #8]
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b006      	add	sp, #24
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	ffff00ff 	.word	0xffff00ff

080071f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2238      	movs	r2, #56	; 0x38
 8007202:	5c9b      	ldrb	r3, [r3, r2]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007208:	2302      	movs	r3, #2
 800720a:	e042      	b.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2238      	movs	r2, #56	; 0x38
 8007210:	2101      	movs	r1, #1
 8007212:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2239      	movs	r2, #57	; 0x39
 8007218:	2102      	movs	r1, #2
 800721a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2270      	movs	r2, #112	; 0x70
 8007230:	4393      	bics	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	2380      	movs	r3, #128	; 0x80
 800724c:	05db      	lsls	r3, r3, #23
 800724e:	429a      	cmp	r2, r3
 8007250:	d009      	beq.n	8007266 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a11      	ldr	r2, [pc, #68]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d004      	beq.n	8007266 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0f      	ldr	r2, [pc, #60]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d10c      	bne.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2280      	movs	r2, #128	; 0x80
 800726a:	4393      	bics	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4313      	orrs	r3, r2
 8007276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2239      	movs	r2, #57	; 0x39
 8007284:	2101      	movs	r1, #1
 8007286:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2238      	movs	r2, #56	; 0x38
 800728c:	2100      	movs	r1, #0
 800728e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	40010800 	.word	0x40010800
 80072a0:	40011400 	.word	0x40011400

080072a4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e04c      	b.n	8007350 <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d107      	bne.n	80072ce <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2274      	movs	r2, #116	; 0x74
 80072c2:	2100      	movs	r1, #0
 80072c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f7fc f9f5 	bl	80036b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2224      	movs	r2, #36	; 0x24
 80072d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2101      	movs	r1, #1
 80072e0:	438a      	bics	r2, r1
 80072e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f838 	bl	800735c <UART_SetConfig>
 80072ec:	0003      	movs	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e02c      	b.n	8007350 <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0018      	movs	r0, r3
 8007302:	f000 facb 	bl	800789c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4911      	ldr	r1, [pc, #68]	; (8007358 <HAL_HalfDuplex_Init+0xb4>)
 8007312:	400a      	ands	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2122      	movs	r1, #34	; 0x22
 8007322:	438a      	bics	r2, r1
 8007324:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2108      	movs	r1, #8
 8007332:	430a      	orrs	r2, r1
 8007334:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2101      	movs	r1, #1
 8007342:	430a      	orrs	r2, r1
 8007344:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	0018      	movs	r0, r3
 800734a:	f000 fb5b 	bl	8007a04 <UART_CheckIdleState>
 800734e:	0003      	movs	r3, r0
}
 8007350:	0018      	movs	r0, r3
 8007352:	46bd      	mov	sp, r7
 8007354:	b002      	add	sp, #8
 8007356:	bd80      	pop	{r7, pc}
 8007358:	ffffb7ff 	.word	0xffffb7ff

0800735c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	b5b0      	push	{r4, r5, r7, lr}
 800735e:	b08e      	sub	sp, #56	; 0x38
 8007360:	af00      	add	r7, sp, #0
 8007362:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007364:	231a      	movs	r3, #26
 8007366:	2218      	movs	r2, #24
 8007368:	4694      	mov	ip, r2
 800736a:	44bc      	add	ip, r7
 800736c:	4463      	add	r3, ip
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	431a      	orrs	r2, r3
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	431a      	orrs	r2, r3
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	4313      	orrs	r3, r2
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4ac1      	ldr	r2, [pc, #772]	; (8007698 <UART_SetConfig+0x33c>)
 8007392:	4013      	ands	r3, r2
 8007394:	0019      	movs	r1, r3
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800739c:	430a      	orrs	r2, r1
 800739e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4abd      	ldr	r2, [pc, #756]	; (800769c <UART_SetConfig+0x340>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	0019      	movs	r1, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4ab7      	ldr	r2, [pc, #732]	; (80076a0 <UART_SetConfig+0x344>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073ce:	4313      	orrs	r3, r2
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	4ab2      	ldr	r2, [pc, #712]	; (80076a4 <UART_SetConfig+0x348>)
 80073da:	4013      	ands	r3, r2
 80073dc:	0019      	movs	r1, r3
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e4:	430a      	orrs	r2, r1
 80073e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4aae      	ldr	r2, [pc, #696]	; (80076a8 <UART_SetConfig+0x34c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d136      	bne.n	8007460 <UART_SetConfig+0x104>
 80073f2:	4bae      	ldr	r3, [pc, #696]	; (80076ac <UART_SetConfig+0x350>)
 80073f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f6:	2203      	movs	r2, #3
 80073f8:	4013      	ands	r3, r2
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d020      	beq.n	8007440 <UART_SetConfig+0xe4>
 80073fe:	d827      	bhi.n	8007450 <UART_SetConfig+0xf4>
 8007400:	2b02      	cmp	r3, #2
 8007402:	d00d      	beq.n	8007420 <UART_SetConfig+0xc4>
 8007404:	d824      	bhi.n	8007450 <UART_SetConfig+0xf4>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <UART_SetConfig+0xb4>
 800740a:	2b01      	cmp	r3, #1
 800740c:	d010      	beq.n	8007430 <UART_SetConfig+0xd4>
 800740e:	e01f      	b.n	8007450 <UART_SetConfig+0xf4>
 8007410:	231b      	movs	r3, #27
 8007412:	2218      	movs	r2, #24
 8007414:	4694      	mov	ip, r2
 8007416:	44bc      	add	ip, r7
 8007418:	4463      	add	r3, ip
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	e0ab      	b.n	8007578 <UART_SetConfig+0x21c>
 8007420:	231b      	movs	r3, #27
 8007422:	2218      	movs	r2, #24
 8007424:	4694      	mov	ip, r2
 8007426:	44bc      	add	ip, r7
 8007428:	4463      	add	r3, ip
 800742a:	2202      	movs	r2, #2
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e0a3      	b.n	8007578 <UART_SetConfig+0x21c>
 8007430:	231b      	movs	r3, #27
 8007432:	2218      	movs	r2, #24
 8007434:	4694      	mov	ip, r2
 8007436:	44bc      	add	ip, r7
 8007438:	4463      	add	r3, ip
 800743a:	2204      	movs	r2, #4
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e09b      	b.n	8007578 <UART_SetConfig+0x21c>
 8007440:	231b      	movs	r3, #27
 8007442:	2218      	movs	r2, #24
 8007444:	4694      	mov	ip, r2
 8007446:	44bc      	add	ip, r7
 8007448:	4463      	add	r3, ip
 800744a:	2208      	movs	r2, #8
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e093      	b.n	8007578 <UART_SetConfig+0x21c>
 8007450:	231b      	movs	r3, #27
 8007452:	2218      	movs	r2, #24
 8007454:	4694      	mov	ip, r2
 8007456:	44bc      	add	ip, r7
 8007458:	4463      	add	r3, ip
 800745a:	2210      	movs	r2, #16
 800745c:	701a      	strb	r2, [r3, #0]
 800745e:	e08b      	b.n	8007578 <UART_SetConfig+0x21c>
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a92      	ldr	r2, [pc, #584]	; (80076b0 <UART_SetConfig+0x354>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d136      	bne.n	80074d8 <UART_SetConfig+0x17c>
 800746a:	4b90      	ldr	r3, [pc, #576]	; (80076ac <UART_SetConfig+0x350>)
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	220c      	movs	r2, #12
 8007470:	4013      	ands	r3, r2
 8007472:	2b0c      	cmp	r3, #12
 8007474:	d020      	beq.n	80074b8 <UART_SetConfig+0x15c>
 8007476:	d827      	bhi.n	80074c8 <UART_SetConfig+0x16c>
 8007478:	2b08      	cmp	r3, #8
 800747a:	d00d      	beq.n	8007498 <UART_SetConfig+0x13c>
 800747c:	d824      	bhi.n	80074c8 <UART_SetConfig+0x16c>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <UART_SetConfig+0x12c>
 8007482:	2b04      	cmp	r3, #4
 8007484:	d010      	beq.n	80074a8 <UART_SetConfig+0x14c>
 8007486:	e01f      	b.n	80074c8 <UART_SetConfig+0x16c>
 8007488:	231b      	movs	r3, #27
 800748a:	2218      	movs	r2, #24
 800748c:	4694      	mov	ip, r2
 800748e:	44bc      	add	ip, r7
 8007490:	4463      	add	r3, ip
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e06f      	b.n	8007578 <UART_SetConfig+0x21c>
 8007498:	231b      	movs	r3, #27
 800749a:	2218      	movs	r2, #24
 800749c:	4694      	mov	ip, r2
 800749e:	44bc      	add	ip, r7
 80074a0:	4463      	add	r3, ip
 80074a2:	2202      	movs	r2, #2
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	e067      	b.n	8007578 <UART_SetConfig+0x21c>
 80074a8:	231b      	movs	r3, #27
 80074aa:	2218      	movs	r2, #24
 80074ac:	4694      	mov	ip, r2
 80074ae:	44bc      	add	ip, r7
 80074b0:	4463      	add	r3, ip
 80074b2:	2204      	movs	r2, #4
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e05f      	b.n	8007578 <UART_SetConfig+0x21c>
 80074b8:	231b      	movs	r3, #27
 80074ba:	2218      	movs	r2, #24
 80074bc:	4694      	mov	ip, r2
 80074be:	44bc      	add	ip, r7
 80074c0:	4463      	add	r3, ip
 80074c2:	2208      	movs	r2, #8
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e057      	b.n	8007578 <UART_SetConfig+0x21c>
 80074c8:	231b      	movs	r3, #27
 80074ca:	2218      	movs	r2, #24
 80074cc:	4694      	mov	ip, r2
 80074ce:	44bc      	add	ip, r7
 80074d0:	4463      	add	r3, ip
 80074d2:	2210      	movs	r2, #16
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	e04f      	b.n	8007578 <UART_SetConfig+0x21c>
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a70      	ldr	r2, [pc, #448]	; (80076a0 <UART_SetConfig+0x344>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d143      	bne.n	800756a <UART_SetConfig+0x20e>
 80074e2:	4b72      	ldr	r3, [pc, #456]	; (80076ac <UART_SetConfig+0x350>)
 80074e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074e6:	23c0      	movs	r3, #192	; 0xc0
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4013      	ands	r3, r2
 80074ec:	22c0      	movs	r2, #192	; 0xc0
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d02a      	beq.n	800754a <UART_SetConfig+0x1ee>
 80074f4:	22c0      	movs	r2, #192	; 0xc0
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d82e      	bhi.n	800755a <UART_SetConfig+0x1fe>
 80074fc:	2280      	movs	r2, #128	; 0x80
 80074fe:	0112      	lsls	r2, r2, #4
 8007500:	4293      	cmp	r3, r2
 8007502:	d012      	beq.n	800752a <UART_SetConfig+0x1ce>
 8007504:	2280      	movs	r2, #128	; 0x80
 8007506:	0112      	lsls	r2, r2, #4
 8007508:	4293      	cmp	r3, r2
 800750a:	d826      	bhi.n	800755a <UART_SetConfig+0x1fe>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <UART_SetConfig+0x1be>
 8007510:	2280      	movs	r2, #128	; 0x80
 8007512:	00d2      	lsls	r2, r2, #3
 8007514:	4293      	cmp	r3, r2
 8007516:	d010      	beq.n	800753a <UART_SetConfig+0x1de>
 8007518:	e01f      	b.n	800755a <UART_SetConfig+0x1fe>
 800751a:	231b      	movs	r3, #27
 800751c:	2218      	movs	r2, #24
 800751e:	4694      	mov	ip, r2
 8007520:	44bc      	add	ip, r7
 8007522:	4463      	add	r3, ip
 8007524:	2200      	movs	r2, #0
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	e026      	b.n	8007578 <UART_SetConfig+0x21c>
 800752a:	231b      	movs	r3, #27
 800752c:	2218      	movs	r2, #24
 800752e:	4694      	mov	ip, r2
 8007530:	44bc      	add	ip, r7
 8007532:	4463      	add	r3, ip
 8007534:	2202      	movs	r2, #2
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	e01e      	b.n	8007578 <UART_SetConfig+0x21c>
 800753a:	231b      	movs	r3, #27
 800753c:	2218      	movs	r2, #24
 800753e:	4694      	mov	ip, r2
 8007540:	44bc      	add	ip, r7
 8007542:	4463      	add	r3, ip
 8007544:	2204      	movs	r2, #4
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e016      	b.n	8007578 <UART_SetConfig+0x21c>
 800754a:	231b      	movs	r3, #27
 800754c:	2218      	movs	r2, #24
 800754e:	4694      	mov	ip, r2
 8007550:	44bc      	add	ip, r7
 8007552:	4463      	add	r3, ip
 8007554:	2208      	movs	r2, #8
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e00e      	b.n	8007578 <UART_SetConfig+0x21c>
 800755a:	231b      	movs	r3, #27
 800755c:	2218      	movs	r2, #24
 800755e:	4694      	mov	ip, r2
 8007560:	44bc      	add	ip, r7
 8007562:	4463      	add	r3, ip
 8007564:	2210      	movs	r2, #16
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e006      	b.n	8007578 <UART_SetConfig+0x21c>
 800756a:	231b      	movs	r3, #27
 800756c:	2218      	movs	r2, #24
 800756e:	4694      	mov	ip, r2
 8007570:	44bc      	add	ip, r7
 8007572:	4463      	add	r3, ip
 8007574:	2210      	movs	r2, #16
 8007576:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a48      	ldr	r2, [pc, #288]	; (80076a0 <UART_SetConfig+0x344>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d000      	beq.n	8007584 <UART_SetConfig+0x228>
 8007582:	e09b      	b.n	80076bc <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007584:	231b      	movs	r3, #27
 8007586:	2218      	movs	r2, #24
 8007588:	4694      	mov	ip, r2
 800758a:	44bc      	add	ip, r7
 800758c:	4463      	add	r3, ip
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d01d      	beq.n	80075d0 <UART_SetConfig+0x274>
 8007594:	dc20      	bgt.n	80075d8 <UART_SetConfig+0x27c>
 8007596:	2b04      	cmp	r3, #4
 8007598:	d015      	beq.n	80075c6 <UART_SetConfig+0x26a>
 800759a:	dc1d      	bgt.n	80075d8 <UART_SetConfig+0x27c>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <UART_SetConfig+0x24a>
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d005      	beq.n	80075b0 <UART_SetConfig+0x254>
 80075a4:	e018      	b.n	80075d8 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a6:	f7fe fdd7 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 80075aa:	0003      	movs	r3, r0
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ae:	e01d      	b.n	80075ec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b0:	4b3e      	ldr	r3, [pc, #248]	; (80076ac <UART_SetConfig+0x350>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2210      	movs	r2, #16
 80075b6:	4013      	ands	r3, r2
 80075b8:	d002      	beq.n	80075c0 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <UART_SetConfig+0x358>)
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075be:	e015      	b.n	80075ec <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 80075c0:	4b3d      	ldr	r3, [pc, #244]	; (80076b8 <UART_SetConfig+0x35c>)
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075c4:	e012      	b.n	80075ec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c6:	f7fe fcf5 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80075ca:	0003      	movs	r3, r0
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ce:	e00d      	b.n	80075ec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d0:	2380      	movs	r3, #128	; 0x80
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d6:	e009      	b.n	80075ec <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80075dc:	231a      	movs	r3, #26
 80075de:	2218      	movs	r2, #24
 80075e0:	4694      	mov	ip, r2
 80075e2:	44bc      	add	ip, r7
 80075e4:	4463      	add	r3, ip
 80075e6:	2201      	movs	r2, #1
 80075e8:	701a      	strb	r2, [r3, #0]
        break;
 80075ea:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d100      	bne.n	80075f4 <UART_SetConfig+0x298>
 80075f2:	e139      	b.n	8007868 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	0013      	movs	r3, r2
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	189b      	adds	r3, r3, r2
 80075fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007600:	429a      	cmp	r2, r3
 8007602:	d305      	bcc.n	8007610 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800760a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800760c:	429a      	cmp	r2, r3
 800760e:	d907      	bls.n	8007620 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007610:	231a      	movs	r3, #26
 8007612:	2218      	movs	r2, #24
 8007614:	4694      	mov	ip, r2
 8007616:	44bc      	add	ip, r7
 8007618:	4463      	add	r3, ip
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e123      	b.n	8007868 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	6939      	ldr	r1, [r7, #16]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	000b      	movs	r3, r1
 800762e:	0e1b      	lsrs	r3, r3, #24
 8007630:	0010      	movs	r0, r2
 8007632:	0205      	lsls	r5, r0, #8
 8007634:	431d      	orrs	r5, r3
 8007636:	000b      	movs	r3, r1
 8007638:	021c      	lsls	r4, r3, #8
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	68b8      	ldr	r0, [r7, #8]
 8007648:	68f9      	ldr	r1, [r7, #12]
 800764a:	1900      	adds	r0, r0, r4
 800764c:	4169      	adcs	r1, r5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	607b      	str	r3, [r7, #4]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f7f8 ff24 	bl	80004a8 <__aeabi_uldivmod>
 8007660:	0002      	movs	r2, r0
 8007662:	000b      	movs	r3, r1
 8007664:	0013      	movs	r3, r2
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800766a:	23c0      	movs	r3, #192	; 0xc0
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	429a      	cmp	r2, r3
 8007670:	d309      	bcc.n	8007686 <UART_SetConfig+0x32a>
 8007672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	035b      	lsls	r3, r3, #13
 8007678:	429a      	cmp	r2, r3
 800767a:	d204      	bcs.n	8007686 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007682:	60da      	str	r2, [r3, #12]
 8007684:	e0f0      	b.n	8007868 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8007686:	231a      	movs	r3, #26
 8007688:	2218      	movs	r2, #24
 800768a:	4694      	mov	ip, r2
 800768c:	44bc      	add	ip, r7
 800768e:	4463      	add	r3, ip
 8007690:	2201      	movs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e0e8      	b.n	8007868 <UART_SetConfig+0x50c>
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	efff69f3 	.word	0xefff69f3
 800769c:	ffffcfff 	.word	0xffffcfff
 80076a0:	40004800 	.word	0x40004800
 80076a4:	fffff4ff 	.word	0xfffff4ff
 80076a8:	40013800 	.word	0x40013800
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40004400 	.word	0x40004400
 80076b4:	003d0900 	.word	0x003d0900
 80076b8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	021b      	lsls	r3, r3, #8
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d000      	beq.n	80076ca <UART_SetConfig+0x36e>
 80076c8:	e074      	b.n	80077b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80076ca:	231b      	movs	r3, #27
 80076cc:	2218      	movs	r2, #24
 80076ce:	4694      	mov	ip, r2
 80076d0:	44bc      	add	ip, r7
 80076d2:	4463      	add	r3, ip
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d822      	bhi.n	8007720 <UART_SetConfig+0x3c4>
 80076da:	009a      	lsls	r2, r3, #2
 80076dc:	4b6a      	ldr	r3, [pc, #424]	; (8007888 <UART_SetConfig+0x52c>)
 80076de:	18d3      	adds	r3, r2, r3
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e4:	f7fe fd38 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 80076e8:	0003      	movs	r3, r0
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076ec:	e022      	b.n	8007734 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ee:	f7fe fd49 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 80076f2:	0003      	movs	r3, r0
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076f6:	e01d      	b.n	8007734 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f8:	4b64      	ldr	r3, [pc, #400]	; (800788c <UART_SetConfig+0x530>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2210      	movs	r2, #16
 80076fe:	4013      	ands	r3, r2
 8007700:	d002      	beq.n	8007708 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007702:	4b63      	ldr	r3, [pc, #396]	; (8007890 <UART_SetConfig+0x534>)
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007706:	e015      	b.n	8007734 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8007708:	4b62      	ldr	r3, [pc, #392]	; (8007894 <UART_SetConfig+0x538>)
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800770c:	e012      	b.n	8007734 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800770e:	f7fe fc51 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8007712:	0003      	movs	r3, r0
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007716:	e00d      	b.n	8007734 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007718:	2380      	movs	r3, #128	; 0x80
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800771e:	e009      	b.n	8007734 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007724:	231a      	movs	r3, #26
 8007726:	2218      	movs	r2, #24
 8007728:	4694      	mov	ip, r2
 800772a:	44bc      	add	ip, r7
 800772c:	4463      	add	r3, ip
 800772e:	2201      	movs	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
        break;
 8007732:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d100      	bne.n	800773c <UART_SetConfig+0x3e0>
 800773a:	e095      	b.n	8007868 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773e:	005a      	lsls	r2, r3, #1
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	18d2      	adds	r2, r2, r3
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	0019      	movs	r1, r3
 800774e:	0010      	movs	r0, r2
 8007750:	f7f8 fcf6 	bl	8000140 <__udivsi3>
 8007754:	0003      	movs	r3, r0
 8007756:	b29b      	uxth	r3, r3
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	2b0f      	cmp	r3, #15
 800775e:	d921      	bls.n	80077a4 <UART_SetConfig+0x448>
 8007760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	025b      	lsls	r3, r3, #9
 8007766:	429a      	cmp	r2, r3
 8007768:	d21c      	bcs.n	80077a4 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	b29a      	uxth	r2, r3
 800776e:	200e      	movs	r0, #14
 8007770:	2418      	movs	r4, #24
 8007772:	193b      	adds	r3, r7, r4
 8007774:	181b      	adds	r3, r3, r0
 8007776:	210f      	movs	r1, #15
 8007778:	438a      	bics	r2, r1
 800777a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	b29b      	uxth	r3, r3
 8007782:	2207      	movs	r2, #7
 8007784:	4013      	ands	r3, r2
 8007786:	b299      	uxth	r1, r3
 8007788:	193b      	adds	r3, r7, r4
 800778a:	181b      	adds	r3, r3, r0
 800778c:	193a      	adds	r2, r7, r4
 800778e:	1812      	adds	r2, r2, r0
 8007790:	8812      	ldrh	r2, [r2, #0]
 8007792:	430a      	orrs	r2, r1
 8007794:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	193a      	adds	r2, r7, r4
 800779c:	1812      	adds	r2, r2, r0
 800779e:	8812      	ldrh	r2, [r2, #0]
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	e061      	b.n	8007868 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80077a4:	231a      	movs	r3, #26
 80077a6:	2218      	movs	r2, #24
 80077a8:	4694      	mov	ip, r2
 80077aa:	44bc      	add	ip, r7
 80077ac:	4463      	add	r3, ip
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
 80077b2:	e059      	b.n	8007868 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077b4:	231b      	movs	r3, #27
 80077b6:	2218      	movs	r2, #24
 80077b8:	4694      	mov	ip, r2
 80077ba:	44bc      	add	ip, r7
 80077bc:	4463      	add	r3, ip
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d822      	bhi.n	800780a <UART_SetConfig+0x4ae>
 80077c4:	009a      	lsls	r2, r3, #2
 80077c6:	4b34      	ldr	r3, [pc, #208]	; (8007898 <UART_SetConfig+0x53c>)
 80077c8:	18d3      	adds	r3, r2, r3
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ce:	f7fe fcc3 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 80077d2:	0003      	movs	r3, r0
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077d6:	e022      	b.n	800781e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d8:	f7fe fcd4 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 80077dc:	0003      	movs	r3, r0
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077e0:	e01d      	b.n	800781e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e2:	4b2a      	ldr	r3, [pc, #168]	; (800788c <UART_SetConfig+0x530>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2210      	movs	r2, #16
 80077e8:	4013      	ands	r3, r2
 80077ea:	d002      	beq.n	80077f2 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80077ec:	4b28      	ldr	r3, [pc, #160]	; (8007890 <UART_SetConfig+0x534>)
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f0:	e015      	b.n	800781e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80077f2:	4b28      	ldr	r3, [pc, #160]	; (8007894 <UART_SetConfig+0x538>)
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077f6:	e012      	b.n	800781e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f8:	f7fe fbdc 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80077fc:	0003      	movs	r3, r0
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007800:	e00d      	b.n	800781e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007808:	e009      	b.n	800781e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800780e:	231a      	movs	r3, #26
 8007810:	2218      	movs	r2, #24
 8007812:	4694      	mov	ip, r2
 8007814:	44bc      	add	ip, r7
 8007816:	4463      	add	r3, ip
 8007818:	2201      	movs	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]
        break;
 800781c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d021      	beq.n	8007868 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	085a      	lsrs	r2, r3, #1
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	18d2      	adds	r2, r2, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	0019      	movs	r1, r3
 8007834:	0010      	movs	r0, r2
 8007836:	f7f8 fc83 	bl	8000140 <__udivsi3>
 800783a:	0003      	movs	r3, r0
 800783c:	b29b      	uxth	r3, r3
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	2b0f      	cmp	r3, #15
 8007844:	d909      	bls.n	800785a <UART_SetConfig+0x4fe>
 8007846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007848:	2380      	movs	r3, #128	; 0x80
 800784a:	025b      	lsls	r3, r3, #9
 800784c:	429a      	cmp	r2, r3
 800784e:	d204      	bcs.n	800785a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007856:	60da      	str	r2, [r3, #12]
 8007858:	e006      	b.n	8007868 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800785a:	231a      	movs	r3, #26
 800785c:	2218      	movs	r2, #24
 800785e:	4694      	mov	ip, r2
 8007860:	44bc      	add	ip, r7
 8007862:	4463      	add	r3, ip
 8007864:	2201      	movs	r2, #1
 8007866:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2200      	movs	r2, #0
 800786c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	2200      	movs	r2, #0
 8007872:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007874:	231a      	movs	r3, #26
 8007876:	2218      	movs	r2, #24
 8007878:	4694      	mov	ip, r2
 800787a:	44bc      	add	ip, r7
 800787c:	4463      	add	r3, ip
 800787e:	781b      	ldrb	r3, [r3, #0]
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b00e      	add	sp, #56	; 0x38
 8007886:	bdb0      	pop	{r4, r5, r7, pc}
 8007888:	0800b2b4 	.word	0x0800b2b4
 800788c:	40021000 	.word	0x40021000
 8007890:	003d0900 	.word	0x003d0900
 8007894:	00f42400 	.word	0x00f42400
 8007898:	0800b2d8 	.word	0x0800b2d8

0800789c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2201      	movs	r2, #1
 80078aa:	4013      	ands	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	4a4a      	ldr	r2, [pc, #296]	; (80079e0 <UART_AdvFeatureConfig+0x144>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	0019      	movs	r1, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	2202      	movs	r2, #2
 80078cc:	4013      	ands	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4a43      	ldr	r2, [pc, #268]	; (80079e4 <UART_AdvFeatureConfig+0x148>)
 80078d8:	4013      	ands	r3, r2
 80078da:	0019      	movs	r1, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2204      	movs	r2, #4
 80078ee:	4013      	ands	r3, r2
 80078f0:	d00b      	beq.n	800790a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a3b      	ldr	r2, [pc, #236]	; (80079e8 <UART_AdvFeatureConfig+0x14c>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	0019      	movs	r1, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2208      	movs	r2, #8
 8007910:	4013      	ands	r3, r2
 8007912:	d00b      	beq.n	800792c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4a34      	ldr	r2, [pc, #208]	; (80079ec <UART_AdvFeatureConfig+0x150>)
 800791c:	4013      	ands	r3, r2
 800791e:	0019      	movs	r1, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2210      	movs	r2, #16
 8007932:	4013      	ands	r3, r2
 8007934:	d00b      	beq.n	800794e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <UART_AdvFeatureConfig+0x154>)
 800793e:	4013      	ands	r3, r2
 8007940:	0019      	movs	r1, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	2220      	movs	r2, #32
 8007954:	4013      	ands	r3, r2
 8007956:	d00b      	beq.n	8007970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <UART_AdvFeatureConfig+0x158>)
 8007960:	4013      	ands	r3, r2
 8007962:	0019      	movs	r1, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2240      	movs	r2, #64	; 0x40
 8007976:	4013      	ands	r3, r2
 8007978:	d01d      	beq.n	80079b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <UART_AdvFeatureConfig+0x15c>)
 8007982:	4013      	ands	r3, r2
 8007984:	0019      	movs	r1, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007996:	2380      	movs	r3, #128	; 0x80
 8007998:	035b      	lsls	r3, r3, #13
 800799a:	429a      	cmp	r2, r3
 800799c:	d10b      	bne.n	80079b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	4a15      	ldr	r2, [pc, #84]	; (80079fc <UART_AdvFeatureConfig+0x160>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	0019      	movs	r1, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	2280      	movs	r2, #128	; 0x80
 80079bc:	4013      	ands	r3, r2
 80079be:	d00b      	beq.n	80079d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4a0e      	ldr	r2, [pc, #56]	; (8007a00 <UART_AdvFeatureConfig+0x164>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	0019      	movs	r1, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	605a      	str	r2, [r3, #4]
  }
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b002      	add	sp, #8
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	fffdffff 	.word	0xfffdffff
 80079e4:	fffeffff 	.word	0xfffeffff
 80079e8:	fffbffff 	.word	0xfffbffff
 80079ec:	ffff7fff 	.word	0xffff7fff
 80079f0:	ffffefff 	.word	0xffffefff
 80079f4:	ffffdfff 	.word	0xffffdfff
 80079f8:	ffefffff 	.word	0xffefffff
 80079fc:	ff9fffff 	.word	0xff9fffff
 8007a00:	fff7ffff 	.word	0xfff7ffff

08007a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2280      	movs	r2, #128	; 0x80
 8007a10:	2100      	movs	r1, #0
 8007a12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a14:	f7fc f8e8 	bl	8003be8 <HAL_GetTick>
 8007a18:	0003      	movs	r3, r0
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2208      	movs	r2, #8
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d10c      	bne.n	8007a44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2280      	movs	r2, #128	; 0x80
 8007a2e:	0391      	lsls	r1, r2, #14
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <UART_CheckIdleState+0x8c>)
 8007a34:	9200      	str	r2, [sp, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f000 f82c 	bl	8007a94 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d001      	beq.n	8007a44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e021      	b.n	8007a88 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d10c      	bne.n	8007a6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	03d1      	lsls	r1, r2, #15
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4a0d      	ldr	r2, [pc, #52]	; (8007a90 <UART_CheckIdleState+0x8c>)
 8007a5c:	9200      	str	r2, [sp, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f000 f818 	bl	8007a94 <UART_WaitOnFlagUntilTimeout>
 8007a64:	1e03      	subs	r3, r0, #0
 8007a66:	d001      	beq.n	8007a6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e00d      	b.n	8007a88 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2274      	movs	r2, #116	; 0x74
 8007a82:	2100      	movs	r1, #0
 8007a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b004      	add	sp, #16
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	01ffffff 	.word	0x01ffffff

08007a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	1dfb      	adds	r3, r7, #7
 8007aa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa4:	e05e      	b.n	8007b64 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	d05b      	beq.n	8007b64 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aac:	f7fc f89c 	bl	8003be8 <HAL_GetTick>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d11b      	bne.n	8007afa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	492f      	ldr	r1, [pc, #188]	; (8007b8c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007ace:	400a      	ands	r2, r1
 8007ad0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2101      	movs	r1, #1
 8007ade:	438a      	bics	r2, r1
 8007ae0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2274      	movs	r2, #116	; 0x74
 8007af2:	2100      	movs	r1, #0
 8007af4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e044      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2204      	movs	r2, #4
 8007b02:	4013      	ands	r3, r2
 8007b04:	d02e      	beq.n	8007b64 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	401a      	ands	r2, r3
 8007b12:	2380      	movs	r3, #128	; 0x80
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d124      	bne.n	8007b64 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2280      	movs	r2, #128	; 0x80
 8007b20:	0112      	lsls	r2, r2, #4
 8007b22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4917      	ldr	r1, [pc, #92]	; (8007b8c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007b30:	400a      	ands	r2, r1
 8007b32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2101      	movs	r1, #1
 8007b40:	438a      	bics	r2, r1
 8007b42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	2120      	movs	r1, #32
 8007b56:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2274      	movs	r2, #116	; 0x74
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e00f      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	425a      	negs	r2, r3
 8007b74:	4153      	adcs	r3, r2
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	001a      	movs	r2, r3
 8007b7a:	1dfb      	adds	r3, r7, #7
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d091      	beq.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	0018      	movs	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b004      	add	sp, #16
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	fffffe5f 	.word	0xfffffe5f

08007b90 <get_global_timer>:
		my_sys.ph_global_timer->overflow_counter++;
	}
}
*/
uint64_t get_global_timer(GlobalTimer_t *thisGlobalTimer)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	uint8_t overflow_count_begin;
	uint64_t tot_value;
	do
	{
		overflow_count_begin = thisGlobalTimer->overflow_counter;
 8007b98:	2017      	movs	r0, #23
 8007b9a:	183b      	adds	r3, r7, r0
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7812      	ldrb	r2, [r2, #0]
 8007ba0:	701a      	strb	r2, [r3, #0]
		tot_value = thisGlobalTimer->h_timer->Instance->CNT + thisGlobalTimer->h_timer->Instance->ARR * (thisGlobalTimer->overflow_counter);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	7809      	ldrb	r1, [r1, #0]
 8007bb6:	434b      	muls	r3, r1
 8007bb8:	18d3      	adds	r3, r2, r3
 8007bba:	60bb      	str	r3, [r7, #8]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]

	} while (overflow_count_begin != thisGlobalTimer->overflow_counter);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	183a      	adds	r2, r7, r0
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d1e5      	bne.n	8007b98 <get_global_timer+0x8>

	return tot_value;	//TODO there is a lot of potential timestamp synchronization issues here, need to be addressed
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	68fb      	ldr	r3, [r7, #12]
}
 8007bd0:	0010      	movs	r0, r2
 8007bd2:	0019      	movs	r1, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b006      	add	sp, #24
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <magnetometer_read>:
	free(thisMagnetometer);
}
//----------------regardless of magnetometer type this methode is our interface between higher layer and driver layer---------------------------------------
//--------------- by calling this methode we will have fresh data provided by low level layer driver ready to use --------------------------
uint8_t magnetometer_read(Magnetometer_t *thisMagnetometer)
{
 8007bda:	b590      	push	{r4, r7, lr}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
	uint8_t res=0;
 8007be2:	230f      	movs	r3, #15
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]
	switch (thisMagnetometer->whichMagnetometer)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b0a      	cmp	r3, #10
 8007bf0:	d002      	beq.n	8007bf8 <magnetometer_read+0x1e>
 8007bf2:	2b14      	cmp	r3, #20
 8007bf4:	d017      	beq.n	8007c26 <magnetometer_read+0x4c>
 8007bf6:	e02d      	b.n	8007c54 <magnetometer_read+0x7a>
	{
	case MAGNETOMETER_TYPE_LIS3MDL:
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	785a      	ldrb	r2, [r3, #1]
 8007bfc:	7899      	ldrb	r1, [r3, #2]
 8007bfe:	0209      	lsls	r1, r1, #8
 8007c00:	430a      	orrs	r2, r1
 8007c02:	78d9      	ldrb	r1, [r3, #3]
 8007c04:	0409      	lsls	r1, r1, #16
 8007c06:	430a      	orrs	r2, r1
 8007c08:	791b      	ldrb	r3, [r3, #4]
 8007c0a:	061b      	lsls	r3, r3, #24
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	001a      	movs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3305      	adds	r3, #5
 8007c14:	210f      	movs	r1, #15
 8007c16:	187c      	adds	r4, r7, r1
 8007c18:	0019      	movs	r1, r3
 8007c1a:	0010      	movs	r0, r2
 8007c1c:	f000 f8d8 	bl	8007dd0 <LIS3MDL_read_XYZ>
 8007c20:	0003      	movs	r3, r0
 8007c22:	7023      	strb	r3, [r4, #0]
		break;
 8007c24:	e016      	b.n	8007c54 <magnetometer_read+0x7a>
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		res = MMC5983_read_XYZ((MMC5983_t*)thisMagnetometer->magnetometer, (uint8_t*)thisMagnetometer->Readings);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	785a      	ldrb	r2, [r3, #1]
 8007c2a:	7899      	ldrb	r1, [r3, #2]
 8007c2c:	0209      	lsls	r1, r1, #8
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	78d9      	ldrb	r1, [r3, #3]
 8007c32:	0409      	lsls	r1, r1, #16
 8007c34:	430a      	orrs	r2, r1
 8007c36:	791b      	ldrb	r3, [r3, #4]
 8007c38:	061b      	lsls	r3, r3, #24
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	001a      	movs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3305      	adds	r3, #5
 8007c42:	210f      	movs	r1, #15
 8007c44:	187c      	adds	r4, r7, r1
 8007c46:	0019      	movs	r1, r3
 8007c48:	0010      	movs	r0, r2
 8007c4a:	f000 f936 	bl	8007eba <MMC5983_read_XYZ>
 8007c4e:	0003      	movs	r3, r0
 8007c50:	7023      	strb	r3, [r4, #0]
		break;
 8007c52:	46c0      	nop			; (mov r8, r8)
	}
	return res;
 8007c54:	230f      	movs	r3, #15
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	781b      	ldrb	r3, [r3, #0]
}
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b005      	add	sp, #20
 8007c60:	bd90      	pop	{r4, r7, pc}
	...

08007c64 <I2C_interface_create>:
#include "i2c_network_interface.h"


I2C_t * I2C_interface_create(I2C_HandleTypeDef *I2C_handle,uint8_t channel_address)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	000a      	movs	r2, r1
 8007c6e:	1cfb      	adds	r3, r7, #3
 8007c70:	701a      	strb	r2, [r3, #0]
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8007c72:	2024      	movs	r0, #36	; 0x24
 8007c74:	f000 fca0 	bl	80085b8 <malloc>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	60fb      	str	r3, [r7, #12]
	if(thisI2C != NULL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d031      	beq.n	8007ce6 <I2C_interface_create+0x82>
	{
		thisI2C->I2C_line = I2C_handle;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	621a      	str	r2, [r3, #32]
		i2c2_interrupt_interface_pointer = thisI2C;
 8007c88:	4b19      	ldr	r3, [pc, #100]	; (8007cf0 <I2C_interface_create+0x8c>)
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	601a      	str	r2, [r3, #0]
		thisI2C->buffer_index=0;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]

		// Disable Own Address1 before setting the new address configuration
		//TODO it is much safer to use HAL compatible address change instead of manual mode
		//is ther any reason for using manual mode?
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4914      	ldr	r1, [pc, #80]	; (8007cf4 <I2C_interface_create+0x90>)
 8007ca4:	400a      	ands	r2, r1
 8007ca6:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 8007ca8:	1cfb      	adds	r3, r7, #3
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	0019      	movs	r1, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2280      	movs	r2, #128	; 0x80
 8007cb8:	0212      	lsls	r2, r2, #8
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->CR2 &= ~I2C_CR2_NACK;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <I2C_interface_create+0x90>)
 8007cce:	400a      	ands	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	212c      	movs	r1, #44	; 0x2c
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		//TODO  erro handler
	}
	return thisI2C;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
}
 8007ce8:	0018      	movs	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b004      	add	sp, #16
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2000106c 	.word	0x2000106c
 8007cf4:	ffff7fff 	.word	0xffff7fff

08007cf8 <I2C2_IRQHandler>:
//------------------------------------------
void I2C2_IRQHandler(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_STOPI) != RESET))
 8007cfc:	4b33      	ldr	r3, [pc, #204]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	2220      	movs	r2, #32
 8007d08:	4013      	ands	r3, r2
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d10e      	bne.n	8007d2c <I2C2_IRQHandler+0x34>
 8007d0e:	4b2f      	ldr	r3, [pc, #188]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d105      	bne.n	8007d2c <I2C2_IRQHandler+0x34>
	{
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_STOPF);
 8007d20:	4b2a      	ldr	r3, [pc, #168]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	61da      	str	r2, [r3, #28]
	}
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_RXI) != RESET))
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	2204      	movs	r2, #4
 8007d38:	4013      	ands	r3, r2
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d12a      	bne.n	8007d94 <I2C2_IRQHandler+0x9c>
 8007d3e:	4b23      	ldr	r3, [pc, #140]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d121      	bne.n	8007d94 <I2C2_IRQHandler+0x9c>
	{
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_RXNE);
 8007d50:	4b1e      	ldr	r3, [pc, #120]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	61da      	str	r2, [r3, #28]
		if(i2c2_interrupt_interface_pointer->buffer_index < I2C_RECEIVE_LENGTH)
 8007d5c:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b1d      	cmp	r3, #29
 8007d66:	d815      	bhi.n	8007d94 <I2C2_IRQHandler+0x9c>
		{
			i2c2_interrupt_interface_pointer->receiveBuffer[i2c2_interrupt_interface_pointer->buffer_index] = (uint8_t)i2c2_interrupt_interface_pointer->I2C_line->Instance->RXDR;
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007d72:	4b16      	ldr	r3, [pc, #88]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4b15      	ldr	r3, [pc, #84]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	b2c9      	uxtb	r1, r1
 8007d80:	18d3      	adds	r3, r2, r3
 8007d82:	1c0a      	adds	r2, r1, #0
 8007d84:	705a      	strb	r2, [r3, #1]
			i2c2_interrupt_interface_pointer->buffer_index++;
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	b2d2      	uxtb	r2, r2
 8007d8e:	3201      	adds	r2, #1
 8007d90:	b2d2      	uxtb	r2, r2
 8007d92:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_ADDRI) != RESET))
 8007d94:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2208      	movs	r2, #8
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d10f      	bne.n	8007dc6 <I2C2_IRQHandler+0xce>
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2208      	movs	r2, #8
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d106      	bne.n	8007dc6 <I2C2_IRQHandler+0xce>
	{
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_ADDR);
 8007db8:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <I2C2_IRQHandler+0xd4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	61da      	str	r2, [r3, #28]
	}
	return;
 8007dc4:	46c0      	nop			; (mov r8, r8)
 8007dc6:	46c0      	nop			; (mov r8, r8)
}
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	2000106c 	.word	0x2000106c

08007dd0 <LIS3MDL_read_XYZ>:
{
	free(thisLIS3MDL);//we may need to turn off or reset chip before freeing memory each chip must have its own destroyer
}
//-----------------------------------------------------
uint8_t LIS3MDL_read_XYZ(LIS3MDL_t *thisLIS3MDL,uint16_t *data)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
		if (thisLIS3MDL->magneticFront == LIS3MDL_MAXREADINGS)
		{
			thisLIS3MDL->magneticFront = 0;
		}
	}*/
}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b002      	add	sp, #8
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <MMC5983_register_read>:
	MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
	return(thisMMC5983);
}

uint8_t MMC5983_register_read(MMC5983_t *thisMMC5983, uint8_t thisRegister)
{
 8007de4:	b5b0      	push	{r4, r5, r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	000a      	movs	r2, r1
 8007dee:	1cfb      	adds	r3, r7, #3
 8007df0:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	uint8_t out[2];
	uint8_t in[2] = {0 , 0};
 8007df2:	2408      	movs	r4, #8
 8007df4:	193b      	adds	r3, r7, r4
 8007df6:	2200      	movs	r2, #0
 8007df8:	801a      	strh	r2, [r3, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8007dfa:	1cfb      	adds	r3, r7, #3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	4252      	negs	r2, r2
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	250c      	movs	r5, #12
 8007e08:	197b      	adds	r3, r7, r5
 8007e0a:	701a      	strb	r2, [r3, #0]
	out[1]= 0;   //transfer dummy byte to get response
 8007e0c:	197b      	adds	r3, r7, r5
 8007e0e:	2200      	movs	r2, #0
 8007e10:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6918      	ldr	r0, [r3, #16]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8a9b      	ldrh	r3, [r3, #20]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	0019      	movs	r1, r3
 8007e1e:	f7fd fa71 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6858      	ldr	r0, [r3, #4]
 8007e26:	193a      	adds	r2, r7, r4
 8007e28:	1979      	adds	r1, r7, r5
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2302      	movs	r3, #2
 8007e30:	f7fe fd0c 	bl	800684c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6918      	ldr	r0, [r3, #16]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8a9b      	ldrh	r3, [r3, #20]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	0019      	movs	r1, r3
 8007e40:	f7fd fa60 	bl	8005304 <HAL_GPIO_WritePin>
	result = in[1];
 8007e44:	210f      	movs	r1, #15
 8007e46:	187b      	adds	r3, r7, r1
 8007e48:	193a      	adds	r2, r7, r4
 8007e4a:	7852      	ldrb	r2, [r2, #1]
 8007e4c:	701a      	strb	r2, [r3, #0]
	return result;
 8007e4e:	187b      	adds	r3, r7, r1
 8007e50:	781b      	ldrb	r3, [r3, #0]
}
 8007e52:	0018      	movs	r0, r3
 8007e54:	46bd      	mov	sp, r7
 8007e56:	b004      	add	sp, #16
 8007e58:	bdb0      	pop	{r4, r5, r7, pc}

08007e5a <MMC5983_register_write>:

void MMC5983_register_write(MMC5983_t *thisMMC5983, uint8_t thisRegister, uint8_t val)
{
 8007e5a:	b590      	push	{r4, r7, lr}
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	0008      	movs	r0, r1
 8007e64:	0011      	movs	r1, r2
 8007e66:	1cfb      	adds	r3, r7, #3
 8007e68:	1c02      	adds	r2, r0, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	1cbb      	adds	r3, r7, #2
 8007e6e:	1c0a      	adds	r2, r1, #0
 8007e70:	701a      	strb	r2, [r3, #0]
	uint8_t out[2];
	out[0] = thisRegister;
 8007e72:	240c      	movs	r4, #12
 8007e74:	193b      	adds	r3, r7, r4
 8007e76:	1cfa      	adds	r2, r7, #3
 8007e78:	7812      	ldrb	r2, [r2, #0]
 8007e7a:	701a      	strb	r2, [r3, #0]
	out[1] = val;
 8007e7c:	193b      	adds	r3, r7, r4
 8007e7e:	1cba      	adds	r2, r7, #2
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6918      	ldr	r0, [r3, #16]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8a9b      	ldrh	r3, [r3, #20]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	0019      	movs	r1, r3
 8007e90:	f7fd fa38 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6858      	ldr	r0, [r3, #4]
 8007e98:	1939      	adds	r1, r7, r4
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	f7fe fb7f 	bl	80065a0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6918      	ldr	r0, [r3, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8a9b      	ldrh	r3, [r3, #20]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	0019      	movs	r1, r3
 8007eae:	f7fd fa29 	bl	8005304 <HAL_GPIO_WritePin>
}
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	b005      	add	sp, #20
 8007eb8:	bd90      	pop	{r4, r7, pc}

08007eba <MMC5983_read_XYZ>:
//-----------  we really do not need to send the second parameter since by having the address of the magnetometer object ----------
//------- we can calculate the offset of x y z data place holder there is risk on that approach if someone in future ------------
//--- add more eleman at the bigining of the structure or change the data type we need to consider those changes ---------
//----and after c++ 11 compiler can not guarantee the address of the first member of the struct is equal to the struct address -------------
uint8_t MMC5983_read_XYZ(MMC5983_t *thisMMC5983,uint8_t * data)
{
 8007eba:	b5b0      	push	{r4, r5, r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
	//TODO  need a better implimentation
	uint8_t sensor_status;
	sensor_status = MMC5983_register_read(thisMMC5983, MMC5983_STATUS);
 8007ec4:	250f      	movs	r5, #15
 8007ec6:	197c      	adds	r4, r7, r5
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2108      	movs	r1, #8
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f7ff ff89 	bl	8007de4 <MMC5983_register_read>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	7023      	strb	r3, [r4, #0]
	if(sensor_status & MMC5983_STATUS_Meas_M_Done )
 8007ed6:	197b      	adds	r3, r7, r5
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2201      	movs	r2, #1
 8007edc:	4013      	ands	r3, r2
 8007ede:	d037      	beq.n	8007f50 <MMC5983_read_XYZ+0x96>
	{
		data[0] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	f7ff ff7d 	bl	8007de4 <MMC5983_register_read>
 8007eea:	0003      	movs	r3, r0
 8007eec:	001a      	movs	r2, r3
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
		data[1] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT0);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	1c5c      	adds	r4, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	0018      	movs	r0, r3
 8007efc:	f7ff ff72 	bl	8007de4 <MMC5983_register_read>
 8007f00:	0003      	movs	r3, r0
 8007f02:	7023      	strb	r3, [r4, #0]
		data[2] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT1);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	1c9c      	adds	r4, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7ff ff69 	bl	8007de4 <MMC5983_register_read>
 8007f12:	0003      	movs	r3, r0
 8007f14:	7023      	strb	r3, [r4, #0]
		data[3] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT0);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	1cdc      	adds	r4, r3, #3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2102      	movs	r1, #2
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7ff ff60 	bl	8007de4 <MMC5983_register_read>
 8007f24:	0003      	movs	r3, r0
 8007f26:	7023      	strb	r3, [r4, #0]
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	1d1c      	adds	r4, r3, #4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2105      	movs	r1, #5
 8007f30:	0018      	movs	r0, r3
 8007f32:	f7ff ff57 	bl	8007de4 <MMC5983_register_read>
 8007f36:	0003      	movs	r3, r0
 8007f38:	7023      	strb	r3, [r4, #0]
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	1d5c      	adds	r4, r3, #5
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2104      	movs	r1, #4
 8007f42:	0018      	movs	r0, r3
 8007f44:	f7ff ff4e 	bl	8007de4 <MMC5983_register_read>
 8007f48:	0003      	movs	r3, r0
 8007f4a:	7023      	strb	r3, [r4, #0]
		return 1;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <MMC5983_read_XYZ+0x98>
	}
	return 0;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	0018      	movs	r0, r3
 8007f54:	46bd      	mov	sp, r7
 8007f56:	b004      	add	sp, #16
 8007f58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007f5c <__NVIC_DisableIRQ>:
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	0002      	movs	r2, r0
 8007f64:	1dfb      	adds	r3, r7, #7
 8007f66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f68:	1dfb      	adds	r3, r7, #7
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f6e:	d810      	bhi.n	8007f92 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f70:	1dfb      	adds	r3, r7, #7
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	001a      	movs	r2, r3
 8007f76:	231f      	movs	r3, #31
 8007f78:	4013      	ands	r3, r2
 8007f7a:	4908      	ldr	r1, [pc, #32]	; (8007f9c <__NVIC_DisableIRQ+0x40>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	409a      	lsls	r2, r3
 8007f80:	0013      	movs	r3, r2
 8007f82:	2280      	movs	r2, #128	; 0x80
 8007f84:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007f86:	f3bf 8f4f 	dsb	sy
}
 8007f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007f8c:	f3bf 8f6f 	isb	sy
}
 8007f90:	46c0      	nop			; (mov r8, r8)
}
 8007f92:	46c0      	nop			; (mov r8, r8)
 8007f94:	46bd      	mov	sp, r7
 8007f96:	b002      	add	sp, #8
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	e000e100 	.word	0xe000e100

08007fa0 <BIT_CLR>:
static inline uint16_t BIT_CLR(uint16_t bits, uint16_t bit){
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	0002      	movs	r2, r0
 8007fa8:	1dbb      	adds	r3, r7, #6
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	1d3b      	adds	r3, r7, #4
 8007fae:	1c0a      	adds	r2, r1, #0
 8007fb0:	801a      	strh	r2, [r3, #0]
	bits = bits & !bit;
 8007fb2:	1d3b      	adds	r3, r7, #4
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	425a      	negs	r2, r3
 8007fb8:	4153      	adcs	r3, r2
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	1dba      	adds	r2, r7, #6
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	5e52      	ldrsh	r2, [r2, r1]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	b21a      	sxth	r2, r3
 8007fc8:	1dbb      	adds	r3, r7, #6
 8007fca:	801a      	strh	r2, [r3, #0]
	return bits;
 8007fcc:	1dbb      	adds	r3, r7, #6
 8007fce:	881b      	ldrh	r3, [r3, #0]
}
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b002      	add	sp, #8
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <IS_BIT_SET>:

static inline uint16_t IS_BIT_SET(volatile uint16_t bits, uint16_t bit){
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	0002      	movs	r2, r0
 8007fe0:	1dbb      	adds	r3, r7, #6
 8007fe2:	801a      	strh	r2, [r3, #0]
 8007fe4:	1d3b      	adds	r3, r7, #4
 8007fe6:	1c0a      	adds	r2, r1, #0
 8007fe8:	801a      	strh	r2, [r3, #0]
	return (bits & (bit)) ? 1 : 0;
 8007fea:	1dbb      	adds	r3, r7, #6
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	1d3a      	adds	r2, r7, #4
 8007ff2:	8812      	ldrh	r2, [r2, #0]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	1e5a      	subs	r2, r3, #1
 8007ffa:	4193      	sbcs	r3, r2
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	b29b      	uxth	r3, r3
}
 8008000:	0018      	movs	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	b002      	add	sp, #8
 8008006:	bd80      	pop	{r7, pc}

08008008 <module_system_init>:
extern I2C_HandleTypeDef hi2c2;
extern TIM_HandleTypeDef htim21;
extern System my_sys;

void module_system_init(System *thisSystem)
{
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	4c14      	ldr	r4, [pc, #80]	; (800805c <module_system_init+0x54>)
 800800c:	44a5      	add	sp, r4
 800800e:	af00      	add	r7, sp, #0
 8008010:	4b13      	ldr	r3, [pc, #76]	; (8008060 <module_system_init+0x58>)
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	6018      	str	r0, [r3, #0]

	HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
	*/
	my_sys.i2c_line = I2C_interface_create(&hi2c2,100);
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <module_system_init+0x5c>)
 8008018:	2164      	movs	r1, #100	; 0x64
 800801a:	0018      	movs	r0, r3
 800801c:	f7ff fe22 	bl	8007c64 <I2C_interface_create>
 8008020:	0001      	movs	r1, r0
 8008022:	4a11      	ldr	r2, [pc, #68]	; (8008068 <module_system_init+0x60>)
 8008024:	23c7      	movs	r3, #199	; 0xc7
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	50d1      	str	r1, [r2, r3]
	my_sys.stimulator = stimulator_create(&hdac, &hadc, &htim21);
 800802a:	4c0f      	ldr	r4, [pc, #60]	; (8008068 <module_system_init+0x60>)
 800802c:	0038      	movs	r0, r7
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <module_system_init+0x64>)
 8008030:	4a0f      	ldr	r2, [pc, #60]	; (8008070 <module_system_init+0x68>)
 8008032:	4910      	ldr	r1, [pc, #64]	; (8008074 <module_system_init+0x6c>)
 8008034:	f7fa fd7a 	bl	8002b2c <stimulator_create>
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <module_system_init+0x70>)
 800803a:	22c6      	movs	r2, #198	; 0xc6
 800803c:	0112      	lsls	r2, r2, #4
 800803e:	18ba      	adds	r2, r7, r2
 8008040:	18d2      	adds	r2, r2, r3
 8008042:	0023      	movs	r3, r4
 8008044:	3318      	adds	r3, #24
 8008046:	0011      	movs	r1, r2
 8008048:	4a0c      	ldr	r2, [pc, #48]	; (800807c <module_system_init+0x74>)
 800804a:	0018      	movs	r0, r3
 800804c:	f000 fabe 	bl	80085cc <memcpy>
	my_sys.sensors[0] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_A_CS_GPIO_Port , SPI_A_CS_Pin , mag_int_a_GPIO_Port , mag_int_a_Pin);
	my_sys.sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
	my_sys.sensors[2] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_C_CS_GPIO_Port , SPI_C_CS_Pin , mag_int_c_GPIO_Port , mag_int_c_Pin);
	*/

}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <module_system_init+0x78>)
 8008056:	449d      	add	sp, r3
 8008058:	bd90      	pop	{r4, r7, pc}
 800805a:	46c0      	nop			; (mov r8, r8)
 800805c:	fffff39c 	.word	0xfffff39c
 8008060:	00000c5c 	.word	0x00000c5c
 8008064:	20000304 	.word	0x20000304
 8008068:	200003a8 	.word	0x200003a8
 800806c:	2000114c 	.word	0x2000114c
 8008070:	20000250 	.word	0x20000250
 8008074:	200002f4 	.word	0x200002f4
 8008078:	fffff3a0 	.word	0xfffff3a0
 800807c:	00000c58 	.word	0x00000c58
 8008080:	00000c64 	.word	0x00000c64

08008084 <state_machine>:

void state_machine(System *thisSystem)
{
 8008084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008086:	b0b5      	sub	sp, #212	; 0xd4
 8008088:	af04      	add	r7, sp, #16
 800808a:	6078      	str	r0, [r7, #4]
	uint32_t output_data[33];
	uint8_t b_read_permit =0;
 800808c:	23bf      	movs	r3, #191	; 0xbf
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
	uint8_t byte_shifter = 0;
 8008094:	23be      	movs	r3, #190	; 0xbe
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
	uint8_t this_byte = 0;
 800809c:	23bc      	movs	r3, #188	; 0xbc
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(b_read_permit)
 80080a4:	23bf      	movs	r3, #191	; 0xbf
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d100      	bne.n	80080b0 <state_machine+0x2c>
 80080ae:	e148      	b.n	8008342 <state_machine+0x2be>
		{
			for (uint8_t sensor_num = 0; sensor_num < NUM_SENSORS; sensor_num++)
 80080b0:	23bd      	movs	r3, #189	; 0xbd
 80080b2:	18fb      	adds	r3, r7, r3
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e139      	b.n	800832e <state_machine+0x2aa>
			{
				if( (thisSystem->sensors[sensor_num]->sensor_status == MAGNETOMETER_OK) & thisSystem->sensors[sensor_num]->b_new_data_needed)
 80080ba:	20bd      	movs	r0, #189	; 0xbd
 80080bc:	183b      	adds	r3, r7, r0
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	3302      	adds	r3, #2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	18d3      	adds	r3, r2, r3
 80080c8:	3304      	adds	r3, #4
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	7e1b      	ldrb	r3, [r3, #24]
 80080ce:	3b51      	subs	r3, #81	; 0x51
 80080d0:	425a      	negs	r2, r3
 80080d2:	4153      	adcs	r3, r2
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	0019      	movs	r1, r3
 80080d8:	183b      	adds	r3, r7, r0
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	3302      	adds	r3, #2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	18d3      	adds	r3, r2, r3
 80080e4:	3304      	adds	r3, #4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	7cdb      	ldrb	r3, [r3, #19]
 80080ea:	400b      	ands	r3, r1
 80080ec:	d100      	bne.n	80080f0 <state_machine+0x6c>
 80080ee:	e118      	b.n	8008322 <state_machine+0x29e>
				{
					if(magnetometer_read(thisSystem->sensors[sensor_num]))
 80080f0:	183b      	adds	r3, r7, r0
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	3302      	adds	r3, #2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	18d3      	adds	r3, r2, r3
 80080fc:	3304      	adds	r3, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	0018      	movs	r0, r3
 8008102:	f7ff fd6a 	bl	8007bda <magnetometer_read>
 8008106:	1e03      	subs	r3, r0, #0
 8008108:	d100      	bne.n	800810c <state_machine+0x88>
 800810a:	e10a      	b.n	8008322 <state_machine+0x29e>
					{
						byte_shifter = 0;
 800810c:	23be      	movs	r3, #190	; 0xbe
 800810e:	18fb      	adds	r3, r7, r3
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 5)
 8008114:	e03c      	b.n	8008190 <state_machine+0x10c>
						{
							//output_data[byte_shifter + sensor_num * 11] = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
							this_byte = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
 8008116:	26bd      	movs	r6, #189	; 0xbd
 8008118:	19bb      	adds	r3, r7, r6
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	3302      	adds	r3, #2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	18d3      	adds	r3, r2, r3
 8008124:	3304      	adds	r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330b      	adds	r3, #11
 800812a:	001a      	movs	r2, r3
 800812c:	21be      	movs	r1, #190	; 0xbe
 800812e:	187b      	adds	r3, r7, r1
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	18d2      	adds	r2, r2, r3
 8008134:	20bc      	movs	r0, #188	; 0xbc
 8008136:	183b      	adds	r3, r7, r0
 8008138:	7812      	ldrb	r2, [r2, #0]
 800813a:	701a      	strb	r2, [r3, #0]
							output_data[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4ad3      	ldr	r2, [pc, #844]	; (800848c <state_machine+0x408>)
 8008140:	589b      	ldr	r3, [r3, r2]
 8008142:	889b      	ldrh	r3, [r3, #4]
 8008144:	001a      	movs	r2, r3
 8008146:	183b      	adds	r3, r7, r0
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	4013      	ands	r3, r2
 800814c:	001c      	movs	r4, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4ace      	ldr	r2, [pc, #824]	; (800848c <state_machine+0x408>)
 8008152:	589b      	ldr	r3, [r3, r2]
 8008154:	889b      	ldrh	r3, [r3, #4]
 8008156:	001a      	movs	r2, r3
 8008158:	183b      	adds	r3, r7, r0
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	43db      	mvns	r3, r3
 800815e:	4013      	ands	r3, r2
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	0018      	movs	r0, r3
 8008164:	000d      	movs	r5, r1
 8008166:	187b      	adds	r3, r7, r1
 8008168:	7819      	ldrb	r1, [r3, #0]
 800816a:	19bb      	adds	r3, r7, r6
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	0013      	movs	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	189b      	adds	r3, r3, r2
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	189b      	adds	r3, r3, r2
 8008178:	18ca      	adds	r2, r1, r3
 800817a:	0021      	movs	r1, r4
 800817c:	4301      	orrs	r1, r0
 800817e:	2330      	movs	r3, #48	; 0x30
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	0092      	lsls	r2, r2, #2
 8008184:	50d1      	str	r1, [r2, r3]
							byte_shifter++;
 8008186:	197b      	adds	r3, r7, r5
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	197b      	adds	r3, r7, r5
 800818c:	3201      	adds	r2, #1
 800818e:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 5)
 8008190:	23be      	movs	r3, #190	; 0xbe
 8008192:	18fb      	adds	r3, r7, r3
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	2b04      	cmp	r3, #4
 8008198:	d9bd      	bls.n	8008116 <state_machine+0x92>
						}

						while (byte_shifter < 11)
 800819a:	e03c      	b.n	8008216 <state_machine+0x192>
						{
							//output_data[byte_shifter + sensor_num * 11] = *(((uint8_t*)thisSystem->sensors[sensor_num]->Readings) + (byte_shifter - 5));
							this_byte = *(((uint8_t*)thisSystem->sensors[sensor_num]->Readings) + (byte_shifter - 5));
 800819c:	26bd      	movs	r6, #189	; 0xbd
 800819e:	19bb      	adds	r3, r7, r6
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	3302      	adds	r3, #2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	18d3      	adds	r3, r2, r3
 80081aa:	3304      	adds	r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	1d5a      	adds	r2, r3, #5
 80081b0:	21be      	movs	r1, #190	; 0xbe
 80081b2:	187b      	adds	r3, r7, r1
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	3b05      	subs	r3, #5
 80081b8:	18d2      	adds	r2, r2, r3
 80081ba:	20bc      	movs	r0, #188	; 0xbc
 80081bc:	183b      	adds	r3, r7, r0
 80081be:	7812      	ldrb	r2, [r2, #0]
 80081c0:	701a      	strb	r2, [r3, #0]
							output_data[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4ab1      	ldr	r2, [pc, #708]	; (800848c <state_machine+0x408>)
 80081c6:	589b      	ldr	r3, [r3, r2]
 80081c8:	889b      	ldrh	r3, [r3, #4]
 80081ca:	001a      	movs	r2, r3
 80081cc:	183b      	adds	r3, r7, r0
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	4013      	ands	r3, r2
 80081d2:	001c      	movs	r4, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4aad      	ldr	r2, [pc, #692]	; (800848c <state_machine+0x408>)
 80081d8:	589b      	ldr	r3, [r3, r2]
 80081da:	889b      	ldrh	r3, [r3, #4]
 80081dc:	001a      	movs	r2, r3
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	43db      	mvns	r3, r3
 80081e4:	4013      	ands	r3, r2
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	0018      	movs	r0, r3
 80081ea:	000d      	movs	r5, r1
 80081ec:	187b      	adds	r3, r7, r1
 80081ee:	7819      	ldrb	r1, [r3, #0]
 80081f0:	19bb      	adds	r3, r7, r6
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	0013      	movs	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	189b      	adds	r3, r3, r2
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	189b      	adds	r3, r3, r2
 80081fe:	18ca      	adds	r2, r1, r3
 8008200:	0021      	movs	r1, r4
 8008202:	4301      	orrs	r1, r0
 8008204:	2330      	movs	r3, #48	; 0x30
 8008206:	18fb      	adds	r3, r7, r3
 8008208:	0092      	lsls	r2, r2, #2
 800820a:	50d1      	str	r1, [r2, r3]
							byte_shifter++;
 800820c:	197b      	adds	r3, r7, r5
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	197b      	adds	r3, r7, r5
 8008212:	3201      	adds	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 11)
 8008216:	23be      	movs	r3, #190	; 0xbe
 8008218:	18fb      	adds	r3, r7, r3
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b0a      	cmp	r3, #10
 800821e:	d9bd      	bls.n	800819c <state_machine+0x118>
						}

						//Declare that new data is no longer needed
						thisSystem->sensors[sensor_num]->b_new_data_needed = 0;
 8008220:	24bd      	movs	r4, #189	; 0xbd
 8008222:	193b      	adds	r3, r7, r4
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	3302      	adds	r3, #2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	18d3      	adds	r3, r2, r3
 800822e:	3304      	adds	r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	74da      	strb	r2, [r3, #19]
						//Begin a new data conversion immediately
						MMC5983_register_write((MMC5983_t*)thisSystem->sensors[sensor_num]->magnetometer, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
 8008236:	193b      	adds	r3, r7, r4
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	3302      	adds	r3, #2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	18d3      	adds	r3, r2, r3
 8008242:	3304      	adds	r3, #4
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	785a      	ldrb	r2, [r3, #1]
 8008248:	7899      	ldrb	r1, [r3, #2]
 800824a:	0209      	lsls	r1, r1, #8
 800824c:	430a      	orrs	r2, r1
 800824e:	78d9      	ldrb	r1, [r3, #3]
 8008250:	0409      	lsls	r1, r1, #16
 8008252:	430a      	orrs	r2, r1
 8008254:	791b      	ldrb	r3, [r3, #4]
 8008256:	061b      	lsls	r3, r3, #24
 8008258:	4313      	orrs	r3, r2
 800825a:	2201      	movs	r2, #1
 800825c:	2109      	movs	r1, #9
 800825e:	0018      	movs	r0, r3
 8008260:	f7ff fdfb 	bl	8007e5a <MMC5983_register_write>
						//Timestamp the new data conversion you ordered
						thisSystem->sensors[sensor_num]->time_stamp = get_global_timer(thisSystem->ph_global_timer);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6899      	ldr	r1, [r3, #8]
 8008268:	193b      	adds	r3, r7, r4
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	3302      	adds	r3, #2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	18d3      	adds	r3, r2, r3
 8008274:	3304      	adds	r3, #4
 8008276:	681c      	ldr	r4, [r3, #0]
 8008278:	0008      	movs	r0, r1
 800827a:	f7ff fc89 	bl	8007b90 <get_global_timer>
 800827e:	0023      	movs	r3, r4
 8008280:	330b      	adds	r3, #11
 8008282:	22ff      	movs	r2, #255	; 0xff
 8008284:	4002      	ands	r2, r0
 8008286:	0015      	movs	r5, r2
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	2400      	movs	r4, #0
 800828c:	4022      	ands	r2, r4
 800828e:	1c14      	adds	r4, r2, #0
 8008290:	1c2a      	adds	r2, r5, #0
 8008292:	4322      	orrs	r2, r4
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	0a02      	lsrs	r2, r0, #8
 8008298:	24ff      	movs	r4, #255	; 0xff
 800829a:	4022      	ands	r2, r4
 800829c:	0015      	movs	r5, r2
 800829e:	785a      	ldrb	r2, [r3, #1]
 80082a0:	2400      	movs	r4, #0
 80082a2:	4022      	ands	r2, r4
 80082a4:	1c14      	adds	r4, r2, #0
 80082a6:	1c2a      	adds	r2, r5, #0
 80082a8:	4322      	orrs	r2, r4
 80082aa:	705a      	strb	r2, [r3, #1]
 80082ac:	0c02      	lsrs	r2, r0, #16
 80082ae:	24ff      	movs	r4, #255	; 0xff
 80082b0:	4022      	ands	r2, r4
 80082b2:	0015      	movs	r5, r2
 80082b4:	789a      	ldrb	r2, [r3, #2]
 80082b6:	2400      	movs	r4, #0
 80082b8:	4022      	ands	r2, r4
 80082ba:	1c14      	adds	r4, r2, #0
 80082bc:	1c2a      	adds	r2, r5, #0
 80082be:	4322      	orrs	r2, r4
 80082c0:	709a      	strb	r2, [r3, #2]
 80082c2:	0e05      	lsrs	r5, r0, #24
 80082c4:	78da      	ldrb	r2, [r3, #3]
 80082c6:	2400      	movs	r4, #0
 80082c8:	4022      	ands	r2, r4
 80082ca:	1c14      	adds	r4, r2, #0
 80082cc:	1c2a      	adds	r2, r5, #0
 80082ce:	4322      	orrs	r2, r4
 80082d0:	70da      	strb	r2, [r3, #3]
 80082d2:	22ff      	movs	r2, #255	; 0xff
 80082d4:	400a      	ands	r2, r1
 80082d6:	0015      	movs	r5, r2
 80082d8:	791a      	ldrb	r2, [r3, #4]
 80082da:	2400      	movs	r4, #0
 80082dc:	4022      	ands	r2, r4
 80082de:	1c14      	adds	r4, r2, #0
 80082e0:	1c2a      	adds	r2, r5, #0
 80082e2:	4322      	orrs	r2, r4
 80082e4:	711a      	strb	r2, [r3, #4]
 80082e6:	0a0a      	lsrs	r2, r1, #8
 80082e8:	24ff      	movs	r4, #255	; 0xff
 80082ea:	4022      	ands	r2, r4
 80082ec:	0015      	movs	r5, r2
 80082ee:	795a      	ldrb	r2, [r3, #5]
 80082f0:	2400      	movs	r4, #0
 80082f2:	4022      	ands	r2, r4
 80082f4:	1c14      	adds	r4, r2, #0
 80082f6:	1c2a      	adds	r2, r5, #0
 80082f8:	4322      	orrs	r2, r4
 80082fa:	715a      	strb	r2, [r3, #5]
 80082fc:	0c0a      	lsrs	r2, r1, #16
 80082fe:	24ff      	movs	r4, #255	; 0xff
 8008300:	4022      	ands	r2, r4
 8008302:	0015      	movs	r5, r2
 8008304:	799a      	ldrb	r2, [r3, #6]
 8008306:	2400      	movs	r4, #0
 8008308:	4022      	ands	r2, r4
 800830a:	1c14      	adds	r4, r2, #0
 800830c:	1c2a      	adds	r2, r5, #0
 800830e:	4322      	orrs	r2, r4
 8008310:	719a      	strb	r2, [r3, #6]
 8008312:	0e08      	lsrs	r0, r1, #24
 8008314:	79da      	ldrb	r2, [r3, #7]
 8008316:	2100      	movs	r1, #0
 8008318:	400a      	ands	r2, r1
 800831a:	1c11      	adds	r1, r2, #0
 800831c:	1c02      	adds	r2, r0, #0
 800831e:	430a      	orrs	r2, r1
 8008320:	71da      	strb	r2, [r3, #7]
			for (uint8_t sensor_num = 0; sensor_num < NUM_SENSORS; sensor_num++)
 8008322:	21bd      	movs	r1, #189	; 0xbd
 8008324:	187b      	adds	r3, r7, r1
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	187b      	adds	r3, r7, r1
 800832a:	3201      	adds	r2, #1
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	23bd      	movs	r3, #189	; 0xbd
 8008330:	18fb      	adds	r3, r7, r3
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d800      	bhi.n	800833a <state_machine+0x2b6>
 8008338:	e6bf      	b.n	80080ba <state_machine+0x36>
						//thisSystem->sensors[sensor_num]->time_stamp++;

					} //Check if the magnetometer has new data ready
				} //Check if magnetometer is functional and if new data is needed
			} //Sensor loop
			b_read_permit =0;
 800833a:	23bf      	movs	r3, #191	; 0xbf
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
		}
		//------------------------------------------
		if(my_sys.i2c_line->buffer_index)
 8008342:	4a53      	ldr	r2, [pc, #332]	; (8008490 <state_machine+0x40c>)
 8008344:	23c7      	movs	r3, #199	; 0xc7
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	58d3      	ldr	r3, [r2, r3]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d100      	bne.n	8008354 <state_machine+0x2d0>
 8008352:	e0fb      	b.n	800854c <state_machine+0x4c8>
		{
			NVIC_DisableIRQ(I2C2_IRQn);
 8008354:	2018      	movs	r0, #24
 8008356:	f7ff fe01 	bl	8007f5c <__NVIC_DisableIRQ>
			switch(my_sys.i2c_line->receiveBuffer[0])
 800835a:	4a4d      	ldr	r2, [pc, #308]	; (8008490 <state_machine+0x40c>)
 800835c:	23c7      	movs	r3, #199	; 0xc7
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	58d3      	ldr	r3, [r2, r3]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	3b0a      	subs	r3, #10
 8008368:	2b66      	cmp	r3, #102	; 0x66
 800836a:	d900      	bls.n	800836e <state_machine+0x2ea>
 800836c:	e097      	b.n	800849e <state_machine+0x41a>
 800836e:	009a      	lsls	r2, r3, #2
 8008370:	4b48      	ldr	r3, [pc, #288]	; (8008494 <state_machine+0x410>)
 8008372:	18d3      	adds	r3, r2, r3
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	469f      	mov	pc, r3
					  //HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
					break;
				}
				case I2C_PACKET_RESET_GLOBAL_TIMER:
				{
					thisSystem->ph_global_timer->h_timer->Instance->CNT = 0;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	625a      	str	r2, [r3, #36]	; 0x24
					thisSystem->ph_global_timer->overflow_counter = 0;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
					break;
 800838c:	e087      	b.n	800849e <state_machine+0x41a>
				}

				//----------test cases---------------------
				case I2C_PACKET_SENSOR_TEST_ROUTINE:
				{
					if(my_sys.sensors[0]->sensor_status == MAGNETOMETER_FAULTY )
 800838e:	4b40      	ldr	r3, [pc, #256]	; (8008490 <state_machine+0x40c>)
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	7e1b      	ldrb	r3, [r3, #24]
 8008394:	2b50      	cmp	r3, #80	; 0x50
 8008396:	d105      	bne.n	80083a4 <state_machine+0x320>
					{
						//HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
						HAL_Delay(200);
 8008398:	20c8      	movs	r0, #200	; 0xc8
 800839a:	f7fb fc2f 	bl	8003bfc <HAL_Delay>
						//HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
						HAL_Delay(250);
 800839e:	20fa      	movs	r0, #250	; 0xfa
 80083a0:	f7fb fc2c 	bl	8003bfc <HAL_Delay>
					}
					if(my_sys.sensors[1]->sensor_status == MAGNETOMETER_FAULTY )
 80083a4:	4b3a      	ldr	r3, [pc, #232]	; (8008490 <state_machine+0x40c>)
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	7e1b      	ldrb	r3, [r3, #24]
 80083aa:	2b50      	cmp	r3, #80	; 0x50
 80083ac:	d105      	bne.n	80083ba <state_machine+0x336>
					{
						//HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
						HAL_Delay(200);
 80083ae:	20c8      	movs	r0, #200	; 0xc8
 80083b0:	f7fb fc24 	bl	8003bfc <HAL_Delay>
						//HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
						HAL_Delay(250);
 80083b4:	20fa      	movs	r0, #250	; 0xfa
 80083b6:	f7fb fc21 	bl	8003bfc <HAL_Delay>
					}
					if(my_sys.sensors[2]->sensor_status == MAGNETOMETER_FAULTY )
 80083ba:	4b35      	ldr	r3, [pc, #212]	; (8008490 <state_machine+0x40c>)
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	7e1b      	ldrb	r3, [r3, #24]
 80083c0:	2b50      	cmp	r3, #80	; 0x50
 80083c2:	d15f      	bne.n	8008484 <state_machine+0x400>
					{
						//HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
						HAL_Delay(200);
 80083c4:	20c8      	movs	r0, #200	; 0xc8
 80083c6:	f7fb fc19 	bl	8003bfc <HAL_Delay>
						//HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
						HAL_Delay(250);
 80083ca:	20fa      	movs	r0, #250	; 0xfa
 80083cc:	f7fb fc16 	bl	8003bfc <HAL_Delay>
					}
				}
				break;
 80083d0:	e058      	b.n	8008484 <state_machine+0x400>
				case I2C_PACKET_BEGIN_MAG_CONVERSION:
				{
					b_read_permit =1;
 80083d2:	23bf      	movs	r3, #191	; 0xbf
 80083d4:	18fb      	adds	r3, r7, r3
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80083da:	e060      	b.n	800849e <state_machine+0x41a>
				case I2C_PACKET_SEND_STIM_DATA_FRAME:
				{
					if (IS_BIT_SET(thisSystem->stimulator.flags, NEW_DATA_READY_FLAG))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8b1b      	ldrh	r3, [r3, #24]
 80083e0:	2102      	movs	r1, #2
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7ff fdf8 	bl	8007fd8 <IS_BIT_SET>
 80083e8:	1e03      	subs	r3, r0, #0
 80083ea:	d04d      	beq.n	8008488 <state_machine+0x404>
					{
						/* New data is ready so transmit data over internal bus */


						/* Once transfer is complete we can clear NEW_DATA_READY_FLAG*/
						uint16_t flags = thisSystem->stimulator.flags;
 80083ec:	21ba      	movs	r1, #186	; 0xba
 80083ee:	187b      	adds	r3, r7, r1
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	8b12      	ldrh	r2, [r2, #24]
 80083f4:	801a      	strh	r2, [r3, #0]
						thisSystem->stimulator.flags = BIT_CLR(flags, NEW_DATA_READY_FLAG);
 80083f6:	187b      	adds	r3, r7, r1
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	2102      	movs	r1, #2
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7ff fdcf 	bl	8007fa0 <BIT_CLR>
 8008402:	0003      	movs	r3, r0
 8008404:	001a      	movs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	831a      	strh	r2, [r3, #24]
					}
				}
				break;
 800840a:	e03d      	b.n	8008488 <state_machine+0x404>
				case I2C_PACKET_BEGIN_STIMULATION:
				{
					NVIC_DisableIRQ(I2C2_IRQn);
 800840c:	2018      	movs	r0, #24
 800840e:	f7ff fda5 	bl	8007f5c <__NVIC_DisableIRQ>
					my_sys.i2c_line->multibyte_rx = TRUE;
 8008412:	4a1f      	ldr	r2, [pc, #124]	; (8008490 <state_machine+0x40c>)
 8008414:	23c7      	movs	r3, #199	; 0xc7
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	58d3      	ldr	r3, [r2, r3]
 800841a:	2201      	movs	r2, #1
 800841c:	77da      	strb	r2, [r3, #31]
					uint16_t flags = thisSystem->stimulator.flags;
 800841e:	21b8      	movs	r1, #184	; 0xb8
 8008420:	187b      	adds	r3, r7, r1
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	8b12      	ldrh	r2, [r2, #24]
 8008426:	801a      	strh	r2, [r3, #0]
					if (IS_BIT_SET(flags, STIM_READY_FLAG))
 8008428:	187b      	adds	r3, r7, r1
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	2104      	movs	r1, #4
 800842e:	0018      	movs	r0, r3
 8008430:	f7ff fdd2 	bl	8007fd8 <IS_BIT_SET>
 8008434:	1e03      	subs	r3, r0, #0
 8008436:	d031      	beq.n	800849c <state_machine+0x418>
					{
						/* If stimulator is ready we can begin stimulation.*/

						int16_t cmd_array[4] = { 3000, 5000, 0, 10000 }; // Send dummy command for now
 8008438:	2128      	movs	r1, #40	; 0x28
 800843a:	187b      	adds	r3, r7, r1
 800843c:	4a16      	ldr	r2, [pc, #88]	; (8008498 <state_machine+0x414>)
 800843e:	ca11      	ldmia	r2!, {r0, r4}
 8008440:	c311      	stmia	r3!, {r0, r4}
						event_t event;
						event.name = STIM_RUN_CMD;
 8008442:	240c      	movs	r4, #12
 8008444:	193b      	adds	r3, r7, r4
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
						memcpy(event.data, cmd_array, sizeof(cmd_array));
 800844a:	193b      	adds	r3, r7, r4
 800844c:	2202      	movs	r2, #2
 800844e:	1879      	adds	r1, r7, r1
 8008450:	189b      	adds	r3, r3, r2
 8008452:	2208      	movs	r2, #8
 8008454:	0018      	movs	r0, r3
 8008456:	f000 f8b9 	bl	80085cc <memcpy>
						event.data_size = sizeof(cmd_array);
 800845a:	193b      	adds	r3, r7, r4
 800845c:	2208      	movs	r2, #8
 800845e:	619a      	str	r2, [r3, #24]
						push_event(&(thisSystem->stimulator.event_queue), event);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3334      	adds	r3, #52	; 0x34
 8008464:	0018      	movs	r0, r3
 8008466:	193b      	adds	r3, r7, r4
 8008468:	466a      	mov	r2, sp
 800846a:	0011      	movs	r1, r2
 800846c:	001a      	movs	r2, r3
 800846e:	320c      	adds	r2, #12
 8008470:	ca70      	ldmia	r2!, {r4, r5, r6}
 8008472:	c170      	stmia	r1!, {r4, r5, r6}
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	600a      	str	r2, [r1, #0]
 8008478:	6819      	ldr	r1, [r3, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f7fa fa43 	bl	8002908 <push_event>

					}
				}
				break;
 8008482:	e00b      	b.n	800849c <state_machine+0x418>
				break;
 8008484:	46c0      	nop			; (mov r8, r8)
 8008486:	e00a      	b.n	800849e <state_machine+0x41a>
				break;
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	e008      	b.n	800849e <state_machine+0x41a>
 800848c:	00000c74 	.word	0x00000c74
 8008490:	200003a8 	.word	0x200003a8
 8008494:	0800b2fc 	.word	0x0800b2fc
 8008498:	0800b208 	.word	0x0800b208
				break;
 800849c:	46c0      	nop			; (mov r8, r8)
			}
			//-------- if we get any data higher than 0x80  it mean it is a new address
			if ( thisSystem->i2c_line->receiveBuffer[0] > I2C_PACKET_SET_NEW_ADDRESS )
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	23c7      	movs	r3, #199	; 0xc7
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	58d3      	ldr	r3, [r2, r3]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b80      	cmp	r3, #128	; 0x80
 80084ac:	d948      	bls.n	8008540 <state_machine+0x4bc>
			{
				__HAL_I2C_DISABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	23c7      	movs	r3, #199	; 0xc7
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	58d3      	ldr	r3, [r2, r3]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	23c7      	movs	r3, #199	; 0xc7
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	58cb      	ldr	r3, [r1, r3]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	212c      	movs	r1, #44	; 0x2c
 80084ca:	438a      	bics	r2, r1
 80084cc:	601a      	str	r2, [r3, #0]
				uint8_t i2c_new_address =  (uint8_t)my_sys.i2c_line->receiveBuffer[0] & 0x7f;
 80084ce:	4a22      	ldr	r2, [pc, #136]	; (8008558 <state_machine+0x4d4>)
 80084d0:	23c7      	movs	r3, #199	; 0xc7
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	58d3      	ldr	r3, [r2, r3]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	20b7      	movs	r0, #183	; 0xb7
 80084dc:	183b      	adds	r3, r7, r0
 80084de:	217f      	movs	r1, #127	; 0x7f
 80084e0:	400a      	ands	r2, r1
 80084e2:	701a      	strb	r2, [r3, #0]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	23c7      	movs	r3, #199	; 0xc7
 80084e8:	011b      	lsls	r3, r3, #4
 80084ea:	58d3      	ldr	r3, [r2, r3]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	23c7      	movs	r3, #199	; 0xc7
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	58cb      	ldr	r3, [r1, r3]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4917      	ldr	r1, [pc, #92]	; (800855c <state_machine+0x4d8>)
 8008500:	400a      	ands	r2, r1
 8008502:	609a      	str	r2, [r3, #8]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( i2c_new_address << 1) );
 8008504:	183b      	adds	r3, r7, r0
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	0019      	movs	r1, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	23c7      	movs	r3, #199	; 0xc7
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	58d3      	ldr	r3, [r2, r3]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2280      	movs	r2, #128	; 0x80
 800851a:	0212      	lsls	r2, r2, #8
 800851c:	430a      	orrs	r2, r1
 800851e:	609a      	str	r2, [r3, #8]
				__HAL_I2C_ENABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	23c7      	movs	r3, #199	; 0xc7
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	58d3      	ldr	r3, [r2, r3]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	23c7      	movs	r3, #199	; 0xc7
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	58cb      	ldr	r3, [r1, r3]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	212c      	movs	r1, #44	; 0x2c
 800853c:	430a      	orrs	r2, r1
 800853e:	601a      	str	r2, [r3, #0]
			}
		my_sys.i2c_line->buffer_index =0;
 8008540:	4a05      	ldr	r2, [pc, #20]	; (8008558 <state_machine+0x4d4>)
 8008542:	23c7      	movs	r3, #199	; 0xc7
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	58d3      	ldr	r3, [r2, r3]
 8008548:	2200      	movs	r2, #0
 800854a:	701a      	strb	r2, [r3, #0]
		}

		/* Stimulator State Machine Start */
		stimulator_state_machine(&((&my_sys)->stimulator));
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <state_machine+0x4dc>)
 800854e:	0018      	movs	r0, r3
 8008550:	f7fa fb8a 	bl	8002c68 <stimulator_state_machine>
		if(b_read_permit)
 8008554:	e5a6      	b.n	80080a4 <state_machine+0x20>
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	200003a8 	.word	0x200003a8
 800855c:	ffff7fff 	.word	0xffff7fff
 8008560:	200003c0 	.word	0x200003c0

08008564 <__errno>:
 8008564:	4b01      	ldr	r3, [pc, #4]	; (800856c <__errno+0x8>)
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	4770      	bx	lr
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	2000000c 	.word	0x2000000c

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	2600      	movs	r6, #0
 8008574:	4d0c      	ldr	r5, [pc, #48]	; (80085a8 <__libc_init_array+0x38>)
 8008576:	4c0d      	ldr	r4, [pc, #52]	; (80085ac <__libc_init_array+0x3c>)
 8008578:	1b64      	subs	r4, r4, r5
 800857a:	10a4      	asrs	r4, r4, #2
 800857c:	42a6      	cmp	r6, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	2600      	movs	r6, #0
 8008582:	f002 fe33 	bl	800b1ec <_init>
 8008586:	4d0a      	ldr	r5, [pc, #40]	; (80085b0 <__libc_init_array+0x40>)
 8008588:	4c0a      	ldr	r4, [pc, #40]	; (80085b4 <__libc_init_array+0x44>)
 800858a:	1b64      	subs	r4, r4, r5
 800858c:	10a4      	asrs	r4, r4, #2
 800858e:	42a6      	cmp	r6, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	00b3      	lsls	r3, r6, #2
 8008596:	58eb      	ldr	r3, [r5, r3]
 8008598:	4798      	blx	r3
 800859a:	3601      	adds	r6, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	00b3      	lsls	r3, r6, #2
 80085a0:	58eb      	ldr	r3, [r5, r3]
 80085a2:	4798      	blx	r3
 80085a4:	3601      	adds	r6, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	0800b884 	.word	0x0800b884
 80085ac:	0800b884 	.word	0x0800b884
 80085b0:	0800b884 	.word	0x0800b884
 80085b4:	0800b888 	.word	0x0800b888

080085b8 <malloc>:
 80085b8:	b510      	push	{r4, lr}
 80085ba:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <malloc+0x10>)
 80085bc:	0001      	movs	r1, r0
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	f000 f860 	bl	8008684 <_malloc_r>
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	2000000c 	.word	0x2000000c

080085cc <memcpy>:
 80085cc:	2300      	movs	r3, #0
 80085ce:	b510      	push	{r4, lr}
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d100      	bne.n	80085d6 <memcpy+0xa>
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	5ccc      	ldrb	r4, [r1, r3]
 80085d8:	54c4      	strb	r4, [r0, r3]
 80085da:	3301      	adds	r3, #1
 80085dc:	e7f8      	b.n	80085d0 <memcpy+0x4>

080085de <memset>:
 80085de:	0003      	movs	r3, r0
 80085e0:	1882      	adds	r2, r0, r2
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d100      	bne.n	80085e8 <memset+0xa>
 80085e6:	4770      	bx	lr
 80085e8:	7019      	strb	r1, [r3, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	e7f9      	b.n	80085e2 <memset+0x4>
	...

080085f0 <_free_r>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	0005      	movs	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d010      	beq.n	800861a <_free_r+0x2a>
 80085f8:	1f0c      	subs	r4, r1, #4
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	da00      	bge.n	8008602 <_free_r+0x12>
 8008600:	18e4      	adds	r4, r4, r3
 8008602:	0028      	movs	r0, r5
 8008604:	f001 fbe2 	bl	8009dcc <__malloc_lock>
 8008608:	4a1d      	ldr	r2, [pc, #116]	; (8008680 <_free_r+0x90>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d105      	bne.n	800861c <_free_r+0x2c>
 8008610:	6063      	str	r3, [r4, #4]
 8008612:	6014      	str	r4, [r2, #0]
 8008614:	0028      	movs	r0, r5
 8008616:	f001 fbe1 	bl	8009ddc <__malloc_unlock>
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6821      	ldr	r1, [r4, #0]
 8008622:	1860      	adds	r0, r4, r1
 8008624:	4283      	cmp	r3, r0
 8008626:	d1f3      	bne.n	8008610 <_free_r+0x20>
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	1841      	adds	r1, r0, r1
 800862e:	6021      	str	r1, [r4, #0]
 8008630:	e7ee      	b.n	8008610 <_free_r+0x20>
 8008632:	001a      	movs	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <_free_r+0x4e>
 800863a:	42a3      	cmp	r3, r4
 800863c:	d9f9      	bls.n	8008632 <_free_r+0x42>
 800863e:	6811      	ldr	r1, [r2, #0]
 8008640:	1850      	adds	r0, r2, r1
 8008642:	42a0      	cmp	r0, r4
 8008644:	d10b      	bne.n	800865e <_free_r+0x6e>
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	1809      	adds	r1, r1, r0
 800864a:	1850      	adds	r0, r2, r1
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	4283      	cmp	r3, r0
 8008650:	d1e0      	bne.n	8008614 <_free_r+0x24>
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	1841      	adds	r1, r0, r1
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	6053      	str	r3, [r2, #4]
 800865c:	e7da      	b.n	8008614 <_free_r+0x24>
 800865e:	42a0      	cmp	r0, r4
 8008660:	d902      	bls.n	8008668 <_free_r+0x78>
 8008662:	230c      	movs	r3, #12
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	e7d5      	b.n	8008614 <_free_r+0x24>
 8008668:	6821      	ldr	r1, [r4, #0]
 800866a:	1860      	adds	r0, r4, r1
 800866c:	4283      	cmp	r3, r0
 800866e:	d103      	bne.n	8008678 <_free_r+0x88>
 8008670:	6818      	ldr	r0, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	1841      	adds	r1, r0, r1
 8008676:	6021      	str	r1, [r4, #0]
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	6054      	str	r4, [r2, #4]
 800867c:	e7ca      	b.n	8008614 <_free_r+0x24>
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	20000200 	.word	0x20000200

08008684 <_malloc_r>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	2303      	movs	r3, #3
 8008688:	1ccd      	adds	r5, r1, #3
 800868a:	439d      	bics	r5, r3
 800868c:	3508      	adds	r5, #8
 800868e:	0006      	movs	r6, r0
 8008690:	2d0c      	cmp	r5, #12
 8008692:	d21f      	bcs.n	80086d4 <_malloc_r+0x50>
 8008694:	250c      	movs	r5, #12
 8008696:	42a9      	cmp	r1, r5
 8008698:	d81e      	bhi.n	80086d8 <_malloc_r+0x54>
 800869a:	0030      	movs	r0, r6
 800869c:	f001 fb96 	bl	8009dcc <__malloc_lock>
 80086a0:	4925      	ldr	r1, [pc, #148]	; (8008738 <_malloc_r+0xb4>)
 80086a2:	680a      	ldr	r2, [r1, #0]
 80086a4:	0014      	movs	r4, r2
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d11a      	bne.n	80086e0 <_malloc_r+0x5c>
 80086aa:	4f24      	ldr	r7, [pc, #144]	; (800873c <_malloc_r+0xb8>)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <_malloc_r+0x38>
 80086b2:	0021      	movs	r1, r4
 80086b4:	0030      	movs	r0, r6
 80086b6:	f000 fcbd 	bl	8009034 <_sbrk_r>
 80086ba:	6038      	str	r0, [r7, #0]
 80086bc:	0029      	movs	r1, r5
 80086be:	0030      	movs	r0, r6
 80086c0:	f000 fcb8 	bl	8009034 <_sbrk_r>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d12b      	bne.n	8008720 <_malloc_r+0x9c>
 80086c8:	230c      	movs	r3, #12
 80086ca:	0030      	movs	r0, r6
 80086cc:	6033      	str	r3, [r6, #0]
 80086ce:	f001 fb85 	bl	8009ddc <__malloc_unlock>
 80086d2:	e003      	b.n	80086dc <_malloc_r+0x58>
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	dade      	bge.n	8008696 <_malloc_r+0x12>
 80086d8:	230c      	movs	r3, #12
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	2000      	movs	r0, #0
 80086de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	1b5b      	subs	r3, r3, r5
 80086e4:	d419      	bmi.n	800871a <_malloc_r+0x96>
 80086e6:	2b0b      	cmp	r3, #11
 80086e8:	d903      	bls.n	80086f2 <_malloc_r+0x6e>
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	18e4      	adds	r4, r4, r3
 80086ee:	6025      	str	r5, [r4, #0]
 80086f0:	e003      	b.n	80086fa <_malloc_r+0x76>
 80086f2:	6863      	ldr	r3, [r4, #4]
 80086f4:	42a2      	cmp	r2, r4
 80086f6:	d10e      	bne.n	8008716 <_malloc_r+0x92>
 80086f8:	600b      	str	r3, [r1, #0]
 80086fa:	0030      	movs	r0, r6
 80086fc:	f001 fb6e 	bl	8009ddc <__malloc_unlock>
 8008700:	0020      	movs	r0, r4
 8008702:	2207      	movs	r2, #7
 8008704:	300b      	adds	r0, #11
 8008706:	1d23      	adds	r3, r4, #4
 8008708:	4390      	bics	r0, r2
 800870a:	1ac2      	subs	r2, r0, r3
 800870c:	4298      	cmp	r0, r3
 800870e:	d0e6      	beq.n	80086de <_malloc_r+0x5a>
 8008710:	1a1b      	subs	r3, r3, r0
 8008712:	50a3      	str	r3, [r4, r2]
 8008714:	e7e3      	b.n	80086de <_malloc_r+0x5a>
 8008716:	6053      	str	r3, [r2, #4]
 8008718:	e7ef      	b.n	80086fa <_malloc_r+0x76>
 800871a:	0022      	movs	r2, r4
 800871c:	6864      	ldr	r4, [r4, #4]
 800871e:	e7c2      	b.n	80086a6 <_malloc_r+0x22>
 8008720:	2303      	movs	r3, #3
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	439c      	bics	r4, r3
 8008726:	42a0      	cmp	r0, r4
 8008728:	d0e1      	beq.n	80086ee <_malloc_r+0x6a>
 800872a:	1a21      	subs	r1, r4, r0
 800872c:	0030      	movs	r0, r6
 800872e:	f000 fc81 	bl	8009034 <_sbrk_r>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	d1db      	bne.n	80086ee <_malloc_r+0x6a>
 8008736:	e7c7      	b.n	80086c8 <_malloc_r+0x44>
 8008738:	20000200 	.word	0x20000200
 800873c:	20000204 	.word	0x20000204

08008740 <__cvt>:
 8008740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008742:	001e      	movs	r6, r3
 8008744:	2300      	movs	r3, #0
 8008746:	0014      	movs	r4, r2
 8008748:	b08b      	sub	sp, #44	; 0x2c
 800874a:	429e      	cmp	r6, r3
 800874c:	da04      	bge.n	8008758 <__cvt+0x18>
 800874e:	2180      	movs	r1, #128	; 0x80
 8008750:	0609      	lsls	r1, r1, #24
 8008752:	1873      	adds	r3, r6, r1
 8008754:	001e      	movs	r6, r3
 8008756:	232d      	movs	r3, #45	; 0x2d
 8008758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800875a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800875c:	7013      	strb	r3, [r2, #0]
 800875e:	2320      	movs	r3, #32
 8008760:	2203      	movs	r2, #3
 8008762:	439f      	bics	r7, r3
 8008764:	2f46      	cmp	r7, #70	; 0x46
 8008766:	d007      	beq.n	8008778 <__cvt+0x38>
 8008768:	003b      	movs	r3, r7
 800876a:	3b45      	subs	r3, #69	; 0x45
 800876c:	4259      	negs	r1, r3
 800876e:	414b      	adcs	r3, r1
 8008770:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008772:	3a01      	subs	r2, #1
 8008774:	18cb      	adds	r3, r1, r3
 8008776:	9310      	str	r3, [sp, #64]	; 0x40
 8008778:	ab09      	add	r3, sp, #36	; 0x24
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	ab08      	add	r3, sp, #32
 800877e:	9303      	str	r3, [sp, #12]
 8008780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008782:	9200      	str	r2, [sp, #0]
 8008784:	9302      	str	r3, [sp, #8]
 8008786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008788:	0022      	movs	r2, r4
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	0033      	movs	r3, r6
 800878e:	f000 fcef 	bl	8009170 <_dtoa_r>
 8008792:	0005      	movs	r5, r0
 8008794:	2f47      	cmp	r7, #71	; 0x47
 8008796:	d102      	bne.n	800879e <__cvt+0x5e>
 8008798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800879a:	07db      	lsls	r3, r3, #31
 800879c:	d528      	bpl.n	80087f0 <__cvt+0xb0>
 800879e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087a0:	18eb      	adds	r3, r5, r3
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	2f46      	cmp	r7, #70	; 0x46
 80087a6:	d114      	bne.n	80087d2 <__cvt+0x92>
 80087a8:	782b      	ldrb	r3, [r5, #0]
 80087aa:	2b30      	cmp	r3, #48	; 0x30
 80087ac:	d10c      	bne.n	80087c8 <__cvt+0x88>
 80087ae:	2200      	movs	r2, #0
 80087b0:	2300      	movs	r3, #0
 80087b2:	0020      	movs	r0, r4
 80087b4:	0031      	movs	r1, r6
 80087b6:	f7f7 fe49 	bl	800044c <__aeabi_dcmpeq>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d104      	bne.n	80087c8 <__cvt+0x88>
 80087be:	2301      	movs	r3, #1
 80087c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ca:	9a07      	ldr	r2, [sp, #28]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	18d3      	adds	r3, r2, r3
 80087d0:	9307      	str	r3, [sp, #28]
 80087d2:	2200      	movs	r2, #0
 80087d4:	2300      	movs	r3, #0
 80087d6:	0020      	movs	r0, r4
 80087d8:	0031      	movs	r1, r6
 80087da:	f7f7 fe37 	bl	800044c <__aeabi_dcmpeq>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d001      	beq.n	80087e6 <__cvt+0xa6>
 80087e2:	9b07      	ldr	r3, [sp, #28]
 80087e4:	9309      	str	r3, [sp, #36]	; 0x24
 80087e6:	2230      	movs	r2, #48	; 0x30
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	9907      	ldr	r1, [sp, #28]
 80087ec:	428b      	cmp	r3, r1
 80087ee:	d306      	bcc.n	80087fe <__cvt+0xbe>
 80087f0:	0028      	movs	r0, r5
 80087f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80087f6:	1b5b      	subs	r3, r3, r5
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	b00b      	add	sp, #44	; 0x2c
 80087fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fe:	1c59      	adds	r1, r3, #1
 8008800:	9109      	str	r1, [sp, #36]	; 0x24
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	e7f0      	b.n	80087e8 <__cvt+0xa8>

08008806 <__exponent>:
 8008806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008808:	1c83      	adds	r3, r0, #2
 800880a:	b087      	sub	sp, #28
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	0005      	movs	r5, r0
 8008810:	000c      	movs	r4, r1
 8008812:	232b      	movs	r3, #43	; 0x2b
 8008814:	7002      	strb	r2, [r0, #0]
 8008816:	2900      	cmp	r1, #0
 8008818:	da01      	bge.n	800881e <__exponent+0x18>
 800881a:	424c      	negs	r4, r1
 800881c:	3302      	adds	r3, #2
 800881e:	706b      	strb	r3, [r5, #1]
 8008820:	2c09      	cmp	r4, #9
 8008822:	dd31      	ble.n	8008888 <__exponent+0x82>
 8008824:	270a      	movs	r7, #10
 8008826:	ab04      	add	r3, sp, #16
 8008828:	1dde      	adds	r6, r3, #7
 800882a:	0020      	movs	r0, r4
 800882c:	0039      	movs	r1, r7
 800882e:	9601      	str	r6, [sp, #4]
 8008830:	f7f7 fdf6 	bl	8000420 <__aeabi_idivmod>
 8008834:	3e01      	subs	r6, #1
 8008836:	3130      	adds	r1, #48	; 0x30
 8008838:	0020      	movs	r0, r4
 800883a:	7031      	strb	r1, [r6, #0]
 800883c:	0039      	movs	r1, r7
 800883e:	9402      	str	r4, [sp, #8]
 8008840:	f7f7 fd08 	bl	8000254 <__divsi3>
 8008844:	9b02      	ldr	r3, [sp, #8]
 8008846:	0004      	movs	r4, r0
 8008848:	2b63      	cmp	r3, #99	; 0x63
 800884a:	dcee      	bgt.n	800882a <__exponent+0x24>
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	3430      	adds	r4, #48	; 0x30
 8008850:	1e9a      	subs	r2, r3, #2
 8008852:	0013      	movs	r3, r2
 8008854:	9903      	ldr	r1, [sp, #12]
 8008856:	7014      	strb	r4, [r2, #0]
 8008858:	a804      	add	r0, sp, #16
 800885a:	3007      	adds	r0, #7
 800885c:	4298      	cmp	r0, r3
 800885e:	d80e      	bhi.n	800887e <__exponent+0x78>
 8008860:	ab04      	add	r3, sp, #16
 8008862:	3307      	adds	r3, #7
 8008864:	2000      	movs	r0, #0
 8008866:	429a      	cmp	r2, r3
 8008868:	d804      	bhi.n	8008874 <__exponent+0x6e>
 800886a:	ab04      	add	r3, sp, #16
 800886c:	3009      	adds	r0, #9
 800886e:	18c0      	adds	r0, r0, r3
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	1ac0      	subs	r0, r0, r3
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1818      	adds	r0, r3, r0
 8008878:	1b40      	subs	r0, r0, r5
 800887a:	b007      	add	sp, #28
 800887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800887e:	7818      	ldrb	r0, [r3, #0]
 8008880:	3301      	adds	r3, #1
 8008882:	7008      	strb	r0, [r1, #0]
 8008884:	3101      	adds	r1, #1
 8008886:	e7e7      	b.n	8008858 <__exponent+0x52>
 8008888:	2330      	movs	r3, #48	; 0x30
 800888a:	18e4      	adds	r4, r4, r3
 800888c:	70ab      	strb	r3, [r5, #2]
 800888e:	1d28      	adds	r0, r5, #4
 8008890:	70ec      	strb	r4, [r5, #3]
 8008892:	e7f1      	b.n	8008878 <__exponent+0x72>

08008894 <_printf_float>:
 8008894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008896:	b095      	sub	sp, #84	; 0x54
 8008898:	000c      	movs	r4, r1
 800889a:	9208      	str	r2, [sp, #32]
 800889c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	0007      	movs	r7, r0
 80088a2:	f001 fa83 	bl	8009dac <_localeconv_r>
 80088a6:	6803      	ldr	r3, [r0, #0]
 80088a8:	0018      	movs	r0, r3
 80088aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ac:	f7f7 fc2c 	bl	8000108 <strlen>
 80088b0:	2300      	movs	r3, #0
 80088b2:	9312      	str	r3, [sp, #72]	; 0x48
 80088b4:	7e23      	ldrb	r3, [r4, #24]
 80088b6:	2207      	movs	r2, #7
 80088b8:	001e      	movs	r6, r3
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	900d      	str	r0, [sp, #52]	; 0x34
 80088be:	930c      	str	r3, [sp, #48]	; 0x30
 80088c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088c2:	682b      	ldr	r3, [r5, #0]
 80088c4:	05c9      	lsls	r1, r1, #23
 80088c6:	d547      	bpl.n	8008958 <_printf_float+0xc4>
 80088c8:	189b      	adds	r3, r3, r2
 80088ca:	4393      	bics	r3, r2
 80088cc:	001a      	movs	r2, r3
 80088ce:	3208      	adds	r2, #8
 80088d0:	602a      	str	r2, [r5, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	64a2      	str	r2, [r4, #72]	; 0x48
 80088d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80088da:	2201      	movs	r2, #1
 80088dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80088de:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80088e0:	930a      	str	r3, [sp, #40]	; 0x28
 80088e2:	006b      	lsls	r3, r5, #1
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	930e      	str	r3, [sp, #56]	; 0x38
 80088e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088ea:	4ba8      	ldr	r3, [pc, #672]	; (8008b8c <_printf_float+0x2f8>)
 80088ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80088ee:	4252      	negs	r2, r2
 80088f0:	f7f9 fc7a 	bl	80021e8 <__aeabi_dcmpun>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d131      	bne.n	800895c <_printf_float+0xc8>
 80088f8:	2201      	movs	r2, #1
 80088fa:	4ba4      	ldr	r3, [pc, #656]	; (8008b8c <_printf_float+0x2f8>)
 80088fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008900:	4252      	negs	r2, r2
 8008902:	f7f7 fdb3 	bl	800046c <__aeabi_dcmple>
 8008906:	2800      	cmp	r0, #0
 8008908:	d128      	bne.n	800895c <_printf_float+0xc8>
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	0029      	movs	r1, r5
 8008910:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008912:	f7f7 fda1 	bl	8000458 <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	d003      	beq.n	8008922 <_printf_float+0x8e>
 800891a:	0023      	movs	r3, r4
 800891c:	222d      	movs	r2, #45	; 0x2d
 800891e:	3343      	adds	r3, #67	; 0x43
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	4d9b      	ldr	r5, [pc, #620]	; (8008b90 <_printf_float+0x2fc>)
 8008924:	2e47      	cmp	r6, #71	; 0x47
 8008926:	d900      	bls.n	800892a <_printf_float+0x96>
 8008928:	4d9a      	ldr	r5, [pc, #616]	; (8008b94 <_printf_float+0x300>)
 800892a:	2303      	movs	r3, #3
 800892c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	3301      	adds	r3, #1
 8008932:	439a      	bics	r2, r3
 8008934:	2300      	movs	r3, #0
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	930a      	str	r3, [sp, #40]	; 0x28
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	0021      	movs	r1, r4
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	0038      	movs	r0, r7
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	aa13      	add	r2, sp, #76	; 0x4c
 8008946:	f000 f9f3 	bl	8008d30 <_printf_common>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	d000      	beq.n	8008950 <_printf_float+0xbc>
 800894e:	e09e      	b.n	8008a8e <_printf_float+0x1fa>
 8008950:	2001      	movs	r0, #1
 8008952:	4240      	negs	r0, r0
 8008954:	b015      	add	sp, #84	; 0x54
 8008956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008958:	3307      	adds	r3, #7
 800895a:	e7b6      	b.n	80088ca <_printf_float+0x36>
 800895c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800895e:	002b      	movs	r3, r5
 8008960:	0010      	movs	r0, r2
 8008962:	0029      	movs	r1, r5
 8008964:	f7f9 fc40 	bl	80021e8 <__aeabi_dcmpun>
 8008968:	2800      	cmp	r0, #0
 800896a:	d00a      	beq.n	8008982 <_printf_float+0xee>
 800896c:	2d00      	cmp	r5, #0
 800896e:	da03      	bge.n	8008978 <_printf_float+0xe4>
 8008970:	0023      	movs	r3, r4
 8008972:	222d      	movs	r2, #45	; 0x2d
 8008974:	3343      	adds	r3, #67	; 0x43
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	4d87      	ldr	r5, [pc, #540]	; (8008b98 <_printf_float+0x304>)
 800897a:	2e47      	cmp	r6, #71	; 0x47
 800897c:	d9d5      	bls.n	800892a <_printf_float+0x96>
 800897e:	4d87      	ldr	r5, [pc, #540]	; (8008b9c <_printf_float+0x308>)
 8008980:	e7d3      	b.n	800892a <_printf_float+0x96>
 8008982:	2220      	movs	r2, #32
 8008984:	0031      	movs	r1, r6
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	4391      	bics	r1, r2
 800898a:	910e      	str	r1, [sp, #56]	; 0x38
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	d147      	bne.n	8008a20 <_printf_float+0x18c>
 8008990:	3307      	adds	r3, #7
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	2380      	movs	r3, #128	; 0x80
 8008996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	4313      	orrs	r3, r2
 800899c:	2200      	movs	r2, #0
 800899e:	9206      	str	r2, [sp, #24]
 80089a0:	aa12      	add	r2, sp, #72	; 0x48
 80089a2:	9205      	str	r2, [sp, #20]
 80089a4:	aa11      	add	r2, sp, #68	; 0x44
 80089a6:	9203      	str	r2, [sp, #12]
 80089a8:	2223      	movs	r2, #35	; 0x23
 80089aa:	a908      	add	r1, sp, #32
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	6863      	ldr	r3, [r4, #4]
 80089b2:	1852      	adds	r2, r2, r1
 80089b4:	9202      	str	r2, [sp, #8]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	0038      	movs	r0, r7
 80089ba:	002b      	movs	r3, r5
 80089bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089be:	9604      	str	r6, [sp, #16]
 80089c0:	f7ff febe 	bl	8008740 <__cvt>
 80089c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c6:	0005      	movs	r5, r0
 80089c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089ca:	2b47      	cmp	r3, #71	; 0x47
 80089cc:	d108      	bne.n	80089e0 <_printf_float+0x14c>
 80089ce:	1ccb      	adds	r3, r1, #3
 80089d0:	db02      	blt.n	80089d8 <_printf_float+0x144>
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	4299      	cmp	r1, r3
 80089d6:	dd46      	ble.n	8008a66 <_printf_float+0x1d2>
 80089d8:	0033      	movs	r3, r6
 80089da:	3b02      	subs	r3, #2
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	001e      	movs	r6, r3
 80089e0:	2e65      	cmp	r6, #101	; 0x65
 80089e2:	d824      	bhi.n	8008a2e <_printf_float+0x19a>
 80089e4:	0020      	movs	r0, r4
 80089e6:	0032      	movs	r2, r6
 80089e8:	3901      	subs	r1, #1
 80089ea:	3050      	adds	r0, #80	; 0x50
 80089ec:	9111      	str	r1, [sp, #68]	; 0x44
 80089ee:	f7ff ff0a 	bl	8008806 <__exponent>
 80089f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089f4:	900a      	str	r0, [sp, #40]	; 0x28
 80089f6:	1813      	adds	r3, r2, r0
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	2a01      	cmp	r2, #1
 80089fc:	dc02      	bgt.n	8008a04 <_printf_float+0x170>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	07d2      	lsls	r2, r2, #31
 8008a02:	d501      	bpl.n	8008a08 <_printf_float+0x174>
 8008a04:	3301      	adds	r3, #1
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	2323      	movs	r3, #35	; 0x23
 8008a0a:	aa08      	add	r2, sp, #32
 8008a0c:	189b      	adds	r3, r3, r2
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d100      	bne.n	8008a16 <_printf_float+0x182>
 8008a14:	e791      	b.n	800893a <_printf_float+0xa6>
 8008a16:	0023      	movs	r3, r4
 8008a18:	222d      	movs	r2, #45	; 0x2d
 8008a1a:	3343      	adds	r3, #67	; 0x43
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	e78c      	b.n	800893a <_printf_float+0xa6>
 8008a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a22:	2a47      	cmp	r2, #71	; 0x47
 8008a24:	d1b6      	bne.n	8008994 <_printf_float+0x100>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1b4      	bne.n	8008994 <_printf_float+0x100>
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	e7b1      	b.n	8008992 <_printf_float+0xfe>
 8008a2e:	2e66      	cmp	r6, #102	; 0x66
 8008a30:	d11b      	bne.n	8008a6a <_printf_float+0x1d6>
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	2900      	cmp	r1, #0
 8008a36:	dd0d      	ble.n	8008a54 <_printf_float+0x1c0>
 8008a38:	6121      	str	r1, [r4, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d102      	bne.n	8008a44 <_printf_float+0x1b0>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	07d2      	lsls	r2, r2, #31
 8008a42:	d502      	bpl.n	8008a4a <_printf_float+0x1b6>
 8008a44:	3301      	adds	r3, #1
 8008a46:	1859      	adds	r1, r3, r1
 8008a48:	6121      	str	r1, [r4, #16]
 8008a4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a4e:	2300      	movs	r3, #0
 8008a50:	930a      	str	r3, [sp, #40]	; 0x28
 8008a52:	e7d9      	b.n	8008a08 <_printf_float+0x174>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <_printf_float+0x1cc>
 8008a58:	2201      	movs	r2, #1
 8008a5a:	6821      	ldr	r1, [r4, #0]
 8008a5c:	4211      	tst	r1, r2
 8008a5e:	d000      	beq.n	8008a62 <_printf_float+0x1ce>
 8008a60:	1c9a      	adds	r2, r3, #2
 8008a62:	6122      	str	r2, [r4, #16]
 8008a64:	e7f1      	b.n	8008a4a <_printf_float+0x1b6>
 8008a66:	2367      	movs	r3, #103	; 0x67
 8008a68:	001e      	movs	r6, r3
 8008a6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	db06      	blt.n	8008a80 <_printf_float+0x1ec>
 8008a72:	6822      	ldr	r2, [r4, #0]
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	07d2      	lsls	r2, r2, #31
 8008a78:	d5e7      	bpl.n	8008a4a <_printf_float+0x1b6>
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	e7e4      	b.n	8008a4a <_printf_float+0x1b6>
 8008a80:	2101      	movs	r1, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc01      	bgt.n	8008a8a <_printf_float+0x1f6>
 8008a86:	1849      	adds	r1, r1, r1
 8008a88:	1ac9      	subs	r1, r1, r3
 8008a8a:	1852      	adds	r2, r2, r1
 8008a8c:	e7e9      	b.n	8008a62 <_printf_float+0x1ce>
 8008a8e:	6822      	ldr	r2, [r4, #0]
 8008a90:	0553      	lsls	r3, r2, #21
 8008a92:	d408      	bmi.n	8008aa6 <_printf_float+0x212>
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	002a      	movs	r2, r5
 8008a98:	0038      	movs	r0, r7
 8008a9a:	9908      	ldr	r1, [sp, #32]
 8008a9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a9e:	47a8      	blx	r5
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d129      	bne.n	8008af8 <_printf_float+0x264>
 8008aa4:	e754      	b.n	8008950 <_printf_float+0xbc>
 8008aa6:	2e65      	cmp	r6, #101	; 0x65
 8008aa8:	d800      	bhi.n	8008aac <_printf_float+0x218>
 8008aaa:	e0ec      	b.n	8008c86 <_printf_float+0x3f2>
 8008aac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008aae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f7 fcca 	bl	800044c <__aeabi_dcmpeq>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d034      	beq.n	8008b26 <_printf_float+0x292>
 8008abc:	2301      	movs	r3, #1
 8008abe:	0038      	movs	r0, r7
 8008ac0:	4a37      	ldr	r2, [pc, #220]	; (8008ba0 <_printf_float+0x30c>)
 8008ac2:	9908      	ldr	r1, [sp, #32]
 8008ac4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ac6:	47a8      	blx	r5
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d100      	bne.n	8008ace <_printf_float+0x23a>
 8008acc:	e740      	b.n	8008950 <_printf_float+0xbc>
 8008ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	db02      	blt.n	8008adc <_printf_float+0x248>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	07db      	lsls	r3, r3, #31
 8008ada:	d50d      	bpl.n	8008af8 <_printf_float+0x264>
 8008adc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008ade:	0038      	movs	r0, r7
 8008ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ae4:	9908      	ldr	r1, [sp, #32]
 8008ae6:	47a8      	blx	r5
 8008ae8:	2500      	movs	r5, #0
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	d100      	bne.n	8008af0 <_printf_float+0x25c>
 8008aee:	e72f      	b.n	8008950 <_printf_float+0xbc>
 8008af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008af2:	3b01      	subs	r3, #1
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	dc0a      	bgt.n	8008b0e <_printf_float+0x27a>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	079b      	lsls	r3, r3, #30
 8008afc:	d500      	bpl.n	8008b00 <_printf_float+0x26c>
 8008afe:	e114      	b.n	8008d2a <_printf_float+0x496>
 8008b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b02:	68e0      	ldr	r0, [r4, #12]
 8008b04:	4298      	cmp	r0, r3
 8008b06:	db00      	blt.n	8008b0a <_printf_float+0x276>
 8008b08:	e724      	b.n	8008954 <_printf_float+0xc0>
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	e722      	b.n	8008954 <_printf_float+0xc0>
 8008b0e:	0022      	movs	r2, r4
 8008b10:	2301      	movs	r3, #1
 8008b12:	0038      	movs	r0, r7
 8008b14:	9908      	ldr	r1, [sp, #32]
 8008b16:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b18:	321a      	adds	r2, #26
 8008b1a:	47b0      	blx	r6
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d100      	bne.n	8008b22 <_printf_float+0x28e>
 8008b20:	e716      	b.n	8008950 <_printf_float+0xbc>
 8008b22:	3501      	adds	r5, #1
 8008b24:	e7e4      	b.n	8008af0 <_printf_float+0x25c>
 8008b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc3b      	bgt.n	8008ba4 <_printf_float+0x310>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	0038      	movs	r0, r7
 8008b30:	4a1b      	ldr	r2, [pc, #108]	; (8008ba0 <_printf_float+0x30c>)
 8008b32:	9908      	ldr	r1, [sp, #32]
 8008b34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b36:	47b0      	blx	r6
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d100      	bne.n	8008b3e <_printf_float+0x2aa>
 8008b3c:	e708      	b.n	8008950 <_printf_float+0xbc>
 8008b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b42:	4313      	orrs	r3, r2
 8008b44:	d102      	bne.n	8008b4c <_printf_float+0x2b8>
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	07db      	lsls	r3, r3, #31
 8008b4a:	d5d5      	bpl.n	8008af8 <_printf_float+0x264>
 8008b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b4e:	0038      	movs	r0, r7
 8008b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b52:	9908      	ldr	r1, [sp, #32]
 8008b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b56:	47b0      	blx	r6
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d100      	bne.n	8008b5e <_printf_float+0x2ca>
 8008b5c:	e6f8      	b.n	8008950 <_printf_float+0xbc>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	930a      	str	r3, [sp, #40]	; 0x28
 8008b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b66:	425b      	negs	r3, r3
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	dc01      	bgt.n	8008b70 <_printf_float+0x2dc>
 8008b6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b6e:	e792      	b.n	8008a96 <_printf_float+0x202>
 8008b70:	0022      	movs	r2, r4
 8008b72:	2301      	movs	r3, #1
 8008b74:	0038      	movs	r0, r7
 8008b76:	9908      	ldr	r1, [sp, #32]
 8008b78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b7a:	321a      	adds	r2, #26
 8008b7c:	47b0      	blx	r6
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d100      	bne.n	8008b84 <_printf_float+0x2f0>
 8008b82:	e6e5      	b.n	8008950 <_printf_float+0xbc>
 8008b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b86:	3301      	adds	r3, #1
 8008b88:	e7ea      	b.n	8008b60 <_printf_float+0x2cc>
 8008b8a:	46c0      	nop			; (mov r8, r8)
 8008b8c:	7fefffff 	.word	0x7fefffff
 8008b90:	0800b49c 	.word	0x0800b49c
 8008b94:	0800b4a0 	.word	0x0800b4a0
 8008b98:	0800b4a4 	.word	0x0800b4a4
 8008b9c:	0800b4a8 	.word	0x0800b4a8
 8008ba0:	0800b4ac 	.word	0x0800b4ac
 8008ba4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8008baa:	429a      	cmp	r2, r3
 8008bac:	dd00      	ble.n	8008bb0 <_printf_float+0x31c>
 8008bae:	930a      	str	r3, [sp, #40]	; 0x28
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dc3d      	bgt.n	8008c32 <_printf_float+0x39e>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8008bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	17db      	asrs	r3, r3, #31
 8008bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bca:	4013      	ands	r3, r2
 8008bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	dc36      	bgt.n	8008c44 <_printf_float+0x3b0>
 8008bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	db40      	blt.n	8008c60 <_printf_float+0x3cc>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	07db      	lsls	r3, r3, #31
 8008be2:	d43d      	bmi.n	8008c60 <_printf_float+0x3cc>
 8008be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	1a52      	subs	r2, r2, r1
 8008bee:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	dd00      	ble.n	8008bf6 <_printf_float+0x362>
 8008bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	dc3a      	bgt.n	8008c72 <_printf_float+0x3de>
 8008bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfe:	2500      	movs	r5, #0
 8008c00:	43db      	mvns	r3, r3
 8008c02:	17db      	asrs	r3, r3, #31
 8008c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c10:	400a      	ands	r2, r1
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	dc00      	bgt.n	8008c1a <_printf_float+0x386>
 8008c18:	e76e      	b.n	8008af8 <_printf_float+0x264>
 8008c1a:	0022      	movs	r2, r4
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	0038      	movs	r0, r7
 8008c20:	9908      	ldr	r1, [sp, #32]
 8008c22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c24:	321a      	adds	r2, #26
 8008c26:	47b0      	blx	r6
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d100      	bne.n	8008c2e <_printf_float+0x39a>
 8008c2c:	e690      	b.n	8008950 <_printf_float+0xbc>
 8008c2e:	3501      	adds	r5, #1
 8008c30:	e7e9      	b.n	8008c06 <_printf_float+0x372>
 8008c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c34:	002a      	movs	r2, r5
 8008c36:	0038      	movs	r0, r7
 8008c38:	9908      	ldr	r1, [sp, #32]
 8008c3a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c3c:	47b0      	blx	r6
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d1b9      	bne.n	8008bb6 <_printf_float+0x322>
 8008c42:	e685      	b.n	8008950 <_printf_float+0xbc>
 8008c44:	0022      	movs	r2, r4
 8008c46:	2301      	movs	r3, #1
 8008c48:	0038      	movs	r0, r7
 8008c4a:	9908      	ldr	r1, [sp, #32]
 8008c4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c4e:	321a      	adds	r2, #26
 8008c50:	47b0      	blx	r6
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d100      	bne.n	8008c58 <_printf_float+0x3c4>
 8008c56:	e67b      	b.n	8008950 <_printf_float+0xbc>
 8008c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c5e:	e7b0      	b.n	8008bc2 <_printf_float+0x32e>
 8008c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c62:	0038      	movs	r0, r7
 8008c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c66:	9908      	ldr	r1, [sp, #32]
 8008c68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c6a:	47b0      	blx	r6
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d1b9      	bne.n	8008be4 <_printf_float+0x350>
 8008c70:	e66e      	b.n	8008950 <_printf_float+0xbc>
 8008c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c74:	0038      	movs	r0, r7
 8008c76:	18ea      	adds	r2, r5, r3
 8008c78:	9908      	ldr	r1, [sp, #32]
 8008c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c7e:	47a8      	blx	r5
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d1bb      	bne.n	8008bfc <_printf_float+0x368>
 8008c84:	e664      	b.n	8008950 <_printf_float+0xbc>
 8008c86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	dc02      	bgt.n	8008c92 <_printf_float+0x3fe>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	421a      	tst	r2, r3
 8008c90:	d038      	beq.n	8008d04 <_printf_float+0x470>
 8008c92:	2301      	movs	r3, #1
 8008c94:	002a      	movs	r2, r5
 8008c96:	0038      	movs	r0, r7
 8008c98:	9908      	ldr	r1, [sp, #32]
 8008c9a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c9c:	47b0      	blx	r6
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d100      	bne.n	8008ca4 <_printf_float+0x410>
 8008ca2:	e655      	b.n	8008950 <_printf_float+0xbc>
 8008ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ca6:	0038      	movs	r0, r7
 8008ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008caa:	9908      	ldr	r1, [sp, #32]
 8008cac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008cae:	47b0      	blx	r6
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d100      	bne.n	8008cb6 <_printf_float+0x422>
 8008cb4:	e64c      	b.n	8008950 <_printf_float+0xbc>
 8008cb6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008cb8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f7f7 fbc5 	bl	800044c <__aeabi_dcmpeq>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d11c      	bne.n	8008d00 <_printf_float+0x46c>
 8008cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cc8:	1c6a      	adds	r2, r5, #1
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	0038      	movs	r0, r7
 8008cce:	9908      	ldr	r1, [sp, #32]
 8008cd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008cd2:	47a8      	blx	r5
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d10f      	bne.n	8008cf8 <_printf_float+0x464>
 8008cd8:	e63a      	b.n	8008950 <_printf_float+0xbc>
 8008cda:	0022      	movs	r2, r4
 8008cdc:	2301      	movs	r3, #1
 8008cde:	0038      	movs	r0, r7
 8008ce0:	9908      	ldr	r1, [sp, #32]
 8008ce2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ce4:	321a      	adds	r2, #26
 8008ce6:	47b0      	blx	r6
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d100      	bne.n	8008cee <_printf_float+0x45a>
 8008cec:	e630      	b.n	8008950 <_printf_float+0xbc>
 8008cee:	3501      	adds	r5, #1
 8008cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	42ab      	cmp	r3, r5
 8008cf6:	dcf0      	bgt.n	8008cda <_printf_float+0x446>
 8008cf8:	0022      	movs	r2, r4
 8008cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cfc:	3250      	adds	r2, #80	; 0x50
 8008cfe:	e6cb      	b.n	8008a98 <_printf_float+0x204>
 8008d00:	2500      	movs	r5, #0
 8008d02:	e7f5      	b.n	8008cf0 <_printf_float+0x45c>
 8008d04:	002a      	movs	r2, r5
 8008d06:	e7e1      	b.n	8008ccc <_printf_float+0x438>
 8008d08:	0022      	movs	r2, r4
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	0038      	movs	r0, r7
 8008d0e:	9908      	ldr	r1, [sp, #32]
 8008d10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d12:	3219      	adds	r2, #25
 8008d14:	47b0      	blx	r6
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	d100      	bne.n	8008d1c <_printf_float+0x488>
 8008d1a:	e619      	b.n	8008950 <_printf_float+0xbc>
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	68e3      	ldr	r3, [r4, #12]
 8008d20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d22:	1a9b      	subs	r3, r3, r2
 8008d24:	42ab      	cmp	r3, r5
 8008d26:	dcef      	bgt.n	8008d08 <_printf_float+0x474>
 8008d28:	e6ea      	b.n	8008b00 <_printf_float+0x26c>
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	e7f7      	b.n	8008d1e <_printf_float+0x48a>
 8008d2e:	46c0      	nop			; (mov r8, r8)

08008d30 <_printf_common>:
 8008d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d32:	0015      	movs	r5, r2
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	688a      	ldr	r2, [r1, #8]
 8008d38:	690b      	ldr	r3, [r1, #16]
 8008d3a:	000c      	movs	r4, r1
 8008d3c:	9000      	str	r0, [sp, #0]
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	da00      	bge.n	8008d44 <_printf_common+0x14>
 8008d42:	0013      	movs	r3, r2
 8008d44:	0022      	movs	r2, r4
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	3243      	adds	r2, #67	; 0x43
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	2a00      	cmp	r2, #0
 8008d4e:	d001      	beq.n	8008d54 <_printf_common+0x24>
 8008d50:	3301      	adds	r3, #1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	069b      	lsls	r3, r3, #26
 8008d58:	d502      	bpl.n	8008d60 <_printf_common+0x30>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	6822      	ldr	r2, [r4, #0]
 8008d62:	2306      	movs	r3, #6
 8008d64:	0017      	movs	r7, r2
 8008d66:	401f      	ands	r7, r3
 8008d68:	421a      	tst	r2, r3
 8008d6a:	d027      	beq.n	8008dbc <_printf_common+0x8c>
 8008d6c:	0023      	movs	r3, r4
 8008d6e:	3343      	adds	r3, #67	; 0x43
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	1e5a      	subs	r2, r3, #1
 8008d74:	4193      	sbcs	r3, r2
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	0692      	lsls	r2, r2, #26
 8008d7a:	d430      	bmi.n	8008dde <_printf_common+0xae>
 8008d7c:	0022      	movs	r2, r4
 8008d7e:	9901      	ldr	r1, [sp, #4]
 8008d80:	9800      	ldr	r0, [sp, #0]
 8008d82:	9e08      	ldr	r6, [sp, #32]
 8008d84:	3243      	adds	r2, #67	; 0x43
 8008d86:	47b0      	blx	r6
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d025      	beq.n	8008dd8 <_printf_common+0xa8>
 8008d8c:	2306      	movs	r3, #6
 8008d8e:	6820      	ldr	r0, [r4, #0]
 8008d90:	682a      	ldr	r2, [r5, #0]
 8008d92:	68e1      	ldr	r1, [r4, #12]
 8008d94:	2500      	movs	r5, #0
 8008d96:	4003      	ands	r3, r0
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d103      	bne.n	8008da4 <_printf_common+0x74>
 8008d9c:	1a8d      	subs	r5, r1, r2
 8008d9e:	43eb      	mvns	r3, r5
 8008da0:	17db      	asrs	r3, r3, #31
 8008da2:	401d      	ands	r5, r3
 8008da4:	68a3      	ldr	r3, [r4, #8]
 8008da6:	6922      	ldr	r2, [r4, #16]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	dd01      	ble.n	8008db0 <_printf_common+0x80>
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	18ed      	adds	r5, r5, r3
 8008db0:	2700      	movs	r7, #0
 8008db2:	42bd      	cmp	r5, r7
 8008db4:	d120      	bne.n	8008df8 <_printf_common+0xc8>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e010      	b.n	8008ddc <_printf_common+0xac>
 8008dba:	3701      	adds	r7, #1
 8008dbc:	68e3      	ldr	r3, [r4, #12]
 8008dbe:	682a      	ldr	r2, [r5, #0]
 8008dc0:	1a9b      	subs	r3, r3, r2
 8008dc2:	42bb      	cmp	r3, r7
 8008dc4:	ddd2      	ble.n	8008d6c <_printf_common+0x3c>
 8008dc6:	0022      	movs	r2, r4
 8008dc8:	2301      	movs	r3, #1
 8008dca:	9901      	ldr	r1, [sp, #4]
 8008dcc:	9800      	ldr	r0, [sp, #0]
 8008dce:	9e08      	ldr	r6, [sp, #32]
 8008dd0:	3219      	adds	r2, #25
 8008dd2:	47b0      	blx	r6
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d1f0      	bne.n	8008dba <_printf_common+0x8a>
 8008dd8:	2001      	movs	r0, #1
 8008dda:	4240      	negs	r0, r0
 8008ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008dde:	2030      	movs	r0, #48	; 0x30
 8008de0:	18e1      	adds	r1, r4, r3
 8008de2:	3143      	adds	r1, #67	; 0x43
 8008de4:	7008      	strb	r0, [r1, #0]
 8008de6:	0021      	movs	r1, r4
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	3145      	adds	r1, #69	; 0x45
 8008dec:	7809      	ldrb	r1, [r1, #0]
 8008dee:	18a2      	adds	r2, r4, r2
 8008df0:	3243      	adds	r2, #67	; 0x43
 8008df2:	3302      	adds	r3, #2
 8008df4:	7011      	strb	r1, [r2, #0]
 8008df6:	e7c1      	b.n	8008d7c <_printf_common+0x4c>
 8008df8:	0022      	movs	r2, r4
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	9901      	ldr	r1, [sp, #4]
 8008dfe:	9800      	ldr	r0, [sp, #0]
 8008e00:	9e08      	ldr	r6, [sp, #32]
 8008e02:	321a      	adds	r2, #26
 8008e04:	47b0      	blx	r6
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d0e6      	beq.n	8008dd8 <_printf_common+0xa8>
 8008e0a:	3701      	adds	r7, #1
 8008e0c:	e7d1      	b.n	8008db2 <_printf_common+0x82>
	...

08008e10 <_printf_i>:
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	b08b      	sub	sp, #44	; 0x2c
 8008e14:	9206      	str	r2, [sp, #24]
 8008e16:	000a      	movs	r2, r1
 8008e18:	3243      	adds	r2, #67	; 0x43
 8008e1a:	9307      	str	r3, [sp, #28]
 8008e1c:	9005      	str	r0, [sp, #20]
 8008e1e:	9204      	str	r2, [sp, #16]
 8008e20:	7e0a      	ldrb	r2, [r1, #24]
 8008e22:	000c      	movs	r4, r1
 8008e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e26:	2a78      	cmp	r2, #120	; 0x78
 8008e28:	d806      	bhi.n	8008e38 <_printf_i+0x28>
 8008e2a:	2a62      	cmp	r2, #98	; 0x62
 8008e2c:	d808      	bhi.n	8008e40 <_printf_i+0x30>
 8008e2e:	2a00      	cmp	r2, #0
 8008e30:	d100      	bne.n	8008e34 <_printf_i+0x24>
 8008e32:	e0c0      	b.n	8008fb6 <_printf_i+0x1a6>
 8008e34:	2a58      	cmp	r2, #88	; 0x58
 8008e36:	d052      	beq.n	8008ede <_printf_i+0xce>
 8008e38:	0026      	movs	r6, r4
 8008e3a:	3642      	adds	r6, #66	; 0x42
 8008e3c:	7032      	strb	r2, [r6, #0]
 8008e3e:	e022      	b.n	8008e86 <_printf_i+0x76>
 8008e40:	0010      	movs	r0, r2
 8008e42:	3863      	subs	r0, #99	; 0x63
 8008e44:	2815      	cmp	r0, #21
 8008e46:	d8f7      	bhi.n	8008e38 <_printf_i+0x28>
 8008e48:	f7f7 f970 	bl	800012c <__gnu_thumb1_case_shi>
 8008e4c:	001f0016 	.word	0x001f0016
 8008e50:	fff6fff6 	.word	0xfff6fff6
 8008e54:	fff6fff6 	.word	0xfff6fff6
 8008e58:	fff6001f 	.word	0xfff6001f
 8008e5c:	fff6fff6 	.word	0xfff6fff6
 8008e60:	00a8fff6 	.word	0x00a8fff6
 8008e64:	009a0036 	.word	0x009a0036
 8008e68:	fff6fff6 	.word	0xfff6fff6
 8008e6c:	fff600b9 	.word	0xfff600b9
 8008e70:	fff60036 	.word	0xfff60036
 8008e74:	009efff6 	.word	0x009efff6
 8008e78:	0026      	movs	r6, r4
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	3642      	adds	r6, #66	; 0x42
 8008e7e:	1d11      	adds	r1, r2, #4
 8008e80:	6019      	str	r1, [r3, #0]
 8008e82:	6813      	ldr	r3, [r2, #0]
 8008e84:	7033      	strb	r3, [r6, #0]
 8008e86:	2301      	movs	r3, #1
 8008e88:	e0a7      	b.n	8008fda <_printf_i+0x1ca>
 8008e8a:	6808      	ldr	r0, [r1, #0]
 8008e8c:	6819      	ldr	r1, [r3, #0]
 8008e8e:	1d0a      	adds	r2, r1, #4
 8008e90:	0605      	lsls	r5, r0, #24
 8008e92:	d50b      	bpl.n	8008eac <_printf_i+0x9c>
 8008e94:	680d      	ldr	r5, [r1, #0]
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	da03      	bge.n	8008ea4 <_printf_i+0x94>
 8008e9c:	232d      	movs	r3, #45	; 0x2d
 8008e9e:	9a04      	ldr	r2, [sp, #16]
 8008ea0:	426d      	negs	r5, r5
 8008ea2:	7013      	strb	r3, [r2, #0]
 8008ea4:	4b61      	ldr	r3, [pc, #388]	; (800902c <_printf_i+0x21c>)
 8008ea6:	270a      	movs	r7, #10
 8008ea8:	9303      	str	r3, [sp, #12]
 8008eaa:	e032      	b.n	8008f12 <_printf_i+0x102>
 8008eac:	680d      	ldr	r5, [r1, #0]
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	0641      	lsls	r1, r0, #25
 8008eb2:	d5f1      	bpl.n	8008e98 <_printf_i+0x88>
 8008eb4:	b22d      	sxth	r5, r5
 8008eb6:	e7ef      	b.n	8008e98 <_printf_i+0x88>
 8008eb8:	680d      	ldr	r5, [r1, #0]
 8008eba:	6819      	ldr	r1, [r3, #0]
 8008ebc:	1d08      	adds	r0, r1, #4
 8008ebe:	6018      	str	r0, [r3, #0]
 8008ec0:	062e      	lsls	r6, r5, #24
 8008ec2:	d501      	bpl.n	8008ec8 <_printf_i+0xb8>
 8008ec4:	680d      	ldr	r5, [r1, #0]
 8008ec6:	e003      	b.n	8008ed0 <_printf_i+0xc0>
 8008ec8:	066d      	lsls	r5, r5, #25
 8008eca:	d5fb      	bpl.n	8008ec4 <_printf_i+0xb4>
 8008ecc:	680d      	ldr	r5, [r1, #0]
 8008ece:	b2ad      	uxth	r5, r5
 8008ed0:	4b56      	ldr	r3, [pc, #344]	; (800902c <_printf_i+0x21c>)
 8008ed2:	270a      	movs	r7, #10
 8008ed4:	9303      	str	r3, [sp, #12]
 8008ed6:	2a6f      	cmp	r2, #111	; 0x6f
 8008ed8:	d117      	bne.n	8008f0a <_printf_i+0xfa>
 8008eda:	2708      	movs	r7, #8
 8008edc:	e015      	b.n	8008f0a <_printf_i+0xfa>
 8008ede:	3145      	adds	r1, #69	; 0x45
 8008ee0:	700a      	strb	r2, [r1, #0]
 8008ee2:	4a52      	ldr	r2, [pc, #328]	; (800902c <_printf_i+0x21c>)
 8008ee4:	9203      	str	r2, [sp, #12]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	6821      	ldr	r1, [r4, #0]
 8008eea:	ca20      	ldmia	r2!, {r5}
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	0608      	lsls	r0, r1, #24
 8008ef0:	d550      	bpl.n	8008f94 <_printf_i+0x184>
 8008ef2:	07cb      	lsls	r3, r1, #31
 8008ef4:	d502      	bpl.n	8008efc <_printf_i+0xec>
 8008ef6:	2320      	movs	r3, #32
 8008ef8:	4319      	orrs	r1, r3
 8008efa:	6021      	str	r1, [r4, #0]
 8008efc:	2710      	movs	r7, #16
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	d103      	bne.n	8008f0a <_printf_i+0xfa>
 8008f02:	2320      	movs	r3, #32
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	439a      	bics	r2, r3
 8008f08:	6022      	str	r2, [r4, #0]
 8008f0a:	0023      	movs	r3, r4
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	3343      	adds	r3, #67	; 0x43
 8008f10:	701a      	strb	r2, [r3, #0]
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	db03      	blt.n	8008f22 <_printf_i+0x112>
 8008f1a:	2204      	movs	r2, #4
 8008f1c:	6821      	ldr	r1, [r4, #0]
 8008f1e:	4391      	bics	r1, r2
 8008f20:	6021      	str	r1, [r4, #0]
 8008f22:	2d00      	cmp	r5, #0
 8008f24:	d102      	bne.n	8008f2c <_printf_i+0x11c>
 8008f26:	9e04      	ldr	r6, [sp, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00c      	beq.n	8008f46 <_printf_i+0x136>
 8008f2c:	9e04      	ldr	r6, [sp, #16]
 8008f2e:	0028      	movs	r0, r5
 8008f30:	0039      	movs	r1, r7
 8008f32:	f7f7 f98b 	bl	800024c <__aeabi_uidivmod>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	3e01      	subs	r6, #1
 8008f3a:	5c5b      	ldrb	r3, [r3, r1]
 8008f3c:	7033      	strb	r3, [r6, #0]
 8008f3e:	002b      	movs	r3, r5
 8008f40:	0005      	movs	r5, r0
 8008f42:	429f      	cmp	r7, r3
 8008f44:	d9f3      	bls.n	8008f2e <_printf_i+0x11e>
 8008f46:	2f08      	cmp	r7, #8
 8008f48:	d109      	bne.n	8008f5e <_printf_i+0x14e>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	07db      	lsls	r3, r3, #31
 8008f4e:	d506      	bpl.n	8008f5e <_printf_i+0x14e>
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	6922      	ldr	r2, [r4, #16]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	dc02      	bgt.n	8008f5e <_printf_i+0x14e>
 8008f58:	2330      	movs	r3, #48	; 0x30
 8008f5a:	3e01      	subs	r6, #1
 8008f5c:	7033      	strb	r3, [r6, #0]
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	1b9b      	subs	r3, r3, r6
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	0021      	movs	r1, r4
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	9805      	ldr	r0, [sp, #20]
 8008f6c:	9b06      	ldr	r3, [sp, #24]
 8008f6e:	aa09      	add	r2, sp, #36	; 0x24
 8008f70:	f7ff fede 	bl	8008d30 <_printf_common>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d135      	bne.n	8008fe4 <_printf_i+0x1d4>
 8008f78:	2001      	movs	r0, #1
 8008f7a:	4240      	negs	r0, r0
 8008f7c:	b00b      	add	sp, #44	; 0x2c
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f80:	2220      	movs	r2, #32
 8008f82:	6809      	ldr	r1, [r1, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	6022      	str	r2, [r4, #0]
 8008f88:	0022      	movs	r2, r4
 8008f8a:	2178      	movs	r1, #120	; 0x78
 8008f8c:	3245      	adds	r2, #69	; 0x45
 8008f8e:	7011      	strb	r1, [r2, #0]
 8008f90:	4a27      	ldr	r2, [pc, #156]	; (8009030 <_printf_i+0x220>)
 8008f92:	e7a7      	b.n	8008ee4 <_printf_i+0xd4>
 8008f94:	0648      	lsls	r0, r1, #25
 8008f96:	d5ac      	bpl.n	8008ef2 <_printf_i+0xe2>
 8008f98:	b2ad      	uxth	r5, r5
 8008f9a:	e7aa      	b.n	8008ef2 <_printf_i+0xe2>
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	680d      	ldr	r5, [r1, #0]
 8008fa0:	1d10      	adds	r0, r2, #4
 8008fa2:	6949      	ldr	r1, [r1, #20]
 8008fa4:	6018      	str	r0, [r3, #0]
 8008fa6:	6813      	ldr	r3, [r2, #0]
 8008fa8:	062e      	lsls	r6, r5, #24
 8008faa:	d501      	bpl.n	8008fb0 <_printf_i+0x1a0>
 8008fac:	6019      	str	r1, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <_printf_i+0x1a6>
 8008fb0:	066d      	lsls	r5, r5, #25
 8008fb2:	d5fb      	bpl.n	8008fac <_printf_i+0x19c>
 8008fb4:	8019      	strh	r1, [r3, #0]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9e04      	ldr	r6, [sp, #16]
 8008fba:	6123      	str	r3, [r4, #16]
 8008fbc:	e7d2      	b.n	8008f64 <_printf_i+0x154>
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	1d11      	adds	r1, r2, #4
 8008fc2:	6019      	str	r1, [r3, #0]
 8008fc4:	6816      	ldr	r6, [r2, #0]
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	0030      	movs	r0, r6
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	f000 fef2 	bl	8009db4 <memchr>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d001      	beq.n	8008fd8 <_printf_i+0x1c8>
 8008fd4:	1b80      	subs	r0, r0, r6
 8008fd6:	6060      	str	r0, [r4, #4]
 8008fd8:	6863      	ldr	r3, [r4, #4]
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9a04      	ldr	r2, [sp, #16]
 8008fe0:	7013      	strb	r3, [r2, #0]
 8008fe2:	e7bf      	b.n	8008f64 <_printf_i+0x154>
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	0032      	movs	r2, r6
 8008fe8:	9906      	ldr	r1, [sp, #24]
 8008fea:	9805      	ldr	r0, [sp, #20]
 8008fec:	9d07      	ldr	r5, [sp, #28]
 8008fee:	47a8      	blx	r5
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d0c1      	beq.n	8008f78 <_printf_i+0x168>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	079b      	lsls	r3, r3, #30
 8008ff8:	d415      	bmi.n	8009026 <_printf_i+0x216>
 8008ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffc:	68e0      	ldr	r0, [r4, #12]
 8008ffe:	4298      	cmp	r0, r3
 8009000:	dabc      	bge.n	8008f7c <_printf_i+0x16c>
 8009002:	0018      	movs	r0, r3
 8009004:	e7ba      	b.n	8008f7c <_printf_i+0x16c>
 8009006:	0022      	movs	r2, r4
 8009008:	2301      	movs	r3, #1
 800900a:	9906      	ldr	r1, [sp, #24]
 800900c:	9805      	ldr	r0, [sp, #20]
 800900e:	9e07      	ldr	r6, [sp, #28]
 8009010:	3219      	adds	r2, #25
 8009012:	47b0      	blx	r6
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d0af      	beq.n	8008f78 <_printf_i+0x168>
 8009018:	3501      	adds	r5, #1
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	42ab      	cmp	r3, r5
 8009022:	dcf0      	bgt.n	8009006 <_printf_i+0x1f6>
 8009024:	e7e9      	b.n	8008ffa <_printf_i+0x1ea>
 8009026:	2500      	movs	r5, #0
 8009028:	e7f7      	b.n	800901a <_printf_i+0x20a>
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	0800b4ae 	.word	0x0800b4ae
 8009030:	0800b4bf 	.word	0x0800b4bf

08009034 <_sbrk_r>:
 8009034:	2300      	movs	r3, #0
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_sbrk_r+0x20>)
 800903a:	0004      	movs	r4, r0
 800903c:	0008      	movs	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7fa fc42 	bl	80038c8 <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d103      	bne.n	8009050 <_sbrk_r+0x1c>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d000      	beq.n	8009050 <_sbrk_r+0x1c>
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	20001190 	.word	0x20001190

08009058 <quorem>:
 8009058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905a:	0006      	movs	r6, r0
 800905c:	690d      	ldr	r5, [r1, #16]
 800905e:	6933      	ldr	r3, [r6, #16]
 8009060:	b087      	sub	sp, #28
 8009062:	2000      	movs	r0, #0
 8009064:	9102      	str	r1, [sp, #8]
 8009066:	42ab      	cmp	r3, r5
 8009068:	db6b      	blt.n	8009142 <quorem+0xea>
 800906a:	000b      	movs	r3, r1
 800906c:	3d01      	subs	r5, #1
 800906e:	00ac      	lsls	r4, r5, #2
 8009070:	3314      	adds	r3, #20
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	191b      	adds	r3, r3, r4
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	0033      	movs	r3, r6
 800907a:	3314      	adds	r3, #20
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	191c      	adds	r4, r3, r4
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	6827      	ldr	r7, [r4, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	0038      	movs	r0, r7
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	0019      	movs	r1, r3
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	f7f7 f856 	bl	8000140 <__udivsi3>
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	9000      	str	r0, [sp, #0]
 8009098:	429f      	cmp	r7, r3
 800909a:	d329      	bcc.n	80090f0 <quorem+0x98>
 800909c:	2300      	movs	r3, #0
 800909e:	469c      	mov	ip, r3
 80090a0:	9801      	ldr	r0, [sp, #4]
 80090a2:	9f05      	ldr	r7, [sp, #20]
 80090a4:	9304      	str	r3, [sp, #16]
 80090a6:	cf08      	ldmia	r7!, {r3}
 80090a8:	9a00      	ldr	r2, [sp, #0]
 80090aa:	b299      	uxth	r1, r3
 80090ac:	4351      	muls	r1, r2
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	4353      	muls	r3, r2
 80090b2:	4461      	add	r1, ip
 80090b4:	0c0a      	lsrs	r2, r1, #16
 80090b6:	189b      	adds	r3, r3, r2
 80090b8:	0c1a      	lsrs	r2, r3, #16
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	6803      	ldr	r3, [r0, #0]
 80090be:	4694      	mov	ip, r2
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	9b04      	ldr	r3, [sp, #16]
 80090c4:	b289      	uxth	r1, r1
 80090c6:	18d2      	adds	r2, r2, r3
 80090c8:	6803      	ldr	r3, [r0, #0]
 80090ca:	1a52      	subs	r2, r2, r1
 80090cc:	0c19      	lsrs	r1, r3, #16
 80090ce:	466b      	mov	r3, sp
 80090d0:	8a9b      	ldrh	r3, [r3, #20]
 80090d2:	1acb      	subs	r3, r1, r3
 80090d4:	1411      	asrs	r1, r2, #16
 80090d6:	185b      	adds	r3, r3, r1
 80090d8:	1419      	asrs	r1, r3, #16
 80090da:	b292      	uxth	r2, r2
 80090dc:	041b      	lsls	r3, r3, #16
 80090de:	431a      	orrs	r2, r3
 80090e0:	9b03      	ldr	r3, [sp, #12]
 80090e2:	9104      	str	r1, [sp, #16]
 80090e4:	c004      	stmia	r0!, {r2}
 80090e6:	42bb      	cmp	r3, r7
 80090e8:	d2dd      	bcs.n	80090a6 <quorem+0x4e>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d02e      	beq.n	800914e <quorem+0xf6>
 80090f0:	0030      	movs	r0, r6
 80090f2:	9902      	ldr	r1, [sp, #8]
 80090f4:	f001 f900 	bl	800a2f8 <__mcmp>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	db21      	blt.n	8009140 <quorem+0xe8>
 80090fc:	0030      	movs	r0, r6
 80090fe:	2400      	movs	r4, #0
 8009100:	9b00      	ldr	r3, [sp, #0]
 8009102:	9902      	ldr	r1, [sp, #8]
 8009104:	3301      	adds	r3, #1
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	3014      	adds	r0, #20
 800910a:	3114      	adds	r1, #20
 800910c:	6802      	ldr	r2, [r0, #0]
 800910e:	c908      	ldmia	r1!, {r3}
 8009110:	b292      	uxth	r2, r2
 8009112:	1914      	adds	r4, r2, r4
 8009114:	b29a      	uxth	r2, r3
 8009116:	1aa2      	subs	r2, r4, r2
 8009118:	6804      	ldr	r4, [r0, #0]
 800911a:	0c1b      	lsrs	r3, r3, #16
 800911c:	0c24      	lsrs	r4, r4, #16
 800911e:	1ae3      	subs	r3, r4, r3
 8009120:	1414      	asrs	r4, r2, #16
 8009122:	191b      	adds	r3, r3, r4
 8009124:	141c      	asrs	r4, r3, #16
 8009126:	b292      	uxth	r2, r2
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	4313      	orrs	r3, r2
 800912c:	c008      	stmia	r0!, {r3}
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	428b      	cmp	r3, r1
 8009132:	d2eb      	bcs.n	800910c <quorem+0xb4>
 8009134:	9a01      	ldr	r2, [sp, #4]
 8009136:	00ab      	lsls	r3, r5, #2
 8009138:	18d3      	adds	r3, r2, r3
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	2a00      	cmp	r2, #0
 800913e:	d010      	beq.n	8009162 <quorem+0x10a>
 8009140:	9800      	ldr	r0, [sp, #0]
 8009142:	b007      	add	sp, #28
 8009144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <quorem+0xfe>
 800914c:	3d01      	subs	r5, #1
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	3c04      	subs	r4, #4
 8009152:	42a3      	cmp	r3, r4
 8009154:	d3f7      	bcc.n	8009146 <quorem+0xee>
 8009156:	6135      	str	r5, [r6, #16]
 8009158:	e7ca      	b.n	80090f0 <quorem+0x98>
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	2a00      	cmp	r2, #0
 800915e:	d104      	bne.n	800916a <quorem+0x112>
 8009160:	3d01      	subs	r5, #1
 8009162:	9a01      	ldr	r2, [sp, #4]
 8009164:	3b04      	subs	r3, #4
 8009166:	429a      	cmp	r2, r3
 8009168:	d3f7      	bcc.n	800915a <quorem+0x102>
 800916a:	6135      	str	r5, [r6, #16]
 800916c:	e7e8      	b.n	8009140 <quorem+0xe8>
	...

08009170 <_dtoa_r>:
 8009170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009172:	b09d      	sub	sp, #116	; 0x74
 8009174:	9202      	str	r2, [sp, #8]
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	9b02      	ldr	r3, [sp, #8]
 800917a:	9c03      	ldr	r4, [sp, #12]
 800917c:	930a      	str	r3, [sp, #40]	; 0x28
 800917e:	940b      	str	r4, [sp, #44]	; 0x2c
 8009180:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009182:	0007      	movs	r7, r0
 8009184:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009186:	2c00      	cmp	r4, #0
 8009188:	d10e      	bne.n	80091a8 <_dtoa_r+0x38>
 800918a:	2010      	movs	r0, #16
 800918c:	f7ff fa14 	bl	80085b8 <malloc>
 8009190:	1e02      	subs	r2, r0, #0
 8009192:	6278      	str	r0, [r7, #36]	; 0x24
 8009194:	d104      	bne.n	80091a0 <_dtoa_r+0x30>
 8009196:	21ea      	movs	r1, #234	; 0xea
 8009198:	4bc0      	ldr	r3, [pc, #768]	; (800949c <_dtoa_r+0x32c>)
 800919a:	48c1      	ldr	r0, [pc, #772]	; (80094a0 <_dtoa_r+0x330>)
 800919c:	f001 f9d2 	bl	800a544 <__assert_func>
 80091a0:	6044      	str	r4, [r0, #4]
 80091a2:	6084      	str	r4, [r0, #8]
 80091a4:	6004      	str	r4, [r0, #0]
 80091a6:	60c4      	str	r4, [r0, #12]
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	6819      	ldr	r1, [r3, #0]
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d00a      	beq.n	80091c6 <_dtoa_r+0x56>
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	2301      	movs	r3, #1
 80091b4:	4093      	lsls	r3, r2
 80091b6:	604a      	str	r2, [r1, #4]
 80091b8:	608b      	str	r3, [r1, #8]
 80091ba:	0038      	movs	r0, r7
 80091bc:	f000 fe5a 	bl	8009e74 <_Bfree>
 80091c0:	2200      	movs	r2, #0
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da21      	bge.n	8009210 <_dtoa_r+0xa0>
 80091cc:	2301      	movs	r3, #1
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	085b      	lsrs	r3, r3, #1
 80091d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80091da:	4bb2      	ldr	r3, [pc, #712]	; (80094a4 <_dtoa_r+0x334>)
 80091dc:	002a      	movs	r2, r5
 80091de:	9318      	str	r3, [sp, #96]	; 0x60
 80091e0:	401a      	ands	r2, r3
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d117      	bne.n	8009216 <_dtoa_r+0xa6>
 80091e6:	4bb0      	ldr	r3, [pc, #704]	; (80094a8 <_dtoa_r+0x338>)
 80091e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80091ea:	0328      	lsls	r0, r5, #12
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	0b00      	lsrs	r0, r0, #12
 80091f2:	4318      	orrs	r0, r3
 80091f4:	d101      	bne.n	80091fa <_dtoa_r+0x8a>
 80091f6:	f000 fdc3 	bl	8009d80 <_dtoa_r+0xc10>
 80091fa:	48ac      	ldr	r0, [pc, #688]	; (80094ac <_dtoa_r+0x33c>)
 80091fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091fe:	9005      	str	r0, [sp, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <_dtoa_r+0x9a>
 8009204:	4baa      	ldr	r3, [pc, #680]	; (80094b0 <_dtoa_r+0x340>)
 8009206:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	9805      	ldr	r0, [sp, #20]
 800920c:	b01d      	add	sp, #116	; 0x74
 800920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009210:	2300      	movs	r3, #0
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	e7e0      	b.n	80091d8 <_dtoa_r+0x68>
 8009216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009218:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800921a:	9312      	str	r3, [sp, #72]	; 0x48
 800921c:	9413      	str	r4, [sp, #76]	; 0x4c
 800921e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009220:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	f7f7 f911 	bl	800044c <__aeabi_dcmpeq>
 800922a:	1e04      	subs	r4, r0, #0
 800922c:	d00b      	beq.n	8009246 <_dtoa_r+0xd6>
 800922e:	2301      	movs	r3, #1
 8009230:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	4b9f      	ldr	r3, [pc, #636]	; (80094b4 <_dtoa_r+0x344>)
 8009236:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009238:	9305      	str	r3, [sp, #20]
 800923a:	2a00      	cmp	r2, #0
 800923c:	d0e5      	beq.n	800920a <_dtoa_r+0x9a>
 800923e:	4a9e      	ldr	r2, [pc, #632]	; (80094b8 <_dtoa_r+0x348>)
 8009240:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009242:	600a      	str	r2, [r1, #0]
 8009244:	e7e1      	b.n	800920a <_dtoa_r+0x9a>
 8009246:	ab1a      	add	r3, sp, #104	; 0x68
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	ab1b      	add	r3, sp, #108	; 0x6c
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	0038      	movs	r0, r7
 8009250:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009252:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009254:	f001 f904 	bl	800a460 <__d2b>
 8009258:	006e      	lsls	r6, r5, #1
 800925a:	9004      	str	r0, [sp, #16]
 800925c:	0d76      	lsrs	r6, r6, #21
 800925e:	d100      	bne.n	8009262 <_dtoa_r+0xf2>
 8009260:	e07c      	b.n	800935c <_dtoa_r+0x1ec>
 8009262:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009264:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009266:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009268:	4a94      	ldr	r2, [pc, #592]	; (80094bc <_dtoa_r+0x34c>)
 800926a:	031b      	lsls	r3, r3, #12
 800926c:	0b1b      	lsrs	r3, r3, #12
 800926e:	431a      	orrs	r2, r3
 8009270:	0011      	movs	r1, r2
 8009272:	4b93      	ldr	r3, [pc, #588]	; (80094c0 <_dtoa_r+0x350>)
 8009274:	9416      	str	r4, [sp, #88]	; 0x58
 8009276:	18f6      	adds	r6, r6, r3
 8009278:	2200      	movs	r2, #0
 800927a:	4b92      	ldr	r3, [pc, #584]	; (80094c4 <_dtoa_r+0x354>)
 800927c:	f7f8 fc22 	bl	8001ac4 <__aeabi_dsub>
 8009280:	4a91      	ldr	r2, [pc, #580]	; (80094c8 <_dtoa_r+0x358>)
 8009282:	4b92      	ldr	r3, [pc, #584]	; (80094cc <_dtoa_r+0x35c>)
 8009284:	f7f8 f9b2 	bl	80015ec <__aeabi_dmul>
 8009288:	4a91      	ldr	r2, [pc, #580]	; (80094d0 <_dtoa_r+0x360>)
 800928a:	4b92      	ldr	r3, [pc, #584]	; (80094d4 <_dtoa_r+0x364>)
 800928c:	f7f7 fa3e 	bl	800070c <__aeabi_dadd>
 8009290:	0004      	movs	r4, r0
 8009292:	0030      	movs	r0, r6
 8009294:	000d      	movs	r5, r1
 8009296:	f7f8 fffb 	bl	8002290 <__aeabi_i2d>
 800929a:	4a8f      	ldr	r2, [pc, #572]	; (80094d8 <_dtoa_r+0x368>)
 800929c:	4b8f      	ldr	r3, [pc, #572]	; (80094dc <_dtoa_r+0x36c>)
 800929e:	f7f8 f9a5 	bl	80015ec <__aeabi_dmul>
 80092a2:	0002      	movs	r2, r0
 80092a4:	000b      	movs	r3, r1
 80092a6:	0020      	movs	r0, r4
 80092a8:	0029      	movs	r1, r5
 80092aa:	f7f7 fa2f 	bl	800070c <__aeabi_dadd>
 80092ae:	0004      	movs	r4, r0
 80092b0:	000d      	movs	r5, r1
 80092b2:	f7f8 ffb7 	bl	8002224 <__aeabi_d2iz>
 80092b6:	2200      	movs	r2, #0
 80092b8:	9002      	str	r0, [sp, #8]
 80092ba:	2300      	movs	r3, #0
 80092bc:	0020      	movs	r0, r4
 80092be:	0029      	movs	r1, r5
 80092c0:	f7f7 f8ca 	bl	8000458 <__aeabi_dcmplt>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d00b      	beq.n	80092e0 <_dtoa_r+0x170>
 80092c8:	9802      	ldr	r0, [sp, #8]
 80092ca:	f7f8 ffe1 	bl	8002290 <__aeabi_i2d>
 80092ce:	002b      	movs	r3, r5
 80092d0:	0022      	movs	r2, r4
 80092d2:	f7f7 f8bb 	bl	800044c <__aeabi_dcmpeq>
 80092d6:	4243      	negs	r3, r0
 80092d8:	4158      	adcs	r0, r3
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	1a1b      	subs	r3, r3, r0
 80092de:	9302      	str	r3, [sp, #8]
 80092e0:	2301      	movs	r3, #1
 80092e2:	9315      	str	r3, [sp, #84]	; 0x54
 80092e4:	9b02      	ldr	r3, [sp, #8]
 80092e6:	2b16      	cmp	r3, #22
 80092e8:	d80f      	bhi.n	800930a <_dtoa_r+0x19a>
 80092ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80092ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	4b7b      	ldr	r3, [pc, #492]	; (80094e0 <_dtoa_r+0x370>)
 80092f2:	189b      	adds	r3, r3, r2
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f7f7 f8ae 	bl	8000458 <__aeabi_dcmplt>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	d049      	beq.n	8009394 <_dtoa_r+0x224>
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	3b01      	subs	r3, #1
 8009304:	9302      	str	r3, [sp, #8]
 8009306:	2300      	movs	r3, #0
 8009308:	9315      	str	r3, [sp, #84]	; 0x54
 800930a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800930c:	1b9e      	subs	r6, r3, r6
 800930e:	2300      	movs	r3, #0
 8009310:	9308      	str	r3, [sp, #32]
 8009312:	0033      	movs	r3, r6
 8009314:	3b01      	subs	r3, #1
 8009316:	930d      	str	r3, [sp, #52]	; 0x34
 8009318:	d504      	bpl.n	8009324 <_dtoa_r+0x1b4>
 800931a:	2301      	movs	r3, #1
 800931c:	1b9b      	subs	r3, r3, r6
 800931e:	9308      	str	r3, [sp, #32]
 8009320:	2300      	movs	r3, #0
 8009322:	930d      	str	r3, [sp, #52]	; 0x34
 8009324:	9b02      	ldr	r3, [sp, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	db36      	blt.n	8009398 <_dtoa_r+0x228>
 800932a:	9a02      	ldr	r2, [sp, #8]
 800932c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800932e:	4694      	mov	ip, r2
 8009330:	4463      	add	r3, ip
 8009332:	930d      	str	r3, [sp, #52]	; 0x34
 8009334:	2300      	movs	r3, #0
 8009336:	9214      	str	r2, [sp, #80]	; 0x50
 8009338:	930e      	str	r3, [sp, #56]	; 0x38
 800933a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800933c:	2401      	movs	r4, #1
 800933e:	2b09      	cmp	r3, #9
 8009340:	d862      	bhi.n	8009408 <_dtoa_r+0x298>
 8009342:	2b05      	cmp	r3, #5
 8009344:	dd02      	ble.n	800934c <_dtoa_r+0x1dc>
 8009346:	2400      	movs	r4, #0
 8009348:	3b04      	subs	r3, #4
 800934a:	9322      	str	r3, [sp, #136]	; 0x88
 800934c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800934e:	1e98      	subs	r0, r3, #2
 8009350:	2803      	cmp	r0, #3
 8009352:	d862      	bhi.n	800941a <_dtoa_r+0x2aa>
 8009354:	f7f6 fee0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009358:	56343629 	.word	0x56343629
 800935c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800935e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009360:	189e      	adds	r6, r3, r2
 8009362:	4b60      	ldr	r3, [pc, #384]	; (80094e4 <_dtoa_r+0x374>)
 8009364:	18f2      	adds	r2, r6, r3
 8009366:	2a20      	cmp	r2, #32
 8009368:	dd0f      	ble.n	800938a <_dtoa_r+0x21a>
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	409d      	lsls	r5, r3
 8009370:	4b5d      	ldr	r3, [pc, #372]	; (80094e8 <_dtoa_r+0x378>)
 8009372:	9802      	ldr	r0, [sp, #8]
 8009374:	18f3      	adds	r3, r6, r3
 8009376:	40d8      	lsrs	r0, r3
 8009378:	4328      	orrs	r0, r5
 800937a:	f7f8 ffb9 	bl	80022f0 <__aeabi_ui2d>
 800937e:	2301      	movs	r3, #1
 8009380:	4c5a      	ldr	r4, [pc, #360]	; (80094ec <_dtoa_r+0x37c>)
 8009382:	3e01      	subs	r6, #1
 8009384:	1909      	adds	r1, r1, r4
 8009386:	9316      	str	r3, [sp, #88]	; 0x58
 8009388:	e776      	b.n	8009278 <_dtoa_r+0x108>
 800938a:	2320      	movs	r3, #32
 800938c:	9802      	ldr	r0, [sp, #8]
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	4098      	lsls	r0, r3
 8009392:	e7f2      	b.n	800937a <_dtoa_r+0x20a>
 8009394:	9015      	str	r0, [sp, #84]	; 0x54
 8009396:	e7b8      	b.n	800930a <_dtoa_r+0x19a>
 8009398:	9b08      	ldr	r3, [sp, #32]
 800939a:	9a02      	ldr	r2, [sp, #8]
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	9308      	str	r3, [sp, #32]
 80093a0:	4253      	negs	r3, r2
 80093a2:	930e      	str	r3, [sp, #56]	; 0x38
 80093a4:	2300      	movs	r3, #0
 80093a6:	9314      	str	r3, [sp, #80]	; 0x50
 80093a8:	e7c7      	b.n	800933a <_dtoa_r+0x1ca>
 80093aa:	2300      	movs	r3, #0
 80093ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc36      	bgt.n	8009422 <_dtoa_r+0x2b2>
 80093b4:	2301      	movs	r3, #1
 80093b6:	001a      	movs	r2, r3
 80093b8:	930c      	str	r3, [sp, #48]	; 0x30
 80093ba:	9306      	str	r3, [sp, #24]
 80093bc:	9223      	str	r2, [sp, #140]	; 0x8c
 80093be:	e00d      	b.n	80093dc <_dtoa_r+0x26c>
 80093c0:	2301      	movs	r3, #1
 80093c2:	e7f3      	b.n	80093ac <_dtoa_r+0x23c>
 80093c4:	2300      	movs	r3, #0
 80093c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80093c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ca:	4694      	mov	ip, r2
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	4463      	add	r3, ip
 80093d0:	930c      	str	r3, [sp, #48]	; 0x30
 80093d2:	3301      	adds	r3, #1
 80093d4:	9306      	str	r3, [sp, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc00      	bgt.n	80093dc <_dtoa_r+0x26c>
 80093da:	2301      	movs	r3, #1
 80093dc:	2200      	movs	r2, #0
 80093de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e0:	6042      	str	r2, [r0, #4]
 80093e2:	3204      	adds	r2, #4
 80093e4:	0015      	movs	r5, r2
 80093e6:	3514      	adds	r5, #20
 80093e8:	6841      	ldr	r1, [r0, #4]
 80093ea:	429d      	cmp	r5, r3
 80093ec:	d91d      	bls.n	800942a <_dtoa_r+0x2ba>
 80093ee:	0038      	movs	r0, r7
 80093f0:	f000 fcfc 	bl	8009dec <_Balloc>
 80093f4:	9005      	str	r0, [sp, #20]
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d11b      	bne.n	8009432 <_dtoa_r+0x2c2>
 80093fa:	21d5      	movs	r1, #213	; 0xd5
 80093fc:	0002      	movs	r2, r0
 80093fe:	4b3c      	ldr	r3, [pc, #240]	; (80094f0 <_dtoa_r+0x380>)
 8009400:	0049      	lsls	r1, r1, #1
 8009402:	e6ca      	b.n	800919a <_dtoa_r+0x2a>
 8009404:	2301      	movs	r3, #1
 8009406:	e7de      	b.n	80093c6 <_dtoa_r+0x256>
 8009408:	2300      	movs	r3, #0
 800940a:	940f      	str	r4, [sp, #60]	; 0x3c
 800940c:	9322      	str	r3, [sp, #136]	; 0x88
 800940e:	3b01      	subs	r3, #1
 8009410:	930c      	str	r3, [sp, #48]	; 0x30
 8009412:	9306      	str	r3, [sp, #24]
 8009414:	2200      	movs	r2, #0
 8009416:	3313      	adds	r3, #19
 8009418:	e7d0      	b.n	80093bc <_dtoa_r+0x24c>
 800941a:	2301      	movs	r3, #1
 800941c:	930f      	str	r3, [sp, #60]	; 0x3c
 800941e:	3b02      	subs	r3, #2
 8009420:	e7f6      	b.n	8009410 <_dtoa_r+0x2a0>
 8009422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009424:	930c      	str	r3, [sp, #48]	; 0x30
 8009426:	9306      	str	r3, [sp, #24]
 8009428:	e7d8      	b.n	80093dc <_dtoa_r+0x26c>
 800942a:	3101      	adds	r1, #1
 800942c:	6041      	str	r1, [r0, #4]
 800942e:	0052      	lsls	r2, r2, #1
 8009430:	e7d8      	b.n	80093e4 <_dtoa_r+0x274>
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	9a05      	ldr	r2, [sp, #20]
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	9b06      	ldr	r3, [sp, #24]
 800943a:	2b0e      	cmp	r3, #14
 800943c:	d900      	bls.n	8009440 <_dtoa_r+0x2d0>
 800943e:	e0eb      	b.n	8009618 <_dtoa_r+0x4a8>
 8009440:	2c00      	cmp	r4, #0
 8009442:	d100      	bne.n	8009446 <_dtoa_r+0x2d6>
 8009444:	e0e8      	b.n	8009618 <_dtoa_r+0x4a8>
 8009446:	9b02      	ldr	r3, [sp, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	dd68      	ble.n	800951e <_dtoa_r+0x3ae>
 800944c:	001a      	movs	r2, r3
 800944e:	210f      	movs	r1, #15
 8009450:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <_dtoa_r+0x370>)
 8009452:	400a      	ands	r2, r1
 8009454:	00d2      	lsls	r2, r2, #3
 8009456:	189b      	adds	r3, r3, r2
 8009458:	681d      	ldr	r5, [r3, #0]
 800945a:	685e      	ldr	r6, [r3, #4]
 800945c:	9b02      	ldr	r3, [sp, #8]
 800945e:	111c      	asrs	r4, r3, #4
 8009460:	2302      	movs	r3, #2
 8009462:	9310      	str	r3, [sp, #64]	; 0x40
 8009464:	9b02      	ldr	r3, [sp, #8]
 8009466:	05db      	lsls	r3, r3, #23
 8009468:	d50b      	bpl.n	8009482 <_dtoa_r+0x312>
 800946a:	4b22      	ldr	r3, [pc, #136]	; (80094f4 <_dtoa_r+0x384>)
 800946c:	400c      	ands	r4, r1
 800946e:	6a1a      	ldr	r2, [r3, #32]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009474:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009476:	f7f7 fcb3 	bl	8000de0 <__aeabi_ddiv>
 800947a:	2303      	movs	r3, #3
 800947c:	900a      	str	r0, [sp, #40]	; 0x28
 800947e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009480:	9310      	str	r3, [sp, #64]	; 0x40
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <_dtoa_r+0x384>)
 8009484:	9307      	str	r3, [sp, #28]
 8009486:	2c00      	cmp	r4, #0
 8009488:	d136      	bne.n	80094f8 <_dtoa_r+0x388>
 800948a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800948c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800948e:	002a      	movs	r2, r5
 8009490:	0033      	movs	r3, r6
 8009492:	f7f7 fca5 	bl	8000de0 <__aeabi_ddiv>
 8009496:	900a      	str	r0, [sp, #40]	; 0x28
 8009498:	910b      	str	r1, [sp, #44]	; 0x2c
 800949a:	e05c      	b.n	8009556 <_dtoa_r+0x3e6>
 800949c:	0800b4dd 	.word	0x0800b4dd
 80094a0:	0800b4f4 	.word	0x0800b4f4
 80094a4:	7ff00000 	.word	0x7ff00000
 80094a8:	0000270f 	.word	0x0000270f
 80094ac:	0800b4d9 	.word	0x0800b4d9
 80094b0:	0800b4dc 	.word	0x0800b4dc
 80094b4:	0800b4ac 	.word	0x0800b4ac
 80094b8:	0800b4ad 	.word	0x0800b4ad
 80094bc:	3ff00000 	.word	0x3ff00000
 80094c0:	fffffc01 	.word	0xfffffc01
 80094c4:	3ff80000 	.word	0x3ff80000
 80094c8:	636f4361 	.word	0x636f4361
 80094cc:	3fd287a7 	.word	0x3fd287a7
 80094d0:	8b60c8b3 	.word	0x8b60c8b3
 80094d4:	3fc68a28 	.word	0x3fc68a28
 80094d8:	509f79fb 	.word	0x509f79fb
 80094dc:	3fd34413 	.word	0x3fd34413
 80094e0:	0800b5f0 	.word	0x0800b5f0
 80094e4:	00000432 	.word	0x00000432
 80094e8:	00000412 	.word	0x00000412
 80094ec:	fe100000 	.word	0xfe100000
 80094f0:	0800b553 	.word	0x0800b553
 80094f4:	0800b5c8 	.word	0x0800b5c8
 80094f8:	2301      	movs	r3, #1
 80094fa:	421c      	tst	r4, r3
 80094fc:	d00b      	beq.n	8009516 <_dtoa_r+0x3a6>
 80094fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009500:	0028      	movs	r0, r5
 8009502:	3301      	adds	r3, #1
 8009504:	9310      	str	r3, [sp, #64]	; 0x40
 8009506:	9b07      	ldr	r3, [sp, #28]
 8009508:	0031      	movs	r1, r6
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f7f8 f86d 	bl	80015ec <__aeabi_dmul>
 8009512:	0005      	movs	r5, r0
 8009514:	000e      	movs	r6, r1
 8009516:	9b07      	ldr	r3, [sp, #28]
 8009518:	1064      	asrs	r4, r4, #1
 800951a:	3308      	adds	r3, #8
 800951c:	e7b2      	b.n	8009484 <_dtoa_r+0x314>
 800951e:	2302      	movs	r3, #2
 8009520:	9310      	str	r3, [sp, #64]	; 0x40
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d016      	beq.n	8009556 <_dtoa_r+0x3e6>
 8009528:	9812      	ldr	r0, [sp, #72]	; 0x48
 800952a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800952c:	425c      	negs	r4, r3
 800952e:	230f      	movs	r3, #15
 8009530:	4ab5      	ldr	r2, [pc, #724]	; (8009808 <_dtoa_r+0x698>)
 8009532:	4023      	ands	r3, r4
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	18d3      	adds	r3, r2, r3
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f7f8 f856 	bl	80015ec <__aeabi_dmul>
 8009540:	2601      	movs	r6, #1
 8009542:	2300      	movs	r3, #0
 8009544:	900a      	str	r0, [sp, #40]	; 0x28
 8009546:	910b      	str	r1, [sp, #44]	; 0x2c
 8009548:	4db0      	ldr	r5, [pc, #704]	; (800980c <_dtoa_r+0x69c>)
 800954a:	1124      	asrs	r4, r4, #4
 800954c:	2c00      	cmp	r4, #0
 800954e:	d000      	beq.n	8009552 <_dtoa_r+0x3e2>
 8009550:	e094      	b.n	800967c <_dtoa_r+0x50c>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d19f      	bne.n	8009496 <_dtoa_r+0x326>
 8009556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009558:	2b00      	cmp	r3, #0
 800955a:	d100      	bne.n	800955e <_dtoa_r+0x3ee>
 800955c:	e09b      	b.n	8009696 <_dtoa_r+0x526>
 800955e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009562:	2200      	movs	r2, #0
 8009564:	0020      	movs	r0, r4
 8009566:	0029      	movs	r1, r5
 8009568:	4ba9      	ldr	r3, [pc, #676]	; (8009810 <_dtoa_r+0x6a0>)
 800956a:	f7f6 ff75 	bl	8000458 <__aeabi_dcmplt>
 800956e:	2800      	cmp	r0, #0
 8009570:	d100      	bne.n	8009574 <_dtoa_r+0x404>
 8009572:	e090      	b.n	8009696 <_dtoa_r+0x526>
 8009574:	9b06      	ldr	r3, [sp, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d100      	bne.n	800957c <_dtoa_r+0x40c>
 800957a:	e08c      	b.n	8009696 <_dtoa_r+0x526>
 800957c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd46      	ble.n	8009610 <_dtoa_r+0x4a0>
 8009582:	9b02      	ldr	r3, [sp, #8]
 8009584:	2200      	movs	r2, #0
 8009586:	0020      	movs	r0, r4
 8009588:	0029      	movs	r1, r5
 800958a:	1e5e      	subs	r6, r3, #1
 800958c:	4ba1      	ldr	r3, [pc, #644]	; (8009814 <_dtoa_r+0x6a4>)
 800958e:	f7f8 f82d 	bl	80015ec <__aeabi_dmul>
 8009592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009594:	900a      	str	r0, [sp, #40]	; 0x28
 8009596:	910b      	str	r1, [sp, #44]	; 0x2c
 8009598:	3301      	adds	r3, #1
 800959a:	9310      	str	r3, [sp, #64]	; 0x40
 800959c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800959e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80095a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80095a4:	9307      	str	r3, [sp, #28]
 80095a6:	f7f8 fe73 	bl	8002290 <__aeabi_i2d>
 80095aa:	0022      	movs	r2, r4
 80095ac:	002b      	movs	r3, r5
 80095ae:	f7f8 f81d 	bl	80015ec <__aeabi_dmul>
 80095b2:	2200      	movs	r2, #0
 80095b4:	4b98      	ldr	r3, [pc, #608]	; (8009818 <_dtoa_r+0x6a8>)
 80095b6:	f7f7 f8a9 	bl	800070c <__aeabi_dadd>
 80095ba:	9010      	str	r0, [sp, #64]	; 0x40
 80095bc:	9111      	str	r1, [sp, #68]	; 0x44
 80095be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095c2:	920a      	str	r2, [sp, #40]	; 0x28
 80095c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095c6:	4a95      	ldr	r2, [pc, #596]	; (800981c <_dtoa_r+0x6ac>)
 80095c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095ca:	4694      	mov	ip, r2
 80095cc:	4463      	add	r3, ip
 80095ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80095d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d2:	9b07      	ldr	r3, [sp, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d161      	bne.n	800969c <_dtoa_r+0x52c>
 80095d8:	2200      	movs	r2, #0
 80095da:	0020      	movs	r0, r4
 80095dc:	0029      	movs	r1, r5
 80095de:	4b90      	ldr	r3, [pc, #576]	; (8009820 <_dtoa_r+0x6b0>)
 80095e0:	f7f8 fa70 	bl	8001ac4 <__aeabi_dsub>
 80095e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095e8:	0004      	movs	r4, r0
 80095ea:	000d      	movs	r5, r1
 80095ec:	f7f6 ff48 	bl	8000480 <__aeabi_dcmpgt>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d000      	beq.n	80095f6 <_dtoa_r+0x486>
 80095f4:	e2b5      	b.n	8009b62 <_dtoa_r+0x9f2>
 80095f6:	488b      	ldr	r0, [pc, #556]	; (8009824 <_dtoa_r+0x6b4>)
 80095f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80095fa:	4684      	mov	ip, r0
 80095fc:	4461      	add	r1, ip
 80095fe:	000b      	movs	r3, r1
 8009600:	0020      	movs	r0, r4
 8009602:	0029      	movs	r1, r5
 8009604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009606:	f7f6 ff27 	bl	8000458 <__aeabi_dcmplt>
 800960a:	2800      	cmp	r0, #0
 800960c:	d000      	beq.n	8009610 <_dtoa_r+0x4a0>
 800960e:	e2a5      	b.n	8009b5c <_dtoa_r+0x9ec>
 8009610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009612:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009614:	930a      	str	r3, [sp, #40]	; 0x28
 8009616:	940b      	str	r4, [sp, #44]	; 0x2c
 8009618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800961a:	2b00      	cmp	r3, #0
 800961c:	da00      	bge.n	8009620 <_dtoa_r+0x4b0>
 800961e:	e171      	b.n	8009904 <_dtoa_r+0x794>
 8009620:	9a02      	ldr	r2, [sp, #8]
 8009622:	2a0e      	cmp	r2, #14
 8009624:	dd00      	ble.n	8009628 <_dtoa_r+0x4b8>
 8009626:	e16d      	b.n	8009904 <_dtoa_r+0x794>
 8009628:	4b77      	ldr	r3, [pc, #476]	; (8009808 <_dtoa_r+0x698>)
 800962a:	00d2      	lsls	r2, r2, #3
 800962c:	189b      	adds	r3, r3, r2
 800962e:	685c      	ldr	r4, [r3, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	9308      	str	r3, [sp, #32]
 8009634:	9409      	str	r4, [sp, #36]	; 0x24
 8009636:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009638:	2b00      	cmp	r3, #0
 800963a:	db00      	blt.n	800963e <_dtoa_r+0x4ce>
 800963c:	e0f6      	b.n	800982c <_dtoa_r+0x6bc>
 800963e:	9b06      	ldr	r3, [sp, #24]
 8009640:	2b00      	cmp	r3, #0
 8009642:	dd00      	ble.n	8009646 <_dtoa_r+0x4d6>
 8009644:	e0f2      	b.n	800982c <_dtoa_r+0x6bc>
 8009646:	d000      	beq.n	800964a <_dtoa_r+0x4da>
 8009648:	e288      	b.n	8009b5c <_dtoa_r+0x9ec>
 800964a:	9808      	ldr	r0, [sp, #32]
 800964c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800964e:	2200      	movs	r2, #0
 8009650:	4b73      	ldr	r3, [pc, #460]	; (8009820 <_dtoa_r+0x6b0>)
 8009652:	f7f7 ffcb 	bl	80015ec <__aeabi_dmul>
 8009656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800965a:	f7f6 ff1b 	bl	8000494 <__aeabi_dcmpge>
 800965e:	9e06      	ldr	r6, [sp, #24]
 8009660:	0035      	movs	r5, r6
 8009662:	2800      	cmp	r0, #0
 8009664:	d000      	beq.n	8009668 <_dtoa_r+0x4f8>
 8009666:	e25f      	b.n	8009b28 <_dtoa_r+0x9b8>
 8009668:	9b05      	ldr	r3, [sp, #20]
 800966a:	9a05      	ldr	r2, [sp, #20]
 800966c:	3301      	adds	r3, #1
 800966e:	9307      	str	r3, [sp, #28]
 8009670:	2331      	movs	r3, #49	; 0x31
 8009672:	7013      	strb	r3, [r2, #0]
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	3301      	adds	r3, #1
 8009678:	9302      	str	r3, [sp, #8]
 800967a:	e25a      	b.n	8009b32 <_dtoa_r+0x9c2>
 800967c:	4234      	tst	r4, r6
 800967e:	d007      	beq.n	8009690 <_dtoa_r+0x520>
 8009680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009682:	3301      	adds	r3, #1
 8009684:	9310      	str	r3, [sp, #64]	; 0x40
 8009686:	682a      	ldr	r2, [r5, #0]
 8009688:	686b      	ldr	r3, [r5, #4]
 800968a:	f7f7 ffaf 	bl	80015ec <__aeabi_dmul>
 800968e:	0033      	movs	r3, r6
 8009690:	1064      	asrs	r4, r4, #1
 8009692:	3508      	adds	r5, #8
 8009694:	e75a      	b.n	800954c <_dtoa_r+0x3dc>
 8009696:	9e02      	ldr	r6, [sp, #8]
 8009698:	9b06      	ldr	r3, [sp, #24]
 800969a:	e780      	b.n	800959e <_dtoa_r+0x42e>
 800969c:	9b07      	ldr	r3, [sp, #28]
 800969e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80096a0:	1e5a      	subs	r2, r3, #1
 80096a2:	4b59      	ldr	r3, [pc, #356]	; (8009808 <_dtoa_r+0x698>)
 80096a4:	00d2      	lsls	r2, r2, #3
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2900      	cmp	r1, #0
 80096ae:	d051      	beq.n	8009754 <_dtoa_r+0x5e4>
 80096b0:	2000      	movs	r0, #0
 80096b2:	495d      	ldr	r1, [pc, #372]	; (8009828 <_dtoa_r+0x6b8>)
 80096b4:	f7f7 fb94 	bl	8000de0 <__aeabi_ddiv>
 80096b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096bc:	f7f8 fa02 	bl	8001ac4 <__aeabi_dsub>
 80096c0:	9a05      	ldr	r2, [sp, #20]
 80096c2:	9b05      	ldr	r3, [sp, #20]
 80096c4:	4694      	mov	ip, r2
 80096c6:	9310      	str	r3, [sp, #64]	; 0x40
 80096c8:	9b07      	ldr	r3, [sp, #28]
 80096ca:	900a      	str	r0, [sp, #40]	; 0x28
 80096cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80096ce:	4463      	add	r3, ip
 80096d0:	9319      	str	r3, [sp, #100]	; 0x64
 80096d2:	0029      	movs	r1, r5
 80096d4:	0020      	movs	r0, r4
 80096d6:	f7f8 fda5 	bl	8002224 <__aeabi_d2iz>
 80096da:	9017      	str	r0, [sp, #92]	; 0x5c
 80096dc:	f7f8 fdd8 	bl	8002290 <__aeabi_i2d>
 80096e0:	0002      	movs	r2, r0
 80096e2:	000b      	movs	r3, r1
 80096e4:	0020      	movs	r0, r4
 80096e6:	0029      	movs	r1, r5
 80096e8:	f7f8 f9ec 	bl	8001ac4 <__aeabi_dsub>
 80096ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096f0:	3301      	adds	r3, #1
 80096f2:	9307      	str	r3, [sp, #28]
 80096f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096f6:	0004      	movs	r4, r0
 80096f8:	3330      	adds	r3, #48	; 0x30
 80096fa:	7013      	strb	r3, [r2, #0]
 80096fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009700:	000d      	movs	r5, r1
 8009702:	f7f6 fea9 	bl	8000458 <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	d175      	bne.n	80097f6 <_dtoa_r+0x686>
 800970a:	0022      	movs	r2, r4
 800970c:	002b      	movs	r3, r5
 800970e:	2000      	movs	r0, #0
 8009710:	493f      	ldr	r1, [pc, #252]	; (8009810 <_dtoa_r+0x6a0>)
 8009712:	f7f8 f9d7 	bl	8001ac4 <__aeabi_dsub>
 8009716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800971a:	f7f6 fe9d 	bl	8000458 <__aeabi_dcmplt>
 800971e:	2800      	cmp	r0, #0
 8009720:	d000      	beq.n	8009724 <_dtoa_r+0x5b4>
 8009722:	e0d1      	b.n	80098c8 <_dtoa_r+0x758>
 8009724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009726:	9a07      	ldr	r2, [sp, #28]
 8009728:	4293      	cmp	r3, r2
 800972a:	d100      	bne.n	800972e <_dtoa_r+0x5be>
 800972c:	e770      	b.n	8009610 <_dtoa_r+0x4a0>
 800972e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009732:	2200      	movs	r2, #0
 8009734:	4b37      	ldr	r3, [pc, #220]	; (8009814 <_dtoa_r+0x6a4>)
 8009736:	f7f7 ff59 	bl	80015ec <__aeabi_dmul>
 800973a:	4b36      	ldr	r3, [pc, #216]	; (8009814 <_dtoa_r+0x6a4>)
 800973c:	900a      	str	r0, [sp, #40]	; 0x28
 800973e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009740:	2200      	movs	r2, #0
 8009742:	0020      	movs	r0, r4
 8009744:	0029      	movs	r1, r5
 8009746:	f7f7 ff51 	bl	80015ec <__aeabi_dmul>
 800974a:	9b07      	ldr	r3, [sp, #28]
 800974c:	0004      	movs	r4, r0
 800974e:	000d      	movs	r5, r1
 8009750:	9310      	str	r3, [sp, #64]	; 0x40
 8009752:	e7be      	b.n	80096d2 <_dtoa_r+0x562>
 8009754:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009758:	f7f7 ff48 	bl	80015ec <__aeabi_dmul>
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	4694      	mov	ip, r2
 8009762:	930a      	str	r3, [sp, #40]	; 0x28
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	9010      	str	r0, [sp, #64]	; 0x40
 8009768:	9111      	str	r1, [sp, #68]	; 0x44
 800976a:	4463      	add	r3, ip
 800976c:	9319      	str	r3, [sp, #100]	; 0x64
 800976e:	0029      	movs	r1, r5
 8009770:	0020      	movs	r0, r4
 8009772:	f7f8 fd57 	bl	8002224 <__aeabi_d2iz>
 8009776:	9017      	str	r0, [sp, #92]	; 0x5c
 8009778:	f7f8 fd8a 	bl	8002290 <__aeabi_i2d>
 800977c:	0002      	movs	r2, r0
 800977e:	000b      	movs	r3, r1
 8009780:	0020      	movs	r0, r4
 8009782:	0029      	movs	r1, r5
 8009784:	f7f8 f99e 	bl	8001ac4 <__aeabi_dsub>
 8009788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800978a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800978c:	3330      	adds	r3, #48	; 0x30
 800978e:	7013      	strb	r3, [r2, #0]
 8009790:	0013      	movs	r3, r2
 8009792:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009794:	3301      	adds	r3, #1
 8009796:	0004      	movs	r4, r0
 8009798:	000d      	movs	r5, r1
 800979a:	930a      	str	r3, [sp, #40]	; 0x28
 800979c:	4293      	cmp	r3, r2
 800979e:	d12c      	bne.n	80097fa <_dtoa_r+0x68a>
 80097a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80097a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80097a4:	9a05      	ldr	r2, [sp, #20]
 80097a6:	9b07      	ldr	r3, [sp, #28]
 80097a8:	4694      	mov	ip, r2
 80097aa:	4463      	add	r3, ip
 80097ac:	2200      	movs	r2, #0
 80097ae:	9307      	str	r3, [sp, #28]
 80097b0:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <_dtoa_r+0x6b8>)
 80097b2:	f7f6 ffab 	bl	800070c <__aeabi_dadd>
 80097b6:	0002      	movs	r2, r0
 80097b8:	000b      	movs	r3, r1
 80097ba:	0020      	movs	r0, r4
 80097bc:	0029      	movs	r1, r5
 80097be:	f7f6 fe5f 	bl	8000480 <__aeabi_dcmpgt>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d000      	beq.n	80097c8 <_dtoa_r+0x658>
 80097c6:	e07f      	b.n	80098c8 <_dtoa_r+0x758>
 80097c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097cc:	2000      	movs	r0, #0
 80097ce:	4916      	ldr	r1, [pc, #88]	; (8009828 <_dtoa_r+0x6b8>)
 80097d0:	f7f8 f978 	bl	8001ac4 <__aeabi_dsub>
 80097d4:	0002      	movs	r2, r0
 80097d6:	000b      	movs	r3, r1
 80097d8:	0020      	movs	r0, r4
 80097da:	0029      	movs	r1, r5
 80097dc:	f7f6 fe3c 	bl	8000458 <__aeabi_dcmplt>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d100      	bne.n	80097e6 <_dtoa_r+0x676>
 80097e4:	e714      	b.n	8009610 <_dtoa_r+0x4a0>
 80097e6:	9b07      	ldr	r3, [sp, #28]
 80097e8:	001a      	movs	r2, r3
 80097ea:	3a01      	subs	r2, #1
 80097ec:	9207      	str	r2, [sp, #28]
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	2a30      	cmp	r2, #48	; 0x30
 80097f2:	d0f8      	beq.n	80097e6 <_dtoa_r+0x676>
 80097f4:	9307      	str	r3, [sp, #28]
 80097f6:	9602      	str	r6, [sp, #8]
 80097f8:	e054      	b.n	80098a4 <_dtoa_r+0x734>
 80097fa:	2200      	movs	r2, #0
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_dtoa_r+0x6a4>)
 80097fe:	f7f7 fef5 	bl	80015ec <__aeabi_dmul>
 8009802:	0004      	movs	r4, r0
 8009804:	000d      	movs	r5, r1
 8009806:	e7b2      	b.n	800976e <_dtoa_r+0x5fe>
 8009808:	0800b5f0 	.word	0x0800b5f0
 800980c:	0800b5c8 	.word	0x0800b5c8
 8009810:	3ff00000 	.word	0x3ff00000
 8009814:	40240000 	.word	0x40240000
 8009818:	401c0000 	.word	0x401c0000
 800981c:	fcc00000 	.word	0xfcc00000
 8009820:	40140000 	.word	0x40140000
 8009824:	7cc00000 	.word	0x7cc00000
 8009828:	3fe00000 	.word	0x3fe00000
 800982c:	9b06      	ldr	r3, [sp, #24]
 800982e:	9e05      	ldr	r6, [sp, #20]
 8009830:	3b01      	subs	r3, #1
 8009832:	199b      	adds	r3, r3, r6
 8009834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009836:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009838:	930a      	str	r3, [sp, #40]	; 0x28
 800983a:	9a08      	ldr	r2, [sp, #32]
 800983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983e:	0020      	movs	r0, r4
 8009840:	0029      	movs	r1, r5
 8009842:	f7f7 facd 	bl	8000de0 <__aeabi_ddiv>
 8009846:	f7f8 fced 	bl	8002224 <__aeabi_d2iz>
 800984a:	9006      	str	r0, [sp, #24]
 800984c:	f7f8 fd20 	bl	8002290 <__aeabi_i2d>
 8009850:	9a08      	ldr	r2, [sp, #32]
 8009852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009854:	f7f7 feca 	bl	80015ec <__aeabi_dmul>
 8009858:	0002      	movs	r2, r0
 800985a:	000b      	movs	r3, r1
 800985c:	0020      	movs	r0, r4
 800985e:	0029      	movs	r1, r5
 8009860:	f7f8 f930 	bl	8001ac4 <__aeabi_dsub>
 8009864:	0033      	movs	r3, r6
 8009866:	9a06      	ldr	r2, [sp, #24]
 8009868:	3601      	adds	r6, #1
 800986a:	3230      	adds	r2, #48	; 0x30
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009870:	9607      	str	r6, [sp, #28]
 8009872:	429a      	cmp	r2, r3
 8009874:	d139      	bne.n	80098ea <_dtoa_r+0x77a>
 8009876:	0002      	movs	r2, r0
 8009878:	000b      	movs	r3, r1
 800987a:	f7f6 ff47 	bl	800070c <__aeabi_dadd>
 800987e:	9a08      	ldr	r2, [sp, #32]
 8009880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009882:	0004      	movs	r4, r0
 8009884:	000d      	movs	r5, r1
 8009886:	f7f6 fdfb 	bl	8000480 <__aeabi_dcmpgt>
 800988a:	2800      	cmp	r0, #0
 800988c:	d11b      	bne.n	80098c6 <_dtoa_r+0x756>
 800988e:	9a08      	ldr	r2, [sp, #32]
 8009890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009892:	0020      	movs	r0, r4
 8009894:	0029      	movs	r1, r5
 8009896:	f7f6 fdd9 	bl	800044c <__aeabi_dcmpeq>
 800989a:	2800      	cmp	r0, #0
 800989c:	d002      	beq.n	80098a4 <_dtoa_r+0x734>
 800989e:	9b06      	ldr	r3, [sp, #24]
 80098a0:	07db      	lsls	r3, r3, #31
 80098a2:	d410      	bmi.n	80098c6 <_dtoa_r+0x756>
 80098a4:	0038      	movs	r0, r7
 80098a6:	9904      	ldr	r1, [sp, #16]
 80098a8:	f000 fae4 	bl	8009e74 <_Bfree>
 80098ac:	2300      	movs	r3, #0
 80098ae:	9a07      	ldr	r2, [sp, #28]
 80098b0:	9802      	ldr	r0, [sp, #8]
 80098b2:	7013      	strb	r3, [r2, #0]
 80098b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80098b6:	3001      	adds	r0, #1
 80098b8:	6018      	str	r0, [r3, #0]
 80098ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d100      	bne.n	80098c2 <_dtoa_r+0x752>
 80098c0:	e4a3      	b.n	800920a <_dtoa_r+0x9a>
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e4a1      	b.n	800920a <_dtoa_r+0x9a>
 80098c6:	9e02      	ldr	r6, [sp, #8]
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	9307      	str	r3, [sp, #28]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	2a39      	cmp	r2, #57	; 0x39
 80098d2:	d106      	bne.n	80098e2 <_dtoa_r+0x772>
 80098d4:	9a05      	ldr	r2, [sp, #20]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d1f7      	bne.n	80098ca <_dtoa_r+0x75a>
 80098da:	2230      	movs	r2, #48	; 0x30
 80098dc:	9905      	ldr	r1, [sp, #20]
 80098de:	3601      	adds	r6, #1
 80098e0:	700a      	strb	r2, [r1, #0]
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	3201      	adds	r2, #1
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	e785      	b.n	80097f6 <_dtoa_r+0x686>
 80098ea:	2200      	movs	r2, #0
 80098ec:	4bad      	ldr	r3, [pc, #692]	; (8009ba4 <_dtoa_r+0xa34>)
 80098ee:	f7f7 fe7d 	bl	80015ec <__aeabi_dmul>
 80098f2:	2200      	movs	r2, #0
 80098f4:	2300      	movs	r3, #0
 80098f6:	0004      	movs	r4, r0
 80098f8:	000d      	movs	r5, r1
 80098fa:	f7f6 fda7 	bl	800044c <__aeabi_dcmpeq>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d09b      	beq.n	800983a <_dtoa_r+0x6ca>
 8009902:	e7cf      	b.n	80098a4 <_dtoa_r+0x734>
 8009904:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009906:	2a00      	cmp	r2, #0
 8009908:	d100      	bne.n	800990c <_dtoa_r+0x79c>
 800990a:	e082      	b.n	8009a12 <_dtoa_r+0x8a2>
 800990c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800990e:	2a01      	cmp	r2, #1
 8009910:	dc66      	bgt.n	80099e0 <_dtoa_r+0x870>
 8009912:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009914:	2a00      	cmp	r2, #0
 8009916:	d05f      	beq.n	80099d8 <_dtoa_r+0x868>
 8009918:	4aa3      	ldr	r2, [pc, #652]	; (8009ba8 <_dtoa_r+0xa38>)
 800991a:	189b      	adds	r3, r3, r2
 800991c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800991e:	9c08      	ldr	r4, [sp, #32]
 8009920:	9a08      	ldr	r2, [sp, #32]
 8009922:	2101      	movs	r1, #1
 8009924:	18d2      	adds	r2, r2, r3
 8009926:	9208      	str	r2, [sp, #32]
 8009928:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800992a:	0038      	movs	r0, r7
 800992c:	18d3      	adds	r3, r2, r3
 800992e:	930d      	str	r3, [sp, #52]	; 0x34
 8009930:	f000 fb50 	bl	8009fd4 <__i2b>
 8009934:	0005      	movs	r5, r0
 8009936:	2c00      	cmp	r4, #0
 8009938:	dd0e      	ble.n	8009958 <_dtoa_r+0x7e8>
 800993a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd0b      	ble.n	8009958 <_dtoa_r+0x7e8>
 8009940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009942:	0023      	movs	r3, r4
 8009944:	4294      	cmp	r4, r2
 8009946:	dd00      	ble.n	800994a <_dtoa_r+0x7da>
 8009948:	0013      	movs	r3, r2
 800994a:	9a08      	ldr	r2, [sp, #32]
 800994c:	1ae4      	subs	r4, r4, r3
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	9208      	str	r2, [sp, #32]
 8009952:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	930d      	str	r3, [sp, #52]	; 0x34
 8009958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800995a:	2b00      	cmp	r3, #0
 800995c:	d01f      	beq.n	800999e <_dtoa_r+0x82e>
 800995e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d05a      	beq.n	8009a1a <_dtoa_r+0x8aa>
 8009964:	2e00      	cmp	r6, #0
 8009966:	dd11      	ble.n	800998c <_dtoa_r+0x81c>
 8009968:	0029      	movs	r1, r5
 800996a:	0032      	movs	r2, r6
 800996c:	0038      	movs	r0, r7
 800996e:	f000 fbf7 	bl	800a160 <__pow5mult>
 8009972:	9a04      	ldr	r2, [sp, #16]
 8009974:	0001      	movs	r1, r0
 8009976:	0005      	movs	r5, r0
 8009978:	0038      	movs	r0, r7
 800997a:	f000 fb41 	bl	800a000 <__multiply>
 800997e:	9904      	ldr	r1, [sp, #16]
 8009980:	9007      	str	r0, [sp, #28]
 8009982:	0038      	movs	r0, r7
 8009984:	f000 fa76 	bl	8009e74 <_Bfree>
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800998e:	1b9a      	subs	r2, r3, r6
 8009990:	42b3      	cmp	r3, r6
 8009992:	d004      	beq.n	800999e <_dtoa_r+0x82e>
 8009994:	0038      	movs	r0, r7
 8009996:	9904      	ldr	r1, [sp, #16]
 8009998:	f000 fbe2 	bl	800a160 <__pow5mult>
 800999c:	9004      	str	r0, [sp, #16]
 800999e:	2101      	movs	r1, #1
 80099a0:	0038      	movs	r0, r7
 80099a2:	f000 fb17 	bl	8009fd4 <__i2b>
 80099a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099a8:	0006      	movs	r6, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dd37      	ble.n	8009a1e <_dtoa_r+0x8ae>
 80099ae:	001a      	movs	r2, r3
 80099b0:	0001      	movs	r1, r0
 80099b2:	0038      	movs	r0, r7
 80099b4:	f000 fbd4 	bl	800a160 <__pow5mult>
 80099b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099ba:	0006      	movs	r6, r0
 80099bc:	2b01      	cmp	r3, #1
 80099be:	dd33      	ble.n	8009a28 <_dtoa_r+0x8b8>
 80099c0:	2300      	movs	r3, #0
 80099c2:	9307      	str	r3, [sp, #28]
 80099c4:	6933      	ldr	r3, [r6, #16]
 80099c6:	3303      	adds	r3, #3
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	18f3      	adds	r3, r6, r3
 80099cc:	6858      	ldr	r0, [r3, #4]
 80099ce:	f000 fab9 	bl	8009f44 <__hi0bits>
 80099d2:	2320      	movs	r3, #32
 80099d4:	1a18      	subs	r0, r3, r0
 80099d6:	e03f      	b.n	8009a58 <_dtoa_r+0x8e8>
 80099d8:	2336      	movs	r3, #54	; 0x36
 80099da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099dc:	1a9b      	subs	r3, r3, r2
 80099de:	e79d      	b.n	800991c <_dtoa_r+0x7ac>
 80099e0:	9b06      	ldr	r3, [sp, #24]
 80099e2:	1e5e      	subs	r6, r3, #1
 80099e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e6:	42b3      	cmp	r3, r6
 80099e8:	db08      	blt.n	80099fc <_dtoa_r+0x88c>
 80099ea:	1b9e      	subs	r6, r3, r6
 80099ec:	9b06      	ldr	r3, [sp, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da0c      	bge.n	8009a0c <_dtoa_r+0x89c>
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	1a9c      	subs	r4, r3, r2
 80099f8:	2300      	movs	r3, #0
 80099fa:	e791      	b.n	8009920 <_dtoa_r+0x7b0>
 80099fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a00:	1af3      	subs	r3, r6, r3
 8009a02:	18d3      	adds	r3, r2, r3
 8009a04:	960e      	str	r6, [sp, #56]	; 0x38
 8009a06:	9314      	str	r3, [sp, #80]	; 0x50
 8009a08:	2600      	movs	r6, #0
 8009a0a:	e7ef      	b.n	80099ec <_dtoa_r+0x87c>
 8009a0c:	9c08      	ldr	r4, [sp, #32]
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	e786      	b.n	8009920 <_dtoa_r+0x7b0>
 8009a12:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009a14:	9c08      	ldr	r4, [sp, #32]
 8009a16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a18:	e78d      	b.n	8009936 <_dtoa_r+0x7c6>
 8009a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a1c:	e7ba      	b.n	8009994 <_dtoa_r+0x824>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9307      	str	r3, [sp, #28]
 8009a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	dc13      	bgt.n	8009a50 <_dtoa_r+0x8e0>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9307      	str	r3, [sp, #28]
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10e      	bne.n	8009a50 <_dtoa_r+0x8e0>
 8009a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a34:	031b      	lsls	r3, r3, #12
 8009a36:	d10b      	bne.n	8009a50 <_dtoa_r+0x8e0>
 8009a38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009a3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a3c:	4213      	tst	r3, r2
 8009a3e:	d007      	beq.n	8009a50 <_dtoa_r+0x8e0>
 8009a40:	9b08      	ldr	r3, [sp, #32]
 8009a42:	3301      	adds	r3, #1
 8009a44:	9308      	str	r3, [sp, #32]
 8009a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a48:	3301      	adds	r3, #1
 8009a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	9307      	str	r3, [sp, #28]
 8009a50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a52:	2001      	movs	r0, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1b5      	bne.n	80099c4 <_dtoa_r+0x854>
 8009a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a5a:	221f      	movs	r2, #31
 8009a5c:	1818      	adds	r0, r3, r0
 8009a5e:	0003      	movs	r3, r0
 8009a60:	4013      	ands	r3, r2
 8009a62:	4210      	tst	r0, r2
 8009a64:	d046      	beq.n	8009af4 <_dtoa_r+0x984>
 8009a66:	3201      	adds	r2, #1
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	2a04      	cmp	r2, #4
 8009a6c:	dd3f      	ble.n	8009aee <_dtoa_r+0x97e>
 8009a6e:	221c      	movs	r2, #28
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	9a08      	ldr	r2, [sp, #32]
 8009a74:	18e4      	adds	r4, r4, r3
 8009a76:	18d2      	adds	r2, r2, r3
 8009a78:	9208      	str	r2, [sp, #32]
 8009a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a7c:	18d3      	adds	r3, r2, r3
 8009a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009a80:	9b08      	ldr	r3, [sp, #32]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dd05      	ble.n	8009a92 <_dtoa_r+0x922>
 8009a86:	001a      	movs	r2, r3
 8009a88:	0038      	movs	r0, r7
 8009a8a:	9904      	ldr	r1, [sp, #16]
 8009a8c:	f000 fbc4 	bl	800a218 <__lshift>
 8009a90:	9004      	str	r0, [sp, #16]
 8009a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd05      	ble.n	8009aa4 <_dtoa_r+0x934>
 8009a98:	0031      	movs	r1, r6
 8009a9a:	001a      	movs	r2, r3
 8009a9c:	0038      	movs	r0, r7
 8009a9e:	f000 fbbb 	bl	800a218 <__lshift>
 8009aa2:	0006      	movs	r6, r0
 8009aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d026      	beq.n	8009af8 <_dtoa_r+0x988>
 8009aaa:	0031      	movs	r1, r6
 8009aac:	9804      	ldr	r0, [sp, #16]
 8009aae:	f000 fc23 	bl	800a2f8 <__mcmp>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	da20      	bge.n	8009af8 <_dtoa_r+0x988>
 8009ab6:	9b02      	ldr	r3, [sp, #8]
 8009ab8:	220a      	movs	r2, #10
 8009aba:	3b01      	subs	r3, #1
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	0038      	movs	r0, r7
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9904      	ldr	r1, [sp, #16]
 8009ac4:	f000 f9fa 	bl	8009ebc <__multadd>
 8009ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aca:	9004      	str	r0, [sp, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d100      	bne.n	8009ad2 <_dtoa_r+0x962>
 8009ad0:	e160      	b.n	8009d94 <_dtoa_r+0xc24>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	0029      	movs	r1, r5
 8009ad6:	220a      	movs	r2, #10
 8009ad8:	0038      	movs	r0, r7
 8009ada:	f000 f9ef 	bl	8009ebc <__multadd>
 8009ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ae0:	0005      	movs	r5, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dc47      	bgt.n	8009b76 <_dtoa_r+0xa06>
 8009ae6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	dc0d      	bgt.n	8009b08 <_dtoa_r+0x998>
 8009aec:	e043      	b.n	8009b76 <_dtoa_r+0xa06>
 8009aee:	2a04      	cmp	r2, #4
 8009af0:	d0c6      	beq.n	8009a80 <_dtoa_r+0x910>
 8009af2:	0013      	movs	r3, r2
 8009af4:	331c      	adds	r3, #28
 8009af6:	e7bc      	b.n	8009a72 <_dtoa_r+0x902>
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dc35      	bgt.n	8009b6a <_dtoa_r+0x9fa>
 8009afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	dd32      	ble.n	8009b6a <_dtoa_r+0x9fa>
 8009b04:	9b06      	ldr	r3, [sp, #24]
 8009b06:	930c      	str	r3, [sp, #48]	; 0x30
 8009b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10c      	bne.n	8009b28 <_dtoa_r+0x9b8>
 8009b0e:	0031      	movs	r1, r6
 8009b10:	2205      	movs	r2, #5
 8009b12:	0038      	movs	r0, r7
 8009b14:	f000 f9d2 	bl	8009ebc <__multadd>
 8009b18:	0006      	movs	r6, r0
 8009b1a:	0001      	movs	r1, r0
 8009b1c:	9804      	ldr	r0, [sp, #16]
 8009b1e:	f000 fbeb 	bl	800a2f8 <__mcmp>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	dd00      	ble.n	8009b28 <_dtoa_r+0x9b8>
 8009b26:	e59f      	b.n	8009668 <_dtoa_r+0x4f8>
 8009b28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b2a:	43db      	mvns	r3, r3
 8009b2c:	9302      	str	r3, [sp, #8]
 8009b2e:	9b05      	ldr	r3, [sp, #20]
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	2400      	movs	r4, #0
 8009b34:	0031      	movs	r1, r6
 8009b36:	0038      	movs	r0, r7
 8009b38:	f000 f99c 	bl	8009e74 <_Bfree>
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	d100      	bne.n	8009b42 <_dtoa_r+0x9d2>
 8009b40:	e6b0      	b.n	80098a4 <_dtoa_r+0x734>
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	d005      	beq.n	8009b52 <_dtoa_r+0x9e2>
 8009b46:	42ac      	cmp	r4, r5
 8009b48:	d003      	beq.n	8009b52 <_dtoa_r+0x9e2>
 8009b4a:	0021      	movs	r1, r4
 8009b4c:	0038      	movs	r0, r7
 8009b4e:	f000 f991 	bl	8009e74 <_Bfree>
 8009b52:	0029      	movs	r1, r5
 8009b54:	0038      	movs	r0, r7
 8009b56:	f000 f98d 	bl	8009e74 <_Bfree>
 8009b5a:	e6a3      	b.n	80098a4 <_dtoa_r+0x734>
 8009b5c:	2600      	movs	r6, #0
 8009b5e:	0035      	movs	r5, r6
 8009b60:	e7e2      	b.n	8009b28 <_dtoa_r+0x9b8>
 8009b62:	9602      	str	r6, [sp, #8]
 8009b64:	9e07      	ldr	r6, [sp, #28]
 8009b66:	0035      	movs	r5, r6
 8009b68:	e57e      	b.n	8009668 <_dtoa_r+0x4f8>
 8009b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d100      	bne.n	8009b72 <_dtoa_r+0xa02>
 8009b70:	e0c8      	b.n	8009d04 <_dtoa_r+0xb94>
 8009b72:	9b06      	ldr	r3, [sp, #24]
 8009b74:	930c      	str	r3, [sp, #48]	; 0x30
 8009b76:	2c00      	cmp	r4, #0
 8009b78:	dd05      	ble.n	8009b86 <_dtoa_r+0xa16>
 8009b7a:	0029      	movs	r1, r5
 8009b7c:	0022      	movs	r2, r4
 8009b7e:	0038      	movs	r0, r7
 8009b80:	f000 fb4a 	bl	800a218 <__lshift>
 8009b84:	0005      	movs	r5, r0
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	0028      	movs	r0, r5
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01f      	beq.n	8009bce <_dtoa_r+0xa5e>
 8009b8e:	0038      	movs	r0, r7
 8009b90:	6869      	ldr	r1, [r5, #4]
 8009b92:	f000 f92b 	bl	8009dec <_Balloc>
 8009b96:	1e04      	subs	r4, r0, #0
 8009b98:	d10c      	bne.n	8009bb4 <_dtoa_r+0xa44>
 8009b9a:	0002      	movs	r2, r0
 8009b9c:	4b03      	ldr	r3, [pc, #12]	; (8009bac <_dtoa_r+0xa3c>)
 8009b9e:	4904      	ldr	r1, [pc, #16]	; (8009bb0 <_dtoa_r+0xa40>)
 8009ba0:	f7ff fafb 	bl	800919a <_dtoa_r+0x2a>
 8009ba4:	40240000 	.word	0x40240000
 8009ba8:	00000433 	.word	0x00000433
 8009bac:	0800b553 	.word	0x0800b553
 8009bb0:	000002ea 	.word	0x000002ea
 8009bb4:	0029      	movs	r1, r5
 8009bb6:	692b      	ldr	r3, [r5, #16]
 8009bb8:	310c      	adds	r1, #12
 8009bba:	1c9a      	adds	r2, r3, #2
 8009bbc:	0092      	lsls	r2, r2, #2
 8009bbe:	300c      	adds	r0, #12
 8009bc0:	f7fe fd04 	bl	80085cc <memcpy>
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	0021      	movs	r1, r4
 8009bc8:	0038      	movs	r0, r7
 8009bca:	f000 fb25 	bl	800a218 <__lshift>
 8009bce:	002c      	movs	r4, r5
 8009bd0:	0005      	movs	r5, r0
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	9308      	str	r3, [sp, #32]
 8009bd6:	0031      	movs	r1, r6
 8009bd8:	9804      	ldr	r0, [sp, #16]
 8009bda:	f7ff fa3d 	bl	8009058 <quorem>
 8009bde:	0003      	movs	r3, r0
 8009be0:	0021      	movs	r1, r4
 8009be2:	3330      	adds	r3, #48	; 0x30
 8009be4:	900e      	str	r0, [sp, #56]	; 0x38
 8009be6:	9804      	ldr	r0, [sp, #16]
 8009be8:	9306      	str	r3, [sp, #24]
 8009bea:	f000 fb85 	bl	800a2f8 <__mcmp>
 8009bee:	002a      	movs	r2, r5
 8009bf0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009bf2:	0031      	movs	r1, r6
 8009bf4:	0038      	movs	r0, r7
 8009bf6:	f000 fb9b 	bl	800a330 <__mdiff>
 8009bfa:	68c3      	ldr	r3, [r0, #12]
 8009bfc:	9007      	str	r0, [sp, #28]
 8009bfe:	9310      	str	r3, [sp, #64]	; 0x40
 8009c00:	2301      	movs	r3, #1
 8009c02:	930d      	str	r3, [sp, #52]	; 0x34
 8009c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d104      	bne.n	8009c14 <_dtoa_r+0xaa4>
 8009c0a:	0001      	movs	r1, r0
 8009c0c:	9804      	ldr	r0, [sp, #16]
 8009c0e:	f000 fb73 	bl	800a2f8 <__mcmp>
 8009c12:	900d      	str	r0, [sp, #52]	; 0x34
 8009c14:	0038      	movs	r0, r7
 8009c16:	9907      	ldr	r1, [sp, #28]
 8009c18:	f000 f92c 	bl	8009e74 <_Bfree>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c22:	4018      	ands	r0, r3
 8009c24:	9b08      	ldr	r3, [sp, #32]
 8009c26:	3301      	adds	r3, #1
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	4303      	orrs	r3, r0
 8009c30:	d10c      	bne.n	8009c4c <_dtoa_r+0xadc>
 8009c32:	9b06      	ldr	r3, [sp, #24]
 8009c34:	2b39      	cmp	r3, #57	; 0x39
 8009c36:	d025      	beq.n	8009c84 <_dtoa_r+0xb14>
 8009c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dd02      	ble.n	8009c44 <_dtoa_r+0xad4>
 8009c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c40:	3331      	adds	r3, #49	; 0x31
 8009c42:	9306      	str	r3, [sp, #24]
 8009c44:	9b08      	ldr	r3, [sp, #32]
 8009c46:	9a06      	ldr	r2, [sp, #24]
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e773      	b.n	8009b34 <_dtoa_r+0x9c4>
 8009c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	db03      	blt.n	8009c5a <_dtoa_r+0xaea>
 8009c52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c54:	4313      	orrs	r3, r2
 8009c56:	4303      	orrs	r3, r0
 8009c58:	d11f      	bne.n	8009c9a <_dtoa_r+0xb2a>
 8009c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	ddf1      	ble.n	8009c44 <_dtoa_r+0xad4>
 8009c60:	9904      	ldr	r1, [sp, #16]
 8009c62:	2201      	movs	r2, #1
 8009c64:	0038      	movs	r0, r7
 8009c66:	f000 fad7 	bl	800a218 <__lshift>
 8009c6a:	0031      	movs	r1, r6
 8009c6c:	9004      	str	r0, [sp, #16]
 8009c6e:	f000 fb43 	bl	800a2f8 <__mcmp>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	dc03      	bgt.n	8009c7e <_dtoa_r+0xb0e>
 8009c76:	d1e5      	bne.n	8009c44 <_dtoa_r+0xad4>
 8009c78:	9b06      	ldr	r3, [sp, #24]
 8009c7a:	07db      	lsls	r3, r3, #31
 8009c7c:	d5e2      	bpl.n	8009c44 <_dtoa_r+0xad4>
 8009c7e:	9b06      	ldr	r3, [sp, #24]
 8009c80:	2b39      	cmp	r3, #57	; 0x39
 8009c82:	d1dc      	bne.n	8009c3e <_dtoa_r+0xace>
 8009c84:	2339      	movs	r3, #57	; 0x39
 8009c86:	9a08      	ldr	r2, [sp, #32]
 8009c88:	7013      	strb	r3, [r2, #0]
 8009c8a:	9b07      	ldr	r3, [sp, #28]
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	2a39      	cmp	r2, #57	; 0x39
 8009c94:	d06c      	beq.n	8009d70 <_dtoa_r+0xc00>
 8009c96:	3201      	adds	r2, #1
 8009c98:	e7d6      	b.n	8009c48 <_dtoa_r+0xad8>
 8009c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd07      	ble.n	8009cb0 <_dtoa_r+0xb40>
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	2b39      	cmp	r3, #57	; 0x39
 8009ca4:	d0ee      	beq.n	8009c84 <_dtoa_r+0xb14>
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	9a08      	ldr	r2, [sp, #32]
 8009caa:	3301      	adds	r3, #1
 8009cac:	7013      	strb	r3, [r2, #0]
 8009cae:	e741      	b.n	8009b34 <_dtoa_r+0x9c4>
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	9a06      	ldr	r2, [sp, #24]
 8009cb4:	701a      	strb	r2, [r3, #0]
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	9a05      	ldr	r2, [sp, #20]
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	9a08      	ldr	r2, [sp, #32]
 8009cbe:	189b      	adds	r3, r3, r2
 8009cc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d03e      	beq.n	8009d44 <_dtoa_r+0xbd4>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	220a      	movs	r2, #10
 8009cca:	9904      	ldr	r1, [sp, #16]
 8009ccc:	0038      	movs	r0, r7
 8009cce:	f000 f8f5 	bl	8009ebc <__multadd>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9004      	str	r0, [sp, #16]
 8009cd6:	220a      	movs	r2, #10
 8009cd8:	0021      	movs	r1, r4
 8009cda:	0038      	movs	r0, r7
 8009cdc:	42ac      	cmp	r4, r5
 8009cde:	d106      	bne.n	8009cee <_dtoa_r+0xb7e>
 8009ce0:	f000 f8ec 	bl	8009ebc <__multadd>
 8009ce4:	0004      	movs	r4, r0
 8009ce6:	0005      	movs	r5, r0
 8009ce8:	9b07      	ldr	r3, [sp, #28]
 8009cea:	9308      	str	r3, [sp, #32]
 8009cec:	e773      	b.n	8009bd6 <_dtoa_r+0xa66>
 8009cee:	f000 f8e5 	bl	8009ebc <__multadd>
 8009cf2:	0029      	movs	r1, r5
 8009cf4:	0004      	movs	r4, r0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	220a      	movs	r2, #10
 8009cfa:	0038      	movs	r0, r7
 8009cfc:	f000 f8de 	bl	8009ebc <__multadd>
 8009d00:	0005      	movs	r5, r0
 8009d02:	e7f1      	b.n	8009ce8 <_dtoa_r+0xb78>
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	930c      	str	r3, [sp, #48]	; 0x30
 8009d08:	2400      	movs	r4, #0
 8009d0a:	0031      	movs	r1, r6
 8009d0c:	9804      	ldr	r0, [sp, #16]
 8009d0e:	f7ff f9a3 	bl	8009058 <quorem>
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	3030      	adds	r0, #48	; 0x30
 8009d16:	5518      	strb	r0, [r3, r4]
 8009d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	9006      	str	r0, [sp, #24]
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	dd07      	ble.n	8009d32 <_dtoa_r+0xbc2>
 8009d22:	2300      	movs	r3, #0
 8009d24:	220a      	movs	r2, #10
 8009d26:	0038      	movs	r0, r7
 8009d28:	9904      	ldr	r1, [sp, #16]
 8009d2a:	f000 f8c7 	bl	8009ebc <__multadd>
 8009d2e:	9004      	str	r0, [sp, #16]
 8009d30:	e7eb      	b.n	8009d0a <_dtoa_r+0xb9a>
 8009d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d34:	2001      	movs	r0, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dd00      	ble.n	8009d3c <_dtoa_r+0xbcc>
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	2400      	movs	r4, #0
 8009d3e:	9b05      	ldr	r3, [sp, #20]
 8009d40:	181b      	adds	r3, r3, r0
 8009d42:	9307      	str	r3, [sp, #28]
 8009d44:	9904      	ldr	r1, [sp, #16]
 8009d46:	2201      	movs	r2, #1
 8009d48:	0038      	movs	r0, r7
 8009d4a:	f000 fa65 	bl	800a218 <__lshift>
 8009d4e:	0031      	movs	r1, r6
 8009d50:	9004      	str	r0, [sp, #16]
 8009d52:	f000 fad1 	bl	800a2f8 <__mcmp>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	dc97      	bgt.n	8009c8a <_dtoa_r+0xb1a>
 8009d5a:	d102      	bne.n	8009d62 <_dtoa_r+0xbf2>
 8009d5c:	9b06      	ldr	r3, [sp, #24]
 8009d5e:	07db      	lsls	r3, r3, #31
 8009d60:	d493      	bmi.n	8009c8a <_dtoa_r+0xb1a>
 8009d62:	9b07      	ldr	r3, [sp, #28]
 8009d64:	9307      	str	r3, [sp, #28]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	781a      	ldrb	r2, [r3, #0]
 8009d6a:	2a30      	cmp	r2, #48	; 0x30
 8009d6c:	d0fa      	beq.n	8009d64 <_dtoa_r+0xbf4>
 8009d6e:	e6e1      	b.n	8009b34 <_dtoa_r+0x9c4>
 8009d70:	9a05      	ldr	r2, [sp, #20]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d18a      	bne.n	8009c8c <_dtoa_r+0xb1c>
 8009d76:	9b02      	ldr	r3, [sp, #8]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	9302      	str	r3, [sp, #8]
 8009d7c:	2331      	movs	r3, #49	; 0x31
 8009d7e:	e795      	b.n	8009cac <_dtoa_r+0xb3c>
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <_dtoa_r+0xc34>)
 8009d82:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	4b08      	ldr	r3, [pc, #32]	; (8009da8 <_dtoa_r+0xc38>)
 8009d88:	2a00      	cmp	r2, #0
 8009d8a:	d001      	beq.n	8009d90 <_dtoa_r+0xc20>
 8009d8c:	f7ff fa3b 	bl	8009206 <_dtoa_r+0x96>
 8009d90:	f7ff fa3b 	bl	800920a <_dtoa_r+0x9a>
 8009d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dcb6      	bgt.n	8009d08 <_dtoa_r+0xb98>
 8009d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	dd00      	ble.n	8009da2 <_dtoa_r+0xc32>
 8009da0:	e6b2      	b.n	8009b08 <_dtoa_r+0x998>
 8009da2:	e7b1      	b.n	8009d08 <_dtoa_r+0xb98>
 8009da4:	0800b4d0 	.word	0x0800b4d0
 8009da8:	0800b4d8 	.word	0x0800b4d8

08009dac <_localeconv_r>:
 8009dac:	4800      	ldr	r0, [pc, #0]	; (8009db0 <_localeconv_r+0x4>)
 8009dae:	4770      	bx	lr
 8009db0:	20000160 	.word	0x20000160

08009db4 <memchr>:
 8009db4:	b2c9      	uxtb	r1, r1
 8009db6:	1882      	adds	r2, r0, r2
 8009db8:	4290      	cmp	r0, r2
 8009dba:	d101      	bne.n	8009dc0 <memchr+0xc>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4770      	bx	lr
 8009dc0:	7803      	ldrb	r3, [r0, #0]
 8009dc2:	428b      	cmp	r3, r1
 8009dc4:	d0fb      	beq.n	8009dbe <memchr+0xa>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	e7f6      	b.n	8009db8 <memchr+0x4>
	...

08009dcc <__malloc_lock>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	4802      	ldr	r0, [pc, #8]	; (8009dd8 <__malloc_lock+0xc>)
 8009dd0:	f000 fbe7 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 8009dd4:	bd10      	pop	{r4, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	20001198 	.word	0x20001198

08009ddc <__malloc_unlock>:
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	4802      	ldr	r0, [pc, #8]	; (8009de8 <__malloc_unlock+0xc>)
 8009de0:	f000 fbe0 	bl	800a5a4 <__retarget_lock_release_recursive>
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	20001198 	.word	0x20001198

08009dec <_Balloc>:
 8009dec:	b570      	push	{r4, r5, r6, lr}
 8009dee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009df0:	0006      	movs	r6, r0
 8009df2:	000c      	movs	r4, r1
 8009df4:	2d00      	cmp	r5, #0
 8009df6:	d10e      	bne.n	8009e16 <_Balloc+0x2a>
 8009df8:	2010      	movs	r0, #16
 8009dfa:	f7fe fbdd 	bl	80085b8 <malloc>
 8009dfe:	1e02      	subs	r2, r0, #0
 8009e00:	6270      	str	r0, [r6, #36]	; 0x24
 8009e02:	d104      	bne.n	8009e0e <_Balloc+0x22>
 8009e04:	2166      	movs	r1, #102	; 0x66
 8009e06:	4b19      	ldr	r3, [pc, #100]	; (8009e6c <_Balloc+0x80>)
 8009e08:	4819      	ldr	r0, [pc, #100]	; (8009e70 <_Balloc+0x84>)
 8009e0a:	f000 fb9b 	bl	800a544 <__assert_func>
 8009e0e:	6045      	str	r5, [r0, #4]
 8009e10:	6085      	str	r5, [r0, #8]
 8009e12:	6005      	str	r5, [r0, #0]
 8009e14:	60c5      	str	r5, [r0, #12]
 8009e16:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009e18:	68eb      	ldr	r3, [r5, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d013      	beq.n	8009e46 <_Balloc+0x5a>
 8009e1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e20:	00a2      	lsls	r2, r4, #2
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	189b      	adds	r3, r3, r2
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d118      	bne.n	8009e5e <_Balloc+0x72>
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	000d      	movs	r5, r1
 8009e30:	40a5      	lsls	r5, r4
 8009e32:	1d6a      	adds	r2, r5, #5
 8009e34:	0030      	movs	r0, r6
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	f000 fb76 	bl	800a528 <_calloc_r>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d00c      	beq.n	8009e5a <_Balloc+0x6e>
 8009e40:	6044      	str	r4, [r0, #4]
 8009e42:	6085      	str	r5, [r0, #8]
 8009e44:	e00d      	b.n	8009e62 <_Balloc+0x76>
 8009e46:	2221      	movs	r2, #33	; 0x21
 8009e48:	2104      	movs	r1, #4
 8009e4a:	0030      	movs	r0, r6
 8009e4c:	f000 fb6c 	bl	800a528 <_calloc_r>
 8009e50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e52:	60e8      	str	r0, [r5, #12]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e1      	bne.n	8009e1e <_Balloc+0x32>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	bd70      	pop	{r4, r5, r6, pc}
 8009e5e:	6802      	ldr	r2, [r0, #0]
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	6103      	str	r3, [r0, #16]
 8009e66:	60c3      	str	r3, [r0, #12]
 8009e68:	e7f8      	b.n	8009e5c <_Balloc+0x70>
 8009e6a:	46c0      	nop			; (mov r8, r8)
 8009e6c:	0800b4dd 	.word	0x0800b4dd
 8009e70:	0800b564 	.word	0x0800b564

08009e74 <_Bfree>:
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e78:	0005      	movs	r5, r0
 8009e7a:	000c      	movs	r4, r1
 8009e7c:	2e00      	cmp	r6, #0
 8009e7e:	d10e      	bne.n	8009e9e <_Bfree+0x2a>
 8009e80:	2010      	movs	r0, #16
 8009e82:	f7fe fb99 	bl	80085b8 <malloc>
 8009e86:	1e02      	subs	r2, r0, #0
 8009e88:	6268      	str	r0, [r5, #36]	; 0x24
 8009e8a:	d104      	bne.n	8009e96 <_Bfree+0x22>
 8009e8c:	218a      	movs	r1, #138	; 0x8a
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <_Bfree+0x40>)
 8009e90:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <_Bfree+0x44>)
 8009e92:	f000 fb57 	bl	800a544 <__assert_func>
 8009e96:	6046      	str	r6, [r0, #4]
 8009e98:	6086      	str	r6, [r0, #8]
 8009e9a:	6006      	str	r6, [r0, #0]
 8009e9c:	60c6      	str	r6, [r0, #12]
 8009e9e:	2c00      	cmp	r4, #0
 8009ea0:	d007      	beq.n	8009eb2 <_Bfree+0x3e>
 8009ea2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ea4:	6862      	ldr	r2, [r4, #4]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	0092      	lsls	r2, r2, #2
 8009eaa:	189b      	adds	r3, r3, r2
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	6022      	str	r2, [r4, #0]
 8009eb0:	601c      	str	r4, [r3, #0]
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	0800b4dd 	.word	0x0800b4dd
 8009eb8:	0800b564 	.word	0x0800b564

08009ebc <__multadd>:
 8009ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ebe:	000e      	movs	r6, r1
 8009ec0:	9001      	str	r0, [sp, #4]
 8009ec2:	000c      	movs	r4, r1
 8009ec4:	001d      	movs	r5, r3
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	690f      	ldr	r7, [r1, #16]
 8009eca:	3614      	adds	r6, #20
 8009ecc:	6833      	ldr	r3, [r6, #0]
 8009ece:	3001      	adds	r0, #1
 8009ed0:	b299      	uxth	r1, r3
 8009ed2:	4351      	muls	r1, r2
 8009ed4:	0c1b      	lsrs	r3, r3, #16
 8009ed6:	4353      	muls	r3, r2
 8009ed8:	1949      	adds	r1, r1, r5
 8009eda:	0c0d      	lsrs	r5, r1, #16
 8009edc:	195b      	adds	r3, r3, r5
 8009ede:	0c1d      	lsrs	r5, r3, #16
 8009ee0:	b289      	uxth	r1, r1
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	185b      	adds	r3, r3, r1
 8009ee6:	c608      	stmia	r6!, {r3}
 8009ee8:	4287      	cmp	r7, r0
 8009eea:	dcef      	bgt.n	8009ecc <__multadd+0x10>
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	d022      	beq.n	8009f36 <__multadd+0x7a>
 8009ef0:	68a3      	ldr	r3, [r4, #8]
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	dc19      	bgt.n	8009f2a <__multadd+0x6e>
 8009ef6:	6863      	ldr	r3, [r4, #4]
 8009ef8:	9801      	ldr	r0, [sp, #4]
 8009efa:	1c59      	adds	r1, r3, #1
 8009efc:	f7ff ff76 	bl	8009dec <_Balloc>
 8009f00:	1e06      	subs	r6, r0, #0
 8009f02:	d105      	bne.n	8009f10 <__multadd+0x54>
 8009f04:	0002      	movs	r2, r0
 8009f06:	21b5      	movs	r1, #181	; 0xb5
 8009f08:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <__multadd+0x80>)
 8009f0a:	480d      	ldr	r0, [pc, #52]	; (8009f40 <__multadd+0x84>)
 8009f0c:	f000 fb1a 	bl	800a544 <__assert_func>
 8009f10:	0021      	movs	r1, r4
 8009f12:	6923      	ldr	r3, [r4, #16]
 8009f14:	310c      	adds	r1, #12
 8009f16:	1c9a      	adds	r2, r3, #2
 8009f18:	0092      	lsls	r2, r2, #2
 8009f1a:	300c      	adds	r0, #12
 8009f1c:	f7fe fb56 	bl	80085cc <memcpy>
 8009f20:	0021      	movs	r1, r4
 8009f22:	9801      	ldr	r0, [sp, #4]
 8009f24:	f7ff ffa6 	bl	8009e74 <_Bfree>
 8009f28:	0034      	movs	r4, r6
 8009f2a:	1d3b      	adds	r3, r7, #4
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	18e3      	adds	r3, r4, r3
 8009f30:	605d      	str	r5, [r3, #4]
 8009f32:	1c7b      	adds	r3, r7, #1
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	0020      	movs	r0, r4
 8009f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f3a:	46c0      	nop			; (mov r8, r8)
 8009f3c:	0800b553 	.word	0x0800b553
 8009f40:	0800b564 	.word	0x0800b564

08009f44 <__hi0bits>:
 8009f44:	0003      	movs	r3, r0
 8009f46:	0c02      	lsrs	r2, r0, #16
 8009f48:	2000      	movs	r0, #0
 8009f4a:	4282      	cmp	r2, r0
 8009f4c:	d101      	bne.n	8009f52 <__hi0bits+0xe>
 8009f4e:	041b      	lsls	r3, r3, #16
 8009f50:	3010      	adds	r0, #16
 8009f52:	0e1a      	lsrs	r2, r3, #24
 8009f54:	d101      	bne.n	8009f5a <__hi0bits+0x16>
 8009f56:	3008      	adds	r0, #8
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	0f1a      	lsrs	r2, r3, #28
 8009f5c:	d101      	bne.n	8009f62 <__hi0bits+0x1e>
 8009f5e:	3004      	adds	r0, #4
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	0f9a      	lsrs	r2, r3, #30
 8009f64:	d101      	bne.n	8009f6a <__hi0bits+0x26>
 8009f66:	3002      	adds	r0, #2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	db03      	blt.n	8009f76 <__hi0bits+0x32>
 8009f6e:	3001      	adds	r0, #1
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	d400      	bmi.n	8009f76 <__hi0bits+0x32>
 8009f74:	2020      	movs	r0, #32
 8009f76:	4770      	bx	lr

08009f78 <__lo0bits>:
 8009f78:	6803      	ldr	r3, [r0, #0]
 8009f7a:	0002      	movs	r2, r0
 8009f7c:	2107      	movs	r1, #7
 8009f7e:	0018      	movs	r0, r3
 8009f80:	4008      	ands	r0, r1
 8009f82:	420b      	tst	r3, r1
 8009f84:	d00d      	beq.n	8009fa2 <__lo0bits+0x2a>
 8009f86:	3906      	subs	r1, #6
 8009f88:	2000      	movs	r0, #0
 8009f8a:	420b      	tst	r3, r1
 8009f8c:	d105      	bne.n	8009f9a <__lo0bits+0x22>
 8009f8e:	3002      	adds	r0, #2
 8009f90:	4203      	tst	r3, r0
 8009f92:	d003      	beq.n	8009f9c <__lo0bits+0x24>
 8009f94:	40cb      	lsrs	r3, r1
 8009f96:	0008      	movs	r0, r1
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	4770      	bx	lr
 8009f9c:	089b      	lsrs	r3, r3, #2
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	e7fb      	b.n	8009f9a <__lo0bits+0x22>
 8009fa2:	b299      	uxth	r1, r3
 8009fa4:	2900      	cmp	r1, #0
 8009fa6:	d101      	bne.n	8009fac <__lo0bits+0x34>
 8009fa8:	2010      	movs	r0, #16
 8009faa:	0c1b      	lsrs	r3, r3, #16
 8009fac:	b2d9      	uxtb	r1, r3
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	d101      	bne.n	8009fb6 <__lo0bits+0x3e>
 8009fb2:	3008      	adds	r0, #8
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	0719      	lsls	r1, r3, #28
 8009fb8:	d101      	bne.n	8009fbe <__lo0bits+0x46>
 8009fba:	3004      	adds	r0, #4
 8009fbc:	091b      	lsrs	r3, r3, #4
 8009fbe:	0799      	lsls	r1, r3, #30
 8009fc0:	d101      	bne.n	8009fc6 <__lo0bits+0x4e>
 8009fc2:	3002      	adds	r0, #2
 8009fc4:	089b      	lsrs	r3, r3, #2
 8009fc6:	07d9      	lsls	r1, r3, #31
 8009fc8:	d4e9      	bmi.n	8009f9e <__lo0bits+0x26>
 8009fca:	3001      	adds	r0, #1
 8009fcc:	085b      	lsrs	r3, r3, #1
 8009fce:	d1e6      	bne.n	8009f9e <__lo0bits+0x26>
 8009fd0:	2020      	movs	r0, #32
 8009fd2:	e7e2      	b.n	8009f9a <__lo0bits+0x22>

08009fd4 <__i2b>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	000c      	movs	r4, r1
 8009fd8:	2101      	movs	r1, #1
 8009fda:	f7ff ff07 	bl	8009dec <_Balloc>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d106      	bne.n	8009ff0 <__i2b+0x1c>
 8009fe2:	21a0      	movs	r1, #160	; 0xa0
 8009fe4:	0002      	movs	r2, r0
 8009fe6:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <__i2b+0x24>)
 8009fe8:	4804      	ldr	r0, [pc, #16]	; (8009ffc <__i2b+0x28>)
 8009fea:	0049      	lsls	r1, r1, #1
 8009fec:	f000 faaa 	bl	800a544 <__assert_func>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	6144      	str	r4, [r0, #20]
 8009ff4:	6103      	str	r3, [r0, #16]
 8009ff6:	bd10      	pop	{r4, pc}
 8009ff8:	0800b553 	.word	0x0800b553
 8009ffc:	0800b564 	.word	0x0800b564

0800a000 <__multiply>:
 800a000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a002:	690b      	ldr	r3, [r1, #16]
 800a004:	0014      	movs	r4, r2
 800a006:	6912      	ldr	r2, [r2, #16]
 800a008:	000d      	movs	r5, r1
 800a00a:	b089      	sub	sp, #36	; 0x24
 800a00c:	4293      	cmp	r3, r2
 800a00e:	da01      	bge.n	800a014 <__multiply+0x14>
 800a010:	0025      	movs	r5, r4
 800a012:	000c      	movs	r4, r1
 800a014:	692f      	ldr	r7, [r5, #16]
 800a016:	6926      	ldr	r6, [r4, #16]
 800a018:	6869      	ldr	r1, [r5, #4]
 800a01a:	19bb      	adds	r3, r7, r6
 800a01c:	9302      	str	r3, [sp, #8]
 800a01e:	68ab      	ldr	r3, [r5, #8]
 800a020:	19ba      	adds	r2, r7, r6
 800a022:	4293      	cmp	r3, r2
 800a024:	da00      	bge.n	800a028 <__multiply+0x28>
 800a026:	3101      	adds	r1, #1
 800a028:	f7ff fee0 	bl	8009dec <_Balloc>
 800a02c:	9001      	str	r0, [sp, #4]
 800a02e:	2800      	cmp	r0, #0
 800a030:	d106      	bne.n	800a040 <__multiply+0x40>
 800a032:	215e      	movs	r1, #94	; 0x5e
 800a034:	0002      	movs	r2, r0
 800a036:	4b48      	ldr	r3, [pc, #288]	; (800a158 <__multiply+0x158>)
 800a038:	4848      	ldr	r0, [pc, #288]	; (800a15c <__multiply+0x15c>)
 800a03a:	31ff      	adds	r1, #255	; 0xff
 800a03c:	f000 fa82 	bl	800a544 <__assert_func>
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	3314      	adds	r3, #20
 800a046:	469c      	mov	ip, r3
 800a048:	19bb      	adds	r3, r7, r6
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4463      	add	r3, ip
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	4663      	mov	r3, ip
 800a052:	9903      	ldr	r1, [sp, #12]
 800a054:	428b      	cmp	r3, r1
 800a056:	d32c      	bcc.n	800a0b2 <__multiply+0xb2>
 800a058:	002b      	movs	r3, r5
 800a05a:	0022      	movs	r2, r4
 800a05c:	3314      	adds	r3, #20
 800a05e:	00bf      	lsls	r7, r7, #2
 800a060:	3214      	adds	r2, #20
 800a062:	9306      	str	r3, [sp, #24]
 800a064:	00b6      	lsls	r6, r6, #2
 800a066:	19db      	adds	r3, r3, r7
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	1993      	adds	r3, r2, r6
 800a06c:	9307      	str	r3, [sp, #28]
 800a06e:	2304      	movs	r3, #4
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	002b      	movs	r3, r5
 800a074:	9904      	ldr	r1, [sp, #16]
 800a076:	3315      	adds	r3, #21
 800a078:	9200      	str	r2, [sp, #0]
 800a07a:	4299      	cmp	r1, r3
 800a07c:	d305      	bcc.n	800a08a <__multiply+0x8a>
 800a07e:	1b4b      	subs	r3, r1, r5
 800a080:	3b15      	subs	r3, #21
 800a082:	089b      	lsrs	r3, r3, #2
 800a084:	3301      	adds	r3, #1
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	9305      	str	r3, [sp, #20]
 800a08a:	9b07      	ldr	r3, [sp, #28]
 800a08c:	9a00      	ldr	r2, [sp, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d311      	bcc.n	800a0b6 <__multiply+0xb6>
 800a092:	9b02      	ldr	r3, [sp, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	dd06      	ble.n	800a0a6 <__multiply+0xa6>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	3b04      	subs	r3, #4
 800a09c:	9303      	str	r3, [sp, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d054      	beq.n	800a150 <__multiply+0x150>
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	9a02      	ldr	r2, [sp, #8]
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	611a      	str	r2, [r3, #16]
 800a0ae:	b009      	add	sp, #36	; 0x24
 800a0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b2:	c304      	stmia	r3!, {r2}
 800a0b4:	e7cd      	b.n	800a052 <__multiply+0x52>
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	b298      	uxth	r0, r3
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d01c      	beq.n	800a0fa <__multiply+0xfa>
 800a0c0:	4667      	mov	r7, ip
 800a0c2:	2400      	movs	r4, #0
 800a0c4:	9e06      	ldr	r6, [sp, #24]
 800a0c6:	ce02      	ldmia	r6!, {r1}
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	b28b      	uxth	r3, r1
 800a0cc:	4343      	muls	r3, r0
 800a0ce:	0c09      	lsrs	r1, r1, #16
 800a0d0:	4341      	muls	r1, r0
 800a0d2:	b292      	uxth	r2, r2
 800a0d4:	189b      	adds	r3, r3, r2
 800a0d6:	191b      	adds	r3, r3, r4
 800a0d8:	000c      	movs	r4, r1
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	0c11      	lsrs	r1, r2, #16
 800a0de:	1861      	adds	r1, r4, r1
 800a0e0:	0c1c      	lsrs	r4, r3, #16
 800a0e2:	1909      	adds	r1, r1, r4
 800a0e4:	0c0c      	lsrs	r4, r1, #16
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	0409      	lsls	r1, r1, #16
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	c708      	stmia	r7!, {r3}
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	42b3      	cmp	r3, r6
 800a0f2:	d8e8      	bhi.n	800a0c6 <__multiply+0xc6>
 800a0f4:	4663      	mov	r3, ip
 800a0f6:	9a05      	ldr	r2, [sp, #20]
 800a0f8:	509c      	str	r4, [r3, r2]
 800a0fa:	9b00      	ldr	r3, [sp, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	0c1e      	lsrs	r6, r3, #16
 800a100:	d020      	beq.n	800a144 <__multiply+0x144>
 800a102:	4663      	mov	r3, ip
 800a104:	002c      	movs	r4, r5
 800a106:	4660      	mov	r0, ip
 800a108:	2700      	movs	r7, #0
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3414      	adds	r4, #20
 800a10e:	6822      	ldr	r2, [r4, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	b291      	uxth	r1, r2
 800a114:	4371      	muls	r1, r6
 800a116:	6802      	ldr	r2, [r0, #0]
 800a118:	0c12      	lsrs	r2, r2, #16
 800a11a:	1889      	adds	r1, r1, r2
 800a11c:	19cf      	adds	r7, r1, r7
 800a11e:	0439      	lsls	r1, r7, #16
 800a120:	430b      	orrs	r3, r1
 800a122:	6003      	str	r3, [r0, #0]
 800a124:	cc02      	ldmia	r4!, {r1}
 800a126:	6843      	ldr	r3, [r0, #4]
 800a128:	0c09      	lsrs	r1, r1, #16
 800a12a:	4371      	muls	r1, r6
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	0c3f      	lsrs	r7, r7, #16
 800a130:	18cb      	adds	r3, r1, r3
 800a132:	9a04      	ldr	r2, [sp, #16]
 800a134:	19db      	adds	r3, r3, r7
 800a136:	0c1f      	lsrs	r7, r3, #16
 800a138:	3004      	adds	r0, #4
 800a13a:	42a2      	cmp	r2, r4
 800a13c:	d8e7      	bhi.n	800a10e <__multiply+0x10e>
 800a13e:	4662      	mov	r2, ip
 800a140:	9905      	ldr	r1, [sp, #20]
 800a142:	5053      	str	r3, [r2, r1]
 800a144:	9b00      	ldr	r3, [sp, #0]
 800a146:	3304      	adds	r3, #4
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	2304      	movs	r3, #4
 800a14c:	449c      	add	ip, r3
 800a14e:	e79c      	b.n	800a08a <__multiply+0x8a>
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	3b01      	subs	r3, #1
 800a154:	9302      	str	r3, [sp, #8]
 800a156:	e79c      	b.n	800a092 <__multiply+0x92>
 800a158:	0800b553 	.word	0x0800b553
 800a15c:	0800b564 	.word	0x0800b564

0800a160 <__pow5mult>:
 800a160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a162:	2303      	movs	r3, #3
 800a164:	0015      	movs	r5, r2
 800a166:	0007      	movs	r7, r0
 800a168:	000e      	movs	r6, r1
 800a16a:	401a      	ands	r2, r3
 800a16c:	421d      	tst	r5, r3
 800a16e:	d008      	beq.n	800a182 <__pow5mult+0x22>
 800a170:	4925      	ldr	r1, [pc, #148]	; (800a208 <__pow5mult+0xa8>)
 800a172:	3a01      	subs	r2, #1
 800a174:	0092      	lsls	r2, r2, #2
 800a176:	5852      	ldr	r2, [r2, r1]
 800a178:	2300      	movs	r3, #0
 800a17a:	0031      	movs	r1, r6
 800a17c:	f7ff fe9e 	bl	8009ebc <__multadd>
 800a180:	0006      	movs	r6, r0
 800a182:	10ad      	asrs	r5, r5, #2
 800a184:	d03d      	beq.n	800a202 <__pow5mult+0xa2>
 800a186:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a188:	2c00      	cmp	r4, #0
 800a18a:	d10f      	bne.n	800a1ac <__pow5mult+0x4c>
 800a18c:	2010      	movs	r0, #16
 800a18e:	f7fe fa13 	bl	80085b8 <malloc>
 800a192:	1e02      	subs	r2, r0, #0
 800a194:	6278      	str	r0, [r7, #36]	; 0x24
 800a196:	d105      	bne.n	800a1a4 <__pow5mult+0x44>
 800a198:	21d7      	movs	r1, #215	; 0xd7
 800a19a:	4b1c      	ldr	r3, [pc, #112]	; (800a20c <__pow5mult+0xac>)
 800a19c:	481c      	ldr	r0, [pc, #112]	; (800a210 <__pow5mult+0xb0>)
 800a19e:	0049      	lsls	r1, r1, #1
 800a1a0:	f000 f9d0 	bl	800a544 <__assert_func>
 800a1a4:	6044      	str	r4, [r0, #4]
 800a1a6:	6084      	str	r4, [r0, #8]
 800a1a8:	6004      	str	r4, [r0, #0]
 800a1aa:	60c4      	str	r4, [r0, #12]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	689c      	ldr	r4, [r3, #8]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	d108      	bne.n	800a1c8 <__pow5mult+0x68>
 800a1b6:	0038      	movs	r0, r7
 800a1b8:	4916      	ldr	r1, [pc, #88]	; (800a214 <__pow5mult+0xb4>)
 800a1ba:	f7ff ff0b 	bl	8009fd4 <__i2b>
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	0004      	movs	r4, r0
 800a1c2:	6098      	str	r0, [r3, #8]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	6003      	str	r3, [r0, #0]
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	421d      	tst	r5, r3
 800a1cc:	d00a      	beq.n	800a1e4 <__pow5mult+0x84>
 800a1ce:	0031      	movs	r1, r6
 800a1d0:	0022      	movs	r2, r4
 800a1d2:	0038      	movs	r0, r7
 800a1d4:	f7ff ff14 	bl	800a000 <__multiply>
 800a1d8:	0031      	movs	r1, r6
 800a1da:	9001      	str	r0, [sp, #4]
 800a1dc:	0038      	movs	r0, r7
 800a1de:	f7ff fe49 	bl	8009e74 <_Bfree>
 800a1e2:	9e01      	ldr	r6, [sp, #4]
 800a1e4:	106d      	asrs	r5, r5, #1
 800a1e6:	d00c      	beq.n	800a202 <__pow5mult+0xa2>
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d107      	bne.n	800a1fe <__pow5mult+0x9e>
 800a1ee:	0022      	movs	r2, r4
 800a1f0:	0021      	movs	r1, r4
 800a1f2:	0038      	movs	r0, r7
 800a1f4:	f7ff ff04 	bl	800a000 <__multiply>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	6020      	str	r0, [r4, #0]
 800a1fc:	6003      	str	r3, [r0, #0]
 800a1fe:	0004      	movs	r4, r0
 800a200:	e7e2      	b.n	800a1c8 <__pow5mult+0x68>
 800a202:	0030      	movs	r0, r6
 800a204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	0800b6b8 	.word	0x0800b6b8
 800a20c:	0800b4dd 	.word	0x0800b4dd
 800a210:	0800b564 	.word	0x0800b564
 800a214:	00000271 	.word	0x00000271

0800a218 <__lshift>:
 800a218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21a:	000c      	movs	r4, r1
 800a21c:	0017      	movs	r7, r2
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	1155      	asrs	r5, r2, #5
 800a222:	b087      	sub	sp, #28
 800a224:	18eb      	adds	r3, r5, r3
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	3301      	adds	r3, #1
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	6849      	ldr	r1, [r1, #4]
 800a22e:	68a3      	ldr	r3, [r4, #8]
 800a230:	9004      	str	r0, [sp, #16]
 800a232:	9a01      	ldr	r2, [sp, #4]
 800a234:	4293      	cmp	r3, r2
 800a236:	db11      	blt.n	800a25c <__lshift+0x44>
 800a238:	9804      	ldr	r0, [sp, #16]
 800a23a:	f7ff fdd7 	bl	8009dec <_Balloc>
 800a23e:	0002      	movs	r2, r0
 800a240:	2300      	movs	r3, #0
 800a242:	3214      	adds	r2, #20
 800a244:	0006      	movs	r6, r0
 800a246:	0011      	movs	r1, r2
 800a248:	9203      	str	r2, [sp, #12]
 800a24a:	4298      	cmp	r0, r3
 800a24c:	d10d      	bne.n	800a26a <__lshift+0x52>
 800a24e:	21da      	movs	r1, #218	; 0xda
 800a250:	0002      	movs	r2, r0
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <__lshift+0xd8>)
 800a254:	4827      	ldr	r0, [pc, #156]	; (800a2f4 <__lshift+0xdc>)
 800a256:	31ff      	adds	r1, #255	; 0xff
 800a258:	f000 f974 	bl	800a544 <__assert_func>
 800a25c:	3101      	adds	r1, #1
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	e7e7      	b.n	800a232 <__lshift+0x1a>
 800a262:	2200      	movs	r2, #0
 800a264:	0098      	lsls	r0, r3, #2
 800a266:	500a      	str	r2, [r1, r0]
 800a268:	3301      	adds	r3, #1
 800a26a:	42ab      	cmp	r3, r5
 800a26c:	dbf9      	blt.n	800a262 <__lshift+0x4a>
 800a26e:	43eb      	mvns	r3, r5
 800a270:	17db      	asrs	r3, r3, #31
 800a272:	401d      	ands	r5, r3
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	00ad      	lsls	r5, r5, #2
 800a278:	211f      	movs	r1, #31
 800a27a:	0038      	movs	r0, r7
 800a27c:	195d      	adds	r5, r3, r5
 800a27e:	0023      	movs	r3, r4
 800a280:	6922      	ldr	r2, [r4, #16]
 800a282:	3314      	adds	r3, #20
 800a284:	0092      	lsls	r2, r2, #2
 800a286:	4008      	ands	r0, r1
 800a288:	4684      	mov	ip, r0
 800a28a:	189a      	adds	r2, r3, r2
 800a28c:	420f      	tst	r7, r1
 800a28e:	d02a      	beq.n	800a2e6 <__lshift+0xce>
 800a290:	3101      	adds	r1, #1
 800a292:	1a09      	subs	r1, r1, r0
 800a294:	9105      	str	r1, [sp, #20]
 800a296:	2100      	movs	r1, #0
 800a298:	9503      	str	r5, [sp, #12]
 800a29a:	4667      	mov	r7, ip
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	40b8      	lsls	r0, r7
 800a2a0:	4301      	orrs	r1, r0
 800a2a2:	9803      	ldr	r0, [sp, #12]
 800a2a4:	c002      	stmia	r0!, {r1}
 800a2a6:	cb02      	ldmia	r3!, {r1}
 800a2a8:	9003      	str	r0, [sp, #12]
 800a2aa:	9805      	ldr	r0, [sp, #20]
 800a2ac:	40c1      	lsrs	r1, r0
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d8f3      	bhi.n	800a29a <__lshift+0x82>
 800a2b2:	0020      	movs	r0, r4
 800a2b4:	3015      	adds	r0, #21
 800a2b6:	2304      	movs	r3, #4
 800a2b8:	4282      	cmp	r2, r0
 800a2ba:	d304      	bcc.n	800a2c6 <__lshift+0xae>
 800a2bc:	1b13      	subs	r3, r2, r4
 800a2be:	3b15      	subs	r3, #21
 800a2c0:	089b      	lsrs	r3, r3, #2
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	50e9      	str	r1, [r5, r3]
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	d002      	beq.n	800a2d2 <__lshift+0xba>
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	3302      	adds	r3, #2
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	9b01      	ldr	r3, [sp, #4]
 800a2d4:	9804      	ldr	r0, [sp, #16]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	0021      	movs	r1, r4
 800a2da:	6133      	str	r3, [r6, #16]
 800a2dc:	f7ff fdca 	bl	8009e74 <_Bfree>
 800a2e0:	0030      	movs	r0, r6
 800a2e2:	b007      	add	sp, #28
 800a2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e6:	cb02      	ldmia	r3!, {r1}
 800a2e8:	c502      	stmia	r5!, {r1}
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d8fb      	bhi.n	800a2e6 <__lshift+0xce>
 800a2ee:	e7f0      	b.n	800a2d2 <__lshift+0xba>
 800a2f0:	0800b553 	.word	0x0800b553
 800a2f4:	0800b564 	.word	0x0800b564

0800a2f8 <__mcmp>:
 800a2f8:	6902      	ldr	r2, [r0, #16]
 800a2fa:	690b      	ldr	r3, [r1, #16]
 800a2fc:	b530      	push	{r4, r5, lr}
 800a2fe:	0004      	movs	r4, r0
 800a300:	1ad0      	subs	r0, r2, r3
 800a302:	429a      	cmp	r2, r3
 800a304:	d10d      	bne.n	800a322 <__mcmp+0x2a>
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	3414      	adds	r4, #20
 800a30a:	3114      	adds	r1, #20
 800a30c:	18e2      	adds	r2, r4, r3
 800a30e:	18c9      	adds	r1, r1, r3
 800a310:	3a04      	subs	r2, #4
 800a312:	3904      	subs	r1, #4
 800a314:	6815      	ldr	r5, [r2, #0]
 800a316:	680b      	ldr	r3, [r1, #0]
 800a318:	429d      	cmp	r5, r3
 800a31a:	d003      	beq.n	800a324 <__mcmp+0x2c>
 800a31c:	2001      	movs	r0, #1
 800a31e:	429d      	cmp	r5, r3
 800a320:	d303      	bcc.n	800a32a <__mcmp+0x32>
 800a322:	bd30      	pop	{r4, r5, pc}
 800a324:	4294      	cmp	r4, r2
 800a326:	d3f3      	bcc.n	800a310 <__mcmp+0x18>
 800a328:	e7fb      	b.n	800a322 <__mcmp+0x2a>
 800a32a:	4240      	negs	r0, r0
 800a32c:	e7f9      	b.n	800a322 <__mcmp+0x2a>
	...

0800a330 <__mdiff>:
 800a330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a332:	000e      	movs	r6, r1
 800a334:	0007      	movs	r7, r0
 800a336:	0011      	movs	r1, r2
 800a338:	0030      	movs	r0, r6
 800a33a:	b087      	sub	sp, #28
 800a33c:	0014      	movs	r4, r2
 800a33e:	f7ff ffdb 	bl	800a2f8 <__mcmp>
 800a342:	1e05      	subs	r5, r0, #0
 800a344:	d110      	bne.n	800a368 <__mdiff+0x38>
 800a346:	0001      	movs	r1, r0
 800a348:	0038      	movs	r0, r7
 800a34a:	f7ff fd4f 	bl	8009dec <_Balloc>
 800a34e:	1e02      	subs	r2, r0, #0
 800a350:	d104      	bne.n	800a35c <__mdiff+0x2c>
 800a352:	4b40      	ldr	r3, [pc, #256]	; (800a454 <__mdiff+0x124>)
 800a354:	4940      	ldr	r1, [pc, #256]	; (800a458 <__mdiff+0x128>)
 800a356:	4841      	ldr	r0, [pc, #260]	; (800a45c <__mdiff+0x12c>)
 800a358:	f000 f8f4 	bl	800a544 <__assert_func>
 800a35c:	2301      	movs	r3, #1
 800a35e:	6145      	str	r5, [r0, #20]
 800a360:	6103      	str	r3, [r0, #16]
 800a362:	0010      	movs	r0, r2
 800a364:	b007      	add	sp, #28
 800a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a368:	2301      	movs	r3, #1
 800a36a:	9301      	str	r3, [sp, #4]
 800a36c:	2800      	cmp	r0, #0
 800a36e:	db04      	blt.n	800a37a <__mdiff+0x4a>
 800a370:	0023      	movs	r3, r4
 800a372:	0034      	movs	r4, r6
 800a374:	001e      	movs	r6, r3
 800a376:	2300      	movs	r3, #0
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	0038      	movs	r0, r7
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	f7ff fd35 	bl	8009dec <_Balloc>
 800a382:	1e02      	subs	r2, r0, #0
 800a384:	d103      	bne.n	800a38e <__mdiff+0x5e>
 800a386:	2190      	movs	r1, #144	; 0x90
 800a388:	4b32      	ldr	r3, [pc, #200]	; (800a454 <__mdiff+0x124>)
 800a38a:	0089      	lsls	r1, r1, #2
 800a38c:	e7e3      	b.n	800a356 <__mdiff+0x26>
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	2700      	movs	r7, #0
 800a392:	60c3      	str	r3, [r0, #12]
 800a394:	6920      	ldr	r0, [r4, #16]
 800a396:	3414      	adds	r4, #20
 800a398:	9401      	str	r4, [sp, #4]
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	0084      	lsls	r4, r0, #2
 800a39e:	191b      	adds	r3, r3, r4
 800a3a0:	0034      	movs	r4, r6
 800a3a2:	9302      	str	r3, [sp, #8]
 800a3a4:	6933      	ldr	r3, [r6, #16]
 800a3a6:	3414      	adds	r4, #20
 800a3a8:	0099      	lsls	r1, r3, #2
 800a3aa:	1863      	adds	r3, r4, r1
 800a3ac:	9303      	str	r3, [sp, #12]
 800a3ae:	0013      	movs	r3, r2
 800a3b0:	3314      	adds	r3, #20
 800a3b2:	469c      	mov	ip, r3
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	9b04      	ldr	r3, [sp, #16]
 800a3bc:	cc02      	ldmia	r4!, {r1}
 800a3be:	cb20      	ldmia	r3!, {r5}
 800a3c0:	9304      	str	r3, [sp, #16]
 800a3c2:	b2ab      	uxth	r3, r5
 800a3c4:	19df      	adds	r7, r3, r7
 800a3c6:	b28b      	uxth	r3, r1
 800a3c8:	1afb      	subs	r3, r7, r3
 800a3ca:	0c2d      	lsrs	r5, r5, #16
 800a3cc:	0c09      	lsrs	r1, r1, #16
 800a3ce:	1a69      	subs	r1, r5, r1
 800a3d0:	141d      	asrs	r5, r3, #16
 800a3d2:	1949      	adds	r1, r1, r5
 800a3d4:	140f      	asrs	r7, r1, #16
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	0409      	lsls	r1, r1, #16
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	4661      	mov	r1, ip
 800a3de:	c108      	stmia	r1!, {r3}
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	468c      	mov	ip, r1
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	d8e8      	bhi.n	800a3ba <__mdiff+0x8a>
 800a3e8:	0031      	movs	r1, r6
 800a3ea:	9c03      	ldr	r4, [sp, #12]
 800a3ec:	3115      	adds	r1, #21
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	428c      	cmp	r4, r1
 800a3f2:	d304      	bcc.n	800a3fe <__mdiff+0xce>
 800a3f4:	1ba3      	subs	r3, r4, r6
 800a3f6:	3b15      	subs	r3, #21
 800a3f8:	089b      	lsrs	r3, r3, #2
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	9901      	ldr	r1, [sp, #4]
 800a400:	18cc      	adds	r4, r1, r3
 800a402:	9905      	ldr	r1, [sp, #20]
 800a404:	0026      	movs	r6, r4
 800a406:	18cb      	adds	r3, r1, r3
 800a408:	469c      	mov	ip, r3
 800a40a:	9902      	ldr	r1, [sp, #8]
 800a40c:	428e      	cmp	r6, r1
 800a40e:	d310      	bcc.n	800a432 <__mdiff+0x102>
 800a410:	9e02      	ldr	r6, [sp, #8]
 800a412:	1ee5      	subs	r5, r4, #3
 800a414:	2100      	movs	r1, #0
 800a416:	42ae      	cmp	r6, r5
 800a418:	d304      	bcc.n	800a424 <__mdiff+0xf4>
 800a41a:	0031      	movs	r1, r6
 800a41c:	3103      	adds	r1, #3
 800a41e:	1b09      	subs	r1, r1, r4
 800a420:	0889      	lsrs	r1, r1, #2
 800a422:	0089      	lsls	r1, r1, #2
 800a424:	185b      	adds	r3, r3, r1
 800a426:	3b04      	subs	r3, #4
 800a428:	6819      	ldr	r1, [r3, #0]
 800a42a:	2900      	cmp	r1, #0
 800a42c:	d00f      	beq.n	800a44e <__mdiff+0x11e>
 800a42e:	6110      	str	r0, [r2, #16]
 800a430:	e797      	b.n	800a362 <__mdiff+0x32>
 800a432:	ce02      	ldmia	r6!, {r1}
 800a434:	b28d      	uxth	r5, r1
 800a436:	19ed      	adds	r5, r5, r7
 800a438:	0c0f      	lsrs	r7, r1, #16
 800a43a:	1429      	asrs	r1, r5, #16
 800a43c:	1879      	adds	r1, r7, r1
 800a43e:	140f      	asrs	r7, r1, #16
 800a440:	b2ad      	uxth	r5, r5
 800a442:	0409      	lsls	r1, r1, #16
 800a444:	430d      	orrs	r5, r1
 800a446:	4661      	mov	r1, ip
 800a448:	c120      	stmia	r1!, {r5}
 800a44a:	468c      	mov	ip, r1
 800a44c:	e7dd      	b.n	800a40a <__mdiff+0xda>
 800a44e:	3801      	subs	r0, #1
 800a450:	e7e9      	b.n	800a426 <__mdiff+0xf6>
 800a452:	46c0      	nop			; (mov r8, r8)
 800a454:	0800b553 	.word	0x0800b553
 800a458:	00000232 	.word	0x00000232
 800a45c:	0800b564 	.word	0x0800b564

0800a460 <__d2b>:
 800a460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a462:	2101      	movs	r1, #1
 800a464:	0014      	movs	r4, r2
 800a466:	001e      	movs	r6, r3
 800a468:	9f08      	ldr	r7, [sp, #32]
 800a46a:	f7ff fcbf 	bl	8009dec <_Balloc>
 800a46e:	1e05      	subs	r5, r0, #0
 800a470:	d105      	bne.n	800a47e <__d2b+0x1e>
 800a472:	0002      	movs	r2, r0
 800a474:	4b26      	ldr	r3, [pc, #152]	; (800a510 <__d2b+0xb0>)
 800a476:	4927      	ldr	r1, [pc, #156]	; (800a514 <__d2b+0xb4>)
 800a478:	4827      	ldr	r0, [pc, #156]	; (800a518 <__d2b+0xb8>)
 800a47a:	f000 f863 	bl	800a544 <__assert_func>
 800a47e:	0333      	lsls	r3, r6, #12
 800a480:	0076      	lsls	r6, r6, #1
 800a482:	0b1b      	lsrs	r3, r3, #12
 800a484:	0d76      	lsrs	r6, r6, #21
 800a486:	d124      	bne.n	800a4d2 <__d2b+0x72>
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	2c00      	cmp	r4, #0
 800a48c:	d027      	beq.n	800a4de <__d2b+0x7e>
 800a48e:	4668      	mov	r0, sp
 800a490:	9400      	str	r4, [sp, #0]
 800a492:	f7ff fd71 	bl	8009f78 <__lo0bits>
 800a496:	9c00      	ldr	r4, [sp, #0]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d01e      	beq.n	800a4da <__d2b+0x7a>
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	2120      	movs	r1, #32
 800a4a0:	001a      	movs	r2, r3
 800a4a2:	1a09      	subs	r1, r1, r0
 800a4a4:	408a      	lsls	r2, r1
 800a4a6:	40c3      	lsrs	r3, r0
 800a4a8:	4322      	orrs	r2, r4
 800a4aa:	616a      	str	r2, [r5, #20]
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	9c01      	ldr	r4, [sp, #4]
 800a4b0:	61ac      	str	r4, [r5, #24]
 800a4b2:	1e63      	subs	r3, r4, #1
 800a4b4:	419c      	sbcs	r4, r3
 800a4b6:	3401      	adds	r4, #1
 800a4b8:	612c      	str	r4, [r5, #16]
 800a4ba:	2e00      	cmp	r6, #0
 800a4bc:	d018      	beq.n	800a4f0 <__d2b+0x90>
 800a4be:	4b17      	ldr	r3, [pc, #92]	; (800a51c <__d2b+0xbc>)
 800a4c0:	18f6      	adds	r6, r6, r3
 800a4c2:	2335      	movs	r3, #53	; 0x35
 800a4c4:	1836      	adds	r6, r6, r0
 800a4c6:	1a18      	subs	r0, r3, r0
 800a4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4ca:	603e      	str	r6, [r7, #0]
 800a4cc:	6018      	str	r0, [r3, #0]
 800a4ce:	0028      	movs	r0, r5
 800a4d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4d2:	2280      	movs	r2, #128	; 0x80
 800a4d4:	0352      	lsls	r2, r2, #13
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	e7d6      	b.n	800a488 <__d2b+0x28>
 800a4da:	616c      	str	r4, [r5, #20]
 800a4dc:	e7e7      	b.n	800a4ae <__d2b+0x4e>
 800a4de:	a801      	add	r0, sp, #4
 800a4e0:	f7ff fd4a 	bl	8009f78 <__lo0bits>
 800a4e4:	2401      	movs	r4, #1
 800a4e6:	9b01      	ldr	r3, [sp, #4]
 800a4e8:	612c      	str	r4, [r5, #16]
 800a4ea:	616b      	str	r3, [r5, #20]
 800a4ec:	3020      	adds	r0, #32
 800a4ee:	e7e4      	b.n	800a4ba <__d2b+0x5a>
 800a4f0:	4b0b      	ldr	r3, [pc, #44]	; (800a520 <__d2b+0xc0>)
 800a4f2:	18c0      	adds	r0, r0, r3
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <__d2b+0xc4>)
 800a4f6:	6038      	str	r0, [r7, #0]
 800a4f8:	18e3      	adds	r3, r4, r3
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	18eb      	adds	r3, r5, r3
 800a4fe:	6958      	ldr	r0, [r3, #20]
 800a500:	f7ff fd20 	bl	8009f44 <__hi0bits>
 800a504:	0164      	lsls	r4, r4, #5
 800a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a508:	1a24      	subs	r4, r4, r0
 800a50a:	601c      	str	r4, [r3, #0]
 800a50c:	e7df      	b.n	800a4ce <__d2b+0x6e>
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	0800b553 	.word	0x0800b553
 800a514:	0000030a 	.word	0x0000030a
 800a518:	0800b564 	.word	0x0800b564
 800a51c:	fffffbcd 	.word	0xfffffbcd
 800a520:	fffffbce 	.word	0xfffffbce
 800a524:	3fffffff 	.word	0x3fffffff

0800a528 <_calloc_r>:
 800a528:	434a      	muls	r2, r1
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	0011      	movs	r1, r2
 800a52e:	0015      	movs	r5, r2
 800a530:	f7fe f8a8 	bl	8008684 <_malloc_r>
 800a534:	1e04      	subs	r4, r0, #0
 800a536:	d003      	beq.n	800a540 <_calloc_r+0x18>
 800a538:	002a      	movs	r2, r5
 800a53a:	2100      	movs	r1, #0
 800a53c:	f7fe f84f 	bl	80085de <memset>
 800a540:	0020      	movs	r0, r4
 800a542:	bd70      	pop	{r4, r5, r6, pc}

0800a544 <__assert_func>:
 800a544:	b530      	push	{r4, r5, lr}
 800a546:	0014      	movs	r4, r2
 800a548:	001a      	movs	r2, r3
 800a54a:	4b09      	ldr	r3, [pc, #36]	; (800a570 <__assert_func+0x2c>)
 800a54c:	0005      	movs	r5, r0
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	b085      	sub	sp, #20
 800a552:	68d8      	ldr	r0, [r3, #12]
 800a554:	4b07      	ldr	r3, [pc, #28]	; (800a574 <__assert_func+0x30>)
 800a556:	2c00      	cmp	r4, #0
 800a558:	d101      	bne.n	800a55e <__assert_func+0x1a>
 800a55a:	4b07      	ldr	r3, [pc, #28]	; (800a578 <__assert_func+0x34>)
 800a55c:	001c      	movs	r4, r3
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	9100      	str	r1, [sp, #0]
 800a562:	002b      	movs	r3, r5
 800a564:	4905      	ldr	r1, [pc, #20]	; (800a57c <__assert_func+0x38>)
 800a566:	9402      	str	r4, [sp, #8]
 800a568:	f000 f80a 	bl	800a580 <fiprintf>
 800a56c:	f000 fa6a 	bl	800aa44 <abort>
 800a570:	2000000c 	.word	0x2000000c
 800a574:	0800b6c4 	.word	0x0800b6c4
 800a578:	0800b6ff 	.word	0x0800b6ff
 800a57c:	0800b6d1 	.word	0x0800b6d1

0800a580 <fiprintf>:
 800a580:	b40e      	push	{r1, r2, r3}
 800a582:	b503      	push	{r0, r1, lr}
 800a584:	0001      	movs	r1, r0
 800a586:	ab03      	add	r3, sp, #12
 800a588:	4804      	ldr	r0, [pc, #16]	; (800a59c <fiprintf+0x1c>)
 800a58a:	cb04      	ldmia	r3!, {r2}
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	f000 f842 	bl	800a618 <_vfiprintf_r>
 800a594:	b002      	add	sp, #8
 800a596:	bc08      	pop	{r3}
 800a598:	b003      	add	sp, #12
 800a59a:	4718      	bx	r3
 800a59c:	2000000c 	.word	0x2000000c

0800a5a0 <__retarget_lock_init_recursive>:
 800a5a0:	4770      	bx	lr

0800a5a2 <__retarget_lock_acquire_recursive>:
 800a5a2:	4770      	bx	lr

0800a5a4 <__retarget_lock_release_recursive>:
 800a5a4:	4770      	bx	lr

0800a5a6 <__ascii_mbtowc>:
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	2900      	cmp	r1, #0
 800a5aa:	d100      	bne.n	800a5ae <__ascii_mbtowc+0x8>
 800a5ac:	a901      	add	r1, sp, #4
 800a5ae:	1e10      	subs	r0, r2, #0
 800a5b0:	d006      	beq.n	800a5c0 <__ascii_mbtowc+0x1a>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <__ascii_mbtowc+0x1e>
 800a5b6:	7813      	ldrb	r3, [r2, #0]
 800a5b8:	600b      	str	r3, [r1, #0]
 800a5ba:	7810      	ldrb	r0, [r2, #0]
 800a5bc:	1e43      	subs	r3, r0, #1
 800a5be:	4198      	sbcs	r0, r3
 800a5c0:	b002      	add	sp, #8
 800a5c2:	4770      	bx	lr
 800a5c4:	2002      	movs	r0, #2
 800a5c6:	4240      	negs	r0, r0
 800a5c8:	e7fa      	b.n	800a5c0 <__ascii_mbtowc+0x1a>

0800a5ca <__sfputc_r>:
 800a5ca:	6893      	ldr	r3, [r2, #8]
 800a5cc:	b510      	push	{r4, lr}
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	6093      	str	r3, [r2, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	da04      	bge.n	800a5e0 <__sfputc_r+0x16>
 800a5d6:	6994      	ldr	r4, [r2, #24]
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	db07      	blt.n	800a5ec <__sfputc_r+0x22>
 800a5dc:	290a      	cmp	r1, #10
 800a5de:	d005      	beq.n	800a5ec <__sfputc_r+0x22>
 800a5e0:	6813      	ldr	r3, [r2, #0]
 800a5e2:	1c58      	adds	r0, r3, #1
 800a5e4:	6010      	str	r0, [r2, #0]
 800a5e6:	7019      	strb	r1, [r3, #0]
 800a5e8:	0008      	movs	r0, r1
 800a5ea:	bd10      	pop	{r4, pc}
 800a5ec:	f000 f94e 	bl	800a88c <__swbuf_r>
 800a5f0:	0001      	movs	r1, r0
 800a5f2:	e7f9      	b.n	800a5e8 <__sfputc_r+0x1e>

0800a5f4 <__sfputs_r>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	0006      	movs	r6, r0
 800a5f8:	000f      	movs	r7, r1
 800a5fa:	0014      	movs	r4, r2
 800a5fc:	18d5      	adds	r5, r2, r3
 800a5fe:	42ac      	cmp	r4, r5
 800a600:	d101      	bne.n	800a606 <__sfputs_r+0x12>
 800a602:	2000      	movs	r0, #0
 800a604:	e007      	b.n	800a616 <__sfputs_r+0x22>
 800a606:	7821      	ldrb	r1, [r4, #0]
 800a608:	003a      	movs	r2, r7
 800a60a:	0030      	movs	r0, r6
 800a60c:	f7ff ffdd 	bl	800a5ca <__sfputc_r>
 800a610:	3401      	adds	r4, #1
 800a612:	1c43      	adds	r3, r0, #1
 800a614:	d1f3      	bne.n	800a5fe <__sfputs_r+0xa>
 800a616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a618 <_vfiprintf_r>:
 800a618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61a:	b0a1      	sub	sp, #132	; 0x84
 800a61c:	0006      	movs	r6, r0
 800a61e:	000c      	movs	r4, r1
 800a620:	001f      	movs	r7, r3
 800a622:	9203      	str	r2, [sp, #12]
 800a624:	2800      	cmp	r0, #0
 800a626:	d004      	beq.n	800a632 <_vfiprintf_r+0x1a>
 800a628:	6983      	ldr	r3, [r0, #24]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <_vfiprintf_r+0x1a>
 800a62e:	f000 fb3f 	bl	800acb0 <__sinit>
 800a632:	4b8e      	ldr	r3, [pc, #568]	; (800a86c <_vfiprintf_r+0x254>)
 800a634:	429c      	cmp	r4, r3
 800a636:	d11c      	bne.n	800a672 <_vfiprintf_r+0x5a>
 800a638:	6874      	ldr	r4, [r6, #4]
 800a63a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a63c:	07db      	lsls	r3, r3, #31
 800a63e:	d405      	bmi.n	800a64c <_vfiprintf_r+0x34>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	059b      	lsls	r3, r3, #22
 800a644:	d402      	bmi.n	800a64c <_vfiprintf_r+0x34>
 800a646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a648:	f7ff ffab 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	071b      	lsls	r3, r3, #28
 800a650:	d502      	bpl.n	800a658 <_vfiprintf_r+0x40>
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11d      	bne.n	800a694 <_vfiprintf_r+0x7c>
 800a658:	0021      	movs	r1, r4
 800a65a:	0030      	movs	r0, r6
 800a65c:	f000 f97a 	bl	800a954 <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d017      	beq.n	800a694 <_vfiprintf_r+0x7c>
 800a664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a666:	07db      	lsls	r3, r3, #31
 800a668:	d50d      	bpl.n	800a686 <_vfiprintf_r+0x6e>
 800a66a:	2001      	movs	r0, #1
 800a66c:	4240      	negs	r0, r0
 800a66e:	b021      	add	sp, #132	; 0x84
 800a670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a672:	4b7f      	ldr	r3, [pc, #508]	; (800a870 <_vfiprintf_r+0x258>)
 800a674:	429c      	cmp	r4, r3
 800a676:	d101      	bne.n	800a67c <_vfiprintf_r+0x64>
 800a678:	68b4      	ldr	r4, [r6, #8]
 800a67a:	e7de      	b.n	800a63a <_vfiprintf_r+0x22>
 800a67c:	4b7d      	ldr	r3, [pc, #500]	; (800a874 <_vfiprintf_r+0x25c>)
 800a67e:	429c      	cmp	r4, r3
 800a680:	d1db      	bne.n	800a63a <_vfiprintf_r+0x22>
 800a682:	68f4      	ldr	r4, [r6, #12]
 800a684:	e7d9      	b.n	800a63a <_vfiprintf_r+0x22>
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	059b      	lsls	r3, r3, #22
 800a68a:	d4ee      	bmi.n	800a66a <_vfiprintf_r+0x52>
 800a68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a68e:	f7ff ff89 	bl	800a5a4 <__retarget_lock_release_recursive>
 800a692:	e7ea      	b.n	800a66a <_vfiprintf_r+0x52>
 800a694:	2300      	movs	r3, #0
 800a696:	ad08      	add	r5, sp, #32
 800a698:	616b      	str	r3, [r5, #20]
 800a69a:	3320      	adds	r3, #32
 800a69c:	766b      	strb	r3, [r5, #25]
 800a69e:	3310      	adds	r3, #16
 800a6a0:	76ab      	strb	r3, [r5, #26]
 800a6a2:	9707      	str	r7, [sp, #28]
 800a6a4:	9f03      	ldr	r7, [sp, #12]
 800a6a6:	783b      	ldrb	r3, [r7, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <_vfiprintf_r+0x98>
 800a6ac:	2b25      	cmp	r3, #37	; 0x25
 800a6ae:	d14e      	bne.n	800a74e <_vfiprintf_r+0x136>
 800a6b0:	9b03      	ldr	r3, [sp, #12]
 800a6b2:	1afb      	subs	r3, r7, r3
 800a6b4:	9305      	str	r3, [sp, #20]
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	429f      	cmp	r7, r3
 800a6ba:	d00d      	beq.n	800a6d8 <_vfiprintf_r+0xc0>
 800a6bc:	9b05      	ldr	r3, [sp, #20]
 800a6be:	0021      	movs	r1, r4
 800a6c0:	0030      	movs	r0, r6
 800a6c2:	9a03      	ldr	r2, [sp, #12]
 800a6c4:	f7ff ff96 	bl	800a5f4 <__sfputs_r>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d100      	bne.n	800a6ce <_vfiprintf_r+0xb6>
 800a6cc:	e0b5      	b.n	800a83a <_vfiprintf_r+0x222>
 800a6ce:	696a      	ldr	r2, [r5, #20]
 800a6d0:	9b05      	ldr	r3, [sp, #20]
 800a6d2:	4694      	mov	ip, r2
 800a6d4:	4463      	add	r3, ip
 800a6d6:	616b      	str	r3, [r5, #20]
 800a6d8:	783b      	ldrb	r3, [r7, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d100      	bne.n	800a6e0 <_vfiprintf_r+0xc8>
 800a6de:	e0ac      	b.n	800a83a <_vfiprintf_r+0x222>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	1c7b      	adds	r3, r7, #1
 800a6e4:	9303      	str	r3, [sp, #12]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4252      	negs	r2, r2
 800a6ea:	606a      	str	r2, [r5, #4]
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	3254      	adds	r2, #84	; 0x54
 800a6f0:	1852      	adds	r2, r2, r1
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	60eb      	str	r3, [r5, #12]
 800a6f6:	60ab      	str	r3, [r5, #8]
 800a6f8:	7013      	strb	r3, [r2, #0]
 800a6fa:	65ab      	str	r3, [r5, #88]	; 0x58
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	2205      	movs	r2, #5
 800a700:	7819      	ldrb	r1, [r3, #0]
 800a702:	485d      	ldr	r0, [pc, #372]	; (800a878 <_vfiprintf_r+0x260>)
 800a704:	f7ff fb56 	bl	8009db4 <memchr>
 800a708:	9b03      	ldr	r3, [sp, #12]
 800a70a:	1c5f      	adds	r7, r3, #1
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d120      	bne.n	800a752 <_vfiprintf_r+0x13a>
 800a710:	682a      	ldr	r2, [r5, #0]
 800a712:	06d3      	lsls	r3, r2, #27
 800a714:	d504      	bpl.n	800a720 <_vfiprintf_r+0x108>
 800a716:	2353      	movs	r3, #83	; 0x53
 800a718:	a904      	add	r1, sp, #16
 800a71a:	185b      	adds	r3, r3, r1
 800a71c:	2120      	movs	r1, #32
 800a71e:	7019      	strb	r1, [r3, #0]
 800a720:	0713      	lsls	r3, r2, #28
 800a722:	d504      	bpl.n	800a72e <_vfiprintf_r+0x116>
 800a724:	2353      	movs	r3, #83	; 0x53
 800a726:	a904      	add	r1, sp, #16
 800a728:	185b      	adds	r3, r3, r1
 800a72a:	212b      	movs	r1, #43	; 0x2b
 800a72c:	7019      	strb	r1, [r3, #0]
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b2a      	cmp	r3, #42	; 0x2a
 800a734:	d016      	beq.n	800a764 <_vfiprintf_r+0x14c>
 800a736:	2100      	movs	r1, #0
 800a738:	68eb      	ldr	r3, [r5, #12]
 800a73a:	9f03      	ldr	r7, [sp, #12]
 800a73c:	783a      	ldrb	r2, [r7, #0]
 800a73e:	1c78      	adds	r0, r7, #1
 800a740:	3a30      	subs	r2, #48	; 0x30
 800a742:	4684      	mov	ip, r0
 800a744:	2a09      	cmp	r2, #9
 800a746:	d94f      	bls.n	800a7e8 <_vfiprintf_r+0x1d0>
 800a748:	2900      	cmp	r1, #0
 800a74a:	d111      	bne.n	800a770 <_vfiprintf_r+0x158>
 800a74c:	e017      	b.n	800a77e <_vfiprintf_r+0x166>
 800a74e:	3701      	adds	r7, #1
 800a750:	e7a9      	b.n	800a6a6 <_vfiprintf_r+0x8e>
 800a752:	4b49      	ldr	r3, [pc, #292]	; (800a878 <_vfiprintf_r+0x260>)
 800a754:	682a      	ldr	r2, [r5, #0]
 800a756:	1ac0      	subs	r0, r0, r3
 800a758:	2301      	movs	r3, #1
 800a75a:	4083      	lsls	r3, r0
 800a75c:	4313      	orrs	r3, r2
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	9703      	str	r7, [sp, #12]
 800a762:	e7cb      	b.n	800a6fc <_vfiprintf_r+0xe4>
 800a764:	9b07      	ldr	r3, [sp, #28]
 800a766:	1d19      	adds	r1, r3, #4
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	9107      	str	r1, [sp, #28]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	db01      	blt.n	800a774 <_vfiprintf_r+0x15c>
 800a770:	930b      	str	r3, [sp, #44]	; 0x2c
 800a772:	e004      	b.n	800a77e <_vfiprintf_r+0x166>
 800a774:	425b      	negs	r3, r3
 800a776:	60eb      	str	r3, [r5, #12]
 800a778:	2302      	movs	r3, #2
 800a77a:	4313      	orrs	r3, r2
 800a77c:	602b      	str	r3, [r5, #0]
 800a77e:	783b      	ldrb	r3, [r7, #0]
 800a780:	2b2e      	cmp	r3, #46	; 0x2e
 800a782:	d10a      	bne.n	800a79a <_vfiprintf_r+0x182>
 800a784:	787b      	ldrb	r3, [r7, #1]
 800a786:	2b2a      	cmp	r3, #42	; 0x2a
 800a788:	d137      	bne.n	800a7fa <_vfiprintf_r+0x1e2>
 800a78a:	9b07      	ldr	r3, [sp, #28]
 800a78c:	3702      	adds	r7, #2
 800a78e:	1d1a      	adds	r2, r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	9207      	str	r2, [sp, #28]
 800a794:	2b00      	cmp	r3, #0
 800a796:	db2d      	blt.n	800a7f4 <_vfiprintf_r+0x1dc>
 800a798:	9309      	str	r3, [sp, #36]	; 0x24
 800a79a:	2203      	movs	r2, #3
 800a79c:	7839      	ldrb	r1, [r7, #0]
 800a79e:	4837      	ldr	r0, [pc, #220]	; (800a87c <_vfiprintf_r+0x264>)
 800a7a0:	f7ff fb08 	bl	8009db4 <memchr>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d007      	beq.n	800a7b8 <_vfiprintf_r+0x1a0>
 800a7a8:	4b34      	ldr	r3, [pc, #208]	; (800a87c <_vfiprintf_r+0x264>)
 800a7aa:	682a      	ldr	r2, [r5, #0]
 800a7ac:	1ac0      	subs	r0, r0, r3
 800a7ae:	2340      	movs	r3, #64	; 0x40
 800a7b0:	4083      	lsls	r3, r0
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	3701      	adds	r7, #1
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	7839      	ldrb	r1, [r7, #0]
 800a7ba:	1c7b      	adds	r3, r7, #1
 800a7bc:	2206      	movs	r2, #6
 800a7be:	4830      	ldr	r0, [pc, #192]	; (800a880 <_vfiprintf_r+0x268>)
 800a7c0:	9303      	str	r3, [sp, #12]
 800a7c2:	7629      	strb	r1, [r5, #24]
 800a7c4:	f7ff faf6 	bl	8009db4 <memchr>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d045      	beq.n	800a858 <_vfiprintf_r+0x240>
 800a7cc:	4b2d      	ldr	r3, [pc, #180]	; (800a884 <_vfiprintf_r+0x26c>)
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d127      	bne.n	800a822 <_vfiprintf_r+0x20a>
 800a7d2:	2207      	movs	r2, #7
 800a7d4:	9b07      	ldr	r3, [sp, #28]
 800a7d6:	3307      	adds	r3, #7
 800a7d8:	4393      	bics	r3, r2
 800a7da:	3308      	adds	r3, #8
 800a7dc:	9307      	str	r3, [sp, #28]
 800a7de:	696b      	ldr	r3, [r5, #20]
 800a7e0:	9a04      	ldr	r2, [sp, #16]
 800a7e2:	189b      	adds	r3, r3, r2
 800a7e4:	616b      	str	r3, [r5, #20]
 800a7e6:	e75d      	b.n	800a6a4 <_vfiprintf_r+0x8c>
 800a7e8:	210a      	movs	r1, #10
 800a7ea:	434b      	muls	r3, r1
 800a7ec:	4667      	mov	r7, ip
 800a7ee:	189b      	adds	r3, r3, r2
 800a7f0:	3909      	subs	r1, #9
 800a7f2:	e7a3      	b.n	800a73c <_vfiprintf_r+0x124>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	425b      	negs	r3, r3
 800a7f8:	e7ce      	b.n	800a798 <_vfiprintf_r+0x180>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	001a      	movs	r2, r3
 800a7fe:	3701      	adds	r7, #1
 800a800:	606b      	str	r3, [r5, #4]
 800a802:	7839      	ldrb	r1, [r7, #0]
 800a804:	1c78      	adds	r0, r7, #1
 800a806:	3930      	subs	r1, #48	; 0x30
 800a808:	4684      	mov	ip, r0
 800a80a:	2909      	cmp	r1, #9
 800a80c:	d903      	bls.n	800a816 <_vfiprintf_r+0x1fe>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0c3      	beq.n	800a79a <_vfiprintf_r+0x182>
 800a812:	9209      	str	r2, [sp, #36]	; 0x24
 800a814:	e7c1      	b.n	800a79a <_vfiprintf_r+0x182>
 800a816:	230a      	movs	r3, #10
 800a818:	435a      	muls	r2, r3
 800a81a:	4667      	mov	r7, ip
 800a81c:	1852      	adds	r2, r2, r1
 800a81e:	3b09      	subs	r3, #9
 800a820:	e7ef      	b.n	800a802 <_vfiprintf_r+0x1ea>
 800a822:	ab07      	add	r3, sp, #28
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	0022      	movs	r2, r4
 800a828:	0029      	movs	r1, r5
 800a82a:	0030      	movs	r0, r6
 800a82c:	4b16      	ldr	r3, [pc, #88]	; (800a888 <_vfiprintf_r+0x270>)
 800a82e:	f7fe f831 	bl	8008894 <_printf_float>
 800a832:	9004      	str	r0, [sp, #16]
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	3301      	adds	r3, #1
 800a838:	d1d1      	bne.n	800a7de <_vfiprintf_r+0x1c6>
 800a83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a83c:	07db      	lsls	r3, r3, #31
 800a83e:	d405      	bmi.n	800a84c <_vfiprintf_r+0x234>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	059b      	lsls	r3, r3, #22
 800a844:	d402      	bmi.n	800a84c <_vfiprintf_r+0x234>
 800a846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a848:	f7ff feac 	bl	800a5a4 <__retarget_lock_release_recursive>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	065b      	lsls	r3, r3, #25
 800a850:	d500      	bpl.n	800a854 <_vfiprintf_r+0x23c>
 800a852:	e70a      	b.n	800a66a <_vfiprintf_r+0x52>
 800a854:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a856:	e70a      	b.n	800a66e <_vfiprintf_r+0x56>
 800a858:	ab07      	add	r3, sp, #28
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	0022      	movs	r2, r4
 800a85e:	0029      	movs	r1, r5
 800a860:	0030      	movs	r0, r6
 800a862:	4b09      	ldr	r3, [pc, #36]	; (800a888 <_vfiprintf_r+0x270>)
 800a864:	f7fe fad4 	bl	8008e10 <_printf_i>
 800a868:	e7e3      	b.n	800a832 <_vfiprintf_r+0x21a>
 800a86a:	46c0      	nop			; (mov r8, r8)
 800a86c:	0800b83c 	.word	0x0800b83c
 800a870:	0800b85c 	.word	0x0800b85c
 800a874:	0800b81c 	.word	0x0800b81c
 800a878:	0800b70a 	.word	0x0800b70a
 800a87c:	0800b710 	.word	0x0800b710
 800a880:	0800b714 	.word	0x0800b714
 800a884:	08008895 	.word	0x08008895
 800a888:	0800a5f5 	.word	0x0800a5f5

0800a88c <__swbuf_r>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	0005      	movs	r5, r0
 800a890:	000e      	movs	r6, r1
 800a892:	0014      	movs	r4, r2
 800a894:	2800      	cmp	r0, #0
 800a896:	d004      	beq.n	800a8a2 <__swbuf_r+0x16>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <__swbuf_r+0x16>
 800a89e:	f000 fa07 	bl	800acb0 <__sinit>
 800a8a2:	4b22      	ldr	r3, [pc, #136]	; (800a92c <__swbuf_r+0xa0>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	d12e      	bne.n	800a906 <__swbuf_r+0x7a>
 800a8a8:	686c      	ldr	r4, [r5, #4]
 800a8aa:	69a3      	ldr	r3, [r4, #24]
 800a8ac:	60a3      	str	r3, [r4, #8]
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	071b      	lsls	r3, r3, #28
 800a8b2:	d532      	bpl.n	800a91a <__swbuf_r+0x8e>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d02f      	beq.n	800a91a <__swbuf_r+0x8e>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	6922      	ldr	r2, [r4, #16]
 800a8be:	b2f7      	uxtb	r7, r6
 800a8c0:	1a98      	subs	r0, r3, r2
 800a8c2:	6963      	ldr	r3, [r4, #20]
 800a8c4:	b2f6      	uxtb	r6, r6
 800a8c6:	4283      	cmp	r3, r0
 800a8c8:	dc05      	bgt.n	800a8d6 <__swbuf_r+0x4a>
 800a8ca:	0021      	movs	r1, r4
 800a8cc:	0028      	movs	r0, r5
 800a8ce:	f000 f94d 	bl	800ab6c <_fflush_r>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d127      	bne.n	800a926 <__swbuf_r+0x9a>
 800a8d6:	68a3      	ldr	r3, [r4, #8]
 800a8d8:	3001      	adds	r0, #1
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	6022      	str	r2, [r4, #0]
 800a8e4:	701f      	strb	r7, [r3, #0]
 800a8e6:	6963      	ldr	r3, [r4, #20]
 800a8e8:	4283      	cmp	r3, r0
 800a8ea:	d004      	beq.n	800a8f6 <__swbuf_r+0x6a>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	07db      	lsls	r3, r3, #31
 800a8f0:	d507      	bpl.n	800a902 <__swbuf_r+0x76>
 800a8f2:	2e0a      	cmp	r6, #10
 800a8f4:	d105      	bne.n	800a902 <__swbuf_r+0x76>
 800a8f6:	0021      	movs	r1, r4
 800a8f8:	0028      	movs	r0, r5
 800a8fa:	f000 f937 	bl	800ab6c <_fflush_r>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d111      	bne.n	800a926 <__swbuf_r+0x9a>
 800a902:	0030      	movs	r0, r6
 800a904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a906:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <__swbuf_r+0xa4>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	d101      	bne.n	800a910 <__swbuf_r+0x84>
 800a90c:	68ac      	ldr	r4, [r5, #8]
 800a90e:	e7cc      	b.n	800a8aa <__swbuf_r+0x1e>
 800a910:	4b08      	ldr	r3, [pc, #32]	; (800a934 <__swbuf_r+0xa8>)
 800a912:	429c      	cmp	r4, r3
 800a914:	d1c9      	bne.n	800a8aa <__swbuf_r+0x1e>
 800a916:	68ec      	ldr	r4, [r5, #12]
 800a918:	e7c7      	b.n	800a8aa <__swbuf_r+0x1e>
 800a91a:	0021      	movs	r1, r4
 800a91c:	0028      	movs	r0, r5
 800a91e:	f000 f819 	bl	800a954 <__swsetup_r>
 800a922:	2800      	cmp	r0, #0
 800a924:	d0c9      	beq.n	800a8ba <__swbuf_r+0x2e>
 800a926:	2601      	movs	r6, #1
 800a928:	4276      	negs	r6, r6
 800a92a:	e7ea      	b.n	800a902 <__swbuf_r+0x76>
 800a92c:	0800b83c 	.word	0x0800b83c
 800a930:	0800b85c 	.word	0x0800b85c
 800a934:	0800b81c 	.word	0x0800b81c

0800a938 <__ascii_wctomb>:
 800a938:	0003      	movs	r3, r0
 800a93a:	1e08      	subs	r0, r1, #0
 800a93c:	d005      	beq.n	800a94a <__ascii_wctomb+0x12>
 800a93e:	2aff      	cmp	r2, #255	; 0xff
 800a940:	d904      	bls.n	800a94c <__ascii_wctomb+0x14>
 800a942:	228a      	movs	r2, #138	; 0x8a
 800a944:	2001      	movs	r0, #1
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	4240      	negs	r0, r0
 800a94a:	4770      	bx	lr
 800a94c:	2001      	movs	r0, #1
 800a94e:	700a      	strb	r2, [r1, #0]
 800a950:	e7fb      	b.n	800a94a <__ascii_wctomb+0x12>
	...

0800a954 <__swsetup_r>:
 800a954:	4b37      	ldr	r3, [pc, #220]	; (800aa34 <__swsetup_r+0xe0>)
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	681d      	ldr	r5, [r3, #0]
 800a95a:	0006      	movs	r6, r0
 800a95c:	000c      	movs	r4, r1
 800a95e:	2d00      	cmp	r5, #0
 800a960:	d005      	beq.n	800a96e <__swsetup_r+0x1a>
 800a962:	69ab      	ldr	r3, [r5, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <__swsetup_r+0x1a>
 800a968:	0028      	movs	r0, r5
 800a96a:	f000 f9a1 	bl	800acb0 <__sinit>
 800a96e:	4b32      	ldr	r3, [pc, #200]	; (800aa38 <__swsetup_r+0xe4>)
 800a970:	429c      	cmp	r4, r3
 800a972:	d10f      	bne.n	800a994 <__swsetup_r+0x40>
 800a974:	686c      	ldr	r4, [r5, #4]
 800a976:	230c      	movs	r3, #12
 800a978:	5ee2      	ldrsh	r2, [r4, r3]
 800a97a:	b293      	uxth	r3, r2
 800a97c:	0711      	lsls	r1, r2, #28
 800a97e:	d42d      	bmi.n	800a9dc <__swsetup_r+0x88>
 800a980:	06d9      	lsls	r1, r3, #27
 800a982:	d411      	bmi.n	800a9a8 <__swsetup_r+0x54>
 800a984:	2309      	movs	r3, #9
 800a986:	2001      	movs	r0, #1
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	3337      	adds	r3, #55	; 0x37
 800a98c:	4313      	orrs	r3, r2
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	4240      	negs	r0, r0
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	4b29      	ldr	r3, [pc, #164]	; (800aa3c <__swsetup_r+0xe8>)
 800a996:	429c      	cmp	r4, r3
 800a998:	d101      	bne.n	800a99e <__swsetup_r+0x4a>
 800a99a:	68ac      	ldr	r4, [r5, #8]
 800a99c:	e7eb      	b.n	800a976 <__swsetup_r+0x22>
 800a99e:	4b28      	ldr	r3, [pc, #160]	; (800aa40 <__swsetup_r+0xec>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	d1e8      	bne.n	800a976 <__swsetup_r+0x22>
 800a9a4:	68ec      	ldr	r4, [r5, #12]
 800a9a6:	e7e6      	b.n	800a976 <__swsetup_r+0x22>
 800a9a8:	075b      	lsls	r3, r3, #29
 800a9aa:	d513      	bpl.n	800a9d4 <__swsetup_r+0x80>
 800a9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	d008      	beq.n	800a9c4 <__swsetup_r+0x70>
 800a9b2:	0023      	movs	r3, r4
 800a9b4:	3344      	adds	r3, #68	; 0x44
 800a9b6:	4299      	cmp	r1, r3
 800a9b8:	d002      	beq.n	800a9c0 <__swsetup_r+0x6c>
 800a9ba:	0030      	movs	r0, r6
 800a9bc:	f7fd fe18 	bl	80085f0 <_free_r>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	6363      	str	r3, [r4, #52]	; 0x34
 800a9c4:	2224      	movs	r2, #36	; 0x24
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	4393      	bics	r3, r2
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	6063      	str	r3, [r4, #4]
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	2308      	movs	r3, #8
 800a9d6:	89a2      	ldrh	r2, [r4, #12]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	81a3      	strh	r3, [r4, #12]
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10b      	bne.n	800a9fa <__swsetup_r+0xa6>
 800a9e2:	21a0      	movs	r1, #160	; 0xa0
 800a9e4:	2280      	movs	r2, #128	; 0x80
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	0089      	lsls	r1, r1, #2
 800a9ea:	0092      	lsls	r2, r2, #2
 800a9ec:	400b      	ands	r3, r1
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d003      	beq.n	800a9fa <__swsetup_r+0xa6>
 800a9f2:	0021      	movs	r1, r4
 800a9f4:	0030      	movs	r0, r6
 800a9f6:	f000 fa23 	bl	800ae40 <__smakebuf_r>
 800a9fa:	220c      	movs	r2, #12
 800a9fc:	5ea3      	ldrsh	r3, [r4, r2]
 800a9fe:	2001      	movs	r0, #1
 800aa00:	001a      	movs	r2, r3
 800aa02:	b299      	uxth	r1, r3
 800aa04:	4002      	ands	r2, r0
 800aa06:	4203      	tst	r3, r0
 800aa08:	d00f      	beq.n	800aa2a <__swsetup_r+0xd6>
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	60a2      	str	r2, [r4, #8]
 800aa0e:	6962      	ldr	r2, [r4, #20]
 800aa10:	4252      	negs	r2, r2
 800aa12:	61a2      	str	r2, [r4, #24]
 800aa14:	2000      	movs	r0, #0
 800aa16:	6922      	ldr	r2, [r4, #16]
 800aa18:	4282      	cmp	r2, r0
 800aa1a:	d1ba      	bne.n	800a992 <__swsetup_r+0x3e>
 800aa1c:	060a      	lsls	r2, r1, #24
 800aa1e:	d5b8      	bpl.n	800a992 <__swsetup_r+0x3e>
 800aa20:	2240      	movs	r2, #64	; 0x40
 800aa22:	4313      	orrs	r3, r2
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	3801      	subs	r0, #1
 800aa28:	e7b3      	b.n	800a992 <__swsetup_r+0x3e>
 800aa2a:	0788      	lsls	r0, r1, #30
 800aa2c:	d400      	bmi.n	800aa30 <__swsetup_r+0xdc>
 800aa2e:	6962      	ldr	r2, [r4, #20]
 800aa30:	60a2      	str	r2, [r4, #8]
 800aa32:	e7ef      	b.n	800aa14 <__swsetup_r+0xc0>
 800aa34:	2000000c 	.word	0x2000000c
 800aa38:	0800b83c 	.word	0x0800b83c
 800aa3c:	0800b85c 	.word	0x0800b85c
 800aa40:	0800b81c 	.word	0x0800b81c

0800aa44 <abort>:
 800aa44:	2006      	movs	r0, #6
 800aa46:	b510      	push	{r4, lr}
 800aa48:	f000 fa68 	bl	800af1c <raise>
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	f7f8 fec9 	bl	80037e4 <_exit>
	...

0800aa54 <__sflush_r>:
 800aa54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa56:	898b      	ldrh	r3, [r1, #12]
 800aa58:	0005      	movs	r5, r0
 800aa5a:	000c      	movs	r4, r1
 800aa5c:	071a      	lsls	r2, r3, #28
 800aa5e:	d45f      	bmi.n	800ab20 <__sflush_r+0xcc>
 800aa60:	684a      	ldr	r2, [r1, #4]
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	dc04      	bgt.n	800aa70 <__sflush_r+0x1c>
 800aa66:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	dc01      	bgt.n	800aa70 <__sflush_r+0x1c>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d0fa      	beq.n	800aa6c <__sflush_r+0x18>
 800aa76:	2200      	movs	r2, #0
 800aa78:	2180      	movs	r1, #128	; 0x80
 800aa7a:	682e      	ldr	r6, [r5, #0]
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	001a      	movs	r2, r3
 800aa80:	0149      	lsls	r1, r1, #5
 800aa82:	400a      	ands	r2, r1
 800aa84:	420b      	tst	r3, r1
 800aa86:	d034      	beq.n	800aaf2 <__sflush_r+0x9e>
 800aa88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	075b      	lsls	r3, r3, #29
 800aa8e:	d506      	bpl.n	800aa9e <__sflush_r+0x4a>
 800aa90:	6863      	ldr	r3, [r4, #4]
 800aa92:	1ac0      	subs	r0, r0, r3
 800aa94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <__sflush_r+0x4a>
 800aa9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa9c:	1ac0      	subs	r0, r0, r3
 800aa9e:	0002      	movs	r2, r0
 800aaa0:	6a21      	ldr	r1, [r4, #32]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	0028      	movs	r0, r5
 800aaa6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800aaa8:	47b8      	blx	r7
 800aaaa:	89a1      	ldrh	r1, [r4, #12]
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d106      	bne.n	800aabe <__sflush_r+0x6a>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	2b1d      	cmp	r3, #29
 800aab4:	d831      	bhi.n	800ab1a <__sflush_r+0xc6>
 800aab6:	4a2c      	ldr	r2, [pc, #176]	; (800ab68 <__sflush_r+0x114>)
 800aab8:	40da      	lsrs	r2, r3
 800aaba:	07d3      	lsls	r3, r2, #31
 800aabc:	d52d      	bpl.n	800ab1a <__sflush_r+0xc6>
 800aabe:	2300      	movs	r3, #0
 800aac0:	6063      	str	r3, [r4, #4]
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	04cb      	lsls	r3, r1, #19
 800aac8:	d505      	bpl.n	800aad6 <__sflush_r+0x82>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	d102      	bne.n	800aad4 <__sflush_r+0x80>
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d100      	bne.n	800aad6 <__sflush_r+0x82>
 800aad4:	6560      	str	r0, [r4, #84]	; 0x54
 800aad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aad8:	602e      	str	r6, [r5, #0]
 800aada:	2900      	cmp	r1, #0
 800aadc:	d0c6      	beq.n	800aa6c <__sflush_r+0x18>
 800aade:	0023      	movs	r3, r4
 800aae0:	3344      	adds	r3, #68	; 0x44
 800aae2:	4299      	cmp	r1, r3
 800aae4:	d002      	beq.n	800aaec <__sflush_r+0x98>
 800aae6:	0028      	movs	r0, r5
 800aae8:	f7fd fd82 	bl	80085f0 <_free_r>
 800aaec:	2000      	movs	r0, #0
 800aaee:	6360      	str	r0, [r4, #52]	; 0x34
 800aaf0:	e7bd      	b.n	800aa6e <__sflush_r+0x1a>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	0028      	movs	r0, r5
 800aaf6:	6a21      	ldr	r1, [r4, #32]
 800aaf8:	47b8      	blx	r7
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d1c5      	bne.n	800aa8a <__sflush_r+0x36>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d0c2      	beq.n	800aa8a <__sflush_r+0x36>
 800ab04:	2b1d      	cmp	r3, #29
 800ab06:	d001      	beq.n	800ab0c <__sflush_r+0xb8>
 800ab08:	2b16      	cmp	r3, #22
 800ab0a:	d101      	bne.n	800ab10 <__sflush_r+0xbc>
 800ab0c:	602e      	str	r6, [r5, #0]
 800ab0e:	e7ad      	b.n	800aa6c <__sflush_r+0x18>
 800ab10:	2340      	movs	r3, #64	; 0x40
 800ab12:	89a2      	ldrh	r2, [r4, #12]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	81a3      	strh	r3, [r4, #12]
 800ab18:	e7a9      	b.n	800aa6e <__sflush_r+0x1a>
 800ab1a:	2340      	movs	r3, #64	; 0x40
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	e7fa      	b.n	800ab16 <__sflush_r+0xc2>
 800ab20:	690f      	ldr	r7, [r1, #16]
 800ab22:	2f00      	cmp	r7, #0
 800ab24:	d0a2      	beq.n	800aa6c <__sflush_r+0x18>
 800ab26:	680a      	ldr	r2, [r1, #0]
 800ab28:	600f      	str	r7, [r1, #0]
 800ab2a:	1bd2      	subs	r2, r2, r7
 800ab2c:	9201      	str	r2, [sp, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	079b      	lsls	r3, r3, #30
 800ab32:	d100      	bne.n	800ab36 <__sflush_r+0xe2>
 800ab34:	694a      	ldr	r2, [r1, #20]
 800ab36:	60a2      	str	r2, [r4, #8]
 800ab38:	9b01      	ldr	r3, [sp, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dc00      	bgt.n	800ab40 <__sflush_r+0xec>
 800ab3e:	e795      	b.n	800aa6c <__sflush_r+0x18>
 800ab40:	003a      	movs	r2, r7
 800ab42:	0028      	movs	r0, r5
 800ab44:	9b01      	ldr	r3, [sp, #4]
 800ab46:	6a21      	ldr	r1, [r4, #32]
 800ab48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab4a:	47b0      	blx	r6
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	dc06      	bgt.n	800ab5e <__sflush_r+0x10a>
 800ab50:	2340      	movs	r3, #64	; 0x40
 800ab52:	2001      	movs	r0, #1
 800ab54:	89a2      	ldrh	r2, [r4, #12]
 800ab56:	4240      	negs	r0, r0
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	e787      	b.n	800aa6e <__sflush_r+0x1a>
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	183f      	adds	r7, r7, r0
 800ab62:	1a1b      	subs	r3, r3, r0
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	e7e7      	b.n	800ab38 <__sflush_r+0xe4>
 800ab68:	20400001 	.word	0x20400001

0800ab6c <_fflush_r>:
 800ab6c:	690b      	ldr	r3, [r1, #16]
 800ab6e:	b570      	push	{r4, r5, r6, lr}
 800ab70:	0005      	movs	r5, r0
 800ab72:	000c      	movs	r4, r1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d102      	bne.n	800ab7e <_fflush_r+0x12>
 800ab78:	2500      	movs	r5, #0
 800ab7a:	0028      	movs	r0, r5
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d004      	beq.n	800ab8c <_fflush_r+0x20>
 800ab82:	6983      	ldr	r3, [r0, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <_fflush_r+0x20>
 800ab88:	f000 f892 	bl	800acb0 <__sinit>
 800ab8c:	4b14      	ldr	r3, [pc, #80]	; (800abe0 <_fflush_r+0x74>)
 800ab8e:	429c      	cmp	r4, r3
 800ab90:	d11b      	bne.n	800abca <_fflush_r+0x5e>
 800ab92:	686c      	ldr	r4, [r5, #4]
 800ab94:	220c      	movs	r2, #12
 800ab96:	5ea3      	ldrsh	r3, [r4, r2]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d0ed      	beq.n	800ab78 <_fflush_r+0xc>
 800ab9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab9e:	07d2      	lsls	r2, r2, #31
 800aba0:	d404      	bmi.n	800abac <_fflush_r+0x40>
 800aba2:	059b      	lsls	r3, r3, #22
 800aba4:	d402      	bmi.n	800abac <_fflush_r+0x40>
 800aba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aba8:	f7ff fcfb 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800abac:	0028      	movs	r0, r5
 800abae:	0021      	movs	r1, r4
 800abb0:	f7ff ff50 	bl	800aa54 <__sflush_r>
 800abb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abb6:	0005      	movs	r5, r0
 800abb8:	07db      	lsls	r3, r3, #31
 800abba:	d4de      	bmi.n	800ab7a <_fflush_r+0xe>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	059b      	lsls	r3, r3, #22
 800abc0:	d4db      	bmi.n	800ab7a <_fflush_r+0xe>
 800abc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc4:	f7ff fcee 	bl	800a5a4 <__retarget_lock_release_recursive>
 800abc8:	e7d7      	b.n	800ab7a <_fflush_r+0xe>
 800abca:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <_fflush_r+0x78>)
 800abcc:	429c      	cmp	r4, r3
 800abce:	d101      	bne.n	800abd4 <_fflush_r+0x68>
 800abd0:	68ac      	ldr	r4, [r5, #8]
 800abd2:	e7df      	b.n	800ab94 <_fflush_r+0x28>
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <_fflush_r+0x7c>)
 800abd6:	429c      	cmp	r4, r3
 800abd8:	d1dc      	bne.n	800ab94 <_fflush_r+0x28>
 800abda:	68ec      	ldr	r4, [r5, #12]
 800abdc:	e7da      	b.n	800ab94 <_fflush_r+0x28>
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	0800b83c 	.word	0x0800b83c
 800abe4:	0800b85c 	.word	0x0800b85c
 800abe8:	0800b81c 	.word	0x0800b81c

0800abec <std>:
 800abec:	2300      	movs	r3, #0
 800abee:	b510      	push	{r4, lr}
 800abf0:	0004      	movs	r4, r0
 800abf2:	6003      	str	r3, [r0, #0]
 800abf4:	6043      	str	r3, [r0, #4]
 800abf6:	6083      	str	r3, [r0, #8]
 800abf8:	8181      	strh	r1, [r0, #12]
 800abfa:	6643      	str	r3, [r0, #100]	; 0x64
 800abfc:	0019      	movs	r1, r3
 800abfe:	81c2      	strh	r2, [r0, #14]
 800ac00:	6103      	str	r3, [r0, #16]
 800ac02:	6143      	str	r3, [r0, #20]
 800ac04:	6183      	str	r3, [r0, #24]
 800ac06:	2208      	movs	r2, #8
 800ac08:	305c      	adds	r0, #92	; 0x5c
 800ac0a:	f7fd fce8 	bl	80085de <memset>
 800ac0e:	4b05      	ldr	r3, [pc, #20]	; (800ac24 <std+0x38>)
 800ac10:	6263      	str	r3, [r4, #36]	; 0x24
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <std+0x3c>)
 800ac14:	6224      	str	r4, [r4, #32]
 800ac16:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <std+0x40>)
 800ac1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac1c:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <std+0x44>)
 800ac1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	0800af5d 	.word	0x0800af5d
 800ac28:	0800af85 	.word	0x0800af85
 800ac2c:	0800afbd 	.word	0x0800afbd
 800ac30:	0800afe9 	.word	0x0800afe9

0800ac34 <_cleanup_r>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4902      	ldr	r1, [pc, #8]	; (800ac40 <_cleanup_r+0xc>)
 800ac38:	f000 f8ba 	bl	800adb0 <_fwalk_reent>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	0800ab6d 	.word	0x0800ab6d

0800ac44 <__sfmoreglue>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	2568      	movs	r5, #104	; 0x68
 800ac48:	1e4a      	subs	r2, r1, #1
 800ac4a:	4355      	muls	r5, r2
 800ac4c:	000e      	movs	r6, r1
 800ac4e:	0029      	movs	r1, r5
 800ac50:	3174      	adds	r1, #116	; 0x74
 800ac52:	f7fd fd17 	bl	8008684 <_malloc_r>
 800ac56:	1e04      	subs	r4, r0, #0
 800ac58:	d008      	beq.n	800ac6c <__sfmoreglue+0x28>
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	002a      	movs	r2, r5
 800ac5e:	6001      	str	r1, [r0, #0]
 800ac60:	6046      	str	r6, [r0, #4]
 800ac62:	300c      	adds	r0, #12
 800ac64:	60a0      	str	r0, [r4, #8]
 800ac66:	3268      	adds	r2, #104	; 0x68
 800ac68:	f7fd fcb9 	bl	80085de <memset>
 800ac6c:	0020      	movs	r0, r4
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}

0800ac70 <__sfp_lock_acquire>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	4802      	ldr	r0, [pc, #8]	; (800ac7c <__sfp_lock_acquire+0xc>)
 800ac74:	f7ff fc95 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	2000119c 	.word	0x2000119c

0800ac80 <__sfp_lock_release>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4802      	ldr	r0, [pc, #8]	; (800ac8c <__sfp_lock_release+0xc>)
 800ac84:	f7ff fc8e 	bl	800a5a4 <__retarget_lock_release_recursive>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	2000119c 	.word	0x2000119c

0800ac90 <__sinit_lock_acquire>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4802      	ldr	r0, [pc, #8]	; (800ac9c <__sinit_lock_acquire+0xc>)
 800ac94:	f7ff fc85 	bl	800a5a2 <__retarget_lock_acquire_recursive>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20001197 	.word	0x20001197

0800aca0 <__sinit_lock_release>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	4802      	ldr	r0, [pc, #8]	; (800acac <__sinit_lock_release+0xc>)
 800aca4:	f7ff fc7e 	bl	800a5a4 <__retarget_lock_release_recursive>
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	20001197 	.word	0x20001197

0800acb0 <__sinit>:
 800acb0:	b513      	push	{r0, r1, r4, lr}
 800acb2:	0004      	movs	r4, r0
 800acb4:	f7ff ffec 	bl	800ac90 <__sinit_lock_acquire>
 800acb8:	69a3      	ldr	r3, [r4, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <__sinit+0x14>
 800acbe:	f7ff ffef 	bl	800aca0 <__sinit_lock_release>
 800acc2:	bd13      	pop	{r0, r1, r4, pc}
 800acc4:	64a3      	str	r3, [r4, #72]	; 0x48
 800acc6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800acc8:	6523      	str	r3, [r4, #80]	; 0x50
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <__sinit+0x68>)
 800accc:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <__sinit+0x6c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	42a3      	cmp	r3, r4
 800acd6:	d101      	bne.n	800acdc <__sinit+0x2c>
 800acd8:	2301      	movs	r3, #1
 800acda:	61a3      	str	r3, [r4, #24]
 800acdc:	0020      	movs	r0, r4
 800acde:	f000 f81f 	bl	800ad20 <__sfp>
 800ace2:	6060      	str	r0, [r4, #4]
 800ace4:	0020      	movs	r0, r4
 800ace6:	f000 f81b 	bl	800ad20 <__sfp>
 800acea:	60a0      	str	r0, [r4, #8]
 800acec:	0020      	movs	r0, r4
 800acee:	f000 f817 	bl	800ad20 <__sfp>
 800acf2:	2200      	movs	r2, #0
 800acf4:	2104      	movs	r1, #4
 800acf6:	60e0      	str	r0, [r4, #12]
 800acf8:	6860      	ldr	r0, [r4, #4]
 800acfa:	f7ff ff77 	bl	800abec <std>
 800acfe:	2201      	movs	r2, #1
 800ad00:	2109      	movs	r1, #9
 800ad02:	68a0      	ldr	r0, [r4, #8]
 800ad04:	f7ff ff72 	bl	800abec <std>
 800ad08:	2202      	movs	r2, #2
 800ad0a:	2112      	movs	r1, #18
 800ad0c:	68e0      	ldr	r0, [r4, #12]
 800ad0e:	f7ff ff6d 	bl	800abec <std>
 800ad12:	2301      	movs	r3, #1
 800ad14:	61a3      	str	r3, [r4, #24]
 800ad16:	e7d2      	b.n	800acbe <__sinit+0xe>
 800ad18:	0800b498 	.word	0x0800b498
 800ad1c:	0800ac35 	.word	0x0800ac35

0800ad20 <__sfp>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	0007      	movs	r7, r0
 800ad24:	f7ff ffa4 	bl	800ac70 <__sfp_lock_acquire>
 800ad28:	4b1f      	ldr	r3, [pc, #124]	; (800ada8 <__sfp+0x88>)
 800ad2a:	681e      	ldr	r6, [r3, #0]
 800ad2c:	69b3      	ldr	r3, [r6, #24]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <__sfp+0x18>
 800ad32:	0030      	movs	r0, r6
 800ad34:	f7ff ffbc 	bl	800acb0 <__sinit>
 800ad38:	3648      	adds	r6, #72	; 0x48
 800ad3a:	68b4      	ldr	r4, [r6, #8]
 800ad3c:	6873      	ldr	r3, [r6, #4]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	d504      	bpl.n	800ad4c <__sfp+0x2c>
 800ad42:	6833      	ldr	r3, [r6, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d022      	beq.n	800ad8e <__sfp+0x6e>
 800ad48:	6836      	ldr	r6, [r6, #0]
 800ad4a:	e7f6      	b.n	800ad3a <__sfp+0x1a>
 800ad4c:	220c      	movs	r2, #12
 800ad4e:	5ea5      	ldrsh	r5, [r4, r2]
 800ad50:	2d00      	cmp	r5, #0
 800ad52:	d11a      	bne.n	800ad8a <__sfp+0x6a>
 800ad54:	0020      	movs	r0, r4
 800ad56:	4b15      	ldr	r3, [pc, #84]	; (800adac <__sfp+0x8c>)
 800ad58:	3058      	adds	r0, #88	; 0x58
 800ad5a:	60e3      	str	r3, [r4, #12]
 800ad5c:	6665      	str	r5, [r4, #100]	; 0x64
 800ad5e:	f7ff fc1f 	bl	800a5a0 <__retarget_lock_init_recursive>
 800ad62:	f7ff ff8d 	bl	800ac80 <__sfp_lock_release>
 800ad66:	0020      	movs	r0, r4
 800ad68:	2208      	movs	r2, #8
 800ad6a:	0029      	movs	r1, r5
 800ad6c:	6025      	str	r5, [r4, #0]
 800ad6e:	60a5      	str	r5, [r4, #8]
 800ad70:	6065      	str	r5, [r4, #4]
 800ad72:	6125      	str	r5, [r4, #16]
 800ad74:	6165      	str	r5, [r4, #20]
 800ad76:	61a5      	str	r5, [r4, #24]
 800ad78:	305c      	adds	r0, #92	; 0x5c
 800ad7a:	f7fd fc30 	bl	80085de <memset>
 800ad7e:	6365      	str	r5, [r4, #52]	; 0x34
 800ad80:	63a5      	str	r5, [r4, #56]	; 0x38
 800ad82:	64a5      	str	r5, [r4, #72]	; 0x48
 800ad84:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ad86:	0020      	movs	r0, r4
 800ad88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad8a:	3468      	adds	r4, #104	; 0x68
 800ad8c:	e7d7      	b.n	800ad3e <__sfp+0x1e>
 800ad8e:	2104      	movs	r1, #4
 800ad90:	0038      	movs	r0, r7
 800ad92:	f7ff ff57 	bl	800ac44 <__sfmoreglue>
 800ad96:	1e04      	subs	r4, r0, #0
 800ad98:	6030      	str	r0, [r6, #0]
 800ad9a:	d1d5      	bne.n	800ad48 <__sfp+0x28>
 800ad9c:	f7ff ff70 	bl	800ac80 <__sfp_lock_release>
 800ada0:	230c      	movs	r3, #12
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	e7ef      	b.n	800ad86 <__sfp+0x66>
 800ada6:	46c0      	nop			; (mov r8, r8)
 800ada8:	0800b498 	.word	0x0800b498
 800adac:	ffff0001 	.word	0xffff0001

0800adb0 <_fwalk_reent>:
 800adb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb2:	0004      	movs	r4, r0
 800adb4:	0006      	movs	r6, r0
 800adb6:	2700      	movs	r7, #0
 800adb8:	9101      	str	r1, [sp, #4]
 800adba:	3448      	adds	r4, #72	; 0x48
 800adbc:	6863      	ldr	r3, [r4, #4]
 800adbe:	68a5      	ldr	r5, [r4, #8]
 800adc0:	9300      	str	r3, [sp, #0]
 800adc2:	9b00      	ldr	r3, [sp, #0]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	d504      	bpl.n	800add4 <_fwalk_reent+0x24>
 800adca:	6824      	ldr	r4, [r4, #0]
 800adcc:	2c00      	cmp	r4, #0
 800adce:	d1f5      	bne.n	800adbc <_fwalk_reent+0xc>
 800add0:	0038      	movs	r0, r7
 800add2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800add4:	89ab      	ldrh	r3, [r5, #12]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d908      	bls.n	800adec <_fwalk_reent+0x3c>
 800adda:	220e      	movs	r2, #14
 800addc:	5eab      	ldrsh	r3, [r5, r2]
 800adde:	3301      	adds	r3, #1
 800ade0:	d004      	beq.n	800adec <_fwalk_reent+0x3c>
 800ade2:	0029      	movs	r1, r5
 800ade4:	0030      	movs	r0, r6
 800ade6:	9b01      	ldr	r3, [sp, #4]
 800ade8:	4798      	blx	r3
 800adea:	4307      	orrs	r7, r0
 800adec:	3568      	adds	r5, #104	; 0x68
 800adee:	e7e8      	b.n	800adc2 <_fwalk_reent+0x12>

0800adf0 <__swhatbuf_r>:
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	000e      	movs	r6, r1
 800adf4:	001d      	movs	r5, r3
 800adf6:	230e      	movs	r3, #14
 800adf8:	5ec9      	ldrsh	r1, [r1, r3]
 800adfa:	0014      	movs	r4, r2
 800adfc:	b096      	sub	sp, #88	; 0x58
 800adfe:	2900      	cmp	r1, #0
 800ae00:	da07      	bge.n	800ae12 <__swhatbuf_r+0x22>
 800ae02:	2300      	movs	r3, #0
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	89b3      	ldrh	r3, [r6, #12]
 800ae08:	061b      	lsls	r3, r3, #24
 800ae0a:	d411      	bmi.n	800ae30 <__swhatbuf_r+0x40>
 800ae0c:	2380      	movs	r3, #128	; 0x80
 800ae0e:	00db      	lsls	r3, r3, #3
 800ae10:	e00f      	b.n	800ae32 <__swhatbuf_r+0x42>
 800ae12:	466a      	mov	r2, sp
 800ae14:	f000 f914 	bl	800b040 <_fstat_r>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	dbf2      	blt.n	800ae02 <__swhatbuf_r+0x12>
 800ae1c:	23f0      	movs	r3, #240	; 0xf0
 800ae1e:	9901      	ldr	r1, [sp, #4]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	4019      	ands	r1, r3
 800ae24:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <__swhatbuf_r+0x4c>)
 800ae26:	18c9      	adds	r1, r1, r3
 800ae28:	424b      	negs	r3, r1
 800ae2a:	4159      	adcs	r1, r3
 800ae2c:	6029      	str	r1, [r5, #0]
 800ae2e:	e7ed      	b.n	800ae0c <__swhatbuf_r+0x1c>
 800ae30:	2340      	movs	r3, #64	; 0x40
 800ae32:	2000      	movs	r0, #0
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	b016      	add	sp, #88	; 0x58
 800ae38:	bd70      	pop	{r4, r5, r6, pc}
 800ae3a:	46c0      	nop			; (mov r8, r8)
 800ae3c:	ffffe000 	.word	0xffffe000

0800ae40 <__smakebuf_r>:
 800ae40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae42:	2602      	movs	r6, #2
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	0005      	movs	r5, r0
 800ae48:	000c      	movs	r4, r1
 800ae4a:	4233      	tst	r3, r6
 800ae4c:	d006      	beq.n	800ae5c <__smakebuf_r+0x1c>
 800ae4e:	0023      	movs	r3, r4
 800ae50:	3347      	adds	r3, #71	; 0x47
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	6123      	str	r3, [r4, #16]
 800ae56:	2301      	movs	r3, #1
 800ae58:	6163      	str	r3, [r4, #20]
 800ae5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ae5c:	466a      	mov	r2, sp
 800ae5e:	ab01      	add	r3, sp, #4
 800ae60:	f7ff ffc6 	bl	800adf0 <__swhatbuf_r>
 800ae64:	9900      	ldr	r1, [sp, #0]
 800ae66:	0007      	movs	r7, r0
 800ae68:	0028      	movs	r0, r5
 800ae6a:	f7fd fc0b 	bl	8008684 <_malloc_r>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d108      	bne.n	800ae84 <__smakebuf_r+0x44>
 800ae72:	220c      	movs	r2, #12
 800ae74:	5ea3      	ldrsh	r3, [r4, r2]
 800ae76:	059a      	lsls	r2, r3, #22
 800ae78:	d4ef      	bmi.n	800ae5a <__smakebuf_r+0x1a>
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	4393      	bics	r3, r2
 800ae7e:	431e      	orrs	r6, r3
 800ae80:	81a6      	strh	r6, [r4, #12]
 800ae82:	e7e4      	b.n	800ae4e <__smakebuf_r+0xe>
 800ae84:	4b0f      	ldr	r3, [pc, #60]	; (800aec4 <__smakebuf_r+0x84>)
 800ae86:	62ab      	str	r3, [r5, #40]	; 0x28
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	89a2      	ldrh	r2, [r4, #12]
 800ae8c:	6020      	str	r0, [r4, #0]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	9b00      	ldr	r3, [sp, #0]
 800ae94:	6120      	str	r0, [r4, #16]
 800ae96:	6163      	str	r3, [r4, #20]
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00d      	beq.n	800aeba <__smakebuf_r+0x7a>
 800ae9e:	0028      	movs	r0, r5
 800aea0:	230e      	movs	r3, #14
 800aea2:	5ee1      	ldrsh	r1, [r4, r3]
 800aea4:	f000 f8de 	bl	800b064 <_isatty_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d006      	beq.n	800aeba <__smakebuf_r+0x7a>
 800aeac:	2203      	movs	r2, #3
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	4393      	bics	r3, r2
 800aeb2:	001a      	movs	r2, r3
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	81a3      	strh	r3, [r4, #12]
 800aeba:	89a0      	ldrh	r0, [r4, #12]
 800aebc:	4307      	orrs	r7, r0
 800aebe:	81a7      	strh	r7, [r4, #12]
 800aec0:	e7cb      	b.n	800ae5a <__smakebuf_r+0x1a>
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	0800ac35 	.word	0x0800ac35

0800aec8 <_raise_r>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	0004      	movs	r4, r0
 800aecc:	000d      	movs	r5, r1
 800aece:	291f      	cmp	r1, #31
 800aed0:	d904      	bls.n	800aedc <_raise_r+0x14>
 800aed2:	2316      	movs	r3, #22
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	2001      	movs	r0, #1
 800aed8:	4240      	negs	r0, r0
 800aeda:	bd70      	pop	{r4, r5, r6, pc}
 800aedc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d004      	beq.n	800aeec <_raise_r+0x24>
 800aee2:	008a      	lsls	r2, r1, #2
 800aee4:	189b      	adds	r3, r3, r2
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	2a00      	cmp	r2, #0
 800aeea:	d108      	bne.n	800aefe <_raise_r+0x36>
 800aeec:	0020      	movs	r0, r4
 800aeee:	f000 f831 	bl	800af54 <_getpid_r>
 800aef2:	002a      	movs	r2, r5
 800aef4:	0001      	movs	r1, r0
 800aef6:	0020      	movs	r0, r4
 800aef8:	f000 f81a 	bl	800af30 <_kill_r>
 800aefc:	e7ed      	b.n	800aeda <_raise_r+0x12>
 800aefe:	2000      	movs	r0, #0
 800af00:	2a01      	cmp	r2, #1
 800af02:	d0ea      	beq.n	800aeda <_raise_r+0x12>
 800af04:	1c51      	adds	r1, r2, #1
 800af06:	d103      	bne.n	800af10 <_raise_r+0x48>
 800af08:	2316      	movs	r3, #22
 800af0a:	3001      	adds	r0, #1
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	e7e4      	b.n	800aeda <_raise_r+0x12>
 800af10:	2400      	movs	r4, #0
 800af12:	0028      	movs	r0, r5
 800af14:	601c      	str	r4, [r3, #0]
 800af16:	4790      	blx	r2
 800af18:	0020      	movs	r0, r4
 800af1a:	e7de      	b.n	800aeda <_raise_r+0x12>

0800af1c <raise>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	4b03      	ldr	r3, [pc, #12]	; (800af2c <raise+0x10>)
 800af20:	0001      	movs	r1, r0
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	f7ff ffd0 	bl	800aec8 <_raise_r>
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	46c0      	nop			; (mov r8, r8)
 800af2c:	2000000c 	.word	0x2000000c

0800af30 <_kill_r>:
 800af30:	2300      	movs	r3, #0
 800af32:	b570      	push	{r4, r5, r6, lr}
 800af34:	4d06      	ldr	r5, [pc, #24]	; (800af50 <_kill_r+0x20>)
 800af36:	0004      	movs	r4, r0
 800af38:	0008      	movs	r0, r1
 800af3a:	0011      	movs	r1, r2
 800af3c:	602b      	str	r3, [r5, #0]
 800af3e:	f7f8 fc41 	bl	80037c4 <_kill>
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d103      	bne.n	800af4e <_kill_r+0x1e>
 800af46:	682b      	ldr	r3, [r5, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d000      	beq.n	800af4e <_kill_r+0x1e>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	20001190 	.word	0x20001190

0800af54 <_getpid_r>:
 800af54:	b510      	push	{r4, lr}
 800af56:	f7f8 fc2f 	bl	80037b8 <_getpid>
 800af5a:	bd10      	pop	{r4, pc}

0800af5c <__sread>:
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	000c      	movs	r4, r1
 800af60:	250e      	movs	r5, #14
 800af62:	5f49      	ldrsh	r1, [r1, r5]
 800af64:	f000 f8a4 	bl	800b0b0 <_read_r>
 800af68:	2800      	cmp	r0, #0
 800af6a:	db03      	blt.n	800af74 <__sread+0x18>
 800af6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800af6e:	181b      	adds	r3, r3, r0
 800af70:	6563      	str	r3, [r4, #84]	; 0x54
 800af72:	bd70      	pop	{r4, r5, r6, pc}
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	4a02      	ldr	r2, [pc, #8]	; (800af80 <__sread+0x24>)
 800af78:	4013      	ands	r3, r2
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	e7f9      	b.n	800af72 <__sread+0x16>
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	ffffefff 	.word	0xffffefff

0800af84 <__swrite>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	001f      	movs	r7, r3
 800af88:	898b      	ldrh	r3, [r1, #12]
 800af8a:	0005      	movs	r5, r0
 800af8c:	000c      	movs	r4, r1
 800af8e:	0016      	movs	r6, r2
 800af90:	05db      	lsls	r3, r3, #23
 800af92:	d505      	bpl.n	800afa0 <__swrite+0x1c>
 800af94:	230e      	movs	r3, #14
 800af96:	5ec9      	ldrsh	r1, [r1, r3]
 800af98:	2200      	movs	r2, #0
 800af9a:	2302      	movs	r3, #2
 800af9c:	f000 f874 	bl	800b088 <_lseek_r>
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	4a05      	ldr	r2, [pc, #20]	; (800afb8 <__swrite+0x34>)
 800afa4:	0028      	movs	r0, r5
 800afa6:	4013      	ands	r3, r2
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	0032      	movs	r2, r6
 800afac:	230e      	movs	r3, #14
 800afae:	5ee1      	ldrsh	r1, [r4, r3]
 800afb0:	003b      	movs	r3, r7
 800afb2:	f000 f81f 	bl	800aff4 <_write_r>
 800afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb8:	ffffefff 	.word	0xffffefff

0800afbc <__sseek>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	000c      	movs	r4, r1
 800afc0:	250e      	movs	r5, #14
 800afc2:	5f49      	ldrsh	r1, [r1, r5]
 800afc4:	f000 f860 	bl	800b088 <_lseek_r>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	1c42      	adds	r2, r0, #1
 800afcc:	d103      	bne.n	800afd6 <__sseek+0x1a>
 800afce:	4a05      	ldr	r2, [pc, #20]	; (800afe4 <__sseek+0x28>)
 800afd0:	4013      	ands	r3, r2
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	bd70      	pop	{r4, r5, r6, pc}
 800afd6:	2280      	movs	r2, #128	; 0x80
 800afd8:	0152      	lsls	r2, r2, #5
 800afda:	4313      	orrs	r3, r2
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	6560      	str	r0, [r4, #84]	; 0x54
 800afe0:	e7f8      	b.n	800afd4 <__sseek+0x18>
 800afe2:	46c0      	nop			; (mov r8, r8)
 800afe4:	ffffefff 	.word	0xffffefff

0800afe8 <__sclose>:
 800afe8:	b510      	push	{r4, lr}
 800afea:	230e      	movs	r3, #14
 800afec:	5ec9      	ldrsh	r1, [r1, r3]
 800afee:	f000 f815 	bl	800b01c <_close_r>
 800aff2:	bd10      	pop	{r4, pc}

0800aff4 <_write_r>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	0004      	movs	r4, r0
 800aff8:	0008      	movs	r0, r1
 800affa:	0011      	movs	r1, r2
 800affc:	001a      	movs	r2, r3
 800affe:	2300      	movs	r3, #0
 800b000:	4d05      	ldr	r5, [pc, #20]	; (800b018 <_write_r+0x24>)
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	f7f8 fc17 	bl	8003836 <_write>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d103      	bne.n	800b014 <_write_r+0x20>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d000      	beq.n	800b014 <_write_r+0x20>
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	bd70      	pop	{r4, r5, r6, pc}
 800b016:	46c0      	nop			; (mov r8, r8)
 800b018:	20001190 	.word	0x20001190

0800b01c <_close_r>:
 800b01c:	2300      	movs	r3, #0
 800b01e:	b570      	push	{r4, r5, r6, lr}
 800b020:	4d06      	ldr	r5, [pc, #24]	; (800b03c <_close_r+0x20>)
 800b022:	0004      	movs	r4, r0
 800b024:	0008      	movs	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f8 fc21 	bl	800386e <_close>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d103      	bne.n	800b038 <_close_r+0x1c>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d000      	beq.n	800b038 <_close_r+0x1c>
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	20001190 	.word	0x20001190

0800b040 <_fstat_r>:
 800b040:	2300      	movs	r3, #0
 800b042:	b570      	push	{r4, r5, r6, lr}
 800b044:	4d06      	ldr	r5, [pc, #24]	; (800b060 <_fstat_r+0x20>)
 800b046:	0004      	movs	r4, r0
 800b048:	0008      	movs	r0, r1
 800b04a:	0011      	movs	r1, r2
 800b04c:	602b      	str	r3, [r5, #0]
 800b04e:	f7f8 fc18 	bl	8003882 <_fstat>
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	d103      	bne.n	800b05e <_fstat_r+0x1e>
 800b056:	682b      	ldr	r3, [r5, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d000      	beq.n	800b05e <_fstat_r+0x1e>
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	20001190 	.word	0x20001190

0800b064 <_isatty_r>:
 800b064:	2300      	movs	r3, #0
 800b066:	b570      	push	{r4, r5, r6, lr}
 800b068:	4d06      	ldr	r5, [pc, #24]	; (800b084 <_isatty_r+0x20>)
 800b06a:	0004      	movs	r4, r0
 800b06c:	0008      	movs	r0, r1
 800b06e:	602b      	str	r3, [r5, #0]
 800b070:	f7f8 fc15 	bl	800389e <_isatty>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d103      	bne.n	800b080 <_isatty_r+0x1c>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d000      	beq.n	800b080 <_isatty_r+0x1c>
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	bd70      	pop	{r4, r5, r6, pc}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	20001190 	.word	0x20001190

0800b088 <_lseek_r>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	0004      	movs	r4, r0
 800b08c:	0008      	movs	r0, r1
 800b08e:	0011      	movs	r1, r2
 800b090:	001a      	movs	r2, r3
 800b092:	2300      	movs	r3, #0
 800b094:	4d05      	ldr	r5, [pc, #20]	; (800b0ac <_lseek_r+0x24>)
 800b096:	602b      	str	r3, [r5, #0]
 800b098:	f7f8 fc0a 	bl	80038b0 <_lseek>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d103      	bne.n	800b0a8 <_lseek_r+0x20>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d000      	beq.n	800b0a8 <_lseek_r+0x20>
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	bd70      	pop	{r4, r5, r6, pc}
 800b0aa:	46c0      	nop			; (mov r8, r8)
 800b0ac:	20001190 	.word	0x20001190

0800b0b0 <_read_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	0008      	movs	r0, r1
 800b0b6:	0011      	movs	r1, r2
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4d05      	ldr	r5, [pc, #20]	; (800b0d4 <_read_r+0x24>)
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	f7f8 fb9c 	bl	80037fc <_read>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d103      	bne.n	800b0d0 <_read_r+0x20>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d000      	beq.n	800b0d0 <_read_r+0x20>
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	20001190 	.word	0x20001190

0800b0d8 <ceil>:
 800b0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0da:	004b      	lsls	r3, r1, #1
 800b0dc:	4a3d      	ldr	r2, [pc, #244]	; (800b1d4 <ceil+0xfc>)
 800b0de:	0d5b      	lsrs	r3, r3, #21
 800b0e0:	189f      	adds	r7, r3, r2
 800b0e2:	4684      	mov	ip, r0
 800b0e4:	000e      	movs	r6, r1
 800b0e6:	000c      	movs	r4, r1
 800b0e8:	0005      	movs	r5, r0
 800b0ea:	9001      	str	r0, [sp, #4]
 800b0ec:	2f13      	cmp	r7, #19
 800b0ee:	dc33      	bgt.n	800b158 <ceil+0x80>
 800b0f0:	2f00      	cmp	r7, #0
 800b0f2:	da15      	bge.n	800b120 <ceil+0x48>
 800b0f4:	4a38      	ldr	r2, [pc, #224]	; (800b1d8 <ceil+0x100>)
 800b0f6:	4b39      	ldr	r3, [pc, #228]	; (800b1dc <ceil+0x104>)
 800b0f8:	4660      	mov	r0, ip
 800b0fa:	0031      	movs	r1, r6
 800b0fc:	f7f5 fb06 	bl	800070c <__aeabi_dadd>
 800b100:	2200      	movs	r2, #0
 800b102:	2300      	movs	r3, #0
 800b104:	f7f5 f9bc 	bl	8000480 <__aeabi_dcmpgt>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d006      	beq.n	800b11a <ceil+0x42>
 800b10c:	2e00      	cmp	r6, #0
 800b10e:	db5c      	blt.n	800b1ca <ceil+0xf2>
 800b110:	432c      	orrs	r4, r5
 800b112:	2500      	movs	r5, #0
 800b114:	42ac      	cmp	r4, r5
 800b116:	d000      	beq.n	800b11a <ceil+0x42>
 800b118:	4c31      	ldr	r4, [pc, #196]	; (800b1e0 <ceil+0x108>)
 800b11a:	46ac      	mov	ip, r5
 800b11c:	0026      	movs	r6, r4
 800b11e:	e029      	b.n	800b174 <ceil+0x9c>
 800b120:	4b30      	ldr	r3, [pc, #192]	; (800b1e4 <ceil+0x10c>)
 800b122:	413b      	asrs	r3, r7
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	400b      	ands	r3, r1
 800b128:	4303      	orrs	r3, r0
 800b12a:	d023      	beq.n	800b174 <ceil+0x9c>
 800b12c:	4a2a      	ldr	r2, [pc, #168]	; (800b1d8 <ceil+0x100>)
 800b12e:	4b2b      	ldr	r3, [pc, #172]	; (800b1dc <ceil+0x104>)
 800b130:	4660      	mov	r0, ip
 800b132:	0031      	movs	r1, r6
 800b134:	f7f5 faea 	bl	800070c <__aeabi_dadd>
 800b138:	2200      	movs	r2, #0
 800b13a:	2300      	movs	r3, #0
 800b13c:	f7f5 f9a0 	bl	8000480 <__aeabi_dcmpgt>
 800b140:	2800      	cmp	r0, #0
 800b142:	d0ea      	beq.n	800b11a <ceil+0x42>
 800b144:	2e00      	cmp	r6, #0
 800b146:	dd03      	ble.n	800b150 <ceil+0x78>
 800b148:	2380      	movs	r3, #128	; 0x80
 800b14a:	035b      	lsls	r3, r3, #13
 800b14c:	413b      	asrs	r3, r7
 800b14e:	18f4      	adds	r4, r6, r3
 800b150:	9b00      	ldr	r3, [sp, #0]
 800b152:	2500      	movs	r5, #0
 800b154:	439c      	bics	r4, r3
 800b156:	e7e0      	b.n	800b11a <ceil+0x42>
 800b158:	2f33      	cmp	r7, #51	; 0x33
 800b15a:	dd0f      	ble.n	800b17c <ceil+0xa4>
 800b15c:	2380      	movs	r3, #128	; 0x80
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	429f      	cmp	r7, r3
 800b162:	d107      	bne.n	800b174 <ceil+0x9c>
 800b164:	0002      	movs	r2, r0
 800b166:	000b      	movs	r3, r1
 800b168:	4660      	mov	r0, ip
 800b16a:	0031      	movs	r1, r6
 800b16c:	f7f5 face 	bl	800070c <__aeabi_dadd>
 800b170:	4684      	mov	ip, r0
 800b172:	000e      	movs	r6, r1
 800b174:	4660      	mov	r0, ip
 800b176:	0031      	movs	r1, r6
 800b178:	b003      	add	sp, #12
 800b17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17c:	4a1a      	ldr	r2, [pc, #104]	; (800b1e8 <ceil+0x110>)
 800b17e:	189b      	adds	r3, r3, r2
 800b180:	2201      	movs	r2, #1
 800b182:	4252      	negs	r2, r2
 800b184:	40da      	lsrs	r2, r3
 800b186:	9200      	str	r2, [sp, #0]
 800b188:	4210      	tst	r0, r2
 800b18a:	d0f3      	beq.n	800b174 <ceil+0x9c>
 800b18c:	4a12      	ldr	r2, [pc, #72]	; (800b1d8 <ceil+0x100>)
 800b18e:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <ceil+0x104>)
 800b190:	4660      	mov	r0, ip
 800b192:	0031      	movs	r1, r6
 800b194:	f7f5 faba 	bl	800070c <__aeabi_dadd>
 800b198:	2200      	movs	r2, #0
 800b19a:	2300      	movs	r3, #0
 800b19c:	f7f5 f970 	bl	8000480 <__aeabi_dcmpgt>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d0ba      	beq.n	800b11a <ceil+0x42>
 800b1a4:	2e00      	cmp	r6, #0
 800b1a6:	dd02      	ble.n	800b1ae <ceil+0xd6>
 800b1a8:	2f14      	cmp	r7, #20
 800b1aa:	d103      	bne.n	800b1b4 <ceil+0xdc>
 800b1ac:	3401      	adds	r4, #1
 800b1ae:	9b00      	ldr	r3, [sp, #0]
 800b1b0:	439d      	bics	r5, r3
 800b1b2:	e7b2      	b.n	800b11a <ceil+0x42>
 800b1b4:	2334      	movs	r3, #52	; 0x34
 800b1b6:	1bdf      	subs	r7, r3, r7
 800b1b8:	3b33      	subs	r3, #51	; 0x33
 800b1ba:	40bb      	lsls	r3, r7
 800b1bc:	18ed      	adds	r5, r5, r3
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	429d      	cmp	r5, r3
 800b1c2:	419b      	sbcs	r3, r3
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	18f4      	adds	r4, r6, r3
 800b1c8:	e7f1      	b.n	800b1ae <ceil+0xd6>
 800b1ca:	2480      	movs	r4, #128	; 0x80
 800b1cc:	2500      	movs	r5, #0
 800b1ce:	0624      	lsls	r4, r4, #24
 800b1d0:	e7a3      	b.n	800b11a <ceil+0x42>
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	fffffc01 	.word	0xfffffc01
 800b1d8:	8800759c 	.word	0x8800759c
 800b1dc:	7e37e43c 	.word	0x7e37e43c
 800b1e0:	3ff00000 	.word	0x3ff00000
 800b1e4:	000fffff 	.word	0x000fffff
 800b1e8:	fffffbed 	.word	0xfffffbed

0800b1ec <_init>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr

0800b1f8 <_fini>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	46c0      	nop			; (mov r8, r8)
 800b1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fe:	bc08      	pop	{r3}
 800b200:	469e      	mov	lr, r3
 800b202:	4770      	bx	lr
